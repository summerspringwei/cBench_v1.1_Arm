	.text
	.file	"llvm-link"
	.globl	keymatch                        // -- Begin function keymatch
	.p2align	2
	.type	keymatch,@function
keymatch:                               // @keymatch
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-24]
	stur	w2, [x29, #-28]
	str	wzr, [sp, #24]
.LBB0_1:                                // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	add	x9, x8, #1                      // =1
	stur	x9, [x29, #-16]
	ldrb	w8, [x8]
	str	w8, [sp, #32]
	cbz	w8, .LBB0_7
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB0_1 Depth=1
	ldur	x8, [x29, #-24]
	add	x9, x8, #1                      // =1
	stur	x9, [x29, #-24]
	ldrb	w8, [x8]
	str	w8, [sp, #28]
	cbz	w8, .LBB0_8
// %bb.3:                               // %if.end
                                        //   in Loop: Header=BB0_1 Depth=1
	bl	__ctype_b_loc
	ldr	x8, [x0]
	ldrsw	x9, [sp, #32]
	ldrh	w8, [x8, x9, lsl #1]
	tbz	w8, #8, .LBB0_5
// %bb.4:                               // %if.else
                                        //   in Loop: Header=BB0_1 Depth=1
	ldr	w0, [sp, #32]
	bl	tolower
	mov	w8, w0
	str	w0, [sp, #16]
	str	w8, [sp, #8]
	str	w8, [sp, #32]
.LBB0_5:                                // %if.end18
                                        //   in Loop: Header=BB0_1 Depth=1
	ldp	w9, w8, [sp, #28]
	cmp	w8, w9
	b.ne	.LBB0_8
// %bb.6:                               // %if.end22
                                        //   in Loop: Header=BB0_1 Depth=1
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
	b	.LBB0_1
.LBB0_7:                                // %while.end
	ldr	w8, [sp, #24]
	ldur	w9, [x29, #-28]
	cmp	w8, w9
	b.ge	.LBB0_10
.LBB0_8:                                // %if.then
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB0_9:                                // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	str	w8, [sp, #20]
	add	sp, sp, #80                     // =80
	ret
.LBB0_10:                               // %if.end26
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB0_9
.Lfunc_end0:
	.size	keymatch, .Lfunc_end0-keymatch
	.cfi_endproc
                                        // -- End function
	.globl	read_stdin                      // -- Begin function read_stdin
	.p2align	2
	.type	read_stdin,@function
read_stdin:                             // @read_stdin
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	adrp	x8, stdin
	ldr	x0, [x8, :lo12:stdin]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end1:
	.size	read_stdin, .Lfunc_end1-read_stdin
	.cfi_endproc
                                        // -- End function
	.globl	write_stdout                    // -- Begin function write_stdout
	.p2align	2
	.type	write_stdout,@function
write_stdout:                           // @write_stdout
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	adrp	x8, stdout
	ldr	x0, [x8, :lo12:stdout]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end2:
	.size	write_stdout, .Lfunc_end2-write_stdout
	.cfi_endproc
                                        // -- End function
	.globl	main1                           // -- Begin function main1
	.p2align	2
	.type	main1,@function
main1:                                  // @main1
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x28, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #720                    // =720
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	add	x19, sp, #40                    // =40
	stur	w0, [x29, #-4]
	str	x1, [x19, #664]
	ldr	x8, [x1]
	adrp	x20, .L_MergedGlobals+8
	str	x8, [x20, :lo12:.L_MergedGlobals+8]
	cbz	x8, .LBB3_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [x20, :lo12:.L_MergedGlobals+8]
	ldrb	w8, [x8]
	cbnz	w8, .LBB3_3
.LBB3_2:                                // %if.then
	adrp	x8, .L.str
	add	x8, x8, :lo12:.L.str
	str	x8, [x20, :lo12:.L_MergedGlobals+8]
.LBB3_3:                                // %if.end
	add	x0, sp, #40                     // =40
	bl	jpeg_std_error
	str	x0, [x19, #168]
	add	x0, sp, #208                    // =208
	mov	w1, #61
	mov	w2, #496
	bl	jpeg_CreateCompress
	adrp	x8, cdjpeg_message_table
	mov	x9, #1000
	add	x8, x8, :lo12:cdjpeg_message_table
	movk	x9, #1043, lsl #32
	mov	w10, #2
	add	x0, sp, #208                    // =208
	stp	x8, x9, [x19, #152]
	str	w10, [sp, #260]
	bl	jpeg_set_defaults
	ldur	w1, [x29, #-4]
	ldr	x2, [x19, #664]
	add	x0, sp, #208                    // =208
	mov	w3, wzr
	mov	w4, wzr
	bl	parse_switches
	ldur	w8, [x29, #-4]
	str	w0, [sp, #36]
	sub	w8, w8, #1                      // =1
	cmp	w0, w8
	b.ge	.LBB3_5
// %bb.4:                               // %if.then7
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x20, :lo12:.L_MergedGlobals+8]
	adrp	x1, .L.str.1
	add	x1, x1, :lo12:.L.str.1
	bl	fprintf
	bl	usage
.LBB3_5:                                // %if.end9
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-4]
	cmp	w8, w9
	b.ge	.LBB3_10
// %bb.6:                               // %if.then12
	ldr	x8, [x19, #664]
	ldrsw	x9, [sp, #36]
	adrp	x1, .L.str.2
	add	x1, x1, :lo12:.L.str.2
	ldr	x0, [x8, x9, lsl #3]
	bl	fopen
	str	x0, [sp, #16]
	cbz	x0, .LBB3_20
// %bb.7:                               // %if.end23
	adrp	x8, .L_MergedGlobals+16
	ldr	x9, [x8, :lo12:.L_MergedGlobals+16]
	cbz	x9, .LBB3_11
.LBB3_8:                                // %if.then26
	ldr	x0, [x8, :lo12:.L_MergedGlobals+16]
	adrp	x1, .L.str.4
	add	x1, x1, :lo12:.L.str.4
	bl	fopen
	str	x0, [sp, #8]
	cbnz	x0, .LBB3_12
// %bb.9:                               // %if.then30
	adrp	x9, .L_MergedGlobals+8
	adrp	x8, stderr
	add	x9, x9, :lo12:.L_MergedGlobals+8
	ldr	x0, [x8, :lo12:stderr]
	ldp	x2, x3, [x9]
	b	.LBB3_21
.LBB3_10:                               // %if.else
	bl	read_stdin
	str	x0, [sp, #16]
	adrp	x8, .L_MergedGlobals+16
	ldr	x9, [x8, :lo12:.L_MergedGlobals+16]
	cbnz	x9, .LBB3_8
.LBB3_11:                               // %if.else33
	bl	write_stdout
	str	x0, [sp, #8]
.LBB3_12:                               // %if.end35
	ldr	x1, [sp, #16]
	add	x0, sp, #208                    // =208
	bl	select_file_type
	ldr	x8, [sp, #16]
	str	x0, [sp, #24]
	mov	x1, x0
	str	x8, [x0, #24]
	ldr	x8, [x1]
	add	x0, sp, #208                    // =208
	blr	x8
	add	x0, sp, #208                    // =208
	bl	jpeg_default_colorspace
	ldur	w1, [x29, #-4]
	ldr	x2, [x19, #664]
	add	x0, sp, #208                    // =208
	mov	w4, #1
	mov	w3, wzr
	bl	parse_switches
	ldr	x1, [sp, #8]
	str	w0, [sp, #36]
	add	x0, sp, #208                    // =208
	bl	jpeg_stdio_dest
	add	x0, sp, #208                    // =208
	mov	w1, #1
	bl	jpeg_start_compress
.LBB3_13:                               // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [sp, #504]
	ldr	w10, [sp, #252]
	ldr	x8, [sp, #24]
	cmp	w9, w10
	b.hs	.LBB3_15
// %bb.14:                              // %while.body
                                        //   in Loop: Header=BB3_13 Depth=1
	ldr	x8, [x8, #8]
	ldr	x1, [sp, #24]
	add	x0, sp, #208                    // =208
	blr	x8
	ldr	x8, [sp, #24]
	str	w0, [sp, #4]
	mov	w2, w0
	add	x0, sp, #208                    // =208
	ldr	x1, [x8, #32]
	bl	jpeg_write_scanlines
	b	.LBB3_13
.LBB3_15:                               // %while.end
	ldr	x8, [x8, #16]
	ldr	x1, [sp, #24]
	add	x0, sp, #208                    // =208
	blr	x8
	add	x0, sp, #208                    // =208
	bl	jpeg_finish_compress
	add	x0, sp, #208                    // =208
	bl	jpeg_destroy_compress
	adrp	x9, stdin
	ldr	x8, [sp, #16]
	ldr	x9, [x9, :lo12:stdin]
	cmp	x8, x9
	b.eq	.LBB3_17
// %bb.16:                              // %if.then45
	ldr	x0, [sp, #16]
	bl	fclose
.LBB3_17:                               // %if.end47
	adrp	x9, stdout
	ldr	x8, [sp, #8]
	ldr	x9, [x9, :lo12:stdout]
	cmp	x8, x9
	b.eq	.LBB3_19
// %bb.18:                              // %if.then50
	ldr	x0, [sp, #8]
	bl	fclose
.LBB3_19:                               // %if.end52
	mov	w0, wzr
	add	sp, sp, #720                    // =720
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x28, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB3_20:                               // %if.then17
	ldr	x8, [x19, #664]
	ldrsw	x9, [sp, #36]
	adrp	x10, stderr
	ldr	x0, [x10, :lo12:stderr]
	ldr	x2, [x20, :lo12:.L_MergedGlobals+8]
	ldr	x3, [x8, x9, lsl #3]
.LBB3_21:                               // %if.then30
	adrp	x1, .L.str.3
	add	x1, x1, :lo12:.L.str.3
	bl	fprintf
	mov	w0, #1
	bl	exit
.Lfunc_end3:
	.size	main1, .Lfunc_end3-main1
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function parse_switches
	.type	parse_switches,@function
parse_switches:                         // @parse_switches
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #208                    // =208
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	stur	x0, [x29, #-8]
	mov	w8, #75
	stur	w8, [x29, #-52]
	mov	x8, x0
	adrp	x10, .L_MergedGlobals
	mov	w9, #100
	add	x10, x10, :lo12:.L_MergedGlobals
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stp	w4, w3, [x29, #-32]
	stp	xzr, xzr, [sp, #32]
	stp	xzr, xzr, [sp, #16]
	str	xzr, [sp, #48]
	str	w9, [sp, #56]
	str	wzr, [x10]
	str	xzr, [x10, #16]
	ldr	x8, [x8]
	adrp	x19, .L.str.47
	adrp	x20, .L.str.49
	adrp	x21, .L.str.50
	adrp	x22, .L.str.51
	adrp	x23, .L.str.52
	adrp	x25, .L.str.54
	adrp	x24, .L.str.55
	mov	w26, #1
	adrp	x27, .L_MergedGlobals+16
	add	x19, x19, :lo12:.L.str.47
	add	x20, x20, :lo12:.L.str.49
	add	x21, x21, :lo12:.L.str.50
	add	x22, x22, :lo12:.L.str.51
	add	x23, x23, :lo12:.L.str.52
	add	x25, x25, :lo12:.L.str.54
	adrp	x28, .L_MergedGlobals+4
	add	x24, x24, :lo12:.L.str.55
	str	wzr, [x8, #124]
	stur	w26, [x29, #-36]
	b	.LBB4_3
.LBB4_1:                                // %if.then11
                                        //   in Loop: Header=BB4_3 Depth=1
	str	w26, [sp, #52]
.LBB4_2:                                // %for.inc
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
.LBB4_3:                                // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.ge	.LBB4_90
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldr	x8, [x8, x9, lsl #3]
	stur	x8, [x29, #-48]
	ldrb	w8, [x8]
	cmp	w8, #45                         // =45
	b.eq	.LBB4_7
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-28]
	cmp	w8, w9
	b.gt	.LBB4_90
// %bb.6:                               // %if.then5
                                        //   in Loop: Header=BB4_3 Depth=1
	str	xzr, [x27, :lo12:.L_MergedGlobals+16]
	b	.LBB4_2
.LBB4_7:                                // %if.end6
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-48]
	mov	w2, #1
	mov	x1, x19
	add	x0, x8, #1                      // =1
	stur	x0, [x29, #-48]
	bl	keymatch
	cbnz	w0, .LBB4_106
// %bb.8:                               // %if.else
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	mov	w2, #1
	mov	x1, x20
	bl	keymatch
	cbnz	w0, .LBB4_1
// %bb.9:                               // %if.else12
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	mov	w2, #2
	mov	x1, x21
	bl	keymatch
	cbz	w0, .LBB4_14
// %bb.10:                              // %if.then15
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_12
// %bb.11:                              // %if.then18
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_12:                               // %if.end19
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	mov	w2, #1
	mov	x1, x22
	ldr	x0, [x8, x9, lsl #3]
	bl	keymatch
	cbz	w0, .LBB4_19
// %bb.13:                              // %if.then24
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #268]
	b	.LBB4_2
.LBB4_14:                               // %if.else43
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	mov	w2, #1
	mov	x1, x25
	bl	keymatch
	cbnz	w0, .LBB4_16
// %bb.15:                              // %lor.lhs.false
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	mov	w2, #1
	mov	x1, x24
	bl	keymatch
	cbz	w0, .LBB4_23
.LBB4_16:                               // %if.then48
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	w8, [x28, :lo12:.L_MergedGlobals+4]
	cbnz	w8, .LBB4_18
// %bb.17:                              // %if.then50
                                        //   in Loop: Header=BB4_3 Depth=1
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	adrp	x1, .L.str.56
	adrp	x2, .L.str.57
	adrp	x3, .L.str.58
	add	x1, x1, :lo12:.L.str.56
	add	x2, x2, :lo12:.L.str.57
	add	x3, x3, :lo12:.L.str.58
	bl	fprintf
	str	w26, [x28, :lo12:.L_MergedGlobals+4]
.LBB4_18:                               // %if.end52
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	ldr	w9, [x8, #124]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #124]
	b	.LBB4_2
.LBB4_19:                               // %if.else25
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	mov	w2, #2
	mov	x1, x23
	ldr	x0, [x8, x9, lsl #3]
	bl	keymatch
	cbz	w0, .LBB4_21
// %bb.20:                              // %if.then30
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-8]
	str	w26, [x8, #268]
	b	.LBB4_2
.LBB4_21:                               // %if.else32
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	adrp	x1, .L.str.53
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.53
	ldr	x0, [x8, x9, lsl #3]
	bl	keymatch
	cbz	w0, .LBB4_89
// %bb.22:                              // %if.then37
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-8]
	mov	w9, #2
	str	w9, [x8, #268]
	b	.LBB4_2
.LBB4_23:                               // %if.else56
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.59
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.59
	bl	keymatch
	cbnz	w0, .LBB4_25
// %bb.24:                              // %lor.lhs.false59
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.60
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.60
	bl	keymatch
	cbz	w0, .LBB4_26
.LBB4_25:                               // %if.then62
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-8]
	mov	w1, #1
	bl	jpeg_set_colorspace
	b	.LBB4_2
.LBB4_26:                               // %if.else63
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.61
	mov	w2, #3
	add	x1, x1, :lo12:.L.str.61
	bl	keymatch
	cbz	w0, .LBB4_35
// %bb.27:                              // %if.then66
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	mov	w10, #120
	strb	w10, [sp, #4]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_29
// %bb.28:                              // %if.then70
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_29:                               // %if.end71
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	adrp	x1, .L.str.62
	add	x2, sp, #8                      // =8
	add	x3, sp, #4                      // =4
	ldr	x0, [x8, x9, lsl #3]
	add	x1, x1, :lo12:.L.str.62
	bl	__isoc99_sscanf
	cmp	w0, #0                          // =0
	b.gt	.LBB4_31
// %bb.30:                              // %if.then77
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_31:                               // %if.end78
                                        //   in Loop: Header=BB4_3 Depth=1
	ldrb	w8, [sp, #4]
	cmp	w8, #109                        // =109
	b.eq	.LBB4_33
// %bb.32:                              // %lor.lhs.false82
                                        //   in Loop: Header=BB4_3 Depth=1
	ldrb	w8, [sp, #4]
	cmp	w8, #77                         // =77
	b.ne	.LBB4_34
.LBB4_33:                               // %if.then86
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	x8, [sp, #8]
	mov	w9, #1000
	mul	x8, x8, x9
	str	x8, [sp, #8]
.LBB4_34:                               // %if.end87
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	mov	w10, #1000
	ldr	x8, [x8, #8]
	mul	x9, x9, x10
	str	x9, [x8, #88]
	b	.LBB4_2
.LBB4_35:                               // %if.else89
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.63
	mov	w2, #1
	add	x1, x1, :lo12:.L.str.63
	bl	keymatch
	cbnz	w0, .LBB4_37
// %bb.36:                              // %lor.lhs.false92
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.64
	mov	w2, #1
	add	x1, x1, :lo12:.L.str.64
	bl	keymatch
	cbz	w0, .LBB4_38
.LBB4_37:                               // %if.then95
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-8]
	str	w26, [x8, #256]
	b	.LBB4_2
.LBB4_38:                               // %if.else96
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.65
	mov	w2, #4
	add	x1, x1, :lo12:.L.str.65
	bl	keymatch
	cbz	w0, .LBB4_42
// %bb.39:                              // %if.then99
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_41
// %bb.40:                              // %if.then103
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_41:                               // %if.end104
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldr	x8, [x8, x9, lsl #3]
	str	x8, [x27, :lo12:.L_MergedGlobals+16]
	b	.LBB4_2
.LBB4_42:                               // %if.else107
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.66
	mov	w2, #1
	add	x1, x1, :lo12:.L.str.66
	bl	keymatch
	cbz	w0, .LBB4_44
// %bb.43:                              // %if.then110
                                        //   in Loop: Header=BB4_3 Depth=1
	str	w26, [sp, #48]
	b	.LBB4_2
.LBB4_44:                               // %if.else111
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.67
	mov	w2, #1
	add	x1, x1, :lo12:.L.str.67
	bl	keymatch
	cbz	w0, .LBB4_50
// %bb.45:                              // %if.then114
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_47
// %bb.46:                              // %if.then118
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_47:                               // %if.end119
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	adrp	x1, .L.str.68
	sub	x2, x29, #52                    // =52
	add	x1, x1, :lo12:.L.str.68
	ldr	x0, [x8, x9, lsl #3]
	bl	__isoc99_sscanf
	cmp	w0, #1                          // =1
	b.eq	.LBB4_49
// %bb.48:                              // %if.then125
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_49:                               // %if.end126
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w0, [x29, #-52]
	bl	jpeg_quality_scaling
	str	w0, [sp, #56]
	b	.LBB4_2
.LBB4_50:                               // %if.else128
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.69
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.69
	bl	keymatch
	cbz	w0, .LBB4_54
// %bb.51:                              // %if.then131
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_53
// %bb.52:                              // %if.then135
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_53:                               // %if.end136
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldr	x8, [x8, x9, lsl #3]
	str	x8, [sp, #32]
	b	.LBB4_2
.LBB4_54:                               // %if.else139
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.70
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.70
	bl	keymatch
	cbz	w0, .LBB4_58
// %bb.55:                              // %if.then142
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_57
// %bb.56:                              // %if.then146
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_57:                               // %if.end147
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldr	x8, [x8, x9, lsl #3]
	str	x8, [sp, #40]
	b	.LBB4_2
.LBB4_58:                               // %if.else150
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.71
	mov	w2, #1
	add	x1, x1, :lo12:.L.str.71
	bl	keymatch
	cbz	w0, .LBB4_69
// %bb.59:                              // %if.then153
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	mov	w10, #120
	strb	w10, [sp, #4]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_61
// %bb.60:                              // %if.then159
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_61:                               // %if.end160
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	adrp	x1, .L.str.62
	add	x2, sp, #8                      // =8
	add	x3, sp, #4                      // =4
	ldr	x0, [x8, x9, lsl #3]
	add	x1, x1, :lo12:.L.str.62
	bl	__isoc99_sscanf
	cmp	w0, #0                          // =0
	b.gt	.LBB4_63
// %bb.62:                              // %if.then166
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_63:                               // %if.end167
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	x8, [sp, #8]
	tbnz	x8, #63, .LBB4_65
// %bb.64:                              // %if.end167
                                        //   in Loop: Header=BB4_3 Depth=1
	cmp	x8, #16, lsl #12                // =65536
	b.lt	.LBB4_66
.LBB4_65:                               // %if.then173
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_66:                               // %if.end174
                                        //   in Loop: Header=BB4_3 Depth=1
	ldrb	w8, [sp, #4]
	cmp	w8, #98                         // =98
	b.eq	.LBB4_68
// %bb.67:                              // %lor.lhs.false178
                                        //   in Loop: Header=BB4_3 Depth=1
	ldrb	w8, [sp, #4]
	cmp	w8, #66                         // =66
	b.ne	.LBB4_73
.LBB4_68:                               // %if.then182
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #272]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #276]
	b	.LBB4_2
.LBB4_69:                               // %if.else188
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.72
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.72
	bl	keymatch
	cbz	w0, .LBB4_74
// %bb.70:                              // %if.then191
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_72
// %bb.71:                              // %if.then195
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_72:                               // %if.end196
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldr	x8, [x8, x9, lsl #3]
	str	x8, [sp, #24]
	b	.LBB4_2
.LBB4_73:                               // %if.else184
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	w8, [sp, #8]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #276]
	b	.LBB4_2
.LBB4_74:                               // %if.else199
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.73
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.73
	bl	keymatch
	cbz	w0, .LBB4_78
// %bb.75:                              // %if.then202
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_77
// %bb.76:                              // %if.then206
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_77:                               // %if.end207
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldr	x8, [x8, x9, lsl #3]
	str	x8, [sp, #16]
	b	.LBB4_2
.LBB4_78:                               // %if.else210
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.74
	mov	w2, #2
	add	x1, x1, :lo12:.L.str.74
	bl	keymatch
	cbz	w0, .LBB4_87
// %bb.79:                              // %if.then213
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-12]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-36]
	b.lt	.LBB4_81
// %bb.80:                              // %if.then217
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_81:                               // %if.end218
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	adrp	x1, .L.str.68
	add	x2, sp, #8                      // =8
	add	x1, x1, :lo12:.L.str.68
	ldr	x0, [x8, x9, lsl #3]
	bl	__isoc99_sscanf
	cmp	w0, #1                          // =1
	b.eq	.LBB4_83
// %bb.82:                              // %if.then224
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_83:                               // %if.end225
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	w8, [sp, #8]
	tbnz	w8, #31, .LBB4_85
// %bb.84:                              // %if.end225
                                        //   in Loop: Header=BB4_3 Depth=1
	cmp	w8, #101                        // =101
	b.lt	.LBB4_86
.LBB4_85:                               // %if.then231
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
.LBB4_86:                               // %if.end232
                                        //   in Loop: Header=BB4_3 Depth=1
	ldr	w8, [sp, #8]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #264]
	b	.LBB4_2
.LBB4_87:                               // %if.else233
                                        //   in Loop: Header=BB4_3 Depth=1
	ldur	x0, [x29, #-48]
	adrp	x1, .L.str.75
	mov	w2, #1
	add	x1, x1, :lo12:.L.str.75
	bl	keymatch
	cbz	w0, .LBB4_89
// %bb.88:                              // %if.then236
                                        //   in Loop: Header=BB4_3 Depth=1
	adrp	x8, .L_MergedGlobals
	str	w26, [x8, :lo12:.L_MergedGlobals]
	b	.LBB4_2
.LBB4_89:                               // %if.else237
                                        //   in Loop: Header=BB4_3 Depth=1
	bl	usage
	b	.LBB4_2
.LBB4_90:                               // %for.end
	ldur	w8, [x29, #-32]
	cbz	w8, .LBB4_105
// %bb.91:                              // %if.then257
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-52]
	ldr	w2, [sp, #52]
	bl	jpeg_set_quality
	ldr	x8, [sp, #40]
	cbz	x8, .LBB4_94
// %bb.92:                              // %if.then260
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #40]
	ldp	w3, w2, [sp, #52]
	bl	read_quant_tables
	cbnz	w0, .LBB4_94
// %bb.93:                              // %if.then263
	bl	usage
.LBB4_94:                               // %if.end265
	ldr	x8, [sp, #32]
	cbz	x8, .LBB4_97
// %bb.95:                              // %if.then268
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #32]
	bl	set_quant_slots
	cbnz	w0, .LBB4_97
// %bb.96:                              // %if.then271
	bl	usage
.LBB4_97:                               // %if.end273
	ldr	x8, [sp, #24]
	cbz	x8, .LBB4_100
// %bb.98:                              // %if.then276
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #24]
	bl	set_sample_factors
	cbnz	w0, .LBB4_100
// %bb.99:                              // %if.then279
	bl	usage
.LBB4_100:                              // %if.end281
	ldr	w8, [sp, #48]
	cbz	w8, .LBB4_102
// %bb.101:                             // %if.then283
	ldur	x0, [x29, #-8]
	bl	jpeg_simple_progression
.LBB4_102:                              // %if.end284
	ldr	x8, [sp, #16]
	cbz	x8, .LBB4_105
// %bb.103:                             // %if.then287
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	bl	read_scan_script
	cbnz	w0, .LBB4_105
// %bb.104:                             // %if.then290
	bl	usage
.LBB4_105:                              // %if.end293
	ldur	w0, [x29, #-36]
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #208                    // =208
	ret
.LBB4_106:                              // %if.then7
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	adrp	x8, .L_MergedGlobals+8
	ldr	x2, [x8, :lo12:.L_MergedGlobals+8]
	adrp	x1, .L.str.48
	add	x1, x1, :lo12:.L.str.48
	bl	fprintf
	mov	w0, #1
	bl	exit
.Lfunc_end4:
	.size	parse_switches, .Lfunc_end4-parse_switches
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function usage
	.type	usage,@function
usage:                                  // @usage
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, stderr
	adrp	x8, .L_MergedGlobals+8
	ldr	x0, [x20, :lo12:stderr]
	ldr	x2, [x8, :lo12:.L_MergedGlobals+8]
	adrp	x1, .L.str.76
	add	x1, x1, :lo12:.L.str.76
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.77
	add	x1, x1, :lo12:.L.str.77
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.78
	add	x1, x1, :lo12:.L.str.78
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.79
	add	x1, x1, :lo12:.L.str.79
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.80
	add	x1, x1, :lo12:.L.str.80
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.81
	add	x1, x1, :lo12:.L.str.81
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.82
	add	x1, x1, :lo12:.L.str.82
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.83
	add	x1, x1, :lo12:.L.str.83
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.84
	add	x1, x1, :lo12:.L.str.84
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.85
	adrp	x2, .L.str.86
	add	x1, x1, :lo12:.L.str.85
	add	x2, x2, :lo12:.L.str.86
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x19, .L.str.88
	adrp	x1, .L.str.87
	add	x19, x19, :lo12:.L.str.88
	add	x1, x1, :lo12:.L.str.87
	mov	x2, x19
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.89
	add	x1, x1, :lo12:.L.str.89
	mov	x2, x19
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.90
	add	x1, x1, :lo12:.L.str.90
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.91
	add	x1, x1, :lo12:.L.str.91
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.92
	add	x1, x1, :lo12:.L.str.92
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.93
	add	x1, x1, :lo12:.L.str.93
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.94
	add	x1, x1, :lo12:.L.str.94
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.95
	add	x1, x1, :lo12:.L.str.95
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.96
	add	x1, x1, :lo12:.L.str.96
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.97
	add	x1, x1, :lo12:.L.str.97
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.98
	add	x1, x1, :lo12:.L.str.98
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.99
	add	x1, x1, :lo12:.L.str.99
	bl	fprintf
	ldr	x0, [x20, :lo12:stderr]
	adrp	x1, .L.str.100
	add	x1, x1, :lo12:.L.str.100
	bl	fprintf
	mov	w0, #1
	bl	exit
.Lfunc_end5:
	.size	usage, .Lfunc_end5-usage
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function select_file_type
	.type	select_file_type,@function
select_file_type:                       // @select_file_type
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x8, .L_MergedGlobals
	ldr	w8, [x8, :lo12:.L_MergedGlobals]
	stp	x1, x0, [sp, #8]
	cbz	w8, .LBB6_4
.LBB6_1:                                // %if.then
	ldr	x0, [sp, #16]
	bl	jinit_read_targa
.LBB6_2:                                // %cleanup
	stur	x0, [x29, #-8]
.LBB6_3:                                // %cleanup
	ldur	x0, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	mov	w8, #1
	str	w8, [sp], #48
	ret
.LBB6_4:                                // %if.end
	ldr	x0, [sp, #8]
	bl	getc
	cmn	w0, #1                          // =1
	str	w0, [sp, #4]
	b.ne	.LBB6_6
// %bb.5:                               // %if.then2
	ldr	x8, [sp, #16]
	mov	w9, #41
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB6_6:                                // %if.end4
	ldr	w0, [sp, #4]
	ldr	x1, [sp, #8]
	bl	ungetc
	cmn	w0, #1                          // =1
	b.eq	.LBB6_11
// %bb.7:                               // %if.end12
	ldr	w8, [sp, #4]
	cmp	w8, #70                         // =70
	b.gt	.LBB6_12
.LBB6_8:                                // %if.end12
	cbz	w8, .LBB6_1
// %bb.9:                               // %if.end12
	cmp	w8, #66                         // =66
	b.ne	.LBB6_16
// %bb.10:                              // %sw.bb
	ldr	x0, [sp, #16]
	bl	jinit_read_bmp
	b	.LBB6_2
.LBB6_11:                               // %if.then7
	ldr	x8, [sp, #16]
	mov	w9, #1040
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #4]
	cmp	w8, #70                         // =70
	b.le	.LBB6_8
.LBB6_12:                               // %if.end12
	cmp	w8, #71                         // =71
	b.eq	.LBB6_15
// %bb.13:                              // %if.end12
	cmp	w8, #80                         // =80
	b.ne	.LBB6_16
// %bb.14:                              // %sw.bb16
	ldr	x0, [sp, #16]
	bl	jinit_read_ppm
	b	.LBB6_2
.LBB6_15:                               // %sw.bb14
	ldr	x0, [sp, #16]
	bl	jinit_read_gif
	b	.LBB6_2
.LBB6_16:                               // %sw.default
	ldr	x8, [sp, #16]
	mov	w9, #1041
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	stur	xzr, [x29, #-8]
	b	.LBB6_3
.Lfunc_end6:
	.size	select_file_type, .Lfunc_end6-select_file_type
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_CreateCompress             // -- Begin function jpeg_CreateCompress
	.p2align	2
	.type	jpeg_CreateCompress,@function
jpeg_CreateCompress:                    // @jpeg_CreateCompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, w1
	cmp	w8, #61                         // =61
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #8]
	str	xzr, [x0, #8]
	b.eq	.LBB7_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #10
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #61
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB7_2:                                // %if.end
	ldr	x8, [sp, #8]
	cmp	x8, #496                        // =496
	b.eq	.LBB7_4
// %bb.3:                               // %if.then9
	ldur	x8, [x29, #-8]
	mov	w9, #19
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #496
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB7_4:                                // %if.end22
	ldur	x8, [x29, #-8]
	movi	v0.2d, #0000000000000000
	ldr	x9, [x8]
	str	x9, [sp]
	stp	q0, q0, [x8, #464]
	stp	q0, q0, [x8, #432]
	stp	q0, q0, [x8, #400]
	stp	q0, q0, [x8, #368]
	stp	q0, q0, [x8, #336]
	stp	q0, q0, [x8, #304]
	stp	q0, q0, [x8, #272]
	stp	q0, q0, [x8, #240]
	stp	q0, q0, [x8, #208]
	stp	q0, q0, [x8, #176]
	stp	q0, q0, [x8, #144]
	stp	q0, q0, [x8, #112]
	stp	q0, q0, [x8, #80]
	stp	q0, q0, [x8, #48]
	stp	q0, q0, [x8, #16]
	str	q0, [x8]
	mov	x8, x9
	ldur	x9, [x29, #-8]
	str	x8, [x9]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #24]
	ldur	x0, [x29, #-8]
	bl	jinit_memory_mgr
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #16]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #32]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #80]
	str	wzr, [sp]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB7_6
.LBB7_5:                                // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #88]
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB7_5
.LBB7_6:                                // %for.end
	str	wzr, [sp]
	mov	w9, wzr
	ldur	x8, [x29, #-8]
	cmp	w9, #3                          // =3
	b.gt	.LBB7_8
.LBB7_7:                                // %for.body32
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #120]
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #152]
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	mov	w9, w8
	ldur	x8, [x29, #-8]
	cmp	w9, #3                          // =3
	b.le	.LBB7_7
.LBB7_8:                                // %for.end39
	mov	x9, #4607182418800017408
	str	x9, [x8, #56]
	ldur	x8, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	mov	w9, #100
	str	w9, [x8, #28]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end7:
	.size	jpeg_CreateCompress, .Lfunc_end7-jpeg_CreateCompress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_destroy_compress           // -- Begin function jpeg_destroy_compress
	.p2align	2
	.type	jpeg_destroy_compress,@function
jpeg_destroy_compress:                  // @jpeg_destroy_compress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	jpeg_destroy
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end8:
	.size	jpeg_destroy_compress, .Lfunc_end8-jpeg_destroy_compress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_abort_compress             // -- Begin function jpeg_abort_compress
	.p2align	2
	.type	jpeg_abort_compress,@function
jpeg_abort_compress:                    // @jpeg_abort_compress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	jpeg_abort
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end9:
	.size	jpeg_abort_compress, .Lfunc_end9-jpeg_abort_compress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_suppress_tables            // -- Begin function jpeg_suppress_tables
	.p2align	2
	.type	jpeg_suppress_tables,@function
jpeg_suppress_tables:                   // @jpeg_suppress_tables
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	stp	wzr, w1, [sp, #16]
	b	.LBB10_2
.LBB10_1:                               // %for.inc
                                        //   in Loop: Header=BB10_2 Depth=1
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
.LBB10_2:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #16]
	cmp	w8, #3                          // =3
	b.gt	.LBB10_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB10_2 Depth=1
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #88]
	str	x8, [sp, #8]
	cbz	x8, .LBB10_1
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB10_2 Depth=1
	ldr	w8, [sp, #20]
	ldr	x9, [sp, #8]
	str	w8, [x9, #128]
	b	.LBB10_1
.LBB10_5:                               // %for.end
	str	wzr, [sp, #16]
	b	.LBB10_7
.LBB10_6:                               // %for.inc17
                                        //   in Loop: Header=BB10_7 Depth=1
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
.LBB10_7:                               // %for.cond2
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #16]
	cmp	w8, #3                          // =3
	b.gt	.LBB10_12
// %bb.8:                               // %for.body4
                                        //   in Loop: Header=BB10_7 Depth=1
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #120]
	str	x8, [sp]
	cbz	x8, .LBB10_10
// %bb.9:                               // %if.then8
                                        //   in Loop: Header=BB10_7 Depth=1
	ldr	w8, [sp, #20]
	ldr	x9, [sp]
	str	w8, [x9, #276]
.LBB10_10:                              // %if.end10
                                        //   in Loop: Header=BB10_7 Depth=1
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #152]
	str	x8, [sp]
	cbz	x8, .LBB10_6
// %bb.11:                              // %if.then14
                                        //   in Loop: Header=BB10_7 Depth=1
	ldr	w8, [sp, #20]
	ldr	x9, [sp]
	str	w8, [x9, #276]
	b	.LBB10_6
.LBB10_12:                              // %for.end19
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end10:
	.size	jpeg_suppress_tables, .Lfunc_end10-jpeg_suppress_tables
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_finish_compress            // -- Begin function jpeg_finish_compress
	.p2align	2
	.type	jpeg_finish_compress,@function
jpeg_finish_compress:                   // @jpeg_finish_compress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	w8, [x0, #28]
	cmp	w8, #101                        // =101
	b.eq	.LBB11_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #28]
	cmp	w8, #102                        // =102
	b.ne	.LBB11_17
.LBB11_2:                               // %if.then
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #296]
	ldr	w8, [x8, #44]
	cmp	w9, w8
	b.hs	.LBB11_4
// %bb.3:                               // %if.then4
	ldr	x8, [x29, #24]
	mov	w9, #66
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB11_4:                               // %if.end
	ldr	x0, [x29, #24]
	ldr	x8, [x0, #424]
	ldr	x8, [x8, #16]
.LBB11_5:                               // %while.cond.preheader
	blr	x8
.LBB11_6:                               // %while.cond.preheader
	mov	w19, #22
	b	.LBB11_8
.LBB11_7:                               // %for.end
                                        //   in Loop: Header=BB11_8 Depth=1
	ldr	x8, [x8, #424]
	ldr	x0, [x29, #24]
	ldr	x8, [x8, #16]
	blr	x8
.LBB11_8:                               // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB11_11 Depth 2
	ldr	x8, [x29, #24]
	ldr	x9, [x8, #424]
	ldr	w9, [x9, #28]
	cbnz	w9, .LBB11_16
// %bb.9:                               // %while.body
                                        //   in Loop: Header=BB11_8 Depth=1
	ldr	x8, [x8, #424]
	ldr	x0, [x29, #24]
	ldr	x8, [x8]
	blr	x8
	stur	wzr, [x29, #-4]
	b	.LBB11_11
.LBB11_10:                              // %for.inc
                                        //   in Loop: Header=BB11_11 Depth=2
	ldur	w8, [x29, #-4]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-4]
.LBB11_11:                              // %for.cond
                                        //   Parent Loop BB11_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	w10, [x8, #312]
	cmp	w9, w10
	b.hs	.LBB11_7
// %bb.12:                              // %for.body
                                        //   in Loop: Header=BB11_11 Depth=2
	ldr	x8, [x8, #16]
	cbz	x8, .LBB11_14
// %bb.13:                              // %if.then21
                                        //   in Loop: Header=BB11_11 Depth=2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	x8, [x8, #16]
	str	x9, [x8, #8]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #312]
	ldr	x8, [x8, #16]
	str	x9, [x8, #16]
	ldr	x0, [x29, #24]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB11_14:                              // %if.end28
                                        //   in Loop: Header=BB11_11 Depth=2
	ldr	x0, [x29, #24]
	mov	x1, xzr
	ldr	x8, [x0, #448]
	ldr	x8, [x8, #8]
	blr	x8
	cbnz	w0, .LBB11_10
// %bb.15:                              // %if.then30
                                        //   in Loop: Header=BB11_11 Depth=2
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB11_10
.LBB11_16:                              // %while.end
	ldr	x8, [x8, #456]
	ldr	x0, [x29, #24]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [x29, #24]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [x29, #24]
	bl	jpeg_abort
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB11_17:                              // %if.else
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #28]
	cmp	w8, #103                        // =103
	b.eq	.LBB11_6
// %bb.18:                              // %if.then8
	ldr	x8, [x29, #24]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	b	.LBB11_5
.Lfunc_end11:
	.size	jpeg_finish_compress, .Lfunc_end11-jpeg_finish_compress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_write_marker               // -- Begin function jpeg_write_marker
	.p2align	2
	.type	jpeg_write_marker,@function
jpeg_write_marker:                      // @jpeg_write_marker
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #8]
	str	w3, [sp, #4]
	ldr	w8, [x0, #296]
	cbz	w8, .LBB12_2
.LBB12_1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB12_5
.LBB12_2:                               // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #28]
	cmp	w8, #101                        // =101
	b.eq	.LBB12_5
// %bb.3:                               // %land.lhs.true
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #28]
	cmp	w8, #102                        // =102
	b.eq	.LBB12_5
// %bb.4:                               // %land.lhs.true4
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #28]
	cmp	w8, #103                        // =103
	b.ne	.LBB12_1
.LBB12_5:                               // %if.end
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	ldr	x2, [sp, #8]
	ldr	w3, [sp, #4]
	ldr	x8, [x0, #456]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end12:
	.size	jpeg_write_marker, .Lfunc_end12-jpeg_write_marker
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_write_tables               // -- Begin function jpeg_write_tables
	.p2align	2
	.type	jpeg_write_tables,@function
jpeg_write_tables:                      // @jpeg_write_tables
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB13_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB13_2:                               // %if.end
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x0, [sp, #8]
	bl	jinit_marker_writer
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #40]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [sp, #8]
	bl	jpeg_abort
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end13:
	.size	jpeg_write_tables, .Lfunc_end13-jpeg_write_tables
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_start_compress             // -- Begin function jpeg_start_compress
	.p2align	2
	.type	jpeg_start_compress,@function
jpeg_start_compress:                    // @jpeg_start_compress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB14_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB14_2:                               // %if.end
	ldr	w8, [sp, #4]
	cbz	w8, .LBB14_4
// %bb.3:                               // %if.then4
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	jpeg_suppress_tables
.LBB14_4:                               // %if.end5
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x0, [sp, #8]
	bl	jinit_compress_master
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #424]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	wzr, [x8, #296]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #248]
	cmp	w9, #0                          // =0
	mov	w9, #101
	cinc	w9, w9, ne
	str	w9, [x8, #28]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end14:
	.size	jpeg_start_compress, .Lfunc_end14-jpeg_start_compress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_write_scanlines            // -- Begin function jpeg_write_scanlines
	.p2align	2
	.type	jpeg_write_scanlines,@function
jpeg_write_scanlines:                   // @jpeg_write_scanlines
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldr	w8, [x0, #28]
	cmp	w8, #101                        // =101
	b.eq	.LBB15_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB15_2:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #296]
	ldr	w8, [x8, #44]
	cmp	w9, w8
	b.lo	.LBB15_4
// %bb.3:                               // %if.then5
	ldur	x8, [x29, #-8]
	mov	w9, #119
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB15_4:                               // %if.end9
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB15_6
// %bb.5:                               // %if.then11
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #296]
	ldr	x8, [x8, #16]
	str	x9, [x8, #8]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #44]
	ldr	x8, [x8, #16]
	str	x9, [x8, #16]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB15_6:                               // %if.end19
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #424]
	ldr	w8, [x8, #24]
	cbz	w8, .LBB15_8
// %bb.7:                               // %if.then20
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #424]
	ldr	x8, [x8, #8]
	blr	x8
.LBB15_8:                               // %if.end22
	ldur	x8, [x29, #-8]
	ldr	w10, [sp, #12]
	ldr	w9, [x8, #44]
	ldr	w8, [x8, #296]
	sub	w8, w9, w8
	cmp	w10, w8
	str	w8, [sp, #4]
	b.ls	.LBB15_10
// %bb.9:                               // %if.then27
	ldr	w8, [sp, #4]
	str	w8, [sp, #12]
.LBB15_10:                              // %if.end28
	ldur	x0, [x29, #-8]
	str	wzr, [sp, #8]
	ldr	x1, [sp, #16]
	ldr	w3, [sp, #12]
	ldr	x8, [x0, #432]
	add	x2, sp, #8                      // =8
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldr	w10, [x8, #296]
	add	w9, w10, w9
	str	w9, [x8, #296]
	ldr	w0, [sp, #8]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end15:
	.size	jpeg_write_scanlines, .Lfunc_end15-jpeg_write_scanlines
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_write_raw_data             // -- Begin function jpeg_write_raw_data
	.p2align	2
	.type	jpeg_write_raw_data,@function
jpeg_write_raw_data:                    // @jpeg_write_raw_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x1, [sp, #24]
	str	w2, [sp, #20]
	ldr	w8, [x0, #28]
	cmp	w8, #102                        // =102
	b.eq	.LBB16_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-16]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB16_2:                               // %if.end
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #296]
	ldr	w10, [x8, #44]
	cmp	w9, w10
	b.lo	.LBB16_4
// %bb.3:                               // %if.then5
	ldr	x8, [x8]
	mov	w9, #119
	mov	w1, #-1
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	b	.LBB16_12
.LBB16_4:                               // %if.end9
	ldr	x8, [x8, #16]
	cbz	x8, .LBB16_6
// %bb.5:                               // %if.then11
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #296]
	ldr	x8, [x8, #16]
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #44]
	ldr	x8, [x8, #16]
	str	x9, [x8, #16]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB16_6:                               // %if.end19
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #424]
	ldr	w8, [x8, #24]
	cbz	w8, .LBB16_8
// %bb.7:                               // %if.then20
	ldur	x0, [x29, #-16]
	ldr	x8, [x0, #424]
	ldr	x8, [x8, #8]
	blr	x8
.LBB16_8:                               // %if.end22
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #20]
	ldr	w8, [x8, #308]
	lsl	w8, w8, #3
	cmp	w9, w8
	str	w8, [sp, #16]
	b.hs	.LBB16_10
// %bb.9:                               // %if.then25
	ldur	x8, [x29, #-16]
	mov	w9, #21
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB16_10:                              // %if.end30
	ldur	x0, [x29, #-16]
	ldr	x1, [sp, #24]
	ldr	x8, [x0, #448]
	ldr	x8, [x8, #8]
	blr	x8
	cbz	w0, .LBB16_12
// %bb.11:                              // %if.end33
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #296]
	add	w9, w10, w9
	str	w9, [x8, #296]
	ldr	w8, [sp, #16]
	mov	w9, #1
	str	w9, [sp, #12]
	stur	w8, [x29, #-4]
	mov	w0, w8
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB16_12:                              // %if.then32
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
	mov	w0, wzr
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end16:
	.size	jpeg_write_raw_data, .Lfunc_end16-jpeg_write_raw_data
	.cfi_endproc
                                        // -- End function
	.globl	jinit_c_coef_controller         // -- Begin function jinit_c_coef_controller
	.p2align	2
	.type	jinit_c_coef_controller,@function
jinit_c_coef_controller:                // @jinit_c_coef_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x21, [sp, #48]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #192
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	adrp	x9, start_pass_coef
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_coef
	str	x0, [x8, #448]
	mov	x8, x0
	str	x9, [x8]
	ldur	w8, [x29, #-4]
	cbz	w8, .LBB17_4
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	str	wzr, [sp, #12]
	ldr	x8, [x8, #80]
	str	x8, [sp]
.LBB17_2:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB17_7
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB17_2 Depth=1
	ldr	x19, [x29, #24]
	ldr	x8, [sp]
	ldr	x9, [x19, #8]
	ldr	w0, [x8, #28]
	ldrsw	x1, [x8, #8]
	ldr	x21, [x9, #40]
	bl	jround_up
	ldr	x9, [sp]
	mov	x20, x0
	ldr	w8, [x9, #32]
	ldrsw	x1, [x9, #12]
	mov	x0, x8
	bl	jround_up
	ldr	x8, [sp]
	mov	x4, x0
	mov	w1, #1
	mov	x0, x19
	ldr	w5, [x8, #12]
	mov	w2, wzr
	mov	w3, w20
                                        // kill: def $w4 killed $w4 killed $x4
	blr	x21
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #112]
	ldr	w8, [sp, #12]
	ldr	x9, [sp]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #12]
	str	x9, [sp]
	b	.LBB17_2
.LBB17_4:                               // %if.else
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #1280
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	str	x0, [sp]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #9                          // =9
	b.gt	.LBB17_6
.LBB17_5:                               // %for.body17
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp]
	ldrsw	x9, [sp, #12]
	ldr	x10, [sp, #16]
	add	x8, x8, x9, lsl #7
	add	x9, x10, x9, lsl #3
	str	x8, [x9, #32]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #9                          // =9
	b.le	.LBB17_5
.LBB17_6:                               // %for.end22
	ldr	x8, [sp, #16]
	str	xzr, [x8, #112]
.LBB17_7:                               // %if.end
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x21, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end17:
	.size	jinit_c_coef_controller, .Lfunc_end17-jinit_c_coef_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_coef
	.type	start_pass_coef,@function
start_pass_coef:                        // @start_pass_coef
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #448]
	str	x8, [sp, #8]
	str	wzr, [x8, #16]
	bl	start_iMCU_row
	ldur	w8, [x29, #-12]
	cmp	w8, #3                          // =3
	b.eq	.LBB18_6
// %bb.1:                               // %entry
	cmp	w8, #2                          // =2
	b.eq	.LBB18_9
// %bb.2:                               // %entry
	cbnz	w8, .LBB18_12
// %bb.3:                               // %sw.bb
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #112]
	cbz	x8, .LBB18_5
// %bb.4:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB18_5:                               // %if.end
	ldr	x8, [sp, #8]
	adrp	x9, compress_data
	add	x9, x9, :lo12:compress_data
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB18_6:                               // %sw.bb3
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #112]
	cbnz	x8, .LBB18_8
// %bb.7:                               // %if.then7
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB18_8:                               // %if.end12
	ldr	x8, [sp, #8]
	adrp	x9, compress_first_pass
	add	x9, x9, :lo12:compress_first_pass
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB18_9:                               // %sw.bb15
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #112]
	cbnz	x8, .LBB18_11
// %bb.10:                              // %if.then19
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB18_11:                              // %if.end24
	ldr	x8, [sp, #8]
	adrp	x9, compress_output
	add	x9, x9, :lo12:compress_output
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB18_12:                              // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end18:
	.size	start_pass_coef, .Lfunc_end18-start_pass_coef
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_iMCU_row
	.type	start_iMCU_row,@function
start_iMCU_row:                         // @start_iMCU_row
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #448]
	stp	x8, x0, [sp, #-16]!
	ldr	w9, [x0, #316]
	cmp	w9, #1                          // =1
	b.le	.LBB19_2
// %bb.1:
	mov	w9, #1
	b	.LBB19_6
.LBB19_2:                               // %if.else
	ldr	x9, [sp, #8]
	ldr	w11, [x8, #16]
	ldr	w10, [x9, #312]
	ldr	x8, [x9, #320]
	sub	w9, w10, #1                     // =1
	cmp	w11, w9
	b.hs	.LBB19_4
// %bb.3:                               // %if.then3
	ldr	w9, [x8, #12]
	b	.LBB19_5
.LBB19_4:                               // %if.else5
	ldr	w9, [x8, #72]
.LBB19_5:                               // %if.end9
	ldr	x8, [sp]
.LBB19_6:                               // %if.end9
	str	w9, [x8, #28]
	ldr	x8, [sp]
	str	wzr, [x8, #20]
	ldr	x8, [sp]
	str	wzr, [x8, #24]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end19:
	.size	start_iMCU_row, .Lfunc_end19-start_iMCU_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function compress_data
	.type	compress_data,@function
compress_data:                          // @compress_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-24]
	ldr	x8, [x0, #448]
	mov	w19, #68
	mov	w20, #52
	stur	x8, [x29, #-32]
	ldr	w9, [x0, #352]
	sub	w10, w9, #1                     // =1
	ldr	w9, [x0, #312]
	sub	w9, w9, #1                      // =1
	stp	w9, w10, [x29, #-44]
	ldr	w8, [x8, #24]
	str	w8, [sp, #32]
.LBB20_1:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB20_3 Depth 2
                                        //       Child Loop BB20_6 Depth 3
                                        //         Child Loop BB20_9 Depth 4
                                        //           Child Loop BB20_17 Depth 5
                                        //           Child Loop BB20_14 Depth 5
	ldur	x8, [x29, #-32]
	ldr	w9, [sp, #32]
	ldr	w10, [x8, #28]
	cmp	w9, w10
	b.ge	.LBB20_24
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB20_1 Depth=1
	ldr	w8, [x8, #20]
.LBB20_3:                               // %for.cond3
                                        //   Parent Loop BB20_1 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB20_6 Depth 3
                                        //         Child Loop BB20_9 Depth 4
                                        //           Child Loop BB20_17 Depth 5
                                        //           Child Loop BB20_14 Depth 5
	ldur	w9, [x29, #-40]
	stur	w8, [x29, #-36]
	mov	w8, w8
	cmp	w8, w9
	b.hi	.LBB20_21
// %bb.4:                               // %for.body5
                                        //   in Loop: Header=BB20_3 Depth=2
	str	wzr, [sp, #48]
	str	wzr, [sp, #40]
	b	.LBB20_6
.LBB20_5:                               // %for.inc81
                                        //   in Loop: Header=BB20_6 Depth=3
	ldr	w8, [sp, #40]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #40]
.LBB20_6:                               // %for.cond6
                                        //   Parent Loop BB20_1 Depth=1
                                        //     Parent Loop BB20_3 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB20_9 Depth 4
                                        //           Child Loop BB20_17 Depth 5
                                        //           Child Loop BB20_14 Depth 5
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #40]
	ldr	w10, [x8, #316]
	cmp	w9, w10
	b.ge	.LBB20_19
// %bb.7:                               // %for.body8
                                        //   in Loop: Header=BB20_6 Depth=3
	ldrsw	x9, [sp, #40]
	ldp	w10, w11, [x29, #-40]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	cmp	w11, w10
	csel	x9, x20, x19, lo
	ldr	w10, [sp, #32]
	str	x8, [sp, #8]
	ldr	w12, [x8, x9]
	ldr	w8, [x8, #64]
	lsl	w9, w10, #3
	str	wzr, [sp, #36]
	stp	w9, w12, [sp, #24]
	mul	w8, w11, w8
	str	w8, [sp, #20]
	b	.LBB20_9
.LBB20_8:                               // %if.end74
                                        //   in Loop: Header=BB20_9 Depth=4
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #24]
	ldr	w10, [sp, #36]
	ldr	w11, [sp, #48]
	ldr	w8, [x8, #52]
	add	w9, w9, #8                      // =8
	add	w10, w10, #1                    // =1
	str	w9, [sp, #24]
	add	w8, w11, w8
	str	w8, [sp, #48]
	str	w10, [sp, #36]
.LBB20_9:                               // %for.cond11
                                        //   Parent Loop BB20_1 Depth=1
                                        //     Parent Loop BB20_3 Depth=2
                                        //       Parent Loop BB20_6 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB20_17 Depth 5
                                        //           Child Loop BB20_14 Depth 5
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #36]
	ldr	w8, [x8, #56]
	cmp	w9, w8
	b.ge	.LBB20_5
// %bb.10:                              // %for.body13
                                        //   in Loop: Header=BB20_9 Depth=4
	ldur	x8, [x29, #-32]
	ldur	w9, [x29, #-44]
	ldr	w8, [x8, #16]
	cmp	w8, w9
	b.lo	.LBB20_12
// %bb.11:                              // %lor.lhs.false
                                        //   in Loop: Header=BB20_9 Depth=4
	ldr	x8, [sp, #8]
	ldp	w9, w10, [sp, #32]
	ldr	w8, [x8, #72]
	add	w9, w9, w10
	cmp	w9, w8
	b.ge	.LBB20_16
.LBB20_12:                              // %if.then
                                        //   in Loop: Header=BB20_9 Depth=4
	ldp	x8, x0, [x29, #-24]
	ldrsw	x9, [sp, #40]
	ldur	x10, [x29, #-32]
	ldrsw	x11, [sp, #48]
	ldr	x12, [x0, #480]
	ldr	x2, [x8, x9, lsl #3]
	ldr	x1, [sp, #8]
	add	x8, x10, x11, lsl #3
	ldp	w5, w4, [sp, #20]
	ldr	x3, [x8, #32]
	ldr	x8, [x12, #8]
	ldr	w6, [sp, #28]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #28]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.ge	.LBB20_8
// %bb.13:                              // %if.then22
                                        //   in Loop: Header=BB20_9 Depth=4
	ldr	w8, [sp, #48]
	ldrsw	x9, [sp, #28]
	ldr	x10, [sp, #8]
	ldur	x11, [x29, #-32]
	add	w8, w8, w9
	ldrsw	x10, [x10, #52]
	add	x8, x11, w8, sxtw #3
	ldr	x0, [x8, #32]
	sub	x8, x10, x9
	lsl	x1, x8, #7
	bl	jzero_far
	ldr	w8, [sp, #28]
.LBB20_14:                              // %for.cond30
                                        //   Parent Loop BB20_1 Depth=1
                                        //     Parent Loop BB20_3 Depth=2
                                        //       Parent Loop BB20_6 Depth=3
                                        //         Parent Loop BB20_9 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	str	w8, [sp, #44]
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #44]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.ge	.LBB20_8
// %bb.15:                              // %for.body34
                                        //   in Loop: Header=BB20_14 Depth=5
	ldur	x8, [x29, #-32]
	ldpsw	x10, x9, [sp, #44]
	add	x8, x8, #32                     // =32
	add	x11, x9, x10
	add	x11, x8, x11, lsl #3
	ldur	x11, [x11, #-8]
	add	w9, w9, w10
	ldr	x8, [x8, w9, sxtw #3]
	ldrh	w10, [x11]
	strh	w10, [x8]
	ldr	w8, [sp, #44]
	add	w8, w8, #1                      // =1
	b	.LBB20_14
.LBB20_16:                              // %if.else
                                        //   in Loop: Header=BB20_9 Depth=4
	ldur	x8, [x29, #-32]
	ldrsw	x9, [sp, #48]
	ldr	x10, [sp, #8]
	add	x8, x8, x9, lsl #3
	ldrsw	x9, [x10, #52]
	ldr	x0, [x8, #32]
	lsl	x1, x9, #7
	bl	jzero_far
	str	wzr, [sp, #44]
.LBB20_17:                              // %for.cond54
                                        //   Parent Loop BB20_1 Depth=1
                                        //     Parent Loop BB20_3 Depth=2
                                        //       Parent Loop BB20_6 Depth=3
                                        //         Parent Loop BB20_9 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #44]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.ge	.LBB20_8
// %bb.18:                              // %for.body58
                                        //   in Loop: Header=BB20_17 Depth=5
	ldur	x8, [x29, #-32]
	ldp	w10, w9, [sp, #44]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	add	x8, x8, #32                     // =32
	add	x11, x8, x9, lsl #3
	ldur	x11, [x11, #-8]
	add	w9, w9, w10
	ldr	x8, [x8, w9, sxtw #3]
	ldrh	w10, [x11]
	strh	w10, [x8]
	ldr	w8, [sp, #44]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #44]
	b	.LBB20_17
.LBB20_19:                              // %for.end83
                                        //   in Loop: Header=BB20_3 Depth=2
	ldr	x8, [x8, #488]
	ldur	x9, [x29, #-32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #8]
	add	x1, x9, #32                     // =32
	blr	x8
	cbz	w0, .LBB20_22
// %bb.20:                              // %for.inc89
                                        //   in Loop: Header=BB20_3 Depth=2
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	b	.LBB20_3
.LBB20_21:                              // %for.end91
                                        //   in Loop: Header=BB20_1 Depth=1
	ldur	x8, [x29, #-32]
	str	wzr, [x8, #20]
	ldr	w8, [sp, #32]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #32]
	b	.LBB20_1
.LBB20_22:                              // %if.then85
	ldr	w8, [sp, #32]
	ldur	x9, [x29, #-32]
	mov	w10, #1
	str	w8, [x9, #24]
	ldur	w8, [x29, #-36]
	ldur	x9, [x29, #-32]
	str	w8, [x9, #20]
	stur	wzr, [x29, #-4]
	str	w10, [sp, #4]
.LBB20_23:                              // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.LBB20_24:                              // %for.end95
	ldr	w9, [x8, #16]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #16]
	ldur	x0, [x29, #-16]
	bl	start_iMCU_row
	mov	w8, #1
	stur	w8, [x29, #-4]
	str	w8, [sp, #4]
	b	.LBB20_23
.Lfunc_end20:
	.size	compress_data, .Lfunc_end20-compress_data
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function compress_first_pass
	.type	compress_first_pass,@function
compress_first_pass:                    // @compress_first_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #448]
	mov	x9, x0
	stur	x8, [x29, #-24]
	ldr	w8, [x0, #312]
	stur	wzr, [x29, #-48]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
	ldr	x8, [x9, #80]
	str	x8, [sp, #32]
	b	.LBB21_2
.LBB21_1:                               // %for.inc86
                                        //   in Loop: Header=BB21_2 Depth=1
	ldur	w8, [x29, #-48]
	ldr	x9, [sp, #32]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-48]
	str	x9, [sp, #32]
.LBB21_2:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB21_11 Depth 2
                                        //       Child Loop BB21_14 Depth 3
                                        //     Child Loop BB21_18 Depth 2
                                        //       Child Loop BB21_21 Depth 3
                                        //         Child Loop BB21_23 Depth 4
	ldur	x0, [x29, #-8]
	ldur	w8, [x29, #-48]
	ldr	w9, [x0, #68]
	cmp	w8, w9
	b.ge	.LBB21_24
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB21_2 Depth=1
	ldur	x9, [x29, #-24]
	ldursw	x10, [x29, #-48]
	ldr	x11, [sp, #32]
	ldr	x8, [x0, #8]
	ldur	x0, [x29, #-8]
	add	x10, x9, x10, lsl #3
	ldr	w9, [x9, #16]
	ldr	w3, [x11, #12]
	ldr	x8, [x8, #64]
	ldr	x1, [x10, #112]
	mov	w4, #1
	mul	w2, w9, w3
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [sp, #24]
	ldur	w10, [x29, #-28]
	ldr	w9, [x8, #16]
	ldr	x8, [sp, #32]
	cmp	w9, w10
	b.lo	.LBB21_6
// %bb.4:                               // %if.else
                                        //   in Loop: Header=BB21_2 Depth=1
	ldr	x9, [sp, #32]
	ldr	w8, [x8, #32]
	ldr	w9, [x9, #12]
	udiv	w10, w8, w9
	msub	w8, w10, w9, w8
	str	w8, [sp, #52]
	cbnz	w8, .LBB21_7
// %bb.5:                               // %if.then8
                                        //   in Loop: Header=BB21_2 Depth=1
	ldr	x8, [sp, #32]
.LBB21_6:                               // %if.end10
                                        //   in Loop: Header=BB21_2 Depth=1
	ldr	w8, [x8, #12]
	str	w8, [sp, #52]
.LBB21_7:                               // %if.end10
                                        //   in Loop: Header=BB21_2 Depth=1
	ldr	x8, [sp, #32]
	ldr	w9, [x8, #28]
	stur	w9, [x29, #-32]
	ldr	w8, [x8, #8]
	udiv	w10, w9, w8
	stur	w8, [x29, #-52]
	msub	w8, w10, w8, w9
	cmp	w8, #1                          // =1
	str	w8, [sp, #48]
	b.lt	.LBB21_9
// %bb.8:                               // %if.then14
                                        //   in Loop: Header=BB21_2 Depth=1
	ldur	w8, [x29, #-52]
	ldr	w9, [sp, #48]
	sub	w8, w8, w9
	str	w8, [sp, #48]
.LBB21_9:                               // %if.end16
                                        //   in Loop: Header=BB21_2 Depth=1
	str	wzr, [sp, #56]
	b	.LBB21_11
.LBB21_10:                              // %for.inc38
                                        //   in Loop: Header=BB21_11 Depth=2
	ldr	w8, [sp, #56]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #56]
.LBB21_11:                              // %for.cond17
                                        //   Parent Loop BB21_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB21_14 Depth 3
	ldp	w9, w8, [sp, #52]
	cmp	w8, w9
	b.ge	.LBB21_15
// %bb.12:                              // %for.body19
                                        //   in Loop: Header=BB21_11 Depth=2
	ldp	x8, x1, [sp, #24]
	ldrsw	x9, [sp, #56]
	ldursw	x10, [x29, #-48]
	ldur	w6, [x29, #-32]
	mov	w5, wzr
	ldr	x3, [x8, x9, lsl #3]
	ldp	x8, x0, [x29, #-16]
	lsl	w4, w9, #3
	str	x3, [sp, #16]
	ldr	x11, [x0, #480]
	ldr	x2, [x8, x10, lsl #3]
	ldr	x8, [x11, #8]
	blr	x8
	ldr	w8, [sp, #48]
	cmp	w8, #1                          // =1
	b.lt	.LBB21_10
// %bb.13:                              // %if.then26
                                        //   in Loop: Header=BB21_11 Depth=2
	ldur	w8, [x29, #-32]
	ldr	x9, [sp, #16]
	ldrsw	x10, [sp, #48]
	add	x0, x9, x8, lsl #7
	lsl	x1, x10, #7
	str	x0, [sp, #16]
	bl	jzero_far
	ldr	x8, [sp, #16]
	ldurh	w8, [x8, #-128]
	stur	wzr, [x29, #-44]
	strh	w8, [sp, #44]
	mov	w8, wzr
	ldr	w9, [sp, #48]
	cmp	w8, w9
	b.ge	.LBB21_10
.LBB21_14:                              // %for.body33
                                        //   Parent Loop BB21_2 Depth=1
                                        //     Parent Loop BB21_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldursw	x9, [x29, #-44]
	ldrh	w8, [sp, #44]
	ldr	x10, [sp, #16]
	lsl	x9, x9, #7
	strh	w8, [x10, x9]
	ldur	w8, [x29, #-44]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-44]
	mov	w8, w8
	ldr	w9, [sp, #48]
	cmp	w8, w9
	b.lt	.LBB21_14
	b	.LBB21_10
.LBB21_15:                              // %for.end40
                                        //   in Loop: Header=BB21_2 Depth=1
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #16]
	cmp	w8, w9
	b.ne	.LBB21_1
// %bb.16:                              // %if.then44
                                        //   in Loop: Header=BB21_2 Depth=1
	ldp	w8, w11, [sp, #48]
	ldur	w9, [x29, #-32]
	ldur	w10, [x29, #-52]
	str	w11, [sp, #56]
	add	w8, w9, w8
	stur	w8, [x29, #-32]
	udiv	w8, w8, w10
	stur	w8, [x29, #-36]
	b	.LBB21_18
.LBB21_17:                              // %for.inc82
                                        //   in Loop: Header=BB21_18 Depth=2
	ldr	w8, [sp, #56]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #56]
.LBB21_18:                              // %for.cond45
                                        //   Parent Loop BB21_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB21_21 Depth 3
                                        //         Child Loop BB21_23 Depth 4
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #56]
	ldr	w8, [x8, #12]
	cmp	w9, w8
	b.ge	.LBB21_1
// %bb.19:                              // %for.body49
                                        //   in Loop: Header=BB21_18 Depth=2
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #56]
	add	x8, x8, x9, lsl #3
	ldur	w9, [x29, #-32]
	ldp	x8, x0, [x8, #-8]
	lsl	x1, x9, #7
	stp	x8, x0, [sp, #8]
	bl	jzero_far
	stur	wzr, [x29, #-40]
	b	.LBB21_21
.LBB21_20:                              // %for.end74
                                        //   in Loop: Header=BB21_21 Depth=3
	ldursw	x8, [x29, #-52]
	ldur	w9, [x29, #-40]
	ldp	x11, x10, [sp, #8]
	lsl	x8, x8, #7
	add	w9, w9, #1                      // =1
	add	x10, x10, x8
	add	x8, x11, x8
	stp	x8, x10, [sp, #8]
	stur	w9, [x29, #-40]
.LBB21_21:                              // %for.cond57
                                        //   Parent Loop BB21_2 Depth=1
                                        //     Parent Loop BB21_18 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB21_23 Depth 4
	ldp	w8, w9, [x29, #-40]
	cmp	w8, w9
	b.hs	.LBB21_17
// %bb.22:                              // %for.body60
                                        //   in Loop: Header=BB21_21 Depth=3
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-52]
	add	x8, x8, x9, lsl #7
	ldurh	w8, [x8, #-128]
	stur	wzr, [x29, #-44]
	strh	w8, [sp, #44]
	mov	w8, wzr
	ldur	w9, [x29, #-52]
	cmp	w8, w9
	b.ge	.LBB21_20
.LBB21_23:                              // %for.body68
                                        //   Parent Loop BB21_2 Depth=1
                                        //     Parent Loop BB21_18 Depth=2
                                        //       Parent Loop BB21_21 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldursw	x9, [x29, #-44]
	ldrh	w8, [sp, #44]
	ldr	x10, [sp, #16]
	lsl	x9, x9, #7
	strh	w8, [x10, x9]
	ldur	w8, [x29, #-44]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-44]
	mov	w8, w8
	ldur	w9, [x29, #-52]
	cmp	w8, w9
	b.lt	.LBB21_23
	b	.LBB21_20
.LBB21_24:                              // %for.end88
	ldur	x1, [x29, #-16]
	bl	compress_output
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end21:
	.size	compress_first_pass, .Lfunc_end21-compress_first_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function compress_output
	.type	compress_output,@function
compress_output:                        // @compress_output
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	str	x19, [sp, #128]                 // 8-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #448]
	add	x19, sp, #32                    // =32
	stur	wzr, [x29, #-32]
	stur	x8, [x29, #-24]
.LBB22_1:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB22_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB22_1 Depth=1
	ldur	x0, [x29, #-8]
	ldursw	x8, [x29, #-32]
	ldur	x9, [x29, #-24]
	mov	w4, wzr
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #320]
	str	x8, [sp, #16]
	ldrsw	x11, [x8, #4]
	ldr	x10, [x0, #8]
	ldr	w12, [x9, #16]
	ldr	w3, [x8, #12]
	add	x9, x9, x11, lsl #3
	ldr	x10, [x10, #64]
	ldr	x1, [x9, #112]
	mul	w2, w12, w3
	blr	x10
	ldursw	x8, [x29, #-32]
	ldur	w9, [x29, #-32]
	str	x0, [x19, x8, lsl #3]
	add	w8, w9, #1                      // =1
	stur	w8, [x29, #-32]
	b	.LBB22_1
.LBB22_3:                               // %for.end
	ldur	x8, [x29, #-24]
	add	x19, sp, #32                    // =32
	ldr	w8, [x8, #24]
	stur	w8, [x29, #-44]
.LBB22_4:                               // %for.cond7
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB22_6 Depth 2
                                        //       Child Loop BB22_9 Depth 3
                                        //         Child Loop BB22_12 Depth 4
                                        //           Child Loop BB22_14 Depth 5
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-44]
	ldr	w10, [x8, #28]
	cmp	w9, w10
	b.ge	.LBB22_21
// %bb.5:                               // %for.body9
                                        //   in Loop: Header=BB22_4 Depth=1
	ldr	w8, [x8, #20]
.LBB22_6:                               // %for.cond10
                                        //   Parent Loop BB22_4 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB22_9 Depth 3
                                        //         Child Loop BB22_12 Depth 4
                                        //           Child Loop BB22_14 Depth 5
	str	w8, [x29, #24]
	ldur	x8, [x29, #-8]
	ldr	w9, [x29, #24]
	ldr	w8, [x8, #352]
	cmp	w9, w8
	b.hs	.LBB22_18
// %bb.7:                               // %for.body12
                                        //   in Loop: Header=BB22_6 Depth=2
	stur	xzr, [x29, #-32]
	b	.LBB22_9
.LBB22_8:                               // %for.inc41
                                        //   in Loop: Header=BB22_9 Depth=3
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-32]
.LBB22_9:                               // %for.cond13
                                        //   Parent Loop BB22_4 Depth=1
                                        //     Parent Loop BB22_6 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB22_12 Depth 4
                                        //           Child Loop BB22_14 Depth 5
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	w10, [x8, #316]
	cmp	w9, w10
	b.ge	.LBB22_16
// %bb.10:                              // %for.body16
                                        //   in Loop: Header=BB22_9 Depth=3
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	ldr	w9, [x29, #24]
	str	x8, [sp, #16]
	ldr	w8, [x8, #52]
	stur	wzr, [x29, #-40]
	mul	w8, w9, w8
	stur	w8, [x29, #-48]
	b	.LBB22_12
.LBB22_11:                              // %for.inc38
                                        //   in Loop: Header=BB22_12 Depth=4
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
.LBB22_12:                              // %for.cond21
                                        //   Parent Loop BB22_4 Depth=1
                                        //     Parent Loop BB22_6 Depth=2
                                        //       Parent Loop BB22_9 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB22_14 Depth 5
	ldr	x8, [sp, #16]
	ldur	w9, [x29, #-40]
	ldr	w10, [x8, #56]
	ldursw	x8, [x29, #-32]
	cmp	w9, w10
	b.ge	.LBB22_8
// %bb.13:                              // %for.body23
                                        //   in Loop: Header=BB22_12 Depth=4
	ldp	w10, w9, [x29, #-44]
	ldr	x8, [x19, x8, lsl #3]
	ldur	w11, [x29, #-48]
	add	w9, w9, w10
	ldr	x8, [x8, w9, sxtw #3]
	stur	wzr, [x29, #-36]
	add	x8, x8, x11, lsl #7
	str	x8, [sp, #24]
.LBB22_14:                              // %for.cond28
                                        //   Parent Loop BB22_4 Depth=1
                                        //     Parent Loop BB22_6 Depth=2
                                        //       Parent Loop BB22_9 Depth=3
                                        //         Parent Loop BB22_12 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	x8, [sp, #16]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.ge	.LBB22_11
// %bb.15:                              // %for.body31
                                        //   in Loop: Header=BB22_14 Depth=5
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-24]
	ldursw	x10, [x29, #-28]
	add	x11, x8, #128                   // =128
	str	x11, [sp, #24]
	add	x9, x9, x10, lsl #3
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-28]
	str	x8, [x9, #32]
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
	b	.LBB22_14
.LBB22_16:                              // %for.end43
                                        //   in Loop: Header=BB22_6 Depth=2
	ldr	x8, [x8, #488]
	ldur	x9, [x29, #-24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #8]
	add	x1, x9, #32                     // =32
	blr	x8
	cbz	w0, .LBB22_19
// %bb.17:                              // %for.inc48
                                        //   in Loop: Header=BB22_6 Depth=2
	ldr	w8, [x29, #24]
	add	w8, w8, #1                      // =1
	b	.LBB22_6
.LBB22_18:                              // %for.end50
                                        //   in Loop: Header=BB22_4 Depth=1
	ldur	x8, [x29, #-24]
	str	wzr, [x8, #20]
	ldur	w8, [x29, #-44]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-44]
	b	.LBB22_4
.LBB22_19:                              // %if.then
	ldur	w8, [x29, #-44]
	ldur	x9, [x29, #-24]
	mov	w10, #1
	str	w8, [x9, #24]
	ldr	w8, [x29, #24]
	ldur	x9, [x29, #-24]
	str	w8, [x9, #20]
	str	wzr, [x29, #28]
	str	w10, [sp, #12]
.LBB22_20:                              // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #128]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB22_21:                              // %for.end54
	ldr	w9, [x8, #16]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #16]
	ldur	x0, [x29, #-8]
	bl	start_iMCU_row
	mov	w8, #1
	str	w8, [x29, #28]
	str	w8, [sp, #12]
	b	.LBB22_20
.Lfunc_end22:
	.size	compress_output, .Lfunc_end22-compress_output
	.cfi_endproc
                                        // -- End function
	.globl	jinit_color_converter           // -- Begin function jinit_color_converter
	.p2align	2
	.type	jinit_color_converter,@function
jinit_color_converter:                  // @jinit_color_converter
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #24
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, null_method
	str	x0, [sp]
	add	x9, x9, :lo12:null_method
	str	x0, [x8, #464]
	mov	x8, x0
	str	x9, [x8]
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	sub	w9, w8, #2                      // =2
	cmp	w9, #2                          // =2
	b.lo	.LBB23_3
// %bb.1:                               // %entry
	sub	w9, w8, #4                      // =4
	cmp	w9, #2                          // =2
	b.hs	.LBB23_12
// %bb.2:                               // %sw.bb13
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #48]
	cmp	w8, #4                          // =4
	b.ne	.LBB23_4
	b	.LBB23_5
.LBB23_3:                               // %sw.bb4
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #48]
	cmp	w8, #3                          // =3
	b.eq	.LBB23_5
.LBB23_4:                               // %if.then24
	ldr	x8, [sp, #8]
	mov	w9, #7
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB23_5:                               // %sw.epilog
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #72]
	sub	w8, w8, #1                      // =1
	cmp	w8, #4                          // =4
	b.hi	.LBB23_26
// %bb.6:                               // %sw.epilog
	adrp	x9, .LJTI23_0
	add	x9, x9, :lo12:.LJTI23_0
	adr	x10, .LBB23_7
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB23_7:                               // %sw.bb30
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #68]
	cmp	w8, #1                          // =1
	b.eq	.LBB23_9
// %bb.8:                               // %if.then32
	ldr	x8, [sp, #8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB23_9:                               // %if.end37
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #1                          // =1
	b.eq	.LBB23_36
// %bb.10:                              // %if.else
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #2                          // =2
	b.ne	.LBB23_35
// %bb.11:                              // %if.then44
	ldr	x8, [sp]
	adrp	x9, rgb_ycc_start
	add	x9, x9, :lo12:rgb_ycc_start
	str	x9, [x8]
	ldr	x8, [sp]
	adrp	x9, rgb_gray_convert
	add	x9, x9, :lo12:rgb_gray_convert
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB23_12:                              // %entry
	cmp	w8, #1                          // =1
	b.ne	.LBB23_25
// %bb.13:                              // %sw.bb
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #48]
	cmp	w8, #1                          // =1
	b.ne	.LBB23_4
	b	.LBB23_5
.LBB23_14:                              // %sw.bb84
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #68]
	cmp	w8, #3                          // =3
	b.eq	.LBB23_16
// %bb.15:                              // %if.then87
	ldr	x8, [sp, #8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB23_16:                              // %if.end92
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #2                          // =2
	b.ne	.LBB23_32
// %bb.17:                              // %if.then95
	ldr	x8, [sp]
	adrp	x9, rgb_ycc_start
	add	x9, x9, :lo12:rgb_ycc_start
	str	x9, [x8]
	ldr	x8, [sp]
	adrp	x9, rgb_ycc_convert
	add	x9, x9, :lo12:rgb_ycc_convert
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB23_18:                              // %sw.bb114
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #68]
	cmp	w8, #4                          // =4
	b.eq	.LBB23_20
// %bb.19:                              // %if.then117
	ldr	x8, [sp, #8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB23_20:                              // %if.end122
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #4                          // =4
	b.eq	.LBB23_34
	b	.LBB23_37
.LBB23_21:                              // %sw.bb134
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #68]
	cmp	w8, #4                          // =4
	b.eq	.LBB23_23
// %bb.22:                              // %if.then137
	ldr	x8, [sp, #8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB23_23:                              // %if.end142
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #4                          // =4
	b.ne	.LBB23_33
// %bb.24:                              // %if.then145
	ldr	x8, [sp]
	adrp	x9, rgb_ycc_start
	add	x9, x9, :lo12:rgb_ycc_start
	str	x9, [x8]
	ldr	x8, [sp]
	adrp	x9, cmyk_ycck_convert
	add	x9, x9, :lo12:cmyk_ycck_convert
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB23_25:                              // %sw.default
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #48]
	cmp	w8, #0                          // =0
	b.gt	.LBB23_5
	b	.LBB23_4
.LBB23_26:                              // %sw.default164
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #72]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.ne	.LBB23_28
// %bb.27:                              // %lor.lhs.false
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #68]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.eq	.LBB23_34
.LBB23_28:                              // %if.then171
	ldr	x8, [sp, #8]
	mov	w9, #25
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB23_34
.LBB23_29:                              // %sw.bb64
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #68]
	cmp	w8, #3                          // =3
	b.eq	.LBB23_31
// %bb.30:                              // %if.then67
	ldr	x8, [sp, #8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB23_31:                              // %if.end72
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #2                          // =2
	b.eq	.LBB23_34
	b	.LBB23_37
.LBB23_32:                              // %if.else101
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #3                          // =3
	b.eq	.LBB23_34
	b	.LBB23_37
.LBB23_33:                              // %if.else151
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #5                          // =5
	b.ne	.LBB23_37
.LBB23_34:                              // %if.end176
	ldr	x8, [sp]
	adrp	x9, null_convert
	add	x9, x9, :lo12:null_convert
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB23_35:                              // %if.else50
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	cmp	w8, #3                          // =3
	b.ne	.LBB23_37
.LBB23_36:                              // %if.then40
	ldr	x8, [sp]
	adrp	x9, grayscale_convert
	add	x9, x9, :lo12:grayscale_convert
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB23_37:                              // %if.else56
	ldr	x8, [sp, #8]
	mov	w9, #25
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end23:
	.size	jinit_color_converter, .Lfunc_end23-jinit_color_converter
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI23_0:
	.byte	(.LBB23_7-.LBB23_7)>>2
	.byte	(.LBB23_29-.LBB23_7)>>2
	.byte	(.LBB23_14-.LBB23_7)>>2
	.byte	(.LBB23_18-.LBB23_7)>>2
	.byte	(.LBB23_21-.LBB23_7)>>2
                                        // -- End function
	.text
	.p2align	2                               // -- Begin function null_method
	.type	null_method,@function
null_method:                            // @null_method
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end24:
	.size	null_method, .Lfunc_end24-null_method
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function grayscale_convert
	.type	grayscale_convert,@function
grayscale_convert:                      // @grayscale_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa_offset 64
	stp	x1, x0, [sp, #48]
	str	x2, [sp, #40]
	stp	w4, w3, [sp, #32]
	ldr	w9, [x0, #40]
	ldr	w8, [x0, #48]
	stp	w8, w9, [sp, #4]
.LBB25_1:                               // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB25_3 Depth 2
	ldr	w8, [sp, #32]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #32]
	b.mi	.LBB25_4
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB25_1 Depth=1
	ldr	x8, [sp, #48]
	ldr	w10, [sp, #36]
	add	x9, x8, #8                      // =8
	str	x9, [sp, #48]
	ldr	x9, [sp, #40]
	ldr	x11, [x8]
	ldr	x8, [x9]
	add	w9, w10, #1                     // =1
	ldr	x8, [x8, x10, lsl #3]
	str	w9, [sp, #36]
	str	wzr, [sp, #12]
	stp	x8, x11, [sp, #16]
	ldp	w9, w8, [sp, #8]
	cmp	w8, w9
	b.hs	.LBB25_1
.LBB25_3:                               // %for.body
                                        //   Parent Loop BB25_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x9, x8, [sp, #16]
	ldr	w10, [sp, #12]
	ldrb	w8, [x8]
	strb	w8, [x9, x10]
	ldrsw	x8, [sp, #4]
	ldr	x9, [sp, #24]
	ldr	w10, [sp, #12]
	add	x8, x9, x8
	add	w9, w10, #1                     // =1
	str	x8, [sp, #24]
	str	w9, [sp, #12]
	ldp	w9, w8, [sp, #8]
	cmp	w8, w9
	b.lo	.LBB25_3
	b	.LBB25_1
.LBB25_4:                               // %while.end
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end25:
	.size	grayscale_convert, .Lfunc_end25-grayscale_convert
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function rgb_ycc_start
	.type	rgb_ycc_start,@function
rgb_ycc_start:                          // @rgb_ycc_start
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #464]
	mov	w1, #1
	mov	w2, #16384
	str	x8, [sp, #16]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x16, [sp, #16]
	mov	w14, #32767
	stp	xzr, x0, [sp]
	mov	w8, #19595
	mov	w9, #38470
	mov	w10, #7471
	orr	x11, xzr, #0x8000
	mov	x12, #-11059
	mov	x13, #-21709
	movk	w14, #128, lsl #16
	mov	x15, #-27439
	str	x0, [x16, #16]
	mov	x16, #-5329
	ldr	x17, [sp]
	cmp	x17, #255                       // =255
	b.gt	.LBB26_2
.LBB26_1:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x17, x18, [sp]
	mul	x0, x17, x8
	str	x0, [x18, x17, lsl #3]
	ldp	x17, x18, [sp]
	mul	x0, x17, x9
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #2048]
	ldp	x17, x18, [sp]
	madd	x0, x17, x10, x11
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #4096]
	ldp	x17, x18, [sp]
	mul	x0, x17, x12
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #6144]
	ldp	x17, x18, [sp]
	mul	x0, x17, x13
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #8192]
	ldp	x17, x18, [sp]
	add	x0, x14, x17, lsl #15
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #10240]
	ldp	x17, x18, [sp]
	mul	x0, x17, x15
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #12288]
	ldp	x17, x18, [sp]
	mul	x0, x17, x16
	add	x17, x18, x17, lsl #3
	str	x0, [x17, #14336]
	ldr	x17, [sp]
	add	x17, x17, #1                    // =1
	str	x17, [sp]
	cmp	x17, #255                       // =255
	b.le	.LBB26_1
.LBB26_2:                               // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end26:
	.size	rgb_ycc_start, .Lfunc_end26-rgb_ycc_start
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function rgb_gray_convert
	.type	rgb_gray_convert,@function
rgb_gray_convert:                       // @rgb_gray_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	.cfi_def_cfa_offset 96
	stp	x1, x0, [sp, #80]
	str	x2, [sp, #72]
	stp	w4, w3, [sp, #64]
	ldr	x8, [x0, #464]
	str	x8, [sp, #56]
	ldr	x8, [x8, #16]
	str	x8, [sp, #32]
	ldr	w8, [x0, #40]
	str	w8, [sp, #8]
.LBB27_1:                               // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB27_3 Depth 2
	ldr	w8, [sp, #64]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #64]
	b.mi	.LBB27_4
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB27_1 Depth=1
	ldr	x8, [sp, #80]
	ldr	w10, [sp, #68]
	add	x9, x8, #8                      // =8
	str	x9, [sp, #80]
	ldr	x9, [sp, #72]
	ldr	x11, [x8]
	ldr	x8, [x9]
	add	w9, w10, #1                     // =1
	ldr	x8, [x8, x10, lsl #3]
	str	w9, [sp, #68]
	str	wzr, [sp, #12]
	stp	x8, x11, [sp, #16]
	ldp	w9, w8, [sp, #8]
	cmp	w8, w9
	b.hs	.LBB27_1
.LBB27_3:                               // %for.body
                                        //   Parent Loop BB27_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x8, x11, [sp, #24]
	ldrb	w9, [x8]
	ldrb	w10, [x8, #1]
	stp	w10, w9, [sp, #48]
	ldrb	w12, [x8, #2]
	add	x8, x8, #3                      // =3
	add	x10, x11, x10, lsl #3
	str	x8, [sp, #24]
	str	w12, [sp, #44]
	ldr	x8, [x11, x9, lsl #3]
	ldr	w9, [x10, #2048]
	add	x10, x11, x12, lsl #3
	ldr	w10, [x10, #4096]
	ldr	x11, [sp, #16]
	ldr	w12, [sp, #12]
	add	w8, w8, w9
	add	w8, w8, w10
	lsr	w8, w8, #16
	strb	w8, [x11, x12]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	ldp	w9, w8, [sp, #8]
	cmp	w8, w9
	b.lo	.LBB27_3
	b	.LBB27_1
.LBB27_4:                               // %while.end
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end27:
	.size	rgb_gray_convert, .Lfunc_end27-rgb_gray_convert
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function null_convert
	.type	null_convert,@function
null_convert:                           // @null_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa_offset 64
	stp	x1, x0, [sp, #48]
	str	x2, [sp, #40]
	stp	w4, w3, [sp, #32]
	ldr	w9, [x0, #68]
	ldr	w8, [x0, #40]
	stp	w8, w9, [sp]
	b	.LBB28_2
.LBB28_1:                               // %for.end13
                                        //   in Loop: Header=BB28_2 Depth=1
	ldr	w9, [sp, #36]
	add	x8, x8, #8                      // =8
	str	x8, [sp, #48]
	add	w8, w9, #1                      // =1
	str	w8, [sp, #36]
.LBB28_2:                               // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_5 Depth 2
                                        //       Child Loop BB28_7 Depth 3
	ldr	w8, [sp, #32]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #32]
	b.mi	.LBB28_8
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB28_2 Depth=1
	str	wzr, [sp, #8]
	b	.LBB28_5
.LBB28_4:                               // %for.inc11
                                        //   in Loop: Header=BB28_5 Depth=2
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
.LBB28_5:                               // %for.cond
                                        //   Parent Loop BB28_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB28_7 Depth 3
	ldp	w10, w9, [sp, #4]
	ldr	x8, [sp, #48]
	cmp	w9, w10
	b.ge	.LBB28_1
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB28_5 Depth=2
	ldr	x9, [sp, #40]
	ldrsw	x10, [sp, #8]
	ldr	x12, [x8]
	ldr	w11, [sp, #36]
	ldr	x8, [x9, x10, lsl #3]
	ldr	x8, [x8, x11, lsl #3]
	str	wzr, [sp, #12]
	stp	x8, x12, [sp, #16]
	mov	w8, wzr
	ldr	w9, [sp]
	cmp	w8, w9
	b.hs	.LBB28_4
.LBB28_7:                               // %for.body6
                                        //   Parent Loop BB28_2 Depth=1
                                        //     Parent Loop BB28_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	x10, x8, [sp, #16]
	ldp	w9, w11, [sp, #8]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	ldrb	w8, [x8, x9]
	strb	w8, [x10, x11]
	ldrsw	x8, [sp, #4]
	ldr	x9, [sp, #24]
	ldr	w10, [sp, #12]
	add	x8, x9, x8
	add	w9, w10, #1                     // =1
	str	x8, [sp, #24]
	str	w9, [sp, #12]
	mov	w8, w9
	ldr	w9, [sp]
	cmp	w8, w9
	b.lo	.LBB28_7
	b	.LBB28_4
.LBB28_8:                               // %while.end
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end28:
	.size	null_convert, .Lfunc_end28-null_convert
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function rgb_ycc_convert
	.type	rgb_ycc_convert,@function
rgb_ycc_convert:                        // @rgb_ycc_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	.cfi_def_cfa_offset 112
	stp	x1, x0, [sp, #96]
	str	x2, [sp, #88]
	stp	w4, w3, [sp, #80]
	ldr	x8, [x0, #464]
	mov	x9, x0
	str	x8, [sp, #72]
	ldr	x8, [x8, #16]
	str	x8, [sp, #48]
	ldr	w8, [x9, #40]
	str	w8, [sp, #8]
.LBB29_1:                               // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB29_3 Depth 2
	ldr	w8, [sp, #80]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #80]
	b.mi	.LBB29_4
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB29_1 Depth=1
	ldr	x8, [sp, #96]
	ldr	w11, [sp, #84]
	add	x9, x8, #8                      // =8
	str	x9, [sp, #96]
	ldr	x9, [sp, #88]
	ldr	x12, [x8]
	ldr	w8, [sp, #84]
	ldr	x10, [x9]
	lsl	x8, x8, #3
	ldr	x10, [x10, x8]
	stp	x10, x12, [sp, #32]
	ldp	x10, x9, [x9, #8]
	ldr	x10, [x10, x8]
	ldr	x8, [x9, x8]
	add	w9, w11, #1                     // =1
	str	w9, [sp, #84]
	str	wzr, [sp, #12]
	stp	x8, x10, [sp, #16]
	ldp	w9, w8, [sp, #8]
	cmp	w8, w9
	b.hs	.LBB29_1
.LBB29_3:                               // %for.body
                                        //   Parent Loop BB29_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x8, x11, [sp, #40]
	ldrb	w9, [x8]
	ldrb	w10, [x8, #1]
	stp	w10, w9, [sp, #64]
	ldrb	w12, [x8, #2]
	add	x8, x8, #3                      // =3
	add	x10, x11, x10, lsl #3
	str	x8, [sp, #40]
	str	w12, [sp, #60]
	add	x8, x11, x12, lsl #3
	ldr	x9, [x11, x9, lsl #3]
	ldr	w10, [x10, #2048]
	ldr	w8, [x8, #4096]
	ldr	x11, [sp, #32]
	ldr	w12, [sp, #12]
	add	w9, w9, w10
	add	w8, w9, w8
	lsr	w8, w8, #16
	strb	w8, [x11, x12]
	ldr	x8, [sp, #48]
	ldpsw	x10, x9, [sp, #64]
	ldrsw	x11, [sp, #60]
	ldr	w12, [sp, #12]
	add	x9, x8, x9, lsl #3
	add	x10, x8, x10, lsl #3
	add	x8, x8, x11, lsl #3
	ldr	w9, [x9, #6144]
	ldr	w10, [x10, #8192]
	ldr	w8, [x8, #10240]
	ldr	x11, [sp, #24]
	add	w9, w9, w10
	add	w8, w9, w8
	lsr	w8, w8, #16
	strb	w8, [x11, x12]
	ldr	x8, [sp, #48]
	ldpsw	x10, x9, [sp, #64]
	ldrsw	x11, [sp, #60]
	ldr	w12, [sp, #12]
	add	x9, x8, x9, lsl #3
	add	x10, x8, x10, lsl #3
	ldr	w9, [x9, #10240]
	ldr	w10, [x10, #12288]
	add	x8, x8, x11, lsl #3
	ldr	w8, [x8, #14336]
	ldr	x11, [sp, #16]
	add	w9, w9, w10
	add	w8, w9, w8
	lsr	w8, w8, #16
	strb	w8, [x11, x12]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	ldp	w9, w8, [sp, #8]
	cmp	w8, w9
	b.lo	.LBB29_3
	b	.LBB29_1
.LBB29_4:                               // %while.end
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end29:
	.size	rgb_ycc_convert, .Lfunc_end29-rgb_ycc_convert
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function cmyk_ycck_convert
	.type	cmyk_ycck_convert,@function
cmyk_ycck_convert:                      // @cmyk_ycck_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	.cfi_def_cfa_offset 112
	stp	x1, x0, [sp, #96]
	str	x2, [sp, #88]
	stp	w4, w3, [sp, #80]
	ldr	x8, [x0, #464]
	mov	x9, x0
	str	x8, [sp, #72]
	ldr	x8, [x8, #16]
	str	x8, [sp, #48]
	ldr	w8, [x9, #40]
	str	w8, [sp]
	mov	w8, #255
.LBB30_1:                               // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB30_3 Depth 2
	ldr	w9, [sp, #80]
	subs	w9, w9, #1                      // =1
	str	w9, [sp, #80]
	b.mi	.LBB30_4
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB30_1 Depth=1
	ldp	x11, x9, [sp, #88]
	ldr	w13, [sp, #84]
	add	x10, x9, #8                     // =8
	str	x10, [sp, #96]
	ldr	x10, [sp, #88]
	ldr	x14, [x9]
	ldr	w9, [sp, #84]
	ldr	x12, [x10]
	lsl	x9, x9, #3
	ldr	x12, [x12, x9]
	stp	x12, x14, [sp, #32]
	ldp	x12, x10, [x10, #8]
	ldr	x12, [x12, x9]
	ldr	x9, [x10, x9]
	ldr	w10, [sp, #84]
	stp	x9, x12, [sp, #16]
	ldr	x9, [x11, #24]
	add	w10, w10, #1                    // =1
	ldr	x9, [x9, x13, lsl #3]
	str	w10, [sp, #84]
	str	wzr, [sp, #4]
	str	x9, [sp, #8]
	ldp	w10, w9, [sp]
	cmp	w9, w10
	b.hs	.LBB30_1
.LBB30_3:                               // %for.body
                                        //   Parent Loop BB30_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #40]
	ldr	x11, [sp, #8]
	ldr	w12, [sp, #4]
	ldrb	w10, [x9]
	sub	w10, w8, w10
	str	w10, [sp, #68]
	ldrb	w10, [x9, #1]
	sub	w10, w8, w10
	str	w10, [sp, #64]
	ldrb	w10, [x9, #2]
	sub	w10, w8, w10
	str	w10, [sp, #60]
	ldrb	w9, [x9, #3]
	strb	w9, [x11, x12]
	ldp	x9, x10, [sp, #40]
	ldpsw	x12, x11, [sp, #60]
	ldrsw	x13, [sp, #68]
	add	x9, x9, #4                      // =4
	add	x11, x10, x11, lsl #3
	str	x9, [sp, #40]
	add	x12, x10, x12, lsl #3
	ldr	x9, [x10, x13, lsl #3]
	ldr	w10, [x11, #2048]
	ldr	w11, [x12, #4096]
	ldr	x12, [sp, #32]
	ldr	w13, [sp, #4]
	add	w9, w9, w10
	add	w9, w9, w11
	lsr	w9, w9, #16
	strb	w9, [x12, x13]
	ldr	x9, [sp, #48]
	ldpsw	x11, x10, [sp, #64]
	ldrsw	x12, [sp, #60]
	ldr	w13, [sp, #4]
	add	x10, x9, x10, lsl #3
	add	x11, x9, x11, lsl #3
	add	x9, x9, x12, lsl #3
	ldr	w10, [x10, #6144]
	ldr	w11, [x11, #8192]
	ldr	w9, [x9, #10240]
	ldr	x12, [sp, #24]
	add	w10, w10, w11
	add	w9, w10, w9
	lsr	w9, w9, #16
	strb	w9, [x12, x13]
	ldr	x9, [sp, #48]
	ldpsw	x11, x10, [sp, #64]
	ldrsw	x12, [sp, #60]
	ldr	w13, [sp, #4]
	add	x10, x9, x10, lsl #3
	add	x11, x9, x11, lsl #3
	ldr	w10, [x10, #10240]
	ldr	w11, [x11, #12288]
	add	x9, x9, x12, lsl #3
	ldr	w9, [x9, #14336]
	ldr	x12, [sp, #16]
	add	w10, w10, w11
	add	w9, w10, w9
	lsr	w9, w9, #16
	strb	w9, [x12, x13]
	ldr	w9, [sp, #4]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #4]
	ldp	w10, w9, [sp]
	cmp	w9, w10
	b.lo	.LBB30_3
	b	.LBB30_1
.LBB30_4:                               // %while.end
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end30:
	.size	cmyk_ycck_convert, .Lfunc_end30-cmyk_ycck_convert
	.cfi_endproc
                                        // -- End function
	.globl	jinit_forward_dct               // -- Begin function jinit_forward_dct
	.p2align	2
	.type	jinit_forward_dct,@function
jinit_forward_dct:                      // @jinit_forward_dct
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #96
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_fdctmgr
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_fdctmgr
	str	x0, [x8, #480]
	mov	x8, x0
	str	x9, [x8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #268]
	cmp	w8, #2                          // =2
	b.eq	.LBB31_4
// %bb.1:                               // %entry
	cmp	w8, #1                          // =1
	b.eq	.LBB31_5
// %bb.2:                               // %entry
	cbnz	w8, .LBB31_6
// %bb.3:                               // %sw.bb
	ldr	x8, [sp, #16]
	adrp	x9, forward_DCT
	add	x9, x9, :lo12:forward_DCT
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	adrp	x9, jpeg_fdct_islow
	add	x9, x9, :lo12:jpeg_fdct_islow
	str	x9, [x8, #16]
	b	.LBB31_7
.LBB31_4:                               // %sw.bb8
	ldr	x8, [sp, #16]
	adrp	x9, forward_DCT_float
	add	x9, x9, :lo12:forward_DCT_float
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	adrp	x9, jpeg_fdct_float
	add	x9, x9, :lo12:jpeg_fdct_float
	str	x9, [x8, #56]
	b	.LBB31_7
.LBB31_5:                               // %sw.bb4
	ldr	x8, [sp, #16]
	adrp	x9, forward_DCT
	add	x9, x9, :lo12:forward_DCT
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	adrp	x9, jpeg_fdct_ifast
	add	x9, x9, :lo12:jpeg_fdct_ifast
	str	x9, [x8, #16]
	b	.LBB31_7
.LBB31_6:                               // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #47
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB31_7:                               // %sw.epilog
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB31_9
.LBB31_8:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #24]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #64]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB31_8
.LBB31_9:                               // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end31:
	.size	jinit_forward_dct, .Lfunc_end31-jinit_forward_dct
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_fdctmgr
	.type	start_pass_fdctmgr,@function
start_pass_fdctmgr:                     // @start_pass_fdctmgr
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	d9, d8, [sp, #64]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x23, [sp, #96]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_offset b8, -72
	.cfi_offset b9, -80
	str	x0, [x29, #24]
	ldr	x8, [x0, #480]
	stur	wzr, [x29, #-28]
	adrp	x20, start_pass_fdctmgr.aanscalefactor
	adrp	x21, start_pass_fdctmgr.aanscales
	stur	x8, [x29, #-24]
	ldr	x8, [x0, #80]
	mov	w19, #51
	add	x20, x20, :lo12:start_pass_fdctmgr.aanscalefactor
	fmov	d8, #8.00000000
	fmov	d9, #1.00000000
	add	x21, x21, :lo12:start_pass_fdctmgr.aanscales
	orr	x22, xzr, #0x400
	mov	w23, #47
	str	x8, [sp, #32]
	b	.LBB32_3
.LBB32_1:                               // %sw.default
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB32_2:                               // %for.inc114
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	w8, [x29, #-28]
	ldr	x9, [sp, #32]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-28]
	str	x9, [sp, #32]
.LBB32_3:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB32_14 Depth 2
                                        //     Child Loop BB32_25 Depth 2
                                        //     Child Loop BB32_19 Depth 2
                                        //       Child Loop BB32_21 Depth 3
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB32_26
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #16]
	stur	w8, [x29, #-32]
	tbnz	w8, #31, .LBB32_7
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB32_3 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB32_7
// %bb.6:                               // %lor.lhs.false4
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #88]
	cbnz	x8, .LBB32_8
.LBB32_7:                               // %if.then
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-32]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB32_8:                               // %if.end
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-32]
	add	x9, x8, x9, lsl #3
	ldr	x9, [x9, #88]
	str	x9, [sp, #24]
	ldr	w8, [x8, #268]
	cmp	w8, #2                          // =2
	b.eq	.LBB32_15
// %bb.9:                               // %if.end
                                        //   in Loop: Header=BB32_3 Depth=1
	cmp	w8, #1                          // =1
	b.eq	.LBB32_22
// %bb.10:                              // %if.end
                                        //   in Loop: Header=BB32_3 Depth=1
	cbnz	w8, .LBB32_1
// %bb.11:                              // %sw.bb
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #24]
	cbnz	x8, .LBB32_13
// %bb.12:                              // %if.then16
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #256
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #24]
.LBB32_13:                              // %if.end20
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #24]
	stur	wzr, [x29, #-36]
	str	x8, [sp, #16]
	mov	w8, wzr
	cmp	w8, #63                         // =63
	b.gt	.LBB32_2
.LBB32_14:                              // %for.body26
                                        //   Parent Loop BB32_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x10, x8, [sp, #16]
	ldursw	x9, [x29, #-36]
	ldrh	w8, [x8, x9, lsl #1]
	lsl	w8, w8, #3
	str	w8, [x10, x9, lsl #2]
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB32_14
	b	.LBB32_2
.LBB32_15:                              // %sw.bb65
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #64]
	cbnz	x8, .LBB32_17
// %bb.16:                              // %if.then70
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #256
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #64]
.LBB32_17:                              // %if.end77
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #64]
	stur	wzr, [x29, #-36]
	str	wzr, [sp, #4]
	str	x8, [sp, #8]
	b	.LBB32_19
.LBB32_18:                              // %for.inc107
                                        //   in Loop: Header=BB32_19 Depth=2
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB32_19:                              // %for.cond81
                                        //   Parent Loop BB32_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB32_21 Depth 3
	ldr	w8, [sp, #4]
	cmp	w8, #7                          // =7
	b.gt	.LBB32_2
// %bb.20:                              // %for.body84
                                        //   in Loop: Header=BB32_19 Depth=2
	str	wzr, [sp]
	mov	w8, wzr
	cmp	w8, #7                          // =7
	b.gt	.LBB32_18
.LBB32_21:                              // %for.body88
                                        //   Parent Loop BB32_3 Depth=1
                                        //     Parent Loop BB32_19 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #24]
	ldursw	x9, [x29, #-36]
	ldpsw	x11, x10, [sp]
	ldr	h0, [x8, x9, lsl #1]
	ldr	d1, [x20, x10, lsl #3]
	ldr	d2, [x20, x11, lsl #3]
	ldr	x8, [sp, #8]
	ucvtf	d0, d0
	fmul	d0, d0, d1
	fmul	d0, d0, d2
	fmul	d0, d0, d8
	fdiv	d0, d9, d0
	fcvt	s0, d0
	str	s0, [x8, x9, lsl #2]
	ldur	w8, [x29, #-36]
	ldr	w9, [sp]
	add	w8, w8, #1                      // =1
	add	w9, w9, #1                      // =1
	stur	w8, [x29, #-36]
	str	w9, [sp]
	mov	w8, w9
	cmp	w8, #7                          // =7
	b.le	.LBB32_21
	b	.LBB32_18
.LBB32_22:                              // %sw.bb31
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #24]
	cbnz	x8, .LBB32_24
// %bb.23:                              // %if.then37
                                        //   in Loop: Header=BB32_3 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #256
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #24]
.LBB32_24:                              // %if.end44
                                        //   in Loop: Header=BB32_3 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #24]
	stur	wzr, [x29, #-36]
	str	x8, [sp, #16]
	mov	w8, wzr
	cmp	w8, #63                         // =63
	b.gt	.LBB32_2
.LBB32_25:                              // %for.body51
                                        //   Parent Loop BB32_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursw	x8, [x29, #-36]
	ldp	x11, x9, [sp, #16]
	lsl	x10, x8, #1
	ldrh	w9, [x9, x10]
	ldrsh	x10, [x21, x10]
	madd	x9, x9, x10, x22
	lsr	x9, x9, #11
	str	w9, [x11, x8, lsl #2]
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB32_25
	b	.LBB32_2
.LBB32_26:                              // %for.end116
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldr	x23, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #64]               // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end32:
	.size	start_pass_fdctmgr, .Lfunc_end32-start_pass_fdctmgr
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function forward_DCT
	.type	forward_DCT,@function
forward_DCT:                            // @forward_DCT
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #400                    // =400
	stp	x29, x30, [sp, #368]            // 16-byte Folded Spill
	stp	x28, x19, [sp, #384]            // 16-byte Folded Spill
	add	x29, sp, #368                   // =368
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w28, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	stp	w5, w4, [x29, #-40]
	stur	w6, [x29, #-44]
	ldr	x8, [x0, #480]
	mov	w10, w4
	mov	x11, x2
	add	x19, sp, #40                    // =40
	ldr	x9, [x8, #16]
	stp	x9, x8, [x29, #-64]
	ldrsw	x9, [x1, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #24]
	add	x9, x11, x10, lsl #3
	stur	x9, [x29, #-24]
	str	wzr, [sp, #36]
	stur	x8, [x29, #-72]
	b	.LBB33_2
.LBB33_1:                               // %for.end74
                                        //   in Loop: Header=BB33_2 Depth=1
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-40]
	add	w8, w8, #1                      // =1
	add	w9, w9, #8                      // =8
	str	w8, [sp, #36]
	stur	w9, [x29, #-40]
.LBB33_2:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB33_4 Depth 2
                                        //     Child Loop BB33_8 Depth 2
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-44]
	cmp	w8, w9
	b.hs	.LBB33_16
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB33_2 Depth=1
	str	x19, [sp, #24]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #7                          // =7
	b.gt	.LBB33_5
.LBB33_4:                               // %for.body6
                                        //   Parent Loop BB33_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-24]
	ldrsw	x9, [sp, #12]
	ldur	w10, [x29, #-40]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x9, [sp, #24]
	add	x8, x8, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #24]
	sub	w8, w8, #128                    // =128
	str	w8, [x9]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #7                          // =7
	b.le	.LBB33_4
.LBB33_5:                               // %for.end
                                        //   in Loop: Header=BB33_2 Depth=1
	ldur	x8, [x29, #-64]
	add	x0, sp, #40                     // =40
	blr	x8
	ldur	x8, [x29, #-32]
	ldr	w9, [sp, #36]
	str	wzr, [sp, #8]
	add	x8, x8, x9, lsl #7
	str	x8, [sp, #24]
	b	.LBB33_8
.LBB33_6:                               // %if.else66
                                        //   in Loop: Header=BB33_8 Depth=2
	str	wzr, [sp, #16]
.LBB33_7:                               // %if.end68
                                        //   in Loop: Header=BB33_8 Depth=2
	ldr	w8, [sp, #16]
	ldr	x9, [sp, #24]
	ldrsw	x10, [sp, #8]
	strh	w8, [x9, x10, lsl #1]
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
.LBB33_8:                               // %for.cond44
                                        //   Parent Loop BB33_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #8]
	cmp	w8, #63                         // =63
	b.gt	.LBB33_1
// %bb.9:                               // %for.body47
                                        //   in Loop: Header=BB33_8 Depth=2
	ldrsw	x8, [sp, #8]
	ldur	x9, [x29, #-72]
	lsl	x8, x8, #2
	ldr	w9, [x9, x8]
	ldr	w8, [x19, x8]
	stp	w9, w8, [sp, #12]
	tbnz	w8, #31, .LBB33_12
// %bb.10:                              // %if.else59
                                        //   in Loop: Header=BB33_8 Depth=2
	ldp	w8, w9, [sp, #12]
	add	w9, w9, w8, asr #1
	cmp	w9, w8
	str	w9, [sp, #16]
	b.lt	.LBB33_6
// %bb.11:                              // %if.then64
                                        //   in Loop: Header=BB33_8 Depth=2
	ldp	w8, w9, [sp, #12]
	sdiv	w8, w9, w8
	str	w8, [sp, #16]
	b	.LBB33_7
.LBB33_12:                              // %if.then
                                        //   in Loop: Header=BB33_8 Depth=2
	ldp	w8, w9, [sp, #12]
	asr	w10, w8, #1
	sub	w9, w10, w9
	cmp	w9, w8
	str	w9, [sp, #16]
	b.lt	.LBB33_14
// %bb.13:                              // %if.then57
                                        //   in Loop: Header=BB33_8 Depth=2
	ldp	w8, w9, [sp, #12]
	sdiv	w8, w9, w8
	str	w8, [sp, #16]
	b	.LBB33_15
.LBB33_14:                              // %if.else
                                        //   in Loop: Header=BB33_8 Depth=2
	str	wzr, [sp, #16]
.LBB33_15:                              // %if.end
                                        //   in Loop: Header=BB33_8 Depth=2
	ldr	w8, [sp, #16]
	neg	w8, w8
	str	w8, [sp, #16]
	b	.LBB33_7
.LBB33_16:                              // %for.end78
	ldp	x28, x19, [sp, #384]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #368]            // 16-byte Folded Reload
	add	sp, sp, #400                    // =400
	ret
.Lfunc_end33:
	.size	forward_DCT, .Lfunc_end33-forward_DCT
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function forward_DCT_float
	.type	forward_DCT_float,@function
forward_DCT_float:                      // @forward_DCT_float
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #416                    // =416
	stp	x29, x30, [sp, #368]            // 16-byte Folded Spill
	stp	x28, x21, [sp, #384]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #400]            // 16-byte Folded Spill
	add	x29, sp, #368                   // =368
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	sub	x19, x29, #72                   // =72
	stp	w5, w4, [x29, #-40]
	stur	w6, [x29, #-44]
	stp	x1, x0, [x19, #56]
	stp	x3, x2, [x19, #40]
	ldr	x8, [x0, #480]
	mov	w10, w4
	mov	x11, x2
	mov	w21, #256
	ldr	x9, [x8, #56]
	add	x20, sp, #40                    // =40
	movk	w21, #18048, lsl #16
	stp	x9, x8, [x19, #8]
	ldrsw	x9, [x1, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #64]
	add	x9, x11, x10, lsl #3
	str	x9, [x19, #48]
	str	wzr, [sp, #36]
	str	x8, [x19]
	b	.LBB34_2
.LBB34_1:                               // %for.end65
                                        //   in Loop: Header=BB34_2 Depth=1
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-40]
	add	w8, w8, #1                      // =1
	add	w9, w9, #8                      // =8
	str	w8, [sp, #36]
	stur	w9, [x29, #-40]
.LBB34_2:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB34_4 Depth 2
                                        //     Child Loop BB34_6 Depth 2
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-44]
	cmp	w8, w9
	b.hs	.LBB34_7
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB34_2 Depth=1
	str	x20, [sp, #24]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #7                          // =7
	b.gt	.LBB34_5
.LBB34_4:                               // %for.body4
                                        //   Parent Loop BB34_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x19, #48]
	ldrsw	x9, [sp, #12]
	ldur	w10, [x29, #-40]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x9, [sp, #24]
	add	x8, x8, x10
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	add	x10, x9, #4                     // =4
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x9, #4                     // =4
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x9, #4                     // =4
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x9, #4                     // =4
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x9, #4                     // =4
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x9, #4                     // =4
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x10, x9, #4                     // =4
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x10, [sp, #16]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	str	s0, [x9]
	ldr	x8, [sp, #16]
	mov	x9, x10
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	sub	w8, w8, #128                    // =128
	scvtf	s0, w8
	add	x8, x9, #4                      // =4
	stp	x11, x8, [sp, #16]
	str	s0, [x9]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #7                          // =7
	b.le	.LBB34_4
.LBB34_5:                               // %for.end
                                        //   in Loop: Header=BB34_2 Depth=1
	ldr	x8, [x19, #8]
	add	x0, sp, #40                     // =40
	blr	x8
	ldr	x8, [x19, #40]
	ldr	w9, [sp, #36]
	str	wzr, [sp, #12]
	add	x8, x8, x9, lsl #7
	str	x8, [sp, #24]
	mov	w8, wzr
	cmp	w8, #63                         // =63
	b.gt	.LBB34_1
.LBB34_6:                               // %for.body53
                                        //   Parent Loop BB34_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsw	x8, [sp, #12]
	ldr	x9, [x19]
	lsl	x10, x8, #2
	ldr	s0, [x20, x10]
	ldr	s1, [x9, x10]
	ldr	x9, [sp, #24]
	fmul	s0, s0, s1
	fmov	s1, w21
	str	s0, [sp, #16]
	fadd	s0, s0, s1
	fcvtzs	w10, s0
	sub	w10, w10, #4, lsl #12           // =16384
	strh	w10, [x9, x8, lsl #1]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB34_6
	b	.LBB34_1
.LBB34_7:                               // %for.end69
	ldp	x20, x19, [sp, #400]            // 16-byte Folded Reload
	ldp	x28, x21, [sp, #384]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #368]            // 16-byte Folded Reload
	add	sp, sp, #416                    // =416
	ret
.Lfunc_end34:
	.size	forward_DCT_float, .Lfunc_end34-forward_DCT_float
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_make_c_derived_tbl         // -- Begin function jpeg_make_c_derived_tbl
	.p2align	2
	.type	jpeg_make_c_derived_tbl,@function
jpeg_make_c_derived_tbl:                // @jpeg_make_c_derived_tbl
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x28, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #1344                   // =1344
	.cfi_def_cfa w29, 32
	.cfi_offset w28, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x2, x1, [x29, #-16]
	ldr	x8, [x2]
	cbnz	x8, .LBB35_2
// %bb.1:                               // %if.then
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #1280
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-16]
	str	x0, [x8]
.LBB35_2:                               // %if.end
	ldur	x8, [x29, #-16]
	ldr	x9, [x8]
	mov	w8, #1
	stur	wzr, [x29, #-28]
	stur	w8, [x29, #-36]
	stur	x9, [x29, #-24]
	add	x9, sp, #1040                   // =1040
	b	.LBB35_4
.LBB35_3:                               // %for.inc10
                                        //   in Loop: Header=BB35_4 Depth=1
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-36]
.LBB35_4:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB35_6 Depth 2
	ldur	w10, [x29, #-36]
	cmp	w10, #16                        // =16
	b.gt	.LBB35_8
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB35_4 Depth=1
	stur	w8, [x29, #-32]
.LBB35_6:                               // %for.cond2
                                        //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x11, [x29, #-8]
	ldp	w10, w12, [x29, #-36]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	ldrb	w11, [x11, x10]
	cmp	w12, w11
	b.gt	.LBB35_3
// %bb.7:                               // %for.body5
                                        //   in Loop: Header=BB35_6 Depth=2
	ldp	w12, w11, [x29, #-32]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	add	w13, w11, #1                    // =1
	strb	w10, [x9, x11]
	add	w10, w12, #1                    // =1
	stp	w10, w13, [x29, #-32]
	b	.LBB35_6
.LBB35_8:                               // %for.end12
	ldursw	x9, [x29, #-28]
	add	x8, sp, #1040                   // =1040
	str	wzr, [sp, #8]
	stur	wzr, [x29, #-28]
	strb	wzr, [x8, x9]
	ldrb	w10, [sp, #1040]
	stp	w10, w9, [x29, #-44]
	add	x9, sp, #12                     // =12
	ldursw	x10, [x29, #-28]
	ldrb	w10, [x8, x10]
	cbnz	w10, .LBB35_10
	b	.LBB35_12
.LBB35_9:                               // %while.body25
                                        //   in Loop: Header=BB35_10 Depth=1
	ldursw	x11, [x29, #-28]
	ldr	w12, [sp, #8]
	add	w13, w11, #1                    // =1
	str	w10, [x9, x11, lsl #2]
	add	w10, w12, #1                    // =1
	stur	w13, [x29, #-28]
	str	w10, [sp, #8]
.LBB35_10:                              // %while.cond19
                                        // =>This Inner Loop Header: Depth=1
	ldursw	x10, [x29, #-28]
	ldur	w12, [x29, #-44]
	ldrb	w11, [x8, x10]
	ldr	w10, [sp, #8]
	cmp	w11, w12
	b.eq	.LBB35_9
// %bb.11:                              // %while.end
                                        //   in Loop: Header=BB35_10 Depth=1
	ldur	w11, [x29, #-44]
	lsl	w10, w10, #1
	str	w10, [sp, #8]
	add	w10, w11, #1                    // =1
	stur	w10, [x29, #-44]
	ldursw	x10, [x29, #-28]
	ldrb	w10, [x8, x10]
	cbnz	w10, .LBB35_10
.LBB35_12:                              // %while.end31
	ldur	x9, [x29, #-24]
	movi	v0.2d, #0000000000000000
	add	x8, sp, #12                     // =12
	str	q0, [x9, #1264]
	str	q0, [x9, #1248]
	str	q0, [x9, #1232]
	str	q0, [x9, #1216]
	str	q0, [x9, #1200]
	str	q0, [x9, #1184]
	str	q0, [x9, #1168]
	str	q0, [x9, #1152]
	str	q0, [x9, #1136]
	str	q0, [x9, #1120]
	str	q0, [x9, #1104]
	str	q0, [x9, #1088]
	str	q0, [x9, #1072]
	str	q0, [x9, #1056]
	str	q0, [x9, #1040]
	str	q0, [x9, #1024]
	add	x9, sp, #1040                   // =1040
	stur	wzr, [x29, #-28]
	mov	w10, wzr
	ldur	w11, [x29, #-40]
	cmp	w10, w11
	b.ge	.LBB35_14
.LBB35_13:                              // %for.body35
                                        // =>This Inner Loop Header: Depth=1
	ldursw	x10, [x29, #-28]
	ldur	x11, [x29, #-8]
	ldur	x12, [x29, #-24]
	ldr	w13, [x8, x10, lsl #2]
	add	x10, x11, x10
	ldrb	w10, [x10, #17]
	str	w13, [x12, x10, lsl #2]
	ldursw	x10, [x29, #-28]
	ldur	x11, [x29, #-8]
	ldur	x12, [x29, #-24]
	add	x11, x11, x10
	ldrb	w11, [x11, #17]
	ldrb	w10, [x9, x10]
	add	x11, x12, x11
	strb	w10, [x11, #1024]
	ldur	w10, [x29, #-28]
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-28]
	mov	w10, w10
	ldur	w11, [x29, #-40]
	cmp	w10, w11
	b.lt	.LBB35_13
.LBB35_14:                              // %for.end52
	add	sp, sp, #1344                   // =1344
	ldr	x28, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end35:
	.size	jpeg_make_c_derived_tbl, .Lfunc_end35-jpeg_make_c_derived_tbl
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_gen_optimal_table          // -- Begin function jpeg_gen_optimal_table
	.p2align	2
	.type	jpeg_gen_optimal_table,@function
jpeg_gen_optimal_table:                 // @jpeg_gen_optimal_table
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x28, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #2160                   // =2160
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w28, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	sub	x19, x29, #64                   // =64
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	movi	v0.2d, #0000000000000000
	add	x0, sp, #1068                   // =1068
	mov	w2, #1028
	mov	w1, wzr
	stp	q0, q0, [x19]
	sturb	wzr, [x29, #-32]
	bl	memset
	add	x8, sp, #40                     // =40
	mov	w9, #-1
	str	wzr, [sp, #24]
	mov	w10, wzr
	cmp	w10, #256                       // =256
	b.gt	.LBB36_2
.LBB36_1:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x10, [sp, #24]
	str	w9, [x8, x10, lsl #2]
	add	w10, w10, #1                    // =1
	str	w10, [sp, #24]
	mov	w10, w10
	cmp	w10, #256                       // =256
	b.le	.LBB36_1
.LBB36_2:                               // %for.end
	ldur	x11, [x29, #-24]
	mov	w8, #51712
	mov	w12, #1
	movk	w8, #15258, lsl #16
	mov	w9, #-1
	add	x10, sp, #1068                  // =1068
	str	x12, [x11, #2048]
	add	x11, sp, #40                    // =40
.LBB36_3:                               // %for.cond3
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB36_5 Depth 2
                                        //     Child Loop BB36_11 Depth 2
                                        //     Child Loop BB36_18 Depth 2
                                        //     Child Loop BB36_21 Depth 2
	str	w9, [sp, #36]
	str	x8, [sp, #8]
	str	wzr, [sp, #24]
	b	.LBB36_5
.LBB36_4:                               // %for.inc14
                                        //   in Loop: Header=BB36_5 Depth=2
	ldr	w12, [sp, #24]
	add	w12, w12, #1                    // =1
	str	w12, [sp, #24]
.LBB36_5:                               // %for.cond4
                                        //   Parent Loop BB36_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [sp, #24]
	cmp	w12, #256                       // =256
	b.gt	.LBB36_9
// %bb.6:                               // %for.body6
                                        //   in Loop: Header=BB36_5 Depth=2
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #24]
	ldr	x12, [x12, x13, lsl #3]
	cbz	x12, .LBB36_4
// %bb.7:                               // %land.lhs.true
                                        //   in Loop: Header=BB36_5 Depth=2
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #24]
	ldr	x12, [x12, x13, lsl #3]
	ldr	x13, [sp, #8]
	cmp	x12, x13
	b.gt	.LBB36_4
// %bb.8:                               // %if.then
                                        //   in Loop: Header=BB36_5 Depth=2
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #24]
	ldr	x12, [x12, x13, lsl #3]
	str	w13, [sp, #36]
	str	x12, [sp, #8]
	b	.LBB36_4
.LBB36_9:                               // %for.end16
                                        //   in Loop: Header=BB36_3 Depth=1
	str	w9, [sp, #32]
	str	x8, [sp, #8]
	str	wzr, [sp, #24]
	b	.LBB36_11
.LBB36_10:                              // %for.inc33
                                        //   in Loop: Header=BB36_11 Depth=2
	ldr	w12, [sp, #24]
	add	w12, w12, #1                    // =1
	str	w12, [sp, #24]
.LBB36_11:                              // %for.cond17
                                        //   Parent Loop BB36_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [sp, #24]
	cmp	w12, #256                       // =256
	b.gt	.LBB36_16
// %bb.12:                              // %for.body19
                                        //   in Loop: Header=BB36_11 Depth=2
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #24]
	ldr	x12, [x12, x13, lsl #3]
	cbz	x12, .LBB36_10
// %bb.13:                              // %land.lhs.true23
                                        //   in Loop: Header=BB36_11 Depth=2
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #24]
	ldr	x12, [x12, x13, lsl #3]
	ldr	x13, [sp, #8]
	cmp	x12, x13
	b.gt	.LBB36_10
// %bb.14:                              // %land.lhs.true27
                                        //   in Loop: Header=BB36_11 Depth=2
	ldr	w12, [sp, #24]
	ldr	w13, [sp, #36]
	cmp	w12, w13
	b.eq	.LBB36_10
// %bb.15:                              // %if.then29
                                        //   in Loop: Header=BB36_11 Depth=2
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #24]
	ldr	x12, [x12, x13, lsl #3]
	str	w13, [sp, #32]
	str	x12, [sp, #8]
	b	.LBB36_10
.LBB36_16:                              // %for.end35
                                        //   in Loop: Header=BB36_3 Depth=1
	ldr	w12, [sp, #32]
	tbnz	w12, #31, .LBB36_23
// %bb.17:                              // %if.end38
                                        //   in Loop: Header=BB36_3 Depth=1
	ldpsw	x13, x14, [sp, #32]
	ldur	x12, [x29, #-24]
	lsl	x14, x14, #3
	ldr	x13, [x12, x13, lsl #3]
	ldr	x15, [x12, x14]
	add	x13, x15, x13
	str	x13, [x12, x14]
	ldur	x12, [x29, #-24]
	ldrsw	x13, [sp, #32]
	str	xzr, [x12, x13, lsl #3]
	ldr	w12, [sp, #36]
.LBB36_18:                              // %while.cond
                                        //   Parent Loop BB36_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsw	x13, [sp, #36]
	sbfiz	x12, x12, #2, #32
	ldr	w14, [x10, x12]
	ldr	w13, [x11, x13, lsl #2]
	add	w14, w14, #1                    // =1
	str	w14, [x10, x12]
	tbnz	w13, #31, .LBB36_20
// %bb.19:                              // %while.body
                                        //   in Loop: Header=BB36_18 Depth=2
	ldrsw	x12, [sp, #36]
	ldr	w12, [x11, x12, lsl #2]
	str	w12, [sp, #36]
	b	.LBB36_18
.LBB36_20:                              // %while.end
                                        //   in Loop: Header=BB36_3 Depth=1
	ldp	w12, w13, [sp, #32]
                                        // kill: def $w13 killed $w13 def $x13
	sxtw	x13, w13
	str	w12, [x11, x13, lsl #2]
.LBB36_21:                              // %while.cond61
                                        //   Parent Loop BB36_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsw	x13, [sp, #32]
	sbfiz	x12, x12, #2, #32
	ldr	w14, [x10, x12]
	ldr	w13, [x11, x13, lsl #2]
	add	w14, w14, #1                    // =1
	str	w14, [x10, x12]
	tbnz	w13, #31, .LBB36_3
// %bb.22:                              // %while.body65
                                        //   in Loop: Header=BB36_21 Depth=2
	ldrsw	x12, [sp, #32]
	ldr	w12, [x11, x12, lsl #2]
	str	w12, [sp, #32]
	b	.LBB36_21
.LBB36_23:                              // %for.end72
	add	x20, sp, #1068                  // =1068
	mov	w21, #38
	sub	x22, x29, #64                   // =64
	str	wzr, [sp, #24]
	b	.LBB36_26
.LBB36_24:                              // %if.end85
                                        //   in Loop: Header=BB36_26 Depth=1
	ldrsw	x8, [sp, #24]
	ldrsw	x8, [x20, x8, lsl #2]
	ldrb	w9, [x22, x8]
	add	w9, w9, #1                      // =1
	strb	w9, [x22, x8]
.LBB36_25:                              // %for.inc92
                                        //   in Loop: Header=BB36_26 Depth=1
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
.LBB36_26:                              // %for.cond73
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #24]
	cmp	w8, #256                        // =256
	b.gt	.LBB36_30
// %bb.27:                              // %for.body75
                                        //   in Loop: Header=BB36_26 Depth=1
	ldrsw	x8, [sp, #24]
	ldr	w8, [x20, x8, lsl #2]
	cbz	w8, .LBB36_25
// %bb.28:                              // %if.then79
                                        //   in Loop: Header=BB36_26 Depth=1
	ldrsw	x8, [sp, #24]
	ldr	w8, [x20, x8, lsl #2]
	cmp	w8, #33                         // =33
	b.lt	.LBB36_24
// %bb.29:                              // %if.then83
                                        //   in Loop: Header=BB36_26 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w21, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB36_24
.LBB36_30:                              // %for.end94
	mov	w8, #32
	str	w8, [sp, #24]
	sub	x8, x29, #64                    // =64
	b	.LBB36_32
.LBB36_31:                              // %for.inc131
                                        //   in Loop: Header=BB36_32 Depth=1
	sub	w9, w9, #1                      // =1
	str	w9, [sp, #24]
.LBB36_32:                              // %for.cond95
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB36_34 Depth 2
                                        //       Child Loop BB36_36 Depth 3
	ldr	w9, [sp, #24]
	cmp	w9, #17                         // =17
	b.ge	.LBB36_34
	b	.LBB36_37
.LBB36_33:                              // %while.end111
                                        //   in Loop: Header=BB36_34 Depth=2
	ldpsw	x11, x9, [sp, #20]
	add	x9, x8, x9
	ldrb	w10, [x9]
	ldurb	w12, [x9, #-1]
	sub	w10, w10, #2                    // =2
	strb	w10, [x9]
	add	x10, x11, x8
	add	w11, w12, #1                    // =1
	sturb	w11, [x9, #-1]
	ldrb	w9, [x10, #1]
	ldrb	w11, [x10]
	add	w9, w9, #2                      // =2
	strb	w9, [x10, #1]
	sub	w9, w11, #1                     // =1
	strb	w9, [x10]
.LBB36_34:                              // %while.cond98
                                        //   Parent Loop BB36_32 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB36_36 Depth 3
	ldrsw	x9, [sp, #24]
	ldrb	w10, [x8, x9]
	cmp	w10, #1                         // =1
	b.lt	.LBB36_31
// %bb.35:                              // %while.body103
                                        //   in Loop: Header=BB36_34 Depth=2
	sub	w9, w9, #2                      // =2
	str	w9, [sp, #20]
	ldrsw	x9, [sp, #20]
	ldrb	w9, [x8, x9]
	cbnz	w9, .LBB36_33
.LBB36_36:                              // %while.body110
                                        //   Parent Loop BB36_32 Depth=1
                                        //     Parent Loop BB36_34 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w9, [sp, #20]
	sub	w9, w9, #1                      // =1
	str	w9, [sp, #20]
	ldrsw	x9, [sp, #20]
	ldrb	w9, [x8, x9]
	cbz	w9, .LBB36_36
	b	.LBB36_33
.LBB36_37:
	sub	x8, x29, #64                    // =64
	ldrsw	x9, [sp, #24]
	ldrb	w10, [x8, x9]
	cbnz	w10, .LBB36_39
.LBB36_38:                              // %while.body140
                                        // =>This Inner Loop Header: Depth=1
	sub	w9, w9, #1                      // =1
	str	w9, [sp, #24]
	ldrsw	x9, [sp, #24]
	ldrb	w10, [x8, x9]
	cbz	w10, .LBB36_38
.LBB36_39:                              // %while.end142
	sub	x8, x29, #64                    // =64
	ldrb	w10, [x8, x9]
	ldur	x11, [x29, #-16]
	sub	w10, w10, #1                    // =1
	strb	w10, [x8, x9]
	ldurb	w8, [x29, #-48]
	ldr	q0, [x19]
	mov	w9, #1
	strb	w8, [x11, #16]
	add	x8, sp, #1068                   // =1068
	str	q0, [x11]
	stp	w9, wzr, [sp, #24]
	b	.LBB36_41
.LBB36_40:                              // %for.inc170
                                        //   in Loop: Header=BB36_41 Depth=1
	ldr	w9, [sp, #24]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #24]
.LBB36_41:                              // %for.cond149
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB36_44 Depth 2
	ldr	w9, [sp, #24]
	cmp	w9, #32                         // =32
	b.gt	.LBB36_47
// %bb.42:                              // %for.body152
                                        //   in Loop: Header=BB36_41 Depth=1
	str	wzr, [sp, #20]
	b	.LBB36_44
.LBB36_43:                              // %for.inc167
                                        //   in Loop: Header=BB36_44 Depth=2
	ldr	w9, [sp, #20]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #20]
.LBB36_44:                              // %for.cond153
                                        //   Parent Loop BB36_41 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w9, [sp, #20]
	cmp	w9, #255                        // =255
	b.gt	.LBB36_40
// %bb.45:                              // %for.body156
                                        //   in Loop: Header=BB36_44 Depth=2
	ldp	w9, w10, [sp, #20]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	ldr	w9, [x8, x9, lsl #2]
	cmp	w9, w10
	b.ne	.LBB36_43
// %bb.46:                              // %if.then161
                                        //   in Loop: Header=BB36_44 Depth=2
	ldur	x9, [x29, #-16]
	ldrsw	x10, [sp, #28]
	ldr	w11, [sp, #20]
	add	x9, x9, x10
	strb	w11, [x9, #17]
	ldr	w9, [sp, #28]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #28]
	b	.LBB36_43
.LBB36_47:                              // %for.end172
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #276]
	add	sp, sp, #2160                   // =2160
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x28, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end36:
	.size	jpeg_gen_optimal_table, .Lfunc_end36-jpeg_gen_optimal_table
	.cfi_endproc
                                        // -- End function
	.globl	jinit_huff_encoder              // -- Begin function jinit_huff_encoder
	.p2align	2
	.type	jinit_huff_encoder,@function
jinit_huff_encoder:                     // @jinit_huff_encoder
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #192
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_huff
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_huff
	str	x0, [x8, #488]
	mov	x8, x0
	str	x9, [x8]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB37_2
.LBB37_1:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #96]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #64]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #160]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #128]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB37_1
.LBB37_2:                               // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end37:
	.size	jinit_huff_encoder, .Lfunc_end37-jinit_huff_encoder
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_huff
	.type	start_pass_huff,@function
start_pass_huff:                        // @start_pass_huff
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #488]
	stur	x8, [x29, #-16]
	cbz	w1, .LBB38_2
// %bb.1:                               // %if.then
	adrp	x9, encode_mcu_gather
	add	x9, x9, :lo12:encode_mcu_gather
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	adrp	x9, finish_pass_gather
	add	x9, x9, :lo12:finish_pass_gather
	b	.LBB38_3
.LBB38_2:                               // %if.else
	adrp	x9, encode_mcu_huff
	add	x9, x9, :lo12:encode_mcu_huff
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	adrp	x9, finish_pass_huff
	add	x9, x9, :lo12:finish_pass_huff
.LBB38_3:                               // %if.end
	mov	w19, #49
	str	x9, [x8, #16]
	stur	wzr, [x29, #-20]
	b	.LBB38_6
.LBB38_4:                               // %if.end61
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	mov	w2, #2056
	mov	w1, wzr
	add	x8, x8, x9, lsl #3
	ldr	x0, [x8, #160]
	bl	memset
.LBB38_5:                               // %if.end76
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #36]
	ldur	w8, [x29, #-20]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-20]
.LBB38_6:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB38_23
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	ldr	x9, [x8, #320]
	str	x9, [sp, #8]
	ldp	w8, w9, [x9, #20]
	stp	w9, w8, [sp, #20]
	tbnz	w8, #31, .LBB38_11
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB38_6 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB38_11
// %bb.9:                               // %lor.lhs.false9
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #24]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #120]
	cbnz	x8, .LBB38_12
// %bb.10:                              // %lor.lhs.false9
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	w8, [x29, #-4]
	cbnz	w8, .LBB38_12
.LBB38_11:                              // %if.then14
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #24]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB38_12:                              // %if.end18
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	w8, [sp, #20]
	tbnz	w8, #31, .LBB38_16
// %bb.13:                              // %if.end18
                                        //   in Loop: Header=BB38_6 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB38_16
// %bb.14:                              // %lor.lhs.false22
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #152]
	cbnz	x8, .LBB38_17
// %bb.15:                              // %lor.lhs.false22
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	w8, [x29, #-4]
	cbnz	w8, .LBB38_17
.LBB38_16:                              // %if.then28
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB38_17:                              // %if.end37
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	w8, [x29, #-4]
	cbz	w8, .LBB38_22
// %bb.18:                              // %if.then39
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #24]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #128]
	cbnz	x8, .LBB38_20
// %bb.19:                              // %if.then43
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #2056
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #24]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #128]
.LBB38_20:                              // %if.end47
                                        //   in Loop: Header=BB38_6 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #24]
	mov	w2, #2056
	mov	w1, wzr
	add	x8, x8, x9, lsl #3
	ldr	x0, [x8, #128]
	bl	memset
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #160]
	cbnz	x8, .LBB38_4
// %bb.21:                              // %if.then54
                                        //   in Loop: Header=BB38_6 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #2056
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #160]
	b	.LBB38_4
.LBB38_22:                              // %if.else65
                                        //   in Loop: Header=BB38_6 Depth=1
	ldrsw	x8, [sp, #24]
	ldr	x0, [x29, #24]
	ldur	x9, [x29, #-16]
	lsl	x8, x8, #3
	add	x10, x0, x8
	ldr	x1, [x10, #120]
	add	x8, x9, x8
	add	x2, x8, #64                     // =64
	bl	jpeg_make_c_derived_tbl
	ldrsw	x8, [sp, #20]
	ldr	x0, [x29, #24]
	ldur	x9, [x29, #-16]
	lsl	x8, x8, #3
	add	x10, x0, x8
	ldr	x1, [x10, #152]
	add	x8, x9, x8
	add	x2, x8, #96                     // =96
	bl	jpeg_make_c_derived_tbl
	b	.LBB38_5
.LBB38_23:                              // %for.end
	ldur	x8, [x29, #-16]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	str	xzr, [x8, #24]
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #32]
	ldr	x8, [x29, #24]
	ldur	x9, [x29, #-16]
	ldr	w8, [x8, #272]
	str	w8, [x9, #56]
	ldur	x8, [x29, #-16]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	wzr, [x8, #60]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end38:
	.size	start_pass_huff, .Lfunc_end38-start_pass_huff
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_mcu_gather
	.type	encode_mcu_gather,@function
encode_mcu_gather:                      // @encode_mcu_gather
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #488]
	str	x8, [sp, #24]
	ldr	w8, [x0, #272]
	cbz	w8, .LBB39_7
// %bb.1:                               // %if.then
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #56]
	cbnz	w8, .LBB39_6
// %bb.2:                               // %if.then2
	str	wzr, [sp, #16]
.LBB39_3:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB39_5
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB39_3 Depth=1
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #36]
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	b	.LBB39_3
.LBB39_5:                               // %for.end
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w8, [x8, #272]
	str	w8, [x9, #56]
.LBB39_6:                               // %if.end
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #56]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #56]
.LBB39_7:                               // %if.end7
	str	wzr, [sp, #20]
.LBB39_8:                               // %for.cond8
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #20]
	ldr	w8, [x8, #360]
	cmp	w9, w8
	b.ge	.LBB39_10
// %bb.9:                               // %for.body10
                                        //   in Loop: Header=BB39_8 Depth=1
	ldp	x11, x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	ldr	x12, [sp, #24]
	add	x10, x8, x9, lsl #2
	ldrsw	x10, [x10, #364]
	str	w10, [sp, #16]
	add	x8, x8, x10, lsl #3
	ldr	x8, [x8, #320]
	add	x10, x12, x10, lsl #2
	str	x8, [sp, #8]
	ldr	x0, [x11, x9, lsl #3]
	ldpsw	x9, x8, [x8, #20]
	ldr	w1, [x10, #36]
	add	x9, x12, x9, lsl #3
	add	x8, x12, x8, lsl #3
	ldr	x2, [x9, #128]
	ldr	x3, [x8, #160]
	bl	htest_one_block
	ldur	x8, [x29, #-16]
	ldpsw	x10, x9, [sp, #16]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x9, [sp, #24]
	ldrsh	w8, [x8]
	add	x9, x9, x10, lsl #2
	str	w8, [x9, #36]
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	b	.LBB39_8
.LBB39_10:                              // %for.end36
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end39:
	.size	encode_mcu_gather, .Lfunc_end39-encode_mcu_gather
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass_gather
	.type	finish_pass_gather,@function
finish_pass_gather:                     // @finish_pass_gather
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x21, [sp, #96]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [x29, #24]
	ldr	x8, [x0, #488]
	add	x19, sp, #24                    // =24
	add	x20, sp, #8                     // =8
	mov	w21, #1
	stp	xzr, xzr, [sp, #24]
	stp	xzr, xzr, [sp, #8]
	stur	wzr, [x29, #-12]
	stur	x8, [x29, #-8]
	b	.LBB40_3
.LBB40_1:                               // %if.end23
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x8, [sp, #40]
	ldur	x9, [x29, #-8]
	ldursw	x10, [x29, #-20]
	ldr	x0, [x29, #24]
	ldr	x1, [x8]
	add	x8, x9, x10, lsl #3
	ldr	x2, [x8, #160]
	bl	jpeg_gen_optimal_table
	ldursw	x8, [x29, #-20]
	str	w21, [x20, x8, lsl #2]
.LBB40_2:                               // %for.inc
                                        //   in Loop: Header=BB40_3 Depth=1
	ldur	w8, [x29, #-12]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-12]
.LBB40_3:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB40_11
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	stur	x8, [x29, #-32]
	ldp	w9, w8, [x8, #20]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	stp	w8, w9, [x29, #-20]
	ldr	w9, [x19, x9, lsl #2]
	cbz	w9, .LBB40_6
// %bb.5:                               // %if.end13
                                        //   in Loop: Header=BB40_3 Depth=1
	ldursw	x8, [x29, #-20]
	ldr	w8, [x20, x8, lsl #2]
	cbnz	w8, .LBB40_2
	b	.LBB40_9
.LBB40_6:                               // %if.then
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-16]
	add	x8, x8, x9, lsl #3
	add	x9, x8, #120                    // =120
	str	x9, [sp, #40]
	ldr	x8, [x8, #120]
	cbnz	x8, .LBB40_8
// %bb.7:                               // %if.then8
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x0, [x29, #24]
	bl	jpeg_alloc_huff_table
	ldr	x8, [sp, #40]
	str	x0, [x8]
.LBB40_8:                               // %if.end
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x8, [sp, #40]
	ldur	x9, [x29, #-8]
	ldursw	x10, [x29, #-16]
	ldr	x0, [x29, #24]
	ldr	x1, [x8]
	add	x8, x9, x10, lsl #3
	ldr	x2, [x8, #128]
	bl	jpeg_gen_optimal_table
	ldursw	x8, [x29, #-16]
	str	w21, [x19, x8, lsl #2]
	ldursw	x8, [x29, #-20]
	ldr	w8, [x20, x8, lsl #2]
	cbnz	w8, .LBB40_2
.LBB40_9:                               // %if.then17
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	add	x9, x8, #152                    // =152
	str	x9, [sp, #40]
	ldr	x8, [x8, #152]
	cbnz	x8, .LBB40_1
// %bb.10:                              // %if.then21
                                        //   in Loop: Header=BB40_3 Depth=1
	ldr	x0, [x29, #24]
	bl	jpeg_alloc_huff_table
	ldr	x8, [sp, #40]
	str	x0, [x8]
	b	.LBB40_1
.LBB40_11:                              // %for.end
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	x21, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end40:
	.size	finish_pass_gather, .Lfunc_end40-finish_pass_gather
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_mcu_huff
	.type	encode_mcu_huff,@function
encode_mcu_huff:                        // @encode_mcu_huff
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	str	x19, [sp, #128]                 // 8-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #488]
	stur	x8, [x29, #-24]
	ldr	x9, [x0, #32]
	ldr	x10, [x9]
	ldr	x9, [x0, #32]
	ldr	x9, [x9, #8]
	stp	x10, x9, [sp, #32]
	ldur	q0, [x8, #40]
	ldur	q1, [x8, #24]
	mov	x8, x0
	mov	x9, x0
	str	x8, [sp, #80]
	stp	q1, q0, [sp, #48]
	ldr	w8, [x9, #272]
	cbz	w8, .LBB41_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #56]
	cbnz	w8, .LBB41_3
// %bb.2:                               // %if.then6
	ldur	x8, [x29, #-24]
	add	x0, sp, #32                     // =32
	ldr	w1, [x8, #60]
	bl	emit_restart
	cbz	w0, .LBB41_7
.LBB41_3:                               // %if.end10
	add	x19, sp, #32                    // =32
	str	wzr, [x29, #24]
.LBB41_4:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [x29, #24]
	ldr	w8, [x8, #360]
	cmp	w9, w8
	b.ge	.LBB41_8
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB41_4 Depth=1
	ldp	x11, x8, [x29, #-16]
	ldrsw	x9, [x29, #24]
	ldur	x12, [x29, #-24]
	add	x0, sp, #32                     // =32
	add	x10, x8, x9, lsl #2
	ldrsw	x10, [x10, #364]
	str	w10, [sp, #28]
	add	x8, x8, x10, lsl #3
	ldr	x8, [x8, #320]
	add	x10, x19, x10, lsl #2
	ldr	w2, [x10, #28]
	str	x8, [sp, #16]
	ldr	x1, [x11, x9, lsl #3]
	ldpsw	x9, x8, [x8, #20]
	add	x9, x12, x9, lsl #3
	add	x8, x12, x8, lsl #3
	ldr	x3, [x9, #64]
	ldr	x4, [x8, #96]
	bl	encode_one_block
	cbz	w0, .LBB41_7
// %bb.6:                               // %if.end27
                                        //   in Loop: Header=BB41_4 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [x29, #24]
	ldrsw	x10, [sp, #28]
	ldr	x8, [x8, x9, lsl #3]
	add	x10, x19, x10, lsl #2
	add	w9, w9, #1                      // =1
	ldrsh	w8, [x8]
	str	w9, [x29, #24]
	str	w8, [x10, #28]
	b	.LBB41_4
.LBB41_7:                               // %if.then8
	str	wzr, [x29, #28]
	mov	w8, #1
	b	.LBB41_13
.LBB41_8:                               // %for.end
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #32]
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #40]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldur	x8, [x29, #-24]
	ldp	q1, q0, [sp, #48]
	stur	q0, [x8, #40]
	stur	q1, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #272]
	cbz	w8, .LBB41_12
// %bb.9:                               // %if.then46
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #56]
	cbnz	w8, .LBB41_11
// %bb.10:                              // %if.then50
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	w8, [x8, #272]
	str	w8, [x9, #56]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #60]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #60]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #60]
	and	w9, w9, #0x7
	str	w9, [x8, #60]
.LBB41_11:                              // %if.end56
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #56]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #56]
.LBB41_12:                              // %if.end58
	mov	w8, #1
	str	w8, [x29, #28]
.LBB41_13:                              // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #128]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	str	w8, [sp, #12]
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end41:
	.size	encode_mcu_huff, .Lfunc_end41-encode_mcu_huff
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass_huff
	.type	finish_pass_huff,@function
finish_pass_huff:                       // @finish_pass_huff
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #488]
	stp	x8, x0, [x29, #-16]
	ldr	x9, [x0, #32]
	ldr	x10, [x9]
	ldr	x9, [x0, #32]
	ldr	x9, [x9, #8]
	stp	x10, x9, [sp, #8]
	ldur	q0, [x8, #24]
	ldur	q1, [x8, #40]
	str	x0, [sp, #56]
	add	x0, sp, #8                      // =8
	stur	q0, [sp, #24]
	stur	q1, [sp, #40]
	bl	flush_bits
	cbnz	w0, .LBB42_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #22
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB42_2:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #16]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	ldur	q0, [sp, #40]
	ldur	q1, [sp, #24]
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	stur	q0, [x8, #40]
	stur	q1, [x8, #24]
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end42:
	.size	finish_pass_huff, .Lfunc_end42-finish_pass_huff
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function flush_bits
	.type	flush_bits,@function
flush_bits:                             // @flush_bits
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #127
	mov	w2, #7
	str	x0, [sp]
	bl	emit_bits
	cbz	w0, .LBB43_2
// %bb.1:                               // %if.end
	ldr	x8, [sp]
	mov	w9, #1
	str	xzr, [x8, #16]
	ldr	x8, [sp]
	str	wzr, [x8, #24]
	stur	w9, [x29, #-4]
	mov	w0, w9
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB43_2:                               // %if.then
	stur	wzr, [x29, #-4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end43:
	.size	flush_bits, .Lfunc_end43-flush_bits
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_bits
	.type	emit_bits,@function
emit_bits:                              // @emit_bits
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	w8, w1
	stur	x0, [x29, #-8]
	str	w1, [x29, #24]
	stur	w2, [x29, #-12]
	str	x8, [sp, #24]
	ldr	w8, [x0, #24]
	str	w8, [sp, #20]
	cbnz	w2, .LBB44_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #39
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB44_2:                               // %if.end
	ldur	w8, [x29, #-12]
	ldr	w9, [sp, #20]
	ldr	x10, [sp, #24]
	mov	w19, #1
	mov	w11, #24
	add	w9, w9, w8
	lsl	x8, x19, x8
	sub	x8, x8, #1                      // =1
	and	x8, x10, x8
	ldur	x10, [x29, #-8]
	str	w9, [sp, #20]
	sub	w9, w11, w9
	lsl	x8, x8, x9
	str	x8, [sp, #24]
	ldr	x9, [x10, #16]
	orr	x8, x8, x9
	str	x8, [sp, #24]
	b	.LBB44_4
.LBB44_3:                               // %if.end37
                                        //   in Loop: Header=BB44_4 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #20]
	str	wzr, [sp, #12]
	lsl	x8, x8, #8
	sub	w9, w9, #8                      // =8
	str	x8, [sp, #24]
	str	w9, [sp, #20]
	mov	w8, wzr
	cbnz	w8, .LBB44_12
.LBB44_4:                               // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #20]
	cmp	w8, #8                          // =8
	b.lt	.LBB44_11
// %bb.5:                               // %while.body
                                        //   in Loop: Header=BB44_4 Depth=1
	ldrb	w8, [sp, #26]
	ldur	x9, [x29, #-8]
	str	w8, [sp, #16]
	ldr	x10, [x9]
	add	x11, x10, #1                    // =1
	str	x11, [x9]
	strb	w8, [x10]
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #8]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	b.ne	.LBB44_7
// %bb.6:                               // %if.then18
                                        //   in Loop: Header=BB44_4 Depth=1
	ldur	x0, [x29, #-8]
	bl	dump_buffer
	cbz	w0, .LBB44_10
.LBB44_7:                               // %if.end21
                                        //   in Loop: Header=BB44_4 Depth=1
	ldr	w8, [sp, #16]
	cmp	w8, #255                        // =255
	b.ne	.LBB44_3
// %bb.8:                               // %if.then24
                                        //   in Loop: Header=BB44_4 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [x8]
	add	x10, x9, #1                     // =1
	str	x10, [x8]
	strb	wzr, [x9]
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #8]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	b.ne	.LBB44_3
// %bb.9:                               // %if.then31
                                        //   in Loop: Header=BB44_4 Depth=1
	ldur	x0, [x29, #-8]
	bl	dump_buffer
	cbnz	w0, .LBB44_3
.LBB44_10:                              // %if.then19
                                        //   in Loop: Header=BB44_4 Depth=1
	str	wzr, [x29, #28]
	str	w19, [sp, #12]
	mov	w8, w19
	cbz	w8, .LBB44_4
	b	.LBB44_12
.LBB44_11:                              // %while.end
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-8]
	mov	w10, #1
	str	x8, [x9, #16]
	ldr	w8, [sp, #20]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #24]
	str	w10, [x29, #28]
	str	w10, [sp, #12]
.LBB44_12:                              // %cleanup44
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end44:
	.size	emit_bits, .Lfunc_end44-emit_bits
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function dump_buffer
	.type	dump_buffer,@function
dump_buffer:                            // @dump_buffer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #48]
	ldr	x8, [x8, #32]
	stp	x8, x0, [sp, #8]
	ldr	x8, [x8, #24]
	ldr	x0, [x0, #48]
	blr	x8
	cbz	w0, .LBB45_2
// %bb.1:                               // %if.end
	ldp	x8, x9, [sp, #8]
	mov	w10, #1
	ldr	x8, [x8]
	str	x8, [x9]
	ldp	x8, x9, [sp, #8]
	ldr	x8, [x8, #8]
	str	x8, [x9, #8]
	stur	w10, [x29, #-4]
	str	w10, [sp, #4]
	mov	w0, w10
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB45_2:                               // %if.then
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end45:
	.size	dump_buffer, .Lfunc_end45-dump_buffer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_restart
	.type	emit_restart,@function
emit_restart:                           // @emit_restart
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #16]
	str	w1, [sp, #12]
	bl	flush_bits
	cbz	w0, .LBB46_8
// %bb.1:                               // %if.end
	ldr	x8, [sp, #16]
	mov	w10, #255
	ldr	x9, [x8]
	add	x11, x9, #1                     // =1
	str	x11, [x8]
	strb	w10, [x9]
	ldr	x8, [sp, #16]
	ldr	x9, [x8, #8]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	b.ne	.LBB46_3
// %bb.2:                               // %if.then1
	ldr	x0, [sp, #16]
	bl	dump_buffer
	cbz	w0, .LBB46_8
.LBB46_3:                               // %if.end6
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	x10, [x8]
	add	w9, w9, #208                    // =208
	add	x11, x10, #1                    // =1
	str	x11, [x8]
	strb	w9, [x10]
	ldr	x8, [sp, #16]
	ldr	x9, [x8, #8]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	b.ne	.LBB46_5
// %bb.4:                               // %if.then13
	ldr	x0, [sp, #16]
	bl	dump_buffer
	cbz	w0, .LBB46_8
.LBB46_5:                               // %if.end18
	str	wzr, [sp, #8]
.LBB46_6:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #8]
	ldr	x8, [x8, #48]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB46_9
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB46_6 Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #8]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #28]
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
	b	.LBB46_6
.LBB46_8:                               // %if.then
	stur	wzr, [x29, #-4]
	mov	w8, #1
	b	.LBB46_10
.LBB46_9:                               // %for.end
	mov	w8, #1
	stur	w8, [x29, #-4]
.LBB46_10:                              // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w8, [sp, #4]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end46:
	.size	emit_restart, .Lfunc_end46-emit_restart
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_one_block
	.type	encode_one_block,@function
encode_one_block:                       // @encode_one_block
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-24]
	stur	w2, [x29, #-28]
	stp	x4, x3, [sp, #32]
	ldrsh	w8, [x1]
	subs	w8, w8, w2
	stp	w8, w8, [sp, #24]
	b.pl	.LBB47_2
// %bb.1:                               // %if.then
	ldp	w9, w8, [sp, #24]
	neg	w8, w8
	sub	w9, w9, #1                      // =1
	stp	w9, w8, [sp, #24]
.LBB47_2:                               // %if.end
	str	wzr, [sp, #20]
	ldr	w8, [sp, #28]
	cbz	w8, .LBB47_4
.LBB47_3:                               // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #28]
	add	w8, w8, #1                      // =1
	asr	w9, w9, #1
	str	w8, [sp, #20]
	str	w9, [sp, #28]
	mov	w8, w9
	cbnz	w8, .LBB47_3
.LBB47_4:                               // %while.end
	ldr	x8, [sp, #40]
	ldrsw	x9, [sp, #20]
	ldur	x0, [x29, #-16]
	ldr	w1, [x8, x9, lsl #2]
	add	x8, x8, x9
	ldrb	w2, [x8, #1024]
	bl	emit_bits
	cbz	w0, .LBB47_24
// %bb.5:                               // %if.end9
	ldr	w8, [sp, #20]
	cbz	w8, .LBB47_7
// %bb.6:                               // %if.then11
	ldur	x0, [x29, #-16]
	ldp	w2, w1, [sp, #20]
	bl	emit_bits
	cbz	w0, .LBB47_24
.LBB47_7:                               // %if.end16
	adrp	x20, jpeg_natural_order
	mov	w19, #1
	add	x20, x20, :lo12:jpeg_natural_order
	stp	wzr, w19, [sp, #12]
	ldr	w8, [sp, #16]
	cmp	w8, #63                         // =63
	b.gt	.LBB47_21
.LBB47_8:                               // %for.body
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB47_10 Depth 2
                                        //     Child Loop BB47_15 Depth 2
	ldrsw	x8, [sp, #16]
	ldur	x9, [x29, #-24]
	ldrsw	x8, [x20, x8, lsl #2]
	ldrsh	w8, [x9, x8, lsl #1]
	str	w8, [sp, #28]
	cbz	w8, .LBB47_19
// %bb.9:                               // %while.cond28
                                        //   in Loop: Header=BB47_8 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #16                         // =16
	b.lt	.LBB47_12
.LBB47_10:                              // %while.body31
                                        //   Parent Loop BB47_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	w1, [x8, #960]
	ldrb	w2, [x8, #1264]
	bl	emit_bits
	cbz	w0, .LBB47_24
// %bb.11:                              // %if.end40
                                        //   in Loop: Header=BB47_10 Depth=2
	ldr	w8, [sp, #12]
	sub	w8, w8, #16                     // =16
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #16                         // =16
	b.ge	.LBB47_10
.LBB47_12:                              // %while.end42
                                        //   in Loop: Header=BB47_8 Depth=1
	ldr	w8, [sp, #28]
	str	w8, [sp, #24]
	tbz	w8, #31, .LBB47_14
// %bb.13:                              // %if.then45
                                        //   in Loop: Header=BB47_8 Depth=1
	ldp	w9, w8, [sp, #24]
	neg	w8, w8
	sub	w9, w9, #1                      // =1
	stp	w9, w8, [sp, #24]
.LBB47_14:                              // %if.end48
                                        //   in Loop: Header=BB47_8 Depth=1
	str	w19, [sp, #20]
	ldr	w8, [sp, #28]
	asr	w8, w8, #1
	str	w8, [sp, #28]
	cbz	w8, .LBB47_16
.LBB47_15:                              // %while.body52
                                        //   Parent Loop BB47_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	ldr	w8, [sp, #28]
	asr	w8, w8, #1
	str	w8, [sp, #28]
	cbnz	w8, .LBB47_15
.LBB47_16:                              // %while.end54
                                        //   in Loop: Header=BB47_8 Depth=1
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #20]
	ldr	x10, [sp, #32]
	ldur	x0, [x29, #-16]
	add	w8, w9, w8, lsl #4
	str	w8, [sp, #8]
	add	x9, x10, w8, sxtw
	ldr	w1, [x10, w8, sxtw #2]
	ldrb	w2, [x9, #1024]
	bl	emit_bits
	cbz	w0, .LBB47_24
// %bb.17:                              // %if.end65
                                        //   in Loop: Header=BB47_8 Depth=1
	ldur	x0, [x29, #-16]
	ldp	w2, w1, [sp, #20]
	bl	emit_bits
	cbz	w0, .LBB47_24
// %bb.18:                              // %if.end69
                                        //   in Loop: Header=BB47_8 Depth=1
	str	wzr, [sp, #12]
	b	.LBB47_20
.LBB47_19:                              // %if.then26
                                        //   in Loop: Header=BB47_8 Depth=1
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB47_20:                              // %for.inc
                                        //   in Loop: Header=BB47_8 Depth=1
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB47_8
.LBB47_21:                              // %for.end
	ldr	w8, [sp, #12]
	cmp	w8, #1                          // =1
	b.lt	.LBB47_23
// %bb.22:                              // %if.then74
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	w1, [x8]
	ldrb	w2, [x8, #1024]
	bl	emit_bits
	cbz	w0, .LBB47_24
.LBB47_23:                              // %if.end84
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB47_25
.LBB47_24:                              // %if.then8
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB47_25:                              // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	str	w8, [sp, #4]
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end47:
	.size	encode_one_block, .Lfunc_end47-encode_one_block
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function htest_one_block
	.type	htest_one_block,@function
htest_one_block:                        // @htest_one_block
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa_offset 48
	str	x0, [sp, #40]
	str	w1, [sp, #36]
	stp	x3, x2, [sp, #16]
	ldrsh	w8, [x0]
	subs	w8, w8, w1
	str	w8, [sp, #12]
	b.pl	.LBB48_2
// %bb.1:                               // %if.then
	ldr	w8, [sp, #12]
	neg	w8, w8
	str	w8, [sp, #12]
.LBB48_2:                               // %if.end
	str	wzr, [sp, #8]
	ldr	w8, [sp, #12]
	cbz	w8, .LBB48_4
.LBB48_3:                               // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [sp, #8]
	add	w8, w8, #1                      // =1
	asr	w9, w9, #1
	stp	w8, w9, [sp, #8]
	ldr	w8, [sp, #12]
	cbnz	w8, .LBB48_3
.LBB48_4:                               // %while.end
	ldrsw	x8, [sp, #8]
	ldr	x9, [sp, #24]
	lsl	x10, x8, #3
	ldr	x11, [x9, x10]
	mov	w8, #1
	add	x11, x11, #1                    // =1
	str	x11, [x9, x10]
	adrp	x9, jpeg_natural_order
	add	x9, x9, :lo12:jpeg_natural_order
	stp	wzr, w8, [sp]
	b	.LBB48_7
.LBB48_5:                               // %while.end34
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp]
	ldr	w11, [sp, #8]
	ldr	x12, [sp, #16]
	add	w10, w11, w10, lsl #4
	sbfiz	x10, x10, #3, #32
	ldr	x11, [x12, x10]
	add	x11, x11, #1                    // =1
	str	x11, [x12, x10]
	str	wzr, [sp]
.LBB48_6:                               // %for.inc
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp, #4]
	add	w10, w10, #1                    // =1
	str	w10, [sp, #4]
.LBB48_7:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB48_10 Depth 2
                                        //     Child Loop BB48_14 Depth 2
	ldr	w10, [sp, #4]
	cmp	w10, #63                        // =63
	b.gt	.LBB48_16
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB48_7 Depth=1
	ldrsw	x10, [sp, #4]
	ldr	x11, [sp, #40]
	ldrsw	x10, [x9, x10, lsl #2]
	ldrsh	w10, [x11, x10, lsl #1]
	str	w10, [sp, #12]
	cbz	w10, .LBB48_15
// %bb.9:                               // %while.cond16
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp]
	cmp	w10, #16                        // =16
	b.lt	.LBB48_11
.LBB48_10:                              // %while.body19
                                        //   Parent Loop BB48_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x10, [sp, #16]
	ldr	x11, [x10, #1920]
	add	x11, x11, #1                    // =1
	str	x11, [x10, #1920]
	ldr	w10, [sp]
	sub	w10, w10, #16                   // =16
	str	w10, [sp]
	mov	w10, w10
	cmp	w10, #16                        // =16
	b.ge	.LBB48_10
.LBB48_11:                              // %while.end23
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp, #12]
	tbz	w10, #31, .LBB48_13
// %bb.12:                              // %if.then26
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp, #12]
	neg	w10, w10
	str	w10, [sp, #12]
.LBB48_13:                              // %if.end28
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp, #12]
	asr	w10, w10, #1
	stp	w8, w10, [sp, #8]
	cbz	w10, .LBB48_5
.LBB48_14:                              // %while.body32
                                        //   Parent Loop BB48_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w10, [sp, #8]
	add	w11, w10, #1                    // =1
	ldr	w10, [sp, #12]
	asr	w10, w10, #1
	stp	w11, w10, [sp, #8]
	cbnz	w10, .LBB48_14
	b	.LBB48_5
.LBB48_15:                              // %if.then14
                                        //   in Loop: Header=BB48_7 Depth=1
	ldr	w10, [sp]
	add	w10, w10, #1                    // =1
	str	w10, [sp]
	b	.LBB48_6
.LBB48_16:                              // %for.end
	ldr	w8, [sp]
	cmp	w8, #1                          // =1
	b.lt	.LBB48_18
// %bb.17:                              // %if.then42
	ldr	x8, [sp, #16]
	ldr	x9, [x8]
	add	x9, x9, #1                      // =1
	str	x9, [x8]
.LBB48_18:                              // %if.end45
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end48:
	.size	htest_one_block, .Lfunc_end48-htest_one_block
	.cfi_endproc
                                        // -- End function
	.globl	jinit_compress_master           // -- Begin function jinit_compress_master
	.p2align	2
	.type	jinit_compress_master,@function
jinit_compress_master:                  // @jinit_compress_master
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, wzr
	str	x0, [sp, #8]
	bl	jinit_c_master_control
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #248]
	cbnz	w8, .LBB49_2
// %bb.1:                               // %if.then
	ldr	x0, [sp, #8]
	bl	jinit_color_converter
	ldr	x0, [sp, #8]
	bl	jinit_downsampler
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	jinit_c_prep_controller
.LBB49_2:                               // %if.end
	ldr	x0, [sp, #8]
	bl	jinit_forward_dct
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #252]
	cbz	w9, .LBB49_4
// %bb.3:                               // %if.then2
	ldr	x8, [x8]
	mov	w9, #1
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	w8, [x0, #232]
	cmp	w8, #1                          // =1
	b.gt	.LBB49_6
	b	.LBB49_8
.LBB49_4:                               // %if.else
	ldr	w8, [x8, #300]
	ldr	x0, [sp, #8]
	cbz	w8, .LBB49_7
// %bb.5:                               // %if.then5
	bl	jinit_phuff_encoder
	ldr	x0, [sp, #8]
	ldr	w8, [x0, #232]
	cmp	w8, #1                          // =1
	b.le	.LBB49_8
.LBB49_6:
	mov	w1, #1
	b	.LBB49_9
.LBB49_7:                               // %if.else6
	bl	jinit_huff_encoder
	ldr	x0, [sp, #8]
	ldr	w8, [x0, #232]
	cmp	w8, #1                          // =1
	b.gt	.LBB49_6
.LBB49_8:                               // %lor.rhs
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #256]
	cmp	w8, #0                          // =0
	cset	w1, ne
.LBB49_9:                               // %lor.end
	bl	jinit_c_coef_controller
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	jinit_c_main_controller
	ldr	x0, [sp, #8]
	bl	jinit_marker_writer
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #48]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end49:
	.size	jinit_compress_master, .Lfunc_end49-jinit_compress_master
	.cfi_endproc
                                        // -- End function
	.globl	jinit_c_main_controller         // -- Begin function jinit_c_main_controller
	.p2align	2
	.type	jinit_c_main_controller,@function
jinit_c_main_controller:                // @jinit_c_main_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #112
	mov	w19, #1
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	adrp	x9, start_pass_main
	stur	x0, [x29, #-16]
	add	x9, x9, :lo12:start_pass_main
	str	x0, [x8, #432]
	mov	x8, x0
	str	x9, [x8]
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #248]
	cbz	w8, .LBB50_2
// %bb.1:                               // %if.then
	str	w19, [sp, #12]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB50_2:                               // %if.end
	ldur	w8, [x29, #-4]
	cbz	w8, .LBB50_5
// %bb.3:                               // %if.then2
	ldr	x8, [x29, #24]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB50_4:                               // %if.end7
	str	wzr, [sp, #12]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB50_5:                               // %if.else
	ldr	x8, [x29, #24]
	stur	wzr, [x29, #-20]
	ldr	x8, [x8, #80]
	str	x8, [sp, #16]
.LBB50_6:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB50_4
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB50_6 Depth=1
	ldr	x0, [x29, #24]
	ldr	x8, [sp, #16]
	mov	w1, #1
	ldr	x9, [x0, #8]
	ldr	w10, [x8, #28]
	ldr	w8, [x8, #12]
	ldr	x9, [x9, #16]
	lsl	w2, w10, #3
	lsl	w3, w8, #3
	blr	x9
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #32]
	ldur	w8, [x29, #-20]
	ldr	x9, [sp, #16]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-20]
	str	x9, [sp, #16]
	b	.LBB50_6
.Lfunc_end50:
	.size	jinit_c_main_controller, .Lfunc_end50-jinit_c_main_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_main
	.type	start_pass_main,@function
start_pass_main:                        // @start_pass_main
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #432]
	str	x8, [sp, #8]
	ldr	w8, [x0, #248]
	cbz	w8, .LBB51_2
// %bb.1:                               // %if.then
	mov	w8, #1
	str	w8, [sp, #4]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB51_2:                               // %if.end
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	str	w8, [x9, #28]
	ldur	w8, [x29, #-12]
	cbz	w8, .LBB51_4
// %bb.3:                               // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	str	wzr, [sp, #4]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB51_4:                               // %sw.bb
	ldr	x8, [sp, #8]
	adrp	x9, process_data_simple_main
	add	x9, x9, :lo12:process_data_simple_main
	str	x9, [x8, #8]
	str	wzr, [sp, #4]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end51:
	.size	start_pass_main, .Lfunc_end51-start_pass_main
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function process_data_simple_main
	.type	process_data_simple_main,@function
process_data_simple_main:               // @process_data_simple_main
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	str	x2, [sp, #24]
	str	w3, [sp, #20]
	ldr	x8, [x0, #432]
	str	x8, [sp, #8]
	b	.LBB52_2
.LBB52_1:                               // %if.end19
                                        //   in Loop: Header=BB52_2 Depth=1
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #16]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #16]
.LBB52_2:                               // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #16]
	ldr	w9, [x9, #312]
	cmp	w8, w9
	b.hs	.LBB52_9
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB52_2 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #20]
	cmp	w8, #7                          // =7
	b.hi	.LBB52_5
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB52_2 Depth=1
	ldp	x1, x0, [x29, #-16]
	ldr	x9, [sp, #8]
	ldr	x2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	x8, [x0, #440]
	add	x4, x9, #32                     // =32
	add	x5, x9, #20                     // =20
	mov	w6, #8
	ldr	x8, [x8, #8]
	blr	x8
.LBB52_5:                               // %if.end
                                        //   in Loop: Header=BB52_2 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #20]
	cmp	w8, #8                          // =8
	b.ne	.LBB52_12
// %bb.6:                               // %if.end6
                                        //   in Loop: Header=BB52_2 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x0, #448]
	add	x1, x9, #32                     // =32
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #24]
	cbz	w0, .LBB52_10
// %bb.7:                               // %if.end14
                                        //   in Loop: Header=BB52_2 Depth=1
	cbz	w8, .LBB52_1
// %bb.8:                               // %if.then17
                                        //   in Loop: Header=BB52_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	b	.LBB52_1
.LBB52_9:                               // %while.end
	str	wzr, [sp, #4]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB52_10:                              // %if.then9
	cbnz	w8, .LBB52_12
// %bb.11:                              // %if.then11
	ldr	x8, [sp, #24]
	ldr	w9, [x8]
	sub	w9, w9, #1                      // =1
	str	w9, [x8]
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	w9, [x8, #24]
.LBB52_12:                              // %if.then5
	mov	w8, #1
	str	w8, [sp, #4]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end52:
	.size	process_data_simple_main, .Lfunc_end52-process_data_simple_main
	.cfi_endproc
                                        // -- End function
	.globl	jinit_marker_writer             // -- Begin function jinit_marker_writer
	.p2align	2
	.type	jinit_marker_writer,@function
jinit_marker_writer:                    // @jinit_marker_writer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #48
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, write_any_marker
	add	x9, x9, :lo12:write_any_marker
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x0, [x8, #456]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #456]
	str	x9, [x8]
	ldr	x8, [sp, #8]
	adrp	x9, write_file_header
	add	x9, x9, :lo12:write_file_header
	ldr	x8, [x8, #456]
	str	x9, [x8, #8]
	ldr	x8, [sp, #8]
	adrp	x9, write_frame_header
	add	x9, x9, :lo12:write_frame_header
	ldr	x8, [x8, #456]
	str	x9, [x8, #16]
	ldr	x8, [sp, #8]
	adrp	x9, write_scan_header
	add	x9, x9, :lo12:write_scan_header
	ldr	x8, [x8, #456]
	str	x9, [x8, #24]
	ldr	x8, [sp, #8]
	adrp	x9, write_file_trailer
	add	x9, x9, :lo12:write_file_trailer
	ldr	x8, [x8, #456]
	str	x9, [x8, #32]
	ldr	x8, [sp, #8]
	adrp	x9, write_tables_only
	add	x9, x9, :lo12:write_tables_only
	ldr	x8, [x8, #456]
	str	x9, [x8, #40]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end53:
	.size	jinit_marker_writer, .Lfunc_end53-jinit_marker_writer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_any_marker
	.type	write_any_marker,@function
write_any_marker:                       // @write_any_marker
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, #65533
	cmp	w3, w8
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #8]
	str	w3, [sp, #4]
	b.hi	.LBB54_3
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	bl	emit_marker
	ldr	w8, [sp, #4]
	ldur	x0, [x29, #-8]
	add	w1, w8, #2                      // =2
	bl	emit_2bytes
	ldr	w8, [sp, #4]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b.lo	.LBB54_3
.LBB54_2:                               // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldrb	w1, [x8]
	bl	emit_byte
	ldr	x8, [sp, #8]
	add	x8, x8, #1                      // =1
	str	x8, [sp, #8]
	ldr	w8, [sp, #4]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b.hs	.LBB54_2
.LBB54_3:                               // %if.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end54:
	.size	write_any_marker, .Lfunc_end54-write_any_marker
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_file_header
	.type	write_file_header,@function
write_file_header:                      // @write_file_header
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #216
	str	x0, [sp, #8]
	bl	emit_marker
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #280]
	cbz	w8, .LBB55_2
// %bb.1:                               // %if.then
	ldr	x0, [sp, #8]
	bl	emit_jfif_app0
.LBB55_2:                               // %if.end
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #292]
	cbz	w8, .LBB55_4
// %bb.3:                               // %if.then2
	ldr	x0, [sp, #8]
	bl	emit_adobe_app14
.LBB55_4:                               // %if.end3
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end55:
	.size	write_file_header, .Lfunc_end55-write_file_header
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_frame_header
	.type	write_frame_header,@function
write_frame_header:                     // @write_frame_header
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	wzr, [sp, #16]
	stur	wzr, [x29, #-12]
	ldr	x8, [x0, #80]
	str	x8, [sp]
.LBB56_1:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	ldur	w8, [x29, #-12]
	ldr	w9, [x0, #68]
	cmp	w8, w9
	b.ge	.LBB56_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB56_1 Depth=1
	ldr	x8, [sp]
	ldr	w1, [x8, #16]
	bl	emit_dqt
	ldr	w8, [sp, #16]
	ldur	w9, [x29, #-12]
	ldr	x10, [sp]
	add	w8, w8, w0
	add	w9, w9, #1                      // =1
	add	x10, x10, #96                   // =96
	str	w8, [sp, #16]
	stur	w9, [x29, #-12]
	str	x10, [sp]
	b	.LBB56_1
.LBB56_3:                               // %for.end
	ldr	w8, [x0, #252]
	cbnz	w8, .LBB56_6
// %bb.4:                               // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #300]
	cbnz	w8, .LBB56_6
// %bb.5:                               // %lor.lhs.false2
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #64]
	cmp	w8, #8                          // =8
	b.eq	.LBB56_12
.LBB56_6:                               // %if.then
	str	wzr, [sp, #12]
.LBB56_7:                               // %if.end22
	ldur	x0, [x29, #-8]
	ldr	w8, [x0, #252]
	cbz	w8, .LBB56_9
// %bb.8:                               // %if.then25
	mov	w1, #201
	bl	emit_sof
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB56_9:                               // %if.else26
	ldr	w8, [x0, #300]
	cbz	w8, .LBB56_11
// %bb.10:                              // %if.then29
	ldur	x0, [x29, #-8]
	mov	w1, #194
	bl	emit_sof
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB56_11:                              // %if.else30
	ldr	w8, [sp, #12]
	ldur	x0, [x29, #-8]
	cmp	w8, #0                          // =0
	mov	w8, #192
	cinc	w1, w8, eq
	bl	emit_sof
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB56_12:                              // %if.else
	ldur	x8, [x29, #-8]
	mov	w9, #1
	str	w9, [sp, #12]
	stur	wzr, [x29, #-12]
	ldr	x8, [x8, #80]
	str	x8, [sp]
	b	.LBB56_15
.LBB56_13:                              // %if.then12
                                        //   in Loop: Header=BB56_15 Depth=1
	str	wzr, [sp, #12]
.LBB56_14:                              // %for.inc13
                                        //   in Loop: Header=BB56_15 Depth=1
	ldur	w8, [x29, #-12]
	ldr	x9, [sp]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp]
.LBB56_15:                              // %for.cond5
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB56_18
// %bb.16:                              // %for.body8
                                        //   in Loop: Header=BB56_15 Depth=1
	ldr	x8, [sp]
	ldr	w8, [x8, #20]
	cmp	w8, #1                          // =1
	b.gt	.LBB56_13
// %bb.17:                              // %lor.lhs.false10
                                        //   in Loop: Header=BB56_15 Depth=1
	ldr	x8, [sp]
	ldr	w8, [x8, #24]
	cmp	w8, #2                          // =2
	b.ge	.LBB56_13
	b	.LBB56_14
.LBB56_18:                              // %for.end16
	ldr	w8, [sp, #16]
	cbz	w8, .LBB56_7
// %bb.19:                              // %for.end16
	ldr	w8, [sp, #12]
	cbz	w8, .LBB56_7
// %bb.20:                              // %if.then19
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #12]
	mov	w9, #74
	mov	w1, wzr
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	b	.LBB56_7
.Lfunc_end56:
	.size	write_frame_header, .Lfunc_end56-write_frame_header
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_scan_header
	.type	write_scan_header,@function
write_scan_header:                      // @write_scan_header
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #252]
	cbz	w8, .LBB57_5
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	bl	emit_dac
.LBB57_2:                               // %if.end13
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #272]
	cbz	w8, .LBB57_4
// %bb.3:                               // %if.then15
	ldur	x0, [x29, #-8]
	bl	emit_dri
.LBB57_4:                               // %if.end16
	ldur	x0, [x29, #-8]
	bl	emit_sos
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB57_5:                               // %if.else
	stur	wzr, [x29, #-12]
	b	.LBB57_10
.LBB57_6:                               // %if.else9
                                        //   in Loop: Header=BB57_10 Depth=1
	ldr	x8, [sp, #8]
	mov	w2, wzr
	ldr	w1, [x8, #20]
	bl	emit_dht
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
.LBB57_7:                               // %for.inc
                                        //   in Loop: Header=BB57_10 Depth=1
	ldr	w1, [x8, #24]
	mov	w2, #1
.LBB57_8:                               // %for.inc
                                        //   in Loop: Header=BB57_10 Depth=1
	bl	emit_dht
.LBB57_9:                               // %for.inc
                                        //   in Loop: Header=BB57_10 Depth=1
	ldur	w8, [x29, #-12]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-12]
.LBB57_10:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB57_2
// %bb.11:                              // %for.body
                                        //   in Loop: Header=BB57_10 Depth=1
	ldur	x0, [x29, #-8]
	ldursw	x8, [x29, #-12]
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #320]
	str	x8, [sp, #8]
	ldr	w8, [x0, #300]
	cbz	w8, .LBB57_6
// %bb.12:                              // %if.then2
                                        //   in Loop: Header=BB57_10 Depth=1
	ldr	w8, [x0, #404]
	ldur	x0, [x29, #-8]
	cbz	w8, .LBB57_14
// %bb.13:                              // %if.else7
                                        //   in Loop: Header=BB57_10 Depth=1
	ldr	x8, [sp, #8]
	b	.LBB57_7
.LBB57_14:                              // %if.then4
                                        //   in Loop: Header=BB57_10 Depth=1
	ldr	w8, [x0, #412]
	cbnz	w8, .LBB57_9
// %bb.15:                              // %if.then6
                                        //   in Loop: Header=BB57_10 Depth=1
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	mov	w2, wzr
	ldr	w1, [x8, #20]
	b	.LBB57_8
.Lfunc_end57:
	.size	write_scan_header, .Lfunc_end57-write_scan_header
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_file_trailer
	.type	write_file_trailer,@function
write_file_trailer:                     // @write_file_trailer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #217
	str	x0, [sp, #8]
	bl	emit_marker
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end58:
	.size	write_file_trailer, .Lfunc_end58-write_file_trailer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_tables_only
	.type	write_tables_only,@function
write_tables_only:                      // @write_tables_only
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #216
	str	x0, [sp, #8]
	bl	emit_marker
	str	wzr, [sp, #4]
	b	.LBB59_2
.LBB59_1:                               // %for.inc
                                        //   in Loop: Header=BB59_2 Depth=1
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB59_2:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [sp, #4]
	ldr	x8, [sp, #8]
	cmp	w9, #3                          // =3
	b.gt	.LBB59_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB59_2 Depth=1
	ldrsw	x9, [sp, #4]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #88]
	cbz	x8, .LBB59_1
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB59_2 Depth=1
	ldr	x0, [sp, #8]
	ldr	w1, [sp, #4]
	bl	emit_dqt
	b	.LBB59_1
.LBB59_5:                               // %for.end
	ldr	w8, [x8, #252]
	cbz	w8, .LBB59_7
.LBB59_6:                               // %if.end19
	ldr	x0, [sp, #8]
	mov	w1, #217
	bl	emit_marker
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB59_7:                               // %if.then2
	str	wzr, [sp, #4]
	b	.LBB59_9
.LBB59_8:                               // %for.inc16
                                        //   in Loop: Header=BB59_9 Depth=1
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB59_9:                               // %for.cond3
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #4]
	cmp	w8, #3                          // =3
	b.gt	.LBB59_6
// %bb.10:                              // %for.body5
                                        //   in Loop: Header=BB59_9 Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #4]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #120]
	cbz	x8, .LBB59_12
// %bb.11:                              // %if.then9
                                        //   in Loop: Header=BB59_9 Depth=1
	ldr	x0, [sp, #8]
	ldr	w1, [sp, #4]
	mov	w2, wzr
	bl	emit_dht
.LBB59_12:                              // %if.end10
                                        //   in Loop: Header=BB59_9 Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #4]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #152]
	cbz	x8, .LBB59_8
// %bb.13:                              // %if.then14
                                        //   in Loop: Header=BB59_9 Depth=1
	ldr	x0, [sp, #8]
	ldr	w1, [sp, #4]
	mov	w2, #1
	bl	emit_dht
	b	.LBB59_8
.Lfunc_end59:
	.size	write_tables_only, .Lfunc_end59-write_tables_only
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_marker
	.type	emit_marker,@function
emit_marker:                            // @emit_marker
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	w1, [sp, #4]
	mov	w1, #255
	str	x0, [sp, #8]
	bl	emit_byte
	ldr	x0, [sp, #8]
	ldr	w1, [sp, #4]
	bl	emit_byte
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end60:
	.size	emit_marker, .Lfunc_end60-emit_marker
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_dqt
	.type	emit_dqt,@function
emit_dqt:                               // @emit_dqt
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	add	x8, x0, w1, sxtw #3
	ldr	x8, [x8, #88]
	str	x8, [sp, #16]
	cbnz	x8, .LBB61_2
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	mov	w9, #51
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB61_2:                               // %if.end
	mov	w8, #1
	str	xzr, [sp, #8]
	b	.LBB61_4
.LBB61_3:                               // %for.inc
                                        //   in Loop: Header=BB61_4 Depth=1
	ldr	w9, [sp, #8]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #8]
.LBB61_4:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w10, [sp, #8]
	ldr	x9, [sp, #16]
	cmp	w10, #63                        // =63
	b.gt	.LBB61_7
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB61_4 Depth=1
	ldrsw	x10, [sp, #8]
	ldrh	w9, [x9, x10, lsl #1]
	cmp	w9, #256                        // =256
	b.lt	.LBB61_3
// %bb.6:                               // %if.then10
                                        //   in Loop: Header=BB61_4 Depth=1
	str	w8, [sp, #12]
	b	.LBB61_3
.LBB61_7:                               // %for.end
	ldr	w8, [x9, #128]
	cbnz	w8, .LBB61_14
// %bb.8:                               // %if.then12
	ldr	x0, [x29, #24]
	mov	w1, #219
	bl	emit_marker
	ldr	w8, [sp, #12]
	ldr	x0, [x29, #24]
	mov	w9, #67
	cmp	w8, #0                          // =0
	mov	w8, #131
	csel	w1, w8, w9, ne
	bl	emit_2bytes
	ldur	w8, [x29, #-4]
	ldr	w9, [sp, #12]
	ldr	x0, [x29, #24]
	add	w1, w8, w9, lsl #4
	bl	emit_byte
	adrp	x19, jpeg_natural_order
	add	x19, x19, :lo12:jpeg_natural_order
	str	wzr, [sp, #8]
	b	.LBB61_10
.LBB61_9:                               // %if.end26
                                        //   in Loop: Header=BB61_10 Depth=1
	ldr	x0, [x29, #24]
	ldrb	w1, [sp, #4]
	bl	emit_byte
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
.LBB61_10:                              // %for.cond14
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #8]
	cmp	w8, #63                         // =63
	b.gt	.LBB61_13
// %bb.11:                              // %for.body17
                                        //   in Loop: Header=BB61_10 Depth=1
	ldrsw	x8, [sp, #8]
	ldr	x9, [sp, #16]
	ldrsw	x8, [x19, x8, lsl #2]
	ldrh	w8, [x9, x8, lsl #1]
	ldr	w9, [sp, #12]
	str	w8, [sp, #4]
	cbz	w9, .LBB61_9
// %bb.12:                              // %if.then25
                                        //   in Loop: Header=BB61_10 Depth=1
	ldr	w8, [sp, #4]
	ldr	x0, [x29, #24]
	lsr	w1, w8, #8
	bl	emit_byte
	b	.LBB61_9
.LBB61_13:                              // %for.end29
	ldr	x8, [sp, #16]
	mov	w9, #1
	str	w9, [x8, #128]
.LBB61_14:                              // %if.end31
	ldr	w0, [sp, #12]
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end61:
	.size	emit_dqt, .Lfunc_end61-emit_dqt
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_dht
	.type	emit_dht,@function
emit_dht:                               // @emit_dht
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	w2, [sp, #16]
	cbz	w2, .LBB62_4
// %bb.1:                               // %if.then
	ldursw	x8, [x29, #-12]
	add	x9, x0, x8, lsl #3
	ldr	x9, [x9, #152]
	add	w8, w8, #16                     // =16
	stur	w8, [x29, #-12]
	str	x9, [sp, #8]
	mov	x8, x9
	cbz	x8, .LBB62_5
.LBB62_2:                               // %if.end8
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #276]
	cbz	w8, .LBB62_6
.LBB62_3:                               // %if.end40
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB62_4:                               // %if.else
	ldursw	x8, [x29, #-12]
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #120]
	str	x8, [sp, #8]
	cbnz	x8, .LBB62_2
.LBB62_5:                               // %if.then3
	ldur	x8, [x29, #-8]
	mov	w9, #49
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #276]
	cbnz	w8, .LBB62_3
.LBB62_6:                               // %if.then10
	ldur	x0, [x29, #-8]
	mov	w1, #196
	bl	emit_marker
	mov	w8, #1
	stp	w8, wzr, [sp]
	ldr	w8, [sp]
	cmp	w8, #16                         // =16
	b.gt	.LBB62_8
.LBB62_7:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldp	w9, w10, [sp]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	ldrb	w8, [x8, x9]
	add	w9, w9, #1                      // =1
	add	w8, w10, w8
	stp	w9, w8, [sp]
	ldr	w8, [sp]
	cmp	w8, #16                         // =16
	b.le	.LBB62_7
.LBB62_8:                               // %for.end
	ldr	w8, [sp, #4]
	ldur	x0, [x29, #-8]
	add	w1, w8, #19                     // =19
	bl	emit_2bytes
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	bl	emit_byte
	mov	w8, #1
	str	w8, [sp]
	mov	w8, w8
	cmp	w8, #16                         // =16
	b.gt	.LBB62_10
.LBB62_9:                               // %for.body21
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp]
	ldur	x0, [x29, #-8]
	ldrb	w1, [x8, x9]
	bl	emit_byte
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	mov	w8, w8
	cmp	w8, #16                         // =16
	b.le	.LBB62_9
.LBB62_10:                              // %for.end28
	str	wzr, [sp]
	ldp	w8, w9, [sp]
	cmp	w8, w9
	b.ge	.LBB62_12
.LBB62_11:                              // %for.body32
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp]
	ldur	x0, [x29, #-8]
	add	x8, x8, x9
	ldrb	w1, [x8, #17]
	bl	emit_byte
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	ldp	w8, w9, [sp]
	cmp	w8, w9
	b.lt	.LBB62_11
.LBB62_12:                              // %for.end38
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	w9, [x8, #276]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end62:
	.size	emit_dht, .Lfunc_end62-emit_dht
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_2bytes
	.type	emit_2bytes,@function
emit_2bytes:                            // @emit_2bytes
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	w1, [sp, #4]
	ubfx	w1, w1, #8, #8
	str	x0, [sp, #8]
	bl	emit_byte
	ldr	x0, [sp, #8]
	ldrb	w1, [sp, #4]
	bl	emit_byte
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end63:
	.size	emit_2bytes, .Lfunc_end63-emit_2bytes
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_byte
	.type	emit_byte,@function
emit_byte:                              // @emit_byte
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #32]
	str	x8, [sp, #8]
	ldr	x9, [x8]
	add	x10, x9, #1                     // =1
	str	x10, [x8]
	strb	w1, [x9]
	ldr	x9, [x8, #8]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	b.eq	.LBB64_2
.LBB64_1:                               // %if.end5
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB64_2:                               // %if.then
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbnz	w0, .LBB64_1
// %bb.3:                               // %if.then3
	ldur	x8, [x29, #-8]
	mov	w9, #22
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end64:
	.size	emit_byte, .Lfunc_end64-emit_byte
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_dac
	.type	emit_dac,@function
emit_dac:                               // @emit_dac
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end65:
	.size	emit_dac, .Lfunc_end65-emit_dac
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_dri
	.type	emit_dri,@function
emit_dri:                               // @emit_dri
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #221
	str	x0, [sp, #8]
	bl	emit_marker
	ldr	x0, [sp, #8]
	mov	w1, #4
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	ldr	w1, [x0, #272]
	bl	emit_2bytes
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end66:
	.size	emit_dri, .Lfunc_end66-emit_dri
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_sos
	.type	emit_sos,@function
emit_sos:                               // @emit_sos
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #218
	stur	x0, [x29, #-8]
	bl	emit_marker
	ldur	x0, [x29, #-8]
	ldr	w8, [x0, #316]
	lsl	w8, w8, #1
	add	w1, w8, #6                      // =6
	bl	emit_2bytes
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #316]
	bl	emit_byte
	stur	wzr, [x29, #-12]
	b	.LBB67_3
.LBB67_1:                               // %if.else
                                        //   in Loop: Header=BB67_3 Depth=1
	str	wzr, [sp, #16]
.LBB67_2:                               // %if.end11
                                        //   in Loop: Header=BB67_3 Depth=1
	ldp	w9, w8, [sp, #12]
	ldur	x0, [x29, #-8]
	add	w1, w9, w8, lsl #4
	bl	emit_byte
	ldur	w8, [x29, #-12]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-12]
.LBB67_3:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	ldur	w8, [x29, #-12]
	ldr	w9, [x0, #316]
	cmp	w8, w9
	b.ge	.LBB67_8
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB67_3 Depth=1
	ldursw	x8, [x29, #-12]
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #320]
	ldur	x0, [x29, #-8]
	str	x8, [sp]
	ldr	w1, [x8]
	bl	emit_byte
	ldr	x8, [sp]
	ldp	w9, w8, [x8, #20]
	stp	w8, w9, [sp, #12]
	ldur	x9, [x29, #-8]
	ldr	w8, [x9, #300]
	cbz	w8, .LBB67_2
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB67_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #404]
	cbnz	w8, .LBB67_1
// %bb.6:                               // %if.then6
                                        //   in Loop: Header=BB67_3 Depth=1
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #12]
	ldr	w8, [x8, #412]
	cbz	w8, .LBB67_2
// %bb.7:                               // %land.lhs.true
                                        //   in Loop: Header=BB67_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #252]
	cbnz	w8, .LBB67_2
	b	.LBB67_1
.LBB67_8:                               // %for.end
	ldur	x8, [x29, #-8]
	ldr	w1, [x8, #404]
	bl	emit_byte
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #408]
	bl	emit_byte
	ldur	x0, [x29, #-8]
	ldr	w8, [x0, #412]
	ldr	w9, [x0, #416]
	add	w1, w9, w8, lsl #4
	bl	emit_byte
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end67:
	.size	emit_sos, .Lfunc_end67-emit_sos
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_sof
	.type	emit_sof,@function
emit_sof:                               // @emit_sof
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	bl	emit_marker
	ldur	x0, [x29, #-8]
	ldr	w8, [x0, #68]
	add	w8, w8, w8, lsl #1
	add	w1, w8, #8                      // =8
	bl	emit_2bytes
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #44]
	cmp	x8, #16, lsl #12                // =65536
	b.ge	.LBB68_2
// %bb.1:                               // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #40]
	cmp	x8, #16, lsl #12                // =65536
	b.lt	.LBB68_3
.LBB68_2:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #40
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #65535
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB68_3:                               // %if.end
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #64]
	bl	emit_byte
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #44]
	bl	emit_2bytes
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #40]
	bl	emit_2bytes
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #68]
	bl	emit_byte
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #16]
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
.LBB68_4:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB68_6
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB68_4 Depth=1
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	w1, [x8]
	bl	emit_byte
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldp	w9, w8, [x8, #8]
	add	w1, w8, w9, lsl #4
	bl	emit_byte
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	w1, [x8, #16]
	bl	emit_byte
	ldr	w8, [sp, #16]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #16]
	str	x9, [sp, #8]
	b	.LBB68_4
.LBB68_6:                               // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end68:
	.size	emit_sof, .Lfunc_end68-emit_sof
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_jfif_app0
	.type	emit_jfif_app0,@function
emit_jfif_app0:                         // @emit_jfif_app0
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #224
	str	x0, [sp, #8]
	bl	emit_marker
	ldr	x0, [sp, #8]
	mov	w1, #16
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	mov	w1, #74
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #70
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #73
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #70
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #1
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #1
	bl	emit_byte
	ldr	x0, [sp, #8]
	ldrb	w1, [x0, #284]
	bl	emit_byte
	ldr	x0, [sp, #8]
	ldrh	w1, [x0, #286]
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	ldrh	w1, [x0, #288]
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	emit_byte
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end69:
	.size	emit_jfif_app0, .Lfunc_end69-emit_jfif_app0
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_adobe_app14
	.type	emit_adobe_app14,@function
emit_adobe_app14:                       // @emit_adobe_app14
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #238
	str	x0, [sp, #8]
	bl	emit_marker
	ldr	x0, [sp, #8]
	mov	w1, #14
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	mov	w1, #65
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #100
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #111
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #98
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #101
	bl	emit_byte
	ldr	x0, [sp, #8]
	mov	w1, #100
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	emit_2bytes
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	emit_2bytes
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #72]
	cmp	w8, #5                          // =5
	b.eq	.LBB70_3
// %bb.1:                               // %entry
	cmp	w8, #3                          // =3
	b.ne	.LBB70_4
// %bb.2:                               // %sw.bb
	ldr	x0, [sp, #8]
	mov	w1, #1
	bl	emit_byte
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB70_3:                               // %sw.bb1
	ldr	x0, [sp, #8]
	mov	w1, #2
	bl	emit_byte
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB70_4:                               // %sw.default
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	emit_byte
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end70:
	.size	emit_adobe_app14, .Lfunc_end70-emit_adobe_app14
	.cfi_endproc
                                        // -- End function
	.globl	jinit_c_master_control          // -- Begin function jinit_c_master_control
	.p2align	2
	.type	jinit_c_master_control,@function
jinit_c_master_control:                 // @jinit_c_master_control
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #48
	mov	w19, #1
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	adrp	x9, prepare_for_pass
	str	x0, [sp]
	add	x9, x9, :lo12:prepare_for_pass
	str	x0, [x8, #424]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, pass_startup
	mov	x8, x0
	add	x9, x9, :lo12:pass_startup
	str	x9, [x8, #8]
	adrp	x9, finish_pass_master
	mov	x8, x0
	add	x9, x9, :lo12:finish_pass_master
	str	x9, [x8, #16]
	mov	x8, x0
	str	wzr, [x8, #28]
	ldr	x0, [x29, #24]
	bl	initial_setup
	ldr	x0, [x29, #24]
	ldr	x8, [x0, #240]
	cbz	x8, .LBB71_5
// %bb.1:                               // %if.then
	bl	validate_script
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #300]
	cbz	w8, .LBB71_3
.LBB71_2:                               // %if.then6
	ldr	x8, [x29, #24]
	mov	w9, #1
	str	w9, [x8, #256]
.LBB71_3:                               // %if.end7
	ldur	w8, [x29, #-4]
	cbz	w8, .LBB71_6
// %bb.4:                               // %if.then9
	ldr	x8, [x29, #24]
	ldr	x9, [sp]
	ldr	w8, [x8, #256]
	cmp	w8, #0                          // =0
	mov	w8, #1
	cinc	w8, w8, eq
	str	w8, [x9, #32]
	b	.LBB71_7
.LBB71_5:                               // %if.else
	str	wzr, [x0, #300]
	ldr	x8, [x29, #24]
	str	w19, [x8, #232]
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #300]
	cbnz	w8, .LBB71_2
	b	.LBB71_3
.LBB71_6:                               // %if.else16
	ldr	x8, [sp]
	str	wzr, [x8, #32]
.LBB71_7:                               // %if.end18
	ldr	x8, [sp]
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	str	wzr, [x8, #44]
	ldr	x8, [sp]
	str	wzr, [x8, #36]
	ldr	x8, [x29, #24]
	ldr	x10, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	w9, [x8, #232]
	ldr	w8, [x8, #256]
	lsl	w11, w9, #1
	cmp	w8, #0                          // =0
	csel	w8, w11, w9, ne
	str	w8, [x10, #40]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end71:
	.size	jinit_c_master_control, .Lfunc_end71-jinit_c_master_control
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function prepare_for_pass
	.type	prepare_for_pass,@function
prepare_for_pass:                       // @prepare_for_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #424]
	stp	x8, x0, [sp]
	ldr	w8, [x8, #32]
	cmp	w8, #2                          // =2
	b.eq	.LBB72_12
// %bb.1:                               // %entry
	cmp	w8, #1                          // =1
	b.eq	.LBB72_6
// %bb.2:                               // %entry
	cbnz	w8, .LBB72_8
// %bb.3:                               // %sw.bb
	ldr	x0, [sp, #8]
	bl	select_scan_parameters
	ldr	x0, [sp, #8]
	bl	per_scan_setup
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #248]
	cbnz	w8, .LBB72_5
// %bb.4:                               // %if.then
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #464]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #472]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	mov	w1, wzr
	ldr	x8, [x0, #440]
	ldr	x8, [x8]
	blr	x8
.LBB72_5:                               // %if.end
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #480]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #488]
	ldr	w1, [x0, #256]
	ldr	x8, [x8]
	blr	x8
	ldp	x8, x0, [sp]
	ldr	x9, [x0, #448]
	ldr	w8, [x8, #40]
	ldr	x9, [x9]
	cmp	w8, #1                          // =1
	mov	w8, #3
	csel	w1, w8, wzr, gt
	blr	x9
	ldr	x0, [sp, #8]
	mov	w1, wzr
	ldr	x8, [x0, #432]
	ldr	x8, [x8]
	blr	x8
	ldp	x9, x8, [sp]
	ldr	w8, [x8, #256]
	cmp	w8, #0                          // =0
	cset	w8, eq
	str	w8, [x9, #24]
	b	.LBB72_18
.LBB72_6:                               // %sw.bb15
	ldr	x0, [sp, #8]
	bl	select_scan_parameters
	ldr	x0, [sp, #8]
	bl	per_scan_setup
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #404]
	cbz	w8, .LBB72_9
.LBB72_7:                               // %if.then20
	ldr	x0, [sp, #8]
	mov	w1, #1
	ldr	x8, [x0, #488]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	mov	w1, #2
	ldr	x8, [x0, #448]
	ldr	x8, [x8]
	blr	x8
	b	.LBB72_17
.LBB72_8:                               // %sw.default
	ldr	x8, [sp, #8]
	mov	w9, #47
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB72_18
.LBB72_9:                               // %lor.lhs.false
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #412]
	cbz	w8, .LBB72_7
// %bb.10:                              // %lor.lhs.false18
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #252]
	cbnz	w8, .LBB72_7
// %bb.11:                              // %if.end28
	ldr	x8, [sp]
	mov	w9, #2
	str	w9, [x8, #32]
	ldr	x8, [sp]
	ldr	w9, [x8, #36]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #36]
.LBB72_12:                              // %sw.bb30
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #256]
	cbnz	w8, .LBB72_14
// %bb.13:                              // %if.then33
	ldr	x0, [sp, #8]
	bl	select_scan_parameters
	ldr	x0, [sp, #8]
	bl	per_scan_setup
.LBB72_14:                              // %if.end34
	ldr	x0, [sp, #8]
	mov	w1, wzr
	ldr	x8, [x0, #488]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	mov	w1, #2
	ldr	x8, [x0, #448]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp]
	ldr	w8, [x8, #44]
	cbnz	w8, .LBB72_16
// %bb.15:                              // %if.then41
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #16]
	blr	x8
.LBB72_16:                              // %if.end42
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #24]
	blr	x8
.LBB72_17:                              // %sw.epilog
	ldr	x8, [sp]
	str	wzr, [x8, #24]
.LBB72_18:                              // %sw.epilog
	ldr	x8, [sp]
	ldp	w10, w9, [x8, #36]
	sub	w9, w9, #1                      // =1
	cmp	w10, w9
	cset	w9, eq
	str	w9, [x8, #28]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB72_20
// %bb.19:                              // %if.then53
	ldp	x8, x9, [sp]
	ldr	w8, [x8, #36]
	ldr	x9, [x9, #16]
	str	w8, [x9, #24]
	ldp	x8, x9, [sp]
	ldr	w8, [x8, #40]
	ldr	x9, [x9, #16]
	str	w8, [x9, #28]
.LBB72_20:                              // %if.end59
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end72:
	.size	prepare_for_pass, .Lfunc_end72-prepare_for_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function pass_startup
	.type	pass_startup,@function
pass_startup:                           // @pass_startup
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #424]
	str	wzr, [x8, #24]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #24]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end73:
	.size	pass_startup, .Lfunc_end73-pass_startup
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass_master
	.type	finish_pass_master,@function
finish_pass_master:                     // @finish_pass_master
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #424]
	stp	x8, x0, [sp]
	ldr	x8, [x0, #488]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x8, [sp]
	ldr	w8, [x8, #32]
	cmp	w8, #2                          // =2
	b.eq	.LBB74_4
// %bb.1:                               // %entry
	cmp	w8, #1                          // =1
	b.eq	.LBB74_7
// %bb.2:                               // %entry
	cbnz	w8, .LBB74_8
// %bb.3:                               // %sw.bb
	ldr	x8, [sp]
	mov	w9, #2
	str	w9, [x8, #32]
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #256]
	cbnz	w8, .LBB74_8
	b	.LBB74_6
.LBB74_4:                               // %sw.bb5
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #256]
	cbz	w8, .LBB74_6
// %bb.5:                               // %if.then8
	ldr	x8, [sp]
	mov	w9, #1
	str	w9, [x8, #32]
.LBB74_6:                               // %if.end10
	ldr	x8, [sp]
	ldr	w9, [x8, #44]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #44]
	b	.LBB74_8
.LBB74_7:                               // %sw.bb3
	ldr	x8, [sp]
	mov	w9, #2
	str	w9, [x8, #32]
.LBB74_8:                               // %sw.epilog
	ldr	x8, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	w9, [x8, #36]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #36]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end74:
	.size	finish_pass_master, .Lfunc_end74-finish_pass_master
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function initial_setup
	.type	initial_setup,@function
initial_setup:                          // @initial_setup
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #44]
	cbz	w8, .LBB75_4
// %bb.1:                               // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #40]
	cbz	w8, .LBB75_4
// %bb.2:                               // %lor.lhs.false2
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #68]
	cmp	w8, #1                          // =1
	b.lt	.LBB75_4
// %bb.3:                               // %lor.lhs.false4
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #0                          // =0
	b.gt	.LBB75_5
.LBB75_4:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #31
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB75_5:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #44]
	mov	w8, #65500
	cmp	x9, x8
	b.gt	.LBB75_7
// %bb.6:                               // %lor.lhs.false10
	ldur	x9, [x29, #-8]
	mov	w10, #65501
	ldr	w9, [x9, #40]
	cmp	x9, x10
	b.lt	.LBB75_8
.LBB75_7:                               // %if.then15
	ldur	x9, [x29, #-8]
	mov	w10, #40
	ldr	x9, [x9]
	str	w10, [x9, #40]
	ldur	x9, [x29, #-8]
	ldr	x9, [x9]
	str	w8, [x9, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB75_8:                               // %if.end21
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #40]
	ldrsw	x8, [x8, #48]
	mul	x8, x9, x8
	tst	x8, #0xffffffff00000000
	str	x8, [sp, #16]
	str	w8, [sp, #12]
	b.ne	.LBB75_24
// %bb.9:                               // %if.end35
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #64]
	cmp	w8, #8                          // =8
	b.ne	.LBB75_25
.LBB75_10:                              // %if.end48
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #68]
	cmp	w8, #11                         // =11
	b.lt	.LBB75_12
.LBB75_11:                              // %if.then52
	ldur	x8, [x29, #-8]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #68]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	mov	w9, #10
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB75_12:                              // %if.end66
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w19, #16
	str	w9, [x8, #304]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #308]
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-12]
	ldr	x8, [x8, #80]
	str	x8, [sp, #24]
	b	.LBB75_15
.LBB75_13:                              // %if.then83
                                        //   in Loop: Header=BB75_15 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB75_14:                              // %if.end88
                                        //   in Loop: Header=BB75_15 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w10, [x8, #304]
	ldr	w11, [x9, #8]!
	add	x12, x8, #304                   // =304
	cmp	w10, w11
	csel	x9, x12, x9, gt
	ldr	w9, [x9]
	str	w9, [x8, #304]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w10, [x8, #308]
	ldr	w11, [x9, #12]!
	add	x12, x8, #308                   // =308
	cmp	w10, w11
	csel	x9, x12, x9, gt
	ldr	w9, [x9]
	str	w9, [x8, #308]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #24]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #24]
.LBB75_15:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB75_20
// %bb.16:                              // %for.body
                                        //   in Loop: Header=BB75_15 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #8]
	cmp	w8, #1                          // =1
	b.lt	.LBB75_13
// %bb.17:                              // %lor.lhs.false72
                                        //   in Loop: Header=BB75_15 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #8]
	cmp	w8, #4                          // =4
	b.gt	.LBB75_13
// %bb.18:                              // %lor.lhs.false76
                                        //   in Loop: Header=BB75_15 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #12]
	cmp	w8, #1                          // =1
	b.lt	.LBB75_13
// %bb.19:                              // %lor.lhs.false79
                                        //   in Loop: Header=BB75_15 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #12]
	cmp	w8, #5                          // =5
	b.ge	.LBB75_13
	b	.LBB75_14
.LBB75_20:                              // %for.end
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-12]
	mov	w19, #8
	mov	w20, #1
	ldr	x8, [x8, #80]
	str	x8, [sp, #24]
.LBB75_21:                              // %for.cond108
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB75_23
// %bb.22:                              // %for.body112
                                        //   in Loop: Header=BB75_21 Depth=1
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #24]
	str	w8, [x9, #4]
	ldr	x8, [sp, #24]
	str	w19, [x8, #36]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w10, [x8, #40]
	ldrsw	x9, [x9, #8]
	ldrsw	x8, [x8, #304]
	mul	x0, x10, x9
	lsl	x1, x8, #3
	bl	jdiv_round_up
	ldr	x8, [sp, #24]
	str	w0, [x8, #28]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w10, [x8, #44]
	ldrsw	x9, [x9, #12]
	ldrsw	x8, [x8, #308]
	mul	x0, x10, x9
	lsl	x1, x8, #3
	bl	jdiv_round_up
	ldr	x8, [sp, #24]
	str	w0, [x8, #32]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w10, [x8, #40]
	ldrsw	x9, [x9, #8]
	ldrsw	x1, [x8, #304]
	mul	x0, x10, x9
	bl	jdiv_round_up
	ldr	x8, [sp, #24]
	str	w0, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w10, [x8, #44]
	ldrsw	x9, [x9, #12]
	ldrsw	x1, [x8, #308]
	mul	x0, x10, x9
	bl	jdiv_round_up
	ldr	x8, [sp, #24]
	str	w0, [x8, #44]
	ldr	x8, [sp, #24]
	str	w20, [x8, #48]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #24]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #24]
	b	.LBB75_21
.LBB75_23:                              // %for.end153
	ldur	x8, [x29, #-8]
	ldrsw	x9, [x8, #308]
	ldr	w0, [x8, #44]
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	w0, [x8, #312]
	add	sp, sp, #80                     // =80
	ret
.LBB75_24:                              // %if.then30
	ldur	x8, [x29, #-8]
	mov	w9, #69
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #64]
	cmp	w8, #8                          // =8
	b.eq	.LBB75_10
.LBB75_25:                              // %if.then38
	ldur	x8, [x29, #-8]
	mov	w9, #13
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #64]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #68]
	cmp	w8, #11                         // =11
	b.ge	.LBB75_11
	b	.LBB75_12
.Lfunc_end75:
	.size	initial_setup, .Lfunc_end75-initial_setup
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function validate_script
	.type	validate_script,@function
validate_script:                        // @validate_script
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x28, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #2672                   // =2672
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w28, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #232]
	cmp	w8, #0                          // =0
	b.gt	.LBB76_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #17
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	wzr, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_2:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #240]
	stur	x8, [x29, #-16]
	ldr	w8, [x8, #20]
	cbnz	w8, .LBB76_4
// %bb.3:                               // %lor.lhs.false
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #24]
	cmp	w8, #63                         // =63
	b.eq	.LBB76_9
.LBB76_4:                               // %if.then7
	ldur	x8, [x29, #-8]
	mov	w9, #1
	add	x10, sp, #8                     // =8
	str	w9, [x8, #300]
	mov	w8, #-1
	stur	x10, [x29, #-104]
	stur	wzr, [x29, #-28]
	b	.LBB76_6
.LBB76_5:                               // %for.inc14
                                        //   in Loop: Header=BB76_6 Depth=1
	ldur	w9, [x29, #-28]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-28]
.LBB76_6:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB76_8 Depth 2
	ldur	x9, [x29, #-8]
	ldur	w10, [x29, #-28]
	ldr	w9, [x9, #68]
	cmp	w10, w9
	b.ge	.LBB76_12
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB76_6 Depth=1
	stur	wzr, [x29, #-32]
	mov	w9, wzr
	cmp	w9, #63                         // =63
	b.gt	.LBB76_5
.LBB76_8:                               // %for.body13
                                        //   Parent Loop BB76_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x9, [x29, #-104]
	add	x10, x9, #4                     // =4
	stur	x10, [x29, #-104]
	str	w8, [x9]
	ldur	w9, [x29, #-32]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-32]
	mov	w9, w9
	cmp	w9, #63                         // =63
	b.le	.LBB76_8
	b	.LBB76_5
.LBB76_9:                               // %if.else
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #300]
	sub	x8, x29, #92                    // =92
	stur	wzr, [x29, #-28]
.LBB76_10:                              // %for.cond18
                                        // =>This Inner Loop Header: Depth=1
	ldur	x9, [x29, #-8]
	ldur	w10, [x29, #-28]
	ldr	w9, [x9, #68]
	cmp	w10, w9
	b.ge	.LBB76_12
// %bb.11:                              // %for.body21
                                        //   in Loop: Header=BB76_10 Depth=1
	ldursw	x9, [x29, #-28]
	str	wzr, [x8, x9, lsl #2]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-28]
	b	.LBB76_10
.LBB76_12:                              // %if.end26
	mov	w19, #1
	mov	w20, #24
	mov	w21, #4
	mov	w22, #17
	mov	w23, #15
	add	x24, sp, #8                     // =8
	sub	x25, x29, #92                   // =92
	stur	w19, [x29, #-20]
	b	.LBB76_14
.LBB76_13:                              // %for.inc252
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	add	x8, x8, #36                     // =36
	add	w9, w9, #1                      // =1
	stur	x8, [x29, #-16]
	stur	w9, [x29, #-20]
.LBB76_14:                              // %for.cond27
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB76_20 Depth 2
                                        //     Child Loop BB76_62 Depth 2
                                        //     Child Loop BB76_41 Depth 2
                                        //       Child Loop BB76_49 Depth 3
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #232]
	cmp	w9, w8
	b.gt	.LBB76_65
// %bb.15:                              // %for.body30
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	cmp	w8, #1                          // =1
	stur	w8, [x29, #-24]
	b.lt	.LBB76_17
// %bb.16:                              // %for.body30
                                        //   in Loop: Header=BB76_14 Depth=1
	cmp	w8, #5                          // =5
	b.lt	.LBB76_18
.LBB76_17:                              // %if.then34
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-24]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w21, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_18:                              // %if.end47
                                        //   in Loop: Header=BB76_14 Depth=1
	stur	wzr, [x29, #-28]
	b	.LBB76_20
.LBB76_19:                              // %for.inc82
                                        //   in Loop: Header=BB76_20 Depth=2
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
.LBB76_20:                              // %for.cond48
                                        //   Parent Loop BB76_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x29, #-28]
	ldur	x8, [x29, #-16]
	cmp	w9, w10
	b.ge	.LBB76_27
// %bb.21:                              // %for.body50
                                        //   in Loop: Header=BB76_20 Depth=2
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #2
	ldr	w8, [x8, #4]
	stur	w8, [x29, #-36]
	tbnz	w8, #31, .LBB76_23
// %bb.22:                              // %lor.lhs.false54
                                        //   in Loop: Header=BB76_20 Depth=2
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.lt	.LBB76_24
.LBB76_23:                              // %if.then57
                                        //   in Loop: Header=BB76_20 Depth=2
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w22, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_24:                              // %if.end66
                                        //   in Loop: Header=BB76_20 Depth=2
	ldur	w8, [x29, #-28]
	cmp	w8, #1                          // =1
	b.lt	.LBB76_19
// %bb.25:                              // %land.lhs.true
                                        //   in Loop: Header=BB76_20 Depth=2
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	ldur	w10, [x29, #-36]
	ldr	w8, [x8, x9, lsl #2]
	cmp	w10, w8
	b.gt	.LBB76_19
// %bb.26:                              // %if.then72
                                        //   in Loop: Header=BB76_20 Depth=2
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w22, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB76_19
.LBB76_27:                              // %for.end84
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x9, [x29, #-16]
	ldr	w8, [x8, #20]
	ldr	w10, [x9, #24]
	stp	w10, w8, [x29, #-44]
	ldp	w10, w9, [x9, #28]
	stp	w9, w10, [x29, #-52]
	ldur	x10, [x29, #-8]
	ldr	w9, [x10, #300]
	cbz	w9, .LBB76_55
// %bb.28:                              // %if.then90
                                        //   in Loop: Header=BB76_14 Depth=1
	tbnz	w8, #31, .LBB76_53
// %bb.29:                              // %if.then90
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-40]
	cmp	w8, #63                         // =63
	b.gt	.LBB76_53
// %bb.30:                              // %lor.lhs.false94
                                        //   in Loop: Header=BB76_14 Depth=1
	ldp	w8, w9, [x29, #-44]
	cmp	w8, w9
	b.lt	.LBB76_53
// %bb.31:                              // %lor.lhs.false94
                                        //   in Loop: Header=BB76_14 Depth=1
	cmp	w8, #63                         // =63
	b.gt	.LBB76_53
// %bb.32:                              // %lor.lhs.false94
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-48]
	tbnz	w8, #31, .LBB76_53
// %bb.33:                              // %lor.lhs.false94
                                        //   in Loop: Header=BB76_14 Depth=1
	cmp	w8, #13                         // =13
	b.gt	.LBB76_53
// %bb.34:                              // %lor.lhs.false94
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-52]
	tbnz	w8, #31, .LBB76_53
// %bb.35:                              // %lor.lhs.false94
                                        //   in Loop: Header=BB76_14 Depth=1
	cmp	w8, #14                         // =14
	b.ge	.LBB76_53
// %bb.36:                              // %if.end115
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-40]
	cbz	w8, .LBB76_54
.LBB76_37:                              // %if.else129
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-24]
	cmp	w8, #1                          // =1
	b.eq	.LBB76_39
.LBB76_38:                              // %if.then131
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_39:                              // %if.end141
                                        //   in Loop: Header=BB76_14 Depth=1
	stur	wzr, [x29, #-28]
	b	.LBB76_41
.LBB76_40:                              // %for.inc206
                                        //   in Loop: Header=BB76_41 Depth=2
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
.LBB76_41:                              // %for.cond142
                                        //   Parent Loop BB76_14 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB76_49 Depth 3
	ldp	w8, w9, [x29, #-28]
	cmp	w8, w9
	b.ge	.LBB76_13
// %bb.42:                              // %for.body144
                                        //   in Loop: Header=BB76_41 Depth=2
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #2
	ldrsw	x8, [x8, #4]
	ldur	w9, [x29, #-40]
	add	x8, x24, x8, lsl #8
	stur	x8, [x29, #-104]
	cbz	w9, .LBB76_45
// %bb.43:                              // %land.lhs.true152
                                        //   in Loop: Header=BB76_41 Depth=2
	ldur	x8, [x29, #-104]
	ldr	w8, [x8]
	tbz	w8, #31, .LBB76_45
// %bb.44:                              // %if.then155
                                        //   in Loop: Header=BB76_41 Depth=2
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_45:                              // %if.end164
                                        //   in Loop: Header=BB76_41 Depth=2
	ldur	w8, [x29, #-40]
	b	.LBB76_49
.LBB76_46:                              // %if.then171
                                        //   in Loop: Header=BB76_49 Depth=3
	cbz	w8, .LBB76_48
.LBB76_47:                              // %if.then190
                                        //   in Loop: Header=BB76_49 Depth=3
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_48:                              // %if.end200
                                        //   in Loop: Header=BB76_49 Depth=3
	ldur	w8, [x29, #-52]
	ldur	x9, [x29, #-104]
	ldursw	x10, [x29, #-32]
	str	w8, [x9, x10, lsl #2]
	ldur	w8, [x29, #-32]
	add	w8, w8, #1                      // =1
.LBB76_49:                              // %for.cond165
                                        //   Parent Loop BB76_14 Depth=1
                                        //     Parent Loop BB76_41 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	w9, [x29, #-44]
	stur	w8, [x29, #-32]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB76_40
// %bb.50:                              // %for.body167
                                        //   in Loop: Header=BB76_49 Depth=3
	ldur	x8, [x29, #-104]
	ldursw	x9, [x29, #-32]
	ldr	w9, [x8, x9, lsl #2]
	ldur	w8, [x29, #-48]
	tbnz	w9, #31, .LBB76_46
// %bb.51:                              // %if.else183
                                        //   in Loop: Header=BB76_49 Depth=3
	ldur	x9, [x29, #-104]
	ldursw	x10, [x29, #-32]
	ldr	w9, [x9, x10, lsl #2]
	cmp	w8, w9
	b.ne	.LBB76_47
// %bb.52:                              // %lor.lhs.false187
                                        //   in Loop: Header=BB76_49 Depth=3
	ldp	w9, w8, [x29, #-52]
	sub	w8, w8, #1                      // =1
	cmp	w9, w8
	b.ne	.LBB76_47
	b	.LBB76_48
.LBB76_53:                              // %if.then106
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	w8, [x29, #-40]
	cbnz	w8, .LBB76_37
.LBB76_54:                              // %if.then117
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-44]
	cbnz	w8, .LBB76_38
	b	.LBB76_39
.LBB76_55:                              // %if.else209
                                        //   in Loop: Header=BB76_14 Depth=1
	cbnz	w8, .LBB76_59
// %bb.56:                              // %if.else209
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-44]
	cmp	w8, #63                         // =63
	b.ne	.LBB76_59
// %bb.57:                              // %if.else209
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-48]
	cbnz	w8, .LBB76_59
// %bb.58:                              // %if.else209
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	w8, [x29, #-52]
	cbz	w8, .LBB76_60
.LBB76_59:                              // %if.then217
                                        //   in Loop: Header=BB76_14 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB76_60:                              // %if.end226
                                        //   in Loop: Header=BB76_14 Depth=1
	stur	wzr, [x29, #-28]
	b	.LBB76_62
.LBB76_61:                              // %if.end245
                                        //   in Loop: Header=BB76_62 Depth=2
	ldursw	x8, [x29, #-36]
	ldur	w9, [x29, #-28]
	str	w19, [x25, x8, lsl #2]
	add	w8, w9, #1                      // =1
	stur	w8, [x29, #-28]
.LBB76_62:                              // %for.cond227
                                        //   Parent Loop BB76_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x29, #-28]
	cmp	w8, w9
	b.ge	.LBB76_13
// %bb.63:                              // %for.body229
                                        //   in Loop: Header=BB76_62 Depth=2
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #2
	ldrsw	x8, [x8, #4]
	ldr	w9, [x25, x8, lsl #2]
	stur	w8, [x29, #-36]
	cbz	w9, .LBB76_61
// %bb.64:                              // %if.then236
                                        //   in Loop: Header=BB76_62 Depth=2
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w22, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB76_61
.LBB76_65:                              // %for.end255
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #300]
	stur	wzr, [x29, #-28]
	cbz	w8, .LBB76_71
// %bb.66:                              // %for.cond259.preheader
	add	x19, sp, #8                     // =8
	mov	w20, #44
	b	.LBB76_68
.LBB76_67:                              // %for.inc273
                                        //   in Loop: Header=BB76_68 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
.LBB76_68:                              // %for.cond259
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB76_76
// %bb.69:                              // %for.body262
                                        //   in Loop: Header=BB76_68 Depth=1
	ldursw	x8, [x29, #-28]
	lsl	x8, x8, #8
	ldr	w8, [x19, x8]
	tbz	w8, #31, .LBB76_67
// %bb.70:                              // %if.then267
                                        //   in Loop: Header=BB76_68 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB76_67
.LBB76_71:
	sub	x19, x29, #92                   // =92
	mov	w20, #44
	b	.LBB76_73
.LBB76_72:                              // %for.inc290
                                        //   in Loop: Header=BB76_73 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
.LBB76_73:                              // %for.cond277
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB76_76
// %bb.74:                              // %for.body280
                                        //   in Loop: Header=BB76_73 Depth=1
	ldursw	x8, [x29, #-28]
	ldr	w8, [x19, x8, lsl #2]
	cbnz	w8, .LBB76_72
// %bb.75:                              // %if.then284
                                        //   in Loop: Header=BB76_73 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB76_72
.LBB76_76:                              // %if.end293
	add	sp, sp, #2672                   // =2672
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end76:
	.size	validate_script, .Lfunc_end76-validate_script
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function select_scan_parameters
	.type	select_scan_parameters,@function
select_scan_parameters:                 // @select_scan_parameters
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #240]
	cbz	x8, .LBB77_5
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w11, #36
	ldr	x9, [x8, #424]
	str	x9, [sp, #8]
	ldrsw	x9, [x9, #44]
	ldr	x10, [x8, #240]
	mul	x9, x9, x11
	add	x11, x10, x9
	str	x11, [sp]
	ldr	w9, [x10, x9]
	str	w9, [x8, #316]
	mov	w8, #96
	stur	wzr, [x29, #-12]
.LBB77_2:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [sp]
	ldur	w10, [x29, #-12]
	ldr	w9, [x9]
	cmp	w10, w9
	b.ge	.LBB77_4
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB77_2 Depth=1
	ldr	x10, [sp]
	ldursw	x11, [x29, #-12]
	ldur	x9, [x29, #-8]
	add	x10, x10, x11, lsl #2
	ldr	x12, [x9, #80]
	ldrsw	x10, [x10, #4]
	add	x9, x9, x11, lsl #3
	madd	x10, x10, x8, x12
	str	x10, [x9, #320]
	ldur	w9, [x29, #-12]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-12]
	b	.LBB77_2
.LBB77_4:                               // %for.end
	ldr	x8, [sp]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #20]
	str	w8, [x9, #404]
	ldr	x8, [sp]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #24]
	str	w8, [x9, #408]
	ldr	x8, [sp]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #28]
	str	w8, [x9, #412]
	ldr	x8, [sp]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #32]
	str	w8, [x9, #416]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB77_5:                               // %if.else
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #68]
	cmp	w8, #5                          // =5
	b.lt	.LBB77_7
// %bb.6:                               // %if.then15
	ldur	x8, [x29, #-8]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #68]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB77_7:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #68]
	str	w9, [x8, #316]
	mov	w8, #96
	stur	wzr, [x29, #-12]
.LBB77_8:                               // %for.cond26
                                        // =>This Inner Loop Header: Depth=1
	ldur	x9, [x29, #-8]
	ldur	w10, [x29, #-12]
	ldr	w11, [x9, #68]
	cmp	w10, w11
	b.ge	.LBB77_10
// %bb.9:                               // %for.body29
                                        //   in Loop: Header=BB77_8 Depth=1
	ldr	x9, [x9, #80]
	ldursw	x10, [x29, #-12]
	ldur	x11, [x29, #-8]
	madd	x9, x10, x8, x9
	add	x10, x11, x10, lsl #3
	str	x9, [x10, #320]
	ldur	w9, [x29, #-12]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-12]
	b	.LBB77_8
.LBB77_10:                              // %for.end38
	str	wzr, [x9, #404]
	ldur	x8, [x29, #-8]
	mov	w9, #63
	str	w9, [x8, #408]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #412]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #416]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end77:
	.size	select_scan_parameters, .Lfunc_end77-select_scan_parameters
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function per_scan_setup
	.type	per_scan_setup,@function
per_scan_setup:                         // @per_scan_setup
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	w8, [x0, #316]
	cmp	w8, #1                          // =1
	b.ne	.LBB78_7
// %bb.1:                               // %if.then
	ldr	x8, [x0, #320]
	ldr	x9, [x29, #24]
	mov	w10, #8
	str	x8, [sp, #8]
	ldr	w8, [x8, #28]
	str	w8, [x9, #352]
	ldr	x8, [sp, #8]
	ldr	x9, [x29, #24]
	ldr	w8, [x8, #32]
	str	w8, [x9, #356]
	ldr	x9, [sp, #8]
	mov	w8, #1
	str	w8, [x9, #52]
	ldr	x9, [sp, #8]
	str	w8, [x9, #56]
	ldr	x9, [sp, #8]
	str	w8, [x9, #60]
	ldr	x9, [sp, #8]
	str	w10, [x9, #64]
	ldr	x9, [sp, #8]
	str	w8, [x9, #68]
	ldr	x9, [sp, #8]
	ldr	w10, [x9, #32]
	ldr	w9, [x9, #12]
	udiv	w11, w10, w9
	msub	w9, w11, w9, w10
	stur	w9, [x29, #-12]
	cbnz	w9, .LBB78_3
// %bb.2:                               // %if.then3
	ldr	x9, [sp, #8]
	ldr	w9, [x9, #12]
	stur	w9, [x29, #-12]
.LBB78_3:                               // %if.end
	ldur	w9, [x29, #-12]
	ldr	x10, [sp, #8]
	str	w9, [x10, #72]
	ldr	x9, [x29, #24]
	str	w8, [x9, #360]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #364]
.LBB78_4:                               // %if.end80
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #276]
	cmp	w8, #1                          // =1
	b.lt	.LBB78_6
// %bb.5:                               // %if.then83
	ldr	x8, [x29, #24]
	mov	w11, #65535
	ldrsw	x9, [x8, #276]
	ldr	w10, [x8, #352]
	mul	x9, x9, x10
	cmp	x9, x11
	str	x9, [sp]
	csel	x9, x9, x11, lt
	str	w9, [x8, #272]
.LBB78_6:                               // %if.end92
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB78_7:                               // %if.else
	ldr	w8, [x0, #316]
	cmp	w8, #1                          // =1
	b.lt	.LBB78_9
// %bb.8:                               // %lor.lhs.false
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #316]
	cmp	w8, #5                          // =5
	b.lt	.LBB78_10
.LBB78_9:                               // %if.then10
	ldr	x8, [x29, #24]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #316]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB78_10:                              // %if.end19
	ldr	x8, [x29, #24]
	ldrsw	x9, [x8, #304]
	ldr	w0, [x8, #40]
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldr	x8, [x29, #24]
	str	w0, [x8, #352]
	ldr	x8, [x29, #24]
	ldrsw	x9, [x8, #308]
	ldr	w0, [x8, #44]
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldr	x8, [x29, #24]
	mov	w19, #11
	str	w0, [x8, #356]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #360]
	stur	wzr, [x29, #-4]
.LBB78_11:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB78_19 Depth 2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB78_4
// %bb.12:                              // %for.body
                                        //   in Loop: Header=BB78_11 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-4]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	str	x8, [sp, #8]
	ldp	w10, w9, [x8, #8]
	stp	w10, w9, [x8, #52]
	ldp	w9, w10, [x8, #52]
	mul	w11, w9, w10
	ldr	w9, [x8, #52]
	lsl	w9, w9, #3
	stp	w11, w9, [x8, #60]
	ldr	w9, [x8, #28]
	ldr	w8, [x8, #52]
	udiv	w10, w9, w8
	msub	w8, w10, w8, w9
	stur	w8, [x29, #-12]
	cbnz	w8, .LBB78_14
// %bb.13:                              // %if.then50
                                        //   in Loop: Header=BB78_11 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	stur	w8, [x29, #-12]
.LBB78_14:                              // %if.end52
                                        //   in Loop: Header=BB78_11 Depth=1
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	str	w8, [x9, #68]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #32]
	ldr	w8, [x8, #56]
	udiv	w10, w9, w8
	msub	w8, w10, w8, w9
	stur	w8, [x29, #-12]
	cbnz	w8, .LBB78_16
// %bb.15:                              // %if.then59
                                        //   in Loop: Header=BB78_11 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #56]
	stur	w8, [x29, #-12]
.LBB78_16:                              // %if.end61
                                        //   in Loop: Header=BB78_11 Depth=1
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	str	w8, [x9, #72]
	ldr	x8, [sp, #8]
	ldr	x9, [x29, #24]
	ldr	w8, [x8, #60]
	stur	w8, [x29, #-8]
	ldr	w9, [x9, #360]
	add	w8, w9, w8
	cmp	w8, #11                         // =11
	b.lt	.LBB78_19
// %bb.17:                              // %if.then67
                                        //   in Loop: Header=BB78_11 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB78_19
.LBB78_18:                              // %while.body
                                        //   in Loop: Header=BB78_19 Depth=2
	ldr	x9, [x29, #24]
	ldrsw	x10, [x9, #360]
	add	x11, x9, x10, lsl #2
	add	w10, w10, #1                    // =1
	str	w10, [x9, #360]
	str	w8, [x11, #364]
.LBB78_19:                              // %while.cond
                                        //   Parent Loop BB78_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [x29, #-8]
	subs	w9, w9, #1                      // =1
	stur	w9, [x29, #-8]
	b.ge	.LBB78_18
// %bb.20:                              // %for.inc
                                        //   in Loop: Header=BB78_11 Depth=1
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-4]
	b	.LBB78_11
.Lfunc_end78:
	.size	per_scan_setup, .Lfunc_end78-per_scan_setup
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_abort                      // -- Begin function jpeg_abort
	.p2align	2
	.type	jpeg_abort,@function
jpeg_abort:                             // @jpeg_abort
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, #1
	str	x0, [sp, #8]
.LBB79_1:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	str	w8, [sp, #4]
	mov	w9, w8
	ldr	x8, [sp, #8]
	cmp	w9, #1                          // =1
	b.lt	.LBB79_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB79_1 Depth=1
	ldr	x8, [x8, #8]
	ldr	x0, [sp, #8]
	ldr	w1, [sp, #4]
	ldr	x8, [x8, #72]
	blr	x8
	ldr	w8, [sp, #4]
	sub	w8, w8, #1                      // =1
	b	.LBB79_1
.LBB79_3:                               // %for.end
	ldr	w8, [x8, #24]
	ldr	x10, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	mov	w9, #100
	cmp	w8, #0                          // =0
	mov	w8, #200
	csel	w8, w8, w9, ne
	str	w8, [x10, #28]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end79:
	.size	jpeg_abort, .Lfunc_end79-jpeg_abort
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_destroy                    // -- Begin function jpeg_destroy
	.p2align	2
	.type	jpeg_destroy,@function
jpeg_destroy:                           // @jpeg_destroy
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	cbz	x8, .LBB80_2
// %bb.1:                               // %if.then
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #80]
	blr	x8
.LBB80_2:                               // %if.end
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	xzr, [x8, #8]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #28]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end80:
	.size	jpeg_destroy, .Lfunc_end80-jpeg_destroy
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_alloc_quant_table          // -- Begin function jpeg_alloc_quant_table
	.p2align	2
	.type	jpeg_alloc_quant_table,@function
jpeg_alloc_quant_table:                 // @jpeg_alloc_quant_table
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w2, #132
	mov	w1, wzr
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x0, [sp]
	str	wzr, [x0, #128]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end81:
	.size	jpeg_alloc_quant_table, .Lfunc_end81-jpeg_alloc_quant_table
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_alloc_huff_table           // -- Begin function jpeg_alloc_huff_table
	.p2align	2
	.type	jpeg_alloc_huff_table,@function
jpeg_alloc_huff_table:                  // @jpeg_alloc_huff_table
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w2, #280
	mov	w1, wzr
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x0, [sp]
	str	wzr, [x0, #276]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end82:
	.size	jpeg_alloc_huff_table, .Lfunc_end82-jpeg_alloc_huff_table
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_add_quant_table            // -- Begin function jpeg_add_quant_table
	.p2align	2
	.type	jpeg_add_quant_table,@function
jpeg_add_quant_table:                   // @jpeg_add_quant_table
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	add	x8, x0, w1, sxtw #3
	add	x8, x8, #88                     // =88
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	str	w4, [sp, #32]
	str	x8, [sp, #24]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB83_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB83_2:                               // %if.end
	ldr	x8, [sp, #24]
	ldr	x8, [x8]
	cbnz	x8, .LBB83_4
// %bb.3:                               // %if.then7
	ldur	x0, [x29, #-8]
	bl	jpeg_alloc_quant_table
	ldr	x8, [sp, #24]
	str	x0, [x8]
.LBB83_4:                               // %if.end8
	mov	x8, #55051
	movk	x8, #28835, lsl #16
	movk	x8, #2621, lsl #32
	movk	x8, #41943, lsl #48
	mov	w9, #32767
	mov	w10, #255
	str	wzr, [sp, #20]
	mov	w11, wzr
	cmp	w11, #63                        // =63
	b.gt	.LBB83_6
.LBB83_5:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x11, [x29, #-24]
	ldrsw	x12, [sp, #20]
	ldursw	x13, [x29, #-28]
	ldr	w14, [sp, #32]
	ldr	w11, [x11, x12, lsl #2]
	mul	x11, x11, x13
	add	x11, x11, #50                   // =50
	smulh	x13, x11, x8
	add	x11, x13, x11
	asr	x13, x11, #6
	add	x11, x13, x11, lsr #63
	cmp	x11, #1                         // =1
	csinc	x11, x11, xzr, ge
	cmp	x11, #8, lsl #12                // =32768
	csel	x11, x9, x11, ge
	cmp	x11, #255                       // =255
	ldr	x13, [sp, #24]
	ccmp	w14, #0, #4, gt
	csel	x11, x10, x11, ne
	str	x11, [sp, #8]
	ldr	x13, [x13]
	strh	w11, [x13, x12, lsl #1]
	ldr	w11, [sp, #20]
	add	w11, w11, #1                    // =1
	str	w11, [sp, #20]
	mov	w11, w11
	cmp	w11, #63                        // =63
	b.le	.LBB83_5
.LBB83_6:                               // %for.end
	ldr	x8, [sp, #24]
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldr	x8, [x8]
	str	wzr, [x8, #128]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end83:
	.size	jpeg_add_quant_table, .Lfunc_end83-jpeg_add_quant_table
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_set_linear_quality         // -- Begin function jpeg_set_linear_quality
	.p2align	2
	.type	jpeg_set_linear_quality,@function
jpeg_set_linear_quality:                // @jpeg_set_linear_quality
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w4, w2
	stp	w2, w1, [sp]
	adrp	x2, jpeg_set_linear_quality.std_luminance_quant_tbl
	mov	w3, w1
	add	x2, x2, :lo12:jpeg_set_linear_quality.std_luminance_quant_tbl
	mov	w1, wzr
	str	x0, [sp, #8]
	bl	jpeg_add_quant_table
	ldr	x0, [sp, #8]
	ldp	w4, w3, [sp]
	adrp	x2, jpeg_set_linear_quality.std_chrominance_quant_tbl
	add	x2, x2, :lo12:jpeg_set_linear_quality.std_chrominance_quant_tbl
	mov	w1, #1
	bl	jpeg_add_quant_table
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end84:
	.size	jpeg_set_linear_quality, .Lfunc_end84-jpeg_set_linear_quality
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_quality_scaling            // -- Begin function jpeg_quality_scaling
	.p2align	2
	.type	jpeg_quality_scaling,@function
jpeg_quality_scaling:                   // @jpeg_quality_scaling
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	cmp	w0, #1                          // =1
	csinc	w8, w0, wzr, ge
	cmp	w8, #100                        // =100
	mov	w9, #100
	csel	w8, w9, w8, gt
	cmp	w8, #49                         // =49
	str	w8, [sp, #12]
	b.gt	.LBB85_2
// %bb.1:                               // %if.then5
	mov	w9, #5000
	sdiv	w8, w9, w8
	str	w8, [sp, #12]
	mov	w0, w8
	add	sp, sp, #16                     // =16
	ret
.LBB85_2:                               // %if.else
	mov	w9, #200
	sub	w8, w9, w8, lsl #1
	str	w8, [sp, #12]
	mov	w0, w8
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end85:
	.size	jpeg_quality_scaling, .Lfunc_end85-jpeg_quality_scaling
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_set_quality                // -- Begin function jpeg_set_quality
	.p2align	2
	.type	jpeg_set_quality,@function
jpeg_set_quality:                       // @jpeg_set_quality
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	mov	w0, w1
	stp	w2, w1, [sp]
	bl	jpeg_quality_scaling
	ldr	x8, [sp, #8]
	ldr	w2, [sp]
	mov	w1, w0
	str	w0, [sp, #4]
	mov	x0, x8
	bl	jpeg_set_linear_quality
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end86:
	.size	jpeg_set_quality, .Lfunc_end86-jpeg_set_quality
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_set_defaults               // -- Begin function jpeg_set_defaults
	.p2align	2
	.type	jpeg_set_defaults,@function
jpeg_set_defaults:                      // @jpeg_set_defaults
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB87_2
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB87_2:                               // %if.end
	ldr	x8, [x29, #24]
	ldr	x8, [x8, #80]
	cbnz	x8, .LBB87_4
// %bb.3:                               // %if.then6
	ldr	x0, [x29, #24]
	mov	w2, #960
	mov	w1, wzr
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	str	x0, [x8, #80]
.LBB87_4:                               // %if.end8
	ldr	x8, [x29, #24]
	mov	w9, #8
	mov	w1, #75
	mov	w2, #1
	str	w9, [x8, #64]
	ldr	x0, [x29, #24]
	mov	w19, #1
	bl	jpeg_set_quality
	ldr	x0, [x29, #24]
	bl	std_huff_tables
	mov	w8, #5
	stur	wzr, [x29, #-4]
	mov	w10, wzr
	ldr	x9, [x29, #24]
	cmp	w10, #15                        // =15
	b.gt	.LBB87_6
.LBB87_5:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldursw	x10, [x29, #-4]
	add	x9, x9, x10
	strb	wzr, [x9, #184]
	ldr	x9, [x29, #24]
	ldursw	x10, [x29, #-4]
	add	x9, x9, x10
	strb	w19, [x9, #200]
	ldr	x9, [x29, #24]
	ldursw	x10, [x29, #-4]
	add	x9, x9, x10
	strb	w8, [x9, #216]
	ldur	w9, [x29, #-4]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-4]
	mov	w10, w9
	ldr	x9, [x29, #24]
	cmp	w10, #15                        // =15
	b.le	.LBB87_5
.LBB87_6:                               // %for.end
	str	xzr, [x9, #240]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #232]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #248]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #252]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #256]
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #64]
	cmp	w8, #9                          // =9
	b.lt	.LBB87_8
// %bb.7:                               // %if.then17
	ldr	x8, [x29, #24]
	mov	w9, #1
	str	w9, [x8, #256]
.LBB87_8:                               // %if.end19
	ldr	x8, [x29, #24]
	mov	w9, #1
	str	wzr, [x8, #260]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #264]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #268]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #272]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #276]
	ldr	x8, [x29, #24]
	strb	wzr, [x8, #284]
	ldr	x8, [x29, #24]
	strh	w9, [x8, #286]
	ldr	x8, [x29, #24]
	strh	w9, [x8, #288]
	ldr	x0, [x29, #24]
	bl	jpeg_default_colorspace
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end87:
	.size	jpeg_set_defaults, .Lfunc_end87-jpeg_set_defaults
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function std_huff_tables
	.type	std_huff_tables,@function
std_huff_tables:                        // @std_huff_tables
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x2, std_huff_tables.bits_dc_luminance
	adrp	x3, std_huff_tables.val_dc_luminance
	add	x1, x0, #120                    // =120
	add	x2, x2, :lo12:std_huff_tables.bits_dc_luminance
	add	x3, x3, :lo12:std_huff_tables.val_dc_luminance
	str	x0, [sp, #8]
	bl	add_huff_table
	ldr	x0, [sp, #8]
	adrp	x2, std_huff_tables.bits_ac_luminance
	adrp	x3, std_huff_tables.val_ac_luminance
	add	x2, x2, :lo12:std_huff_tables.bits_ac_luminance
	add	x1, x0, #152                    // =152
	add	x3, x3, :lo12:std_huff_tables.val_ac_luminance
	bl	add_huff_table
	ldr	x0, [sp, #8]
	adrp	x2, std_huff_tables.bits_dc_chrominance
	adrp	x3, std_huff_tables.val_dc_chrominance
	add	x2, x2, :lo12:std_huff_tables.bits_dc_chrominance
	add	x1, x0, #128                    // =128
	add	x3, x3, :lo12:std_huff_tables.val_dc_chrominance
	bl	add_huff_table
	ldr	x0, [sp, #8]
	adrp	x2, std_huff_tables.bits_ac_chrominance
	adrp	x3, std_huff_tables.val_ac_chrominance
	add	x2, x2, :lo12:std_huff_tables.bits_ac_chrominance
	add	x1, x0, #160                    // =160
	add	x3, x3, :lo12:std_huff_tables.val_ac_chrominance
	bl	add_huff_table
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end88:
	.size	std_huff_tables, .Lfunc_end88-std_huff_tables
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_default_colorspace         // -- Begin function jpeg_default_colorspace
	.p2align	2
	.type	jpeg_default_colorspace,@function
jpeg_default_colorspace:                // @jpeg_default_colorspace
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	w8, [x0, #52]
	cmp	w8, #5                          // =5
	b.hi	.LBB89_3
// %bb.1:                               // %entry
	adrp	x9, .LJTI89_0
	add	x9, x9, :lo12:.LJTI89_0
	adr	x10, .LBB89_2
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB89_2:                               // %sw.bb2
	ldr	x0, [sp, #8]
	mov	w1, #3
	bl	jpeg_set_colorspace
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB89_3:                               // %sw.default
	ldr	x8, [sp, #8]
	mov	w9, #7
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB89_4:                               // %sw.bb5
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	jpeg_set_colorspace
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB89_5:                               // %sw.bb
	ldr	x0, [sp, #8]
	mov	w1, #1
	bl	jpeg_set_colorspace
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB89_6:                               // %sw.bb3
	ldr	x0, [sp, #8]
	mov	w1, #4
	bl	jpeg_set_colorspace
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB89_7:                               // %sw.bb4
	ldr	x0, [sp, #8]
	mov	w1, #5
	bl	jpeg_set_colorspace
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end89:
	.size	jpeg_default_colorspace, .Lfunc_end89-jpeg_default_colorspace
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI89_0:
	.byte	(.LBB89_4-.LBB89_2)>>2
	.byte	(.LBB89_5-.LBB89_2)>>2
	.byte	(.LBB89_2-.LBB89_2)>>2
	.byte	(.LBB89_2-.LBB89_2)>>2
	.byte	(.LBB89_6-.LBB89_2)>>2
	.byte	(.LBB89_7-.LBB89_2)>>2
                                        // -- End function
	.text
	.globl	jpeg_set_colorspace             // -- Begin function jpeg_set_colorspace
	.p2align	2
	.type	jpeg_set_colorspace,@function
jpeg_set_colorspace:                    // @jpeg_set_colorspace
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB90_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB90_2:                               // %if.end
	ldur	w8, [x29, #-12]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #72]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #280]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #292]
	ldur	w8, [x29, #-12]
	cmp	w8, #5                          // =5
	b.hi	.LBB90_10
// %bb.3:                               // %if.end
	adrp	x9, .LJTI90_0
	add	x9, x9, :lo12:.LJTI90_0
	adr	x10, .LBB90_4
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB90_4:                               // %sw.bb130
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #48]
	str	w9, [x8, #68]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #68]
	cmp	w8, #1                          // =1
	b.lt	.LBB90_6
// %bb.5:                               // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #68]
	cmp	w8, #11                         // =11
	b.lt	.LBB90_7
.LBB90_6:                               // %if.then136
	ldur	x8, [x29, #-8]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #68]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	mov	w9, #10
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB90_7:                               // %if.end150
	mov	w8, #96
	mov	w9, #1
	str	wzr, [sp, #4]
.LBB90_8:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x10, [x29, #-8]
	ldr	w11, [sp, #4]
	ldr	w10, [x10, #68]
	cmp	w11, w10
	b.ge	.LBB90_11
// %bb.9:                               // %for.body
                                        //   in Loop: Header=BB90_8 Depth=1
	ldur	x10, [x29, #-8]
	ldrsw	x11, [sp, #4]
	ldr	x10, [x10, #80]
	mul	x12, x11, x8
	add	x13, x10, x12
	str	x13, [sp, #8]
	str	w11, [x10, x12]
	ldr	x10, [sp, #8]
	str	w9, [x10, #8]
	ldr	x10, [sp, #8]
	str	w9, [x10, #12]
	ldr	x10, [sp, #8]
	str	wzr, [x10, #16]
	ldr	x10, [sp, #8]
	str	wzr, [x10, #20]
	ldr	x10, [sp, #8]
	str	wzr, [x10, #24]
	ldr	w10, [sp, #4]
	add	w10, w10, #1                    // =1
	str	w10, [sp, #4]
	b	.LBB90_8
.LBB90_10:                              // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB90_11:                              // %sw.epilog
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB90_12:                              // %sw.bb
	ldur	x8, [x29, #-8]
	mov	w9, #1
	str	w9, [x8, #280]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #68]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
	str	w9, [x8]
	b	.LBB90_16
.LBB90_13:                              // %sw.bb6
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w10, #3
	str	w9, [x8, #292]
	ldur	x8, [x29, #-8]
	str	w10, [x8, #68]
	ldur	x8, [x29, #-8]
	mov	w10, #82
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
	str	w10, [x8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x10, x8, #96                    // =96
	str	x10, [sp, #8]
	mov	w10, #71
	str	w10, [x8, #96]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x10, x8, #192                   // =192
	str	x10, [sp, #8]
	mov	w10, #66
	str	w10, [x8, #192]
	b	.LBB90_16
.LBB90_14:                              // %sw.bb33
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w10, #3
	mov	w11, #2
	str	w9, [x8, #280]
	ldur	x8, [x29, #-8]
	str	w10, [x8, #68]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
	str	w9, [x8]
	ldr	x8, [sp, #8]
	str	w11, [x8, #8]
	ldr	x8, [sp, #8]
	str	w11, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x12, x8, #96                    // =96
	str	x12, [sp, #8]
	str	w11, [x8, #96]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	w9, [x8, #16]
	ldr	x8, [sp, #8]
	str	w9, [x8, #20]
	ldr	x8, [sp, #8]
	str	w9, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x11, x8, #192                   // =192
	str	x11, [sp, #8]
	str	w10, [x8, #192]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	w9, [x8, #16]
	ldr	x8, [sp, #8]
	str	w9, [x8, #20]
	ldr	x8, [sp, #8]
	str	w9, [x8, #24]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB90_15:                              // %sw.bb60
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w10, #4
	str	w9, [x8, #292]
	ldur	x8, [x29, #-8]
	str	w10, [x8, #68]
	ldur	x8, [x29, #-8]
	mov	w10, #67
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
	str	w10, [x8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x10, x8, #96                    // =96
	str	x10, [sp, #8]
	mov	w10, #77
	str	w10, [x8, #96]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x10, x8, #192                   // =192
	str	x10, [sp, #8]
	mov	w10, #89
	str	w10, [x8, #192]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x10, x8, #288                   // =288
	str	x10, [sp, #8]
	mov	w10, #75
	str	w10, [x8, #288]
.LBB90_16:                              // %sw.epilog
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	b	.LBB90_18
.LBB90_17:                              // %sw.bb95
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w10, #4
	mov	w11, #2
	str	w9, [x8, #292]
	ldur	x8, [x29, #-8]
	str	w10, [x8, #68]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
	str	w9, [x8]
	ldr	x8, [sp, #8]
	str	w11, [x8, #8]
	ldr	x8, [sp, #8]
	str	w11, [x8, #12]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x12, x8, #96                    // =96
	str	x12, [sp, #8]
	str	w11, [x8, #96]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	w9, [x8, #16]
	ldr	x8, [sp, #8]
	str	w9, [x8, #20]
	ldr	x8, [sp, #8]
	str	w9, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x12, x8, #192                   // =192
	str	x12, [sp, #8]
	mov	w12, #3
	str	w12, [x8, #192]
	ldr	x8, [sp, #8]
	str	w9, [x8, #8]
	ldr	x8, [sp, #8]
	str	w9, [x8, #12]
	ldr	x8, [sp, #8]
	str	w9, [x8, #16]
	ldr	x8, [sp, #8]
	str	w9, [x8, #20]
	ldr	x8, [sp, #8]
	str	w9, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #80]
	add	x9, x8, #288                    // =288
	str	x9, [sp, #8]
	str	w10, [x8, #288]
	ldr	x8, [sp, #8]
	str	w11, [x8, #8]
	ldr	x8, [sp, #8]
	str	w11, [x8, #12]
.LBB90_18:                              // %sw.epilog
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #20]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end90:
	.size	jpeg_set_colorspace, .Lfunc_end90-jpeg_set_colorspace
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI90_0:
	.byte	(.LBB90_4-.LBB90_4)>>2
	.byte	(.LBB90_12-.LBB90_4)>>2
	.byte	(.LBB90_13-.LBB90_4)>>2
	.byte	(.LBB90_14-.LBB90_4)>>2
	.byte	(.LBB90_15-.LBB90_4)>>2
	.byte	(.LBB90_17-.LBB90_4)>>2
                                        // -- End function
	.text
	.p2align	2                               // -- Begin function add_huff_table
	.type	add_huff_table,@function
add_huff_table:                         // @add_huff_table
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	x2, x1, [sp, #8]
	str	x3, [sp]
	ldr	x8, [x1]
	cbnz	x8, .LBB91_2
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	bl	jpeg_alloc_huff_table
	ldr	x8, [sp, #16]
	str	x0, [x8]
.LBB91_2:                               // %if.end
	ldp	x9, x8, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldr	x8, [x8]
	ldrb	w10, [x9, #16]
	ldr	q0, [x9]
	strb	w10, [x8, #16]
	str	q0, [x8]
	ldr	x8, [sp, #16]
	ldr	x9, [sp]
	ldr	x8, [x8]
	ldp	q0, q3, [x9, #64]
	ldp	q2, q1, [x9, #96]
	stur	q0, [x8, #81]
	stur	q1, [x8, #129]
	stur	q2, [x8, #113]
	stur	q3, [x8, #97]
	ldp	q0, q3, [x9, #128]
	ldp	q2, q1, [x9, #160]
	stur	q0, [x8, #145]
	stur	q1, [x8, #193]
	stur	q2, [x8, #177]
	stur	q3, [x8, #161]
	ldp	q0, q2, [x9, #192]
	ldp	q1, q3, [x9, #224]
	stur	q0, [x8, #209]
	stur	q1, [x8, #241]
	stur	q2, [x8, #225]
	ldp	q0, q1, [x9, #32]
	ldp	q2, q4, [x9]
	add	x9, x8, #17                     // =17
	str	q3, [x9, #240]
	stur	q1, [x8, #65]
	stur	q0, [x8, #49]
	stur	q4, [x8, #33]
	stur	q2, [x8, #17]
	ldr	x8, [sp, #16]
	ldr	x8, [x8]
	str	wzr, [x8, #276]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end91:
	.size	add_huff_table, .Lfunc_end91-add_huff_table
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_simple_progression         // -- Begin function jpeg_simple_progression
	.p2align	2
	.type	jpeg_simple_progression,@function
jpeg_simple_progression:                // @jpeg_simple_progression
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #68]
	stur	w8, [x29, #-12]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB92_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB92_2:                               // %if.end
	ldur	w8, [x29, #-12]
	cmp	w8, #3                          // =3
	b.ne	.LBB92_5
// %bb.3:                               // %land.lhs.true
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #72]
	cmp	w8, #3                          // =3
	b.ne	.LBB92_5
// %bb.4:                               // %if.then6
	mov	w8, #10
	str	w8, [sp, #16]
	b	.LBB92_8
.LBB92_5:                               // %if.else
	ldur	w8, [x29, #-12]
	cmp	w8, #5                          // =5
	b.lt	.LBB92_7
// %bb.6:                               // %if.then8
	add	w8, w8, w8, lsl #1
	lsl	w8, w8, #1
	str	w8, [sp, #16]
	b	.LBB92_8
.LBB92_7:                               // %if.else9
	mov	w9, #2
	bfi	w9, w8, #2, #30
	str	w9, [sp, #16]
.LBB92_8:                               // %if.end12
	ldur	x0, [x29, #-8]
	ldrsw	x9, [sp, #16]
	mov	w1, wzr
	ldr	x8, [x0, #8]
	add	x9, x9, x9, lsl #3
	lsl	x2, x9, #2
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	str	x0, [sp, #8]
	str	x0, [x8, #240]
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #232]
	ldur	w8, [x29, #-12]
	cmp	w8, #3                          // =3
	b.ne	.LBB92_11
// %bb.9:                               // %land.lhs.true16
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #72]
	cmp	w8, #3                          // =3
	b.ne	.LBB92_11
// %bb.10:                              // %if.then20
	ldr	x0, [sp, #8]
	ldur	w1, [x29, #-12]
	mov	w3, #1
	mov	w2, wzr
	bl	fill_dc_scans
	mov	w2, #1
	mov	w3, #5
	mov	w5, #2
	mov	w1, wzr
	mov	w4, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	mov	w1, #2
	mov	w2, #1
	mov	w3, #63
	mov	w5, #1
	mov	w4, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	mov	w1, #1
	mov	w2, #1
	mov	w3, #63
	mov	w5, #1
	mov	w4, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	mov	w2, #6
	mov	w3, #63
	mov	w5, #2
	mov	w1, wzr
	mov	w4, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	mov	w2, #1
	mov	w3, #63
	mov	w4, #2
	mov	w5, #1
	mov	w1, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	ldur	w1, [x29, #-12]
	mov	w2, #1
	mov	w3, wzr
	str	x0, [sp, #8]
	bl	fill_dc_scans
	mov	w1, #2
	mov	w2, #1
	mov	w3, #63
	mov	w4, #1
	mov	w5, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	mov	w1, #1
	mov	w2, #1
	mov	w3, #63
	mov	w4, #1
	mov	w5, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	mov	w2, #1
	mov	w3, #63
	mov	w4, #1
	mov	w1, wzr
	mov	w5, wzr
	str	x0, [sp, #8]
	bl	fill_a_scan
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	x0, [sp, #8]
	add	sp, sp, #48                     // =48
	ret
.LBB92_11:                              // %if.else31
	ldr	x0, [sp, #8]
	ldur	w1, [x29, #-12]
	mov	w3, #1
	mov	w2, wzr
	bl	fill_dc_scans
	ldur	w1, [x29, #-12]
	mov	w2, #1
	mov	w3, #5
	mov	w5, #2
	mov	w4, wzr
	str	x0, [sp, #8]
	bl	fill_scans
	ldur	w1, [x29, #-12]
	mov	w2, #6
	mov	w3, #63
	mov	w5, #2
	mov	w4, wzr
	str	x0, [sp, #8]
	bl	fill_scans
	ldur	w1, [x29, #-12]
	mov	w2, #1
	mov	w3, #63
	mov	w4, #2
	mov	w5, #1
	str	x0, [sp, #8]
	bl	fill_scans
	ldur	w1, [x29, #-12]
	mov	w2, #1
	mov	w3, wzr
	str	x0, [sp, #8]
	bl	fill_dc_scans
	ldur	w1, [x29, #-12]
	mov	w2, #1
	mov	w3, #63
	mov	w4, #1
	mov	w5, wzr
	str	x0, [sp, #8]
	bl	fill_scans
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	x0, [sp, #8]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end92:
	.size	jpeg_simple_progression, .Lfunc_end92-jpeg_simple_progression
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fill_dc_scans
	.type	fill_dc_scans,@function
fill_dc_scans:                          // @fill_dc_scans
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	cmp	w1, #4                          // =4
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stp	w3, w2, [sp, #12]
	b.gt	.LBB93_4
// %bb.1:                               // %if.then
	ldur	w8, [x29, #-12]
	ldur	x9, [x29, #-8]
	str	w8, [x9]
	str	wzr, [sp, #8]
	mov	w8, wzr
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.ge	.LBB93_3
.LBB93_2:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	add	x9, x9, x8, lsl #2
	str	w8, [x9, #4]
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
	mov	w8, w8
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB93_2
.LBB93_3:                               // %for.end
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #20]
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #28]
	ldr	w8, [sp, #12]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #32]
	ldur	x8, [x29, #-8]
	add	x8, x8, #36                     // =36
	stur	x8, [x29, #-8]
	mov	x0, x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB93_4:                               // %if.else
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	ldp	w5, w4, [sp, #12]
	mov	w2, wzr
	mov	w3, wzr
	bl	fill_scans
	stur	x0, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end93:
	.size	fill_dc_scans, .Lfunc_end93-fill_dc_scans
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fill_a_scan
	.type	fill_a_scan,@function
fill_a_scan:                            // @fill_a_scan
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
	mov	w8, #1
	str	x0, [sp, #24]
	stp	w2, w1, [sp, #16]
	stp	w4, w3, [sp, #8]
	str	w5, [sp, #4]
	str	w8, [x0]
	mov	w8, w1
	mov	x9, x0
	str	w8, [x9, #4]
	mov	w8, w2
	mov	x9, x0
	str	w8, [x9, #20]
	mov	w8, w3
	mov	x9, x0
	str	w8, [x9, #24]
	mov	w8, w4
	mov	x9, x0
	str	w8, [x9, #28]
	mov	x9, x0
	mov	w8, w5
	str	w8, [x9, #32]
	mov	x8, x0
	add	x0, x8, #36                     // =36
	str	x0, [sp, #24]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end94:
	.size	fill_a_scan, .Lfunc_end94-fill_a_scan
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fill_scans
	.type	fill_scans,@function
fill_scans:                             // @fill_scans
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
	mov	w8, #1
	str	x0, [sp, #24]
	stp	w2, w1, [sp, #16]
	stp	w4, w3, [sp, #8]
	stp	wzr, w5, [sp]
.LBB95_1:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [sp]
	ldr	w10, [sp, #20]
	ldr	x0, [sp, #24]
	cmp	w9, w10
	b.ge	.LBB95_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB95_1 Depth=1
	str	w8, [x0]
	ldr	w9, [sp]
	ldr	x10, [sp, #24]
	str	w9, [x10, #4]
	ldr	w9, [sp, #16]
	ldr	x10, [sp, #24]
	str	w9, [x10, #20]
	ldr	w9, [sp, #12]
	ldr	x10, [sp, #24]
	str	w9, [x10, #24]
	ldr	w9, [sp, #8]
	ldr	x10, [sp, #24]
	str	w9, [x10, #28]
	ldr	w9, [sp, #4]
	ldr	x10, [sp, #24]
	str	w9, [x10, #32]
	ldr	x9, [sp, #24]
	ldr	w10, [sp]
	add	x9, x9, #36                     // =36
	add	w10, w10, #1                    // =1
	str	x9, [sp, #24]
	str	w10, [sp]
	b	.LBB95_1
.LBB95_3:                               // %for.end
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end95:
	.size	fill_scans, .Lfunc_end95-fill_scans
	.cfi_endproc
                                        // -- End function
	.globl	jinit_phuff_encoder             // -- Begin function jinit_phuff_encoder
	.p2align	2
	.type	jinit_phuff_encoder,@function
jinit_phuff_encoder:                    // @jinit_phuff_encoder
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #184
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_phuff
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_phuff
	str	x0, [x8, #488]
	mov	x8, x0
	str	x9, [x8]
	str	wzr, [sp, #12]
	mov	w9, wzr
	mov	x8, x0
	cmp	w9, #3                          // =3
	b.gt	.LBB96_2
.LBB96_1:                               // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #120]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #152]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w9, w8
	ldr	x8, [sp, #16]
	cmp	w9, #3                          // =3
	b.le	.LBB96_1
.LBB96_2:                               // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	xzr, [x8, #104]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end96:
	.size	jinit_phuff_encoder, .Lfunc_end96-jinit_phuff_encoder
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_phuff
	.type	start_pass_phuff,@function
start_pass_phuff:                       // @start_pass_phuff
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #488]
	stur	x8, [x29, #-16]
	str	x0, [x8, #64]
	mov	x9, x8
	mov	w8, w1
	str	w8, [x9, #24]
	mov	x8, x0
	ldr	w9, [x8, #404]
	cmp	w9, #0                          // =0
	cset	w9, eq
	stur	w9, [x29, #-20]
	ldr	w10, [x8, #412]
	ldur	x8, [x29, #-16]
	cbz	w10, .LBB97_3
// %bb.1:                               // %if.else9
	cbz	w9, .LBB97_4
// %bb.2:                               // %if.then11
	adrp	x9, encode_mcu_DC_refine
	add	x9, x9, :lo12:encode_mcu_DC_refine
	str	x9, [x8, #8]
	b	.LBB97_6
.LBB97_3:                               // %if.then
	adrp	x10, encode_mcu_AC_first
	adrp	x11, encode_mcu_DC_first
	add	x10, x10, :lo12:encode_mcu_AC_first
	add	x11, x11, :lo12:encode_mcu_DC_first
	cmp	w9, #0                          // =0
	csel	x9, x11, x10, ne
	str	x9, [x8, #8]
	b	.LBB97_6
.LBB97_4:                               // %if.else14
	adrp	x9, encode_mcu_AC_refine
	add	x9, x9, :lo12:encode_mcu_AC_refine
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #104]
	cbnz	x8, .LBB97_6
// %bb.5:                               // %if.then19
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #1000
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-16]
	str	x0, [x8, #104]
.LBB97_6:                               // %if.end23
	ldur	w8, [x29, #-4]
	ldur	x9, [x29, #-16]
	adrp	x10, finish_pass_phuff
	adrp	x11, finish_pass_gather_phuff
	add	x10, x10, :lo12:finish_pass_phuff
	add	x11, x11, :lo12:finish_pass_gather_phuff
	cmp	w8, #0                          // =0
	csel	x8, x11, x10, ne
	mov	w19, #49
	str	x8, [x9, #16]
	str	wzr, [sp, #24]
	b	.LBB97_9
.LBB97_7:                               // %if.end97
                                        //   in Loop: Header=BB97_9 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	mov	w2, #2056
	mov	w1, wzr
	add	x8, x8, x9, lsl #3
	ldr	x0, [x8, #152]
	bl	memset
.LBB97_8:                               // %for.inc
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
.LBB97_9:                               // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB97_27
// %bb.10:                              // %for.body
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #24]
	ldur	x10, [x29, #-16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	add	x9, x10, x9, lsl #2
	str	x8, [sp, #8]
	str	wzr, [x9, #72]
	ldur	w8, [x29, #-20]
	cbz	w8, .LBB97_15
// %bb.11:                              // %if.then38
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #412]
	cbnz	w8, .LBB97_8
// %bb.12:                              // %if.end43
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #20]
	str	w8, [sp, #20]
	tbnz	w8, #31, .LBB97_19
// %bb.13:                              // %if.end43
                                        //   in Loop: Header=BB97_9 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB97_19
// %bb.14:                              // %lor.lhs.false48
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #120]
	cbz	x8, .LBB97_18
	b	.LBB97_20
.LBB97_15:                              // %if.else59
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-16]
	ldr	w8, [x8, #24]
	str	w8, [sp, #20]
	str	w8, [x9, #88]
	mov	w8, w8
	tbnz	w8, #31, .LBB97_19
// %bb.16:                              // %if.else59
                                        //   in Loop: Header=BB97_9 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB97_19
// %bb.17:                              // %lor.lhs.false66
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #152]
	cbnz	x8, .LBB97_20
.LBB97_18:                              // %lor.lhs.false66
                                        //   in Loop: Header=BB97_9 Depth=1
	ldur	w8, [x29, #-4]
	cbnz	w8, .LBB97_20
.LBB97_19:                              // %if.then73
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB97_20:                              // %if.end83
                                        //   in Loop: Header=BB97_9 Depth=1
	ldur	w8, [x29, #-4]
	cbz	w8, .LBB97_23
// %bb.21:                              // %if.then85
                                        //   in Loop: Header=BB97_9 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #152]
	cbnz	x8, .LBB97_7
// %bb.22:                              // %if.then90
                                        //   in Loop: Header=BB97_9 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #2056
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #152]
	b	.LBB97_7
.LBB97_23:                              // %if.else101
                                        //   in Loop: Header=BB97_9 Depth=1
	ldur	w8, [x29, #-20]
	ldr	x0, [x29, #24]
	cbz	w8, .LBB97_25
// %bb.24:                              // %if.then103
                                        //   in Loop: Header=BB97_9 Depth=1
	ldrsw	x8, [sp, #20]
	ldur	x10, [x29, #-16]
	add	x9, x0, x8, lsl #3
	ldr	x1, [x9, #120]
	add	x9, x10, #120                   // =120
	b	.LBB97_26
.LBB97_25:                              // %if.else109
                                        //   in Loop: Header=BB97_9 Depth=1
	ldrsw	x8, [sp, #20]
	ldur	x10, [x29, #-16]
	add	x9, x0, x8, lsl #3
	ldr	x1, [x9, #152]
	add	x9, x10, #120                   // =120
                                        // kill: def $w8 killed $w8 killed $x8 def $x8
.LBB97_26:                              // %if.end116
                                        //   in Loop: Header=BB97_9 Depth=1
	add	x2, x9, w8, sxtw #3
	bl	jpeg_make_c_derived_tbl
	b	.LBB97_8
.LBB97_27:                              // %for.end
	ldur	x8, [x29, #-16]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	str	wzr, [x8, #92]
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #96]
	ldur	x8, [x29, #-16]
	str	xzr, [x8, #48]
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #56]
	ldr	x8, [x29, #24]
	ldur	x9, [x29, #-16]
	ldr	w8, [x8, #272]
	str	w8, [x9, #112]
	ldur	x8, [x29, #-16]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	wzr, [x8, #116]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end97:
	.size	start_pass_phuff, .Lfunc_end97-start_pass_phuff
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_mcu_DC_first
	.type	encode_mcu_DC_first,@function
encode_mcu_DC_first:                    // @encode_mcu_DC_first
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #488]
	stur	x8, [x29, #-24]
	ldr	w9, [x0, #416]
	str	w9, [sp, #16]
	ldr	x9, [x0, #32]
	ldr	x9, [x9]
	str	x9, [x8, #32]
	mov	x8, x0
	ldr	x8, [x8, #32]
	ldur	x9, [x29, #-24]
	ldr	x8, [x8, #8]
	str	x8, [x9, #40]
	mov	x8, x0
	ldr	w8, [x8, #272]
	cbz	w8, .LBB98_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB98_3
// %bb.2:                               // %if.then6
	ldur	x0, [x29, #-24]
	ldr	w1, [x0, #116]
	bl	emit_restart.42
.LBB98_3:                               // %if.end7
	str	wzr, [sp, #24]
	b	.LBB98_5
.LBB98_4:                               // %for.inc
                                        //   in Loop: Header=BB98_5 Depth=1
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
.LBB98_5:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB98_9 Depth 2
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #360]
	cmp	w9, w8
	b.ge	.LBB98_12
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB98_5 Depth=1
	ldp	x8, x10, [x29, #-16]
	ldrsw	x9, [sp, #24]
	ldr	w11, [sp, #16]
	ldr	x8, [x8, x9, lsl #3]
	add	x9, x10, x9, lsl #2
	ldrsw	x9, [x9, #364]
	str	w9, [sp, #20]
	add	x10, x10, x9, lsl #3
	ldr	x10, [x10, #320]
	stp	x10, x8, [sp]
	ldrsh	w8, [x8]
	ldur	x10, [x29, #-24]
	asr	w8, w8, w11
	add	x9, x10, x9, lsl #2
	str	w8, [sp, #32]
	ldr	w10, [x9, #72]
	sub	w10, w8, w10
	stur	w10, [x29, #-28]
	str	w8, [x9, #72]
	mov	w8, w10
	str	w8, [sp, #32]
	tbz	w8, #31, .LBB98_8
// %bb.7:                               // %if.then21
                                        //   in Loop: Header=BB98_5 Depth=1
	ldur	w8, [x29, #-28]
	ldr	w9, [sp, #32]
	neg	w8, w8
	sub	w9, w9, #1                      // =1
	stur	w8, [x29, #-28]
	str	w9, [sp, #32]
.LBB98_8:                               // %if.end23
                                        //   in Loop: Header=BB98_5 Depth=1
	str	wzr, [sp, #28]
	ldur	w8, [x29, #-28]
	cbz	w8, .LBB98_10
.LBB98_9:                               // %while.body
                                        //   Parent Loop BB98_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #28]
	ldur	w9, [x29, #-28]
	add	w8, w8, #1                      // =1
	asr	w9, w9, #1
	str	w8, [sp, #28]
	stur	w9, [x29, #-28]
	mov	w8, w9
	cbnz	w8, .LBB98_9
.LBB98_10:                              // %while.end
                                        //   in Loop: Header=BB98_5 Depth=1
	ldr	x8, [sp]
	ldur	x0, [x29, #-24]
	ldr	w2, [sp, #28]
	ldr	w1, [x8, #20]
	bl	emit_symbol
	ldr	w8, [sp, #28]
	cbz	w8, .LBB98_4
// %bb.11:                              // %if.then27
                                        //   in Loop: Header=BB98_5 Depth=1
	ldur	x0, [x29, #-24]
	ldp	w2, w1, [sp, #28]
	bl	emit_bits.40
	b	.LBB98_4
.LBB98_12:                              // %for.end
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8, #32]
	ldr	x9, [x9, #32]
	str	x8, [x9]
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #272]
	cbz	w8, .LBB98_16
// %bb.13:                              // %if.then38
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB98_15
// %bb.14:                              // %if.then42
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	w8, [x8, #272]
	str	w8, [x9, #112]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #116]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #116]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #116]
	and	w9, w9, #0x7
	str	w9, [x8, #116]
.LBB98_15:                              // %if.end48
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #112]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #112]
.LBB98_16:                              // %if.end51
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end98:
	.size	encode_mcu_DC_first, .Lfunc_end98-encode_mcu_DC_first
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_mcu_AC_first
	.type	encode_mcu_AC_first,@function
encode_mcu_AC_first:                    // @encode_mcu_AC_first
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #488]
	stur	x8, [x29, #-24]
	ldr	w10, [x0, #408]
	ldr	w9, [x0, #416]
	stp	w9, w10, [sp, #12]
	ldr	x9, [x0, #32]
	ldr	x9, [x9]
	str	x9, [x8, #32]
	mov	x8, x0
	ldr	x8, [x8, #32]
	ldur	x9, [x29, #-24]
	ldr	x8, [x8, #8]
	str	x8, [x9, #40]
	mov	x8, x0
	ldr	w8, [x8, #272]
	cbz	w8, .LBB99_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB99_3
// %bb.2:                               // %if.then7
	ldur	x0, [x29, #-24]
	ldr	w1, [x0, #116]
	bl	emit_restart.42
.LBB99_3:                               // %if.end8
	ldp	x8, x9, [x29, #-16]
	adrp	x19, jpeg_natural_order
	add	x19, x19, :lo12:jpeg_natural_order
	mov	w20, #1
	ldr	x8, [x8]
	str	x8, [sp]
	ldr	w8, [x9, #404]
	stp	w8, wzr, [sp, #20]
	b	.LBB99_6
.LBB99_4:                               // %if.then15
                                        //   in Loop: Header=BB99_6 Depth=1
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
.LBB99_5:                               // %for.inc
                                        //   in Loop: Header=BB99_6 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB99_6:                               // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB99_14 Depth 2
                                        //     Child Loop BB99_16 Depth 2
	ldp	w9, w8, [sp, #16]
	cmp	w8, w9
	b.gt	.LBB99_18
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB99_6 Depth=1
	ldrsw	x8, [sp, #20]
	ldr	x9, [sp]
	ldrsw	x8, [x19, x8, lsl #2]
	ldrsh	w8, [x9, x8, lsl #1]
	stur	w8, [x29, #-28]
	cbz	w8, .LBB99_4
// %bb.8:                               // %if.end16
                                        //   in Loop: Header=BB99_6 Depth=1
	ldur	w8, [x29, #-28]
	tbnz	w8, #31, .LBB99_10
// %bb.9:                               // %if.else
                                        //   in Loop: Header=BB99_6 Depth=1
	ldr	w8, [sp, #12]
	ldur	w9, [x29, #-28]
	asr	w8, w9, w8
	stur	w8, [x29, #-28]
	str	w8, [sp, #32]
	mov	w8, w8
	cbnz	w8, .LBB99_11
	b	.LBB99_4
.LBB99_10:                              // %if.then19
                                        //   in Loop: Header=BB99_6 Depth=1
	ldur	w8, [x29, #-28]
	ldr	w9, [sp, #12]
	neg	w8, w8
	asr	w8, w8, w9
	stur	w8, [x29, #-28]
	mvn	w8, w8
	str	w8, [sp, #32]
	ldur	w8, [x29, #-28]
	cbz	w8, .LBB99_4
.LBB99_11:                              // %if.end26
                                        //   in Loop: Header=BB99_6 Depth=1
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #92]
	cbz	w8, .LBB99_14
// %bb.12:                              // %if.then29
                                        //   in Loop: Header=BB99_6 Depth=1
	ldur	x0, [x29, #-24]
	bl	emit_eobrun
	b	.LBB99_14
.LBB99_13:                              // %while.body
                                        //   in Loop: Header=BB99_14 Depth=2
	ldur	x0, [x29, #-24]
	mov	w2, #240
	ldr	w1, [x0, #88]
	bl	emit_symbol
	ldr	w8, [sp, #24]
	sub	w8, w8, #16                     // =16
	str	w8, [sp, #24]
.LBB99_14:                              // %while.cond
                                        //   Parent Loop BB99_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #24]
	cmp	w8, #16                         // =16
	b.ge	.LBB99_13
// %bb.15:                              // %while.end
                                        //   in Loop: Header=BB99_6 Depth=1
	str	w20, [sp, #28]
	ldur	w8, [x29, #-28]
	asr	w8, w8, #1
	stur	w8, [x29, #-28]
	cbz	w8, .LBB99_17
.LBB99_16:                              // %while.body37
                                        //   Parent Loop BB99_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #28]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #28]
	ldur	w8, [x29, #-28]
	asr	w8, w8, #1
	stur	w8, [x29, #-28]
	cbnz	w8, .LBB99_16
.LBB99_17:                              // %while.end39
                                        //   in Loop: Header=BB99_6 Depth=1
	ldur	x0, [x29, #-24]
	ldp	w8, w9, [sp, #24]
	ldr	w1, [x0, #88]
	add	w2, w9, w8, lsl #4
	bl	emit_symbol
	ldur	x0, [x29, #-24]
	ldp	w2, w1, [sp, #28]
	bl	emit_bits.40
	str	wzr, [sp, #24]
	b	.LBB99_5
.LBB99_18:                              // %for.end
	ldr	w8, [sp, #24]
	cmp	w8, #1                          // =1
	b.lt	.LBB99_21
// %bb.19:                              // %if.then44
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #92]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #92]
	ldur	x8, [x29, #-24]
	mov	w9, #32767
	ldr	w8, [x8, #92]
	cmp	w8, w9
	b.ne	.LBB99_21
// %bb.20:                              // %if.then50
	ldur	x0, [x29, #-24]
	bl	emit_eobrun
.LBB99_21:                              // %if.end52
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8, #32]
	ldr	x9, [x9, #32]
	str	x8, [x9]
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #272]
	cbz	w8, .LBB99_25
// %bb.22:                              // %if.then61
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB99_24
// %bb.23:                              // %if.then65
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	w8, [x8, #272]
	str	w8, [x9, #112]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #116]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #116]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #116]
	and	w9, w9, #0x7
	str	w9, [x8, #116]
.LBB99_24:                              // %if.end71
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #112]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #112]
.LBB99_25:                              // %if.end73
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end99:
	.size	encode_mcu_AC_first, .Lfunc_end99-encode_mcu_AC_first
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_mcu_DC_refine
	.type	encode_mcu_DC_refine,@function
encode_mcu_DC_refine:                   // @encode_mcu_DC_refine
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #488]
	str	x8, [sp, #24]
	ldr	w9, [x0, #416]
	str	w9, [sp, #12]
	ldr	x9, [x0, #32]
	ldr	x9, [x9]
	str	x9, [x8, #32]
	mov	x8, x0
	ldr	x8, [x8, #32]
	ldr	x9, [sp, #24]
	ldr	x8, [x8, #8]
	str	x8, [x9, #40]
	mov	x8, x0
	ldr	w8, [x8, #272]
	cbz	w8, .LBB100_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB100_3
// %bb.2:                               // %if.then6
	ldr	x0, [sp, #24]
	ldr	w1, [x0, #116]
	bl	emit_restart.42
.LBB100_3:                              // %if.end7
	str	wzr, [sp, #16]
.LBB100_4:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #360]
	cmp	w9, w8
	b.ge	.LBB100_6
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB100_4 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #16]
	ldr	x0, [sp, #24]
	mov	w2, #1
	ldr	x8, [x8, x9, lsl #3]
	ldr	w9, [sp, #12]
	str	x8, [sp]
	ldrsh	w8, [x8]
	asr	w1, w8, w9
	str	w8, [sp, #20]
	bl	emit_bits.40
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	b	.LBB100_4
.LBB100_6:                              // %for.end
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8, #32]
	ldr	x9, [x9, #32]
	str	x8, [x9]
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #272]
	cbz	w8, .LBB100_10
// %bb.7:                               // %if.then18
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB100_9
// %bb.8:                               // %if.then22
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w8, [x8, #272]
	str	w8, [x9, #112]
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #116]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #116]
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #116]
	and	w9, w9, #0x7
	str	w9, [x8, #116]
.LBB100_9:                              // %if.end28
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #112]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #112]
.LBB100_10:                             // %if.end30
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end100:
	.size	encode_mcu_DC_refine, .Lfunc_end100-encode_mcu_DC_refine
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function encode_mcu_AC_refine
	.type	encode_mcu_AC_refine,@function
encode_mcu_AC_refine:                   // @encode_mcu_AC_refine
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #368                    // =368
	stp	x29, x30, [sp, #320]            // 16-byte Folded Spill
	str	x28, [sp, #336]                 // 8-byte Folded Spill
	stp	x20, x19, [sp, #352]            // 16-byte Folded Spill
	add	x29, sp, #320                   // =320
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [x29, #24]
	ldr	x8, [x0, #488]
	mov	x10, x0
	stp	x8, x1, [x29, #-16]
	ldr	w11, [x0, #408]
	ldr	w9, [x0, #416]
	stp	w9, w11, [x29, #-52]
	ldr	x9, [x10, #32]
	ldr	x9, [x9]
	str	x9, [x8, #32]
	mov	x8, x0
	ldr	x8, [x8, #32]
	ldur	x9, [x29, #-16]
	ldr	x8, [x8, #8]
	str	x8, [x9, #40]
	mov	x8, x0
	ldr	w8, [x8, #272]
	cbz	w8, .LBB101_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB101_3
// %bb.2:                               // %if.then7
	ldur	x0, [x29, #-16]
	ldr	w1, [x0, #116]
	bl	emit_restart.42
.LBB101_3:                              // %if.end8
	ldur	x8, [x29, #-8]
	ldr	x9, [x29, #24]
	adrp	x19, jpeg_natural_order
	add	x19, x19, :lo12:jpeg_natural_order
	ldr	x8, [x8]
	stur	x8, [x29, #-64]
	ldr	w8, [x9, #404]
	stp	wzr, w8, [x29, #-32]
	mov	x8, sp
	b	.LBB101_5
.LBB101_4:                              // %for.inc
                                        //   in Loop: Header=BB101_5 Depth=1
	ldur	w9, [x29, #-28]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-28]
.LBB101_5:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	w9, [x29, #-28]
	ldur	w10, [x29, #-48]
	cmp	w9, w10
	b.gt	.LBB101_10
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB101_5 Depth=1
	ldursw	x9, [x29, #-28]
	ldur	x10, [x29, #-64]
	ldrsw	x9, [x19, x9, lsl #2]
	ldrsh	w9, [x10, x9, lsl #1]
	stur	w9, [x29, #-20]
	tbz	w9, #31, .LBB101_8
// %bb.7:                               // %if.then15
                                        //   in Loop: Header=BB101_5 Depth=1
	ldur	w9, [x29, #-20]
	neg	w9, w9
	stur	w9, [x29, #-20]
.LBB101_8:                              // %if.end16
                                        //   in Loop: Header=BB101_5 Depth=1
	ldur	w9, [x29, #-52]
	ldur	w10, [x29, #-20]
	ldursw	x11, [x29, #-28]
	asr	w9, w10, w9
	cmp	w9, #1                          // =1
	stur	w9, [x29, #-20]
	str	w9, [x8, x11, lsl #2]
	b.ne	.LBB101_4
// %bb.9:                               // %if.then21
                                        //   in Loop: Header=BB101_5 Depth=1
	ldur	w9, [x29, #-28]
	stur	w9, [x29, #-32]
	b	.LBB101_4
.LBB101_10:                             // %for.end
	ldur	x8, [x29, #-16]
	stur	wzr, [x29, #-44]
	ldr	x10, [x29, #24]
	mov	x20, sp
	ldr	x9, [x8, #104]
	ldr	w8, [x8, #96]
	add	x8, x9, x8
	stur	x8, [x29, #-40]
	ldr	w8, [x10, #404]
	stp	w8, wzr, [x29, #-28]
	b	.LBB101_13
.LBB101_11:                             // %if.then32
                                        //   in Loop: Header=BB101_13 Depth=1
	ldur	w8, [x29, #-24]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-24]
.LBB101_12:                             // %for.inc58
                                        //   in Loop: Header=BB101_13 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
.LBB101_13:                             // %for.cond24
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB101_16 Depth 2
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-48]
	cmp	w8, w9
	b.gt	.LBB101_21
// %bb.14:                              // %for.body27
                                        //   in Loop: Header=BB101_13 Depth=1
	ldursw	x8, [x29, #-28]
	ldr	w8, [x20, x8, lsl #2]
	stur	w8, [x29, #-20]
	cbz	w8, .LBB101_11
// %bb.15:                              // %while.cond
                                        //   in Loop: Header=BB101_13 Depth=1
	ldur	w8, [x29, #-24]
	cmp	w8, #16                         // =16
	b.lt	.LBB101_18
.LBB101_16:                             // %while.cond
                                        //   Parent Loop BB101_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [x29, #-32]
	cmp	w8, w9
	b.gt	.LBB101_18
// %bb.17:                              // %while.body
                                        //   in Loop: Header=BB101_16 Depth=2
	ldur	x0, [x29, #-16]
	bl	emit_eobrun
	ldur	x0, [x29, #-16]
	mov	w2, #240
	ldr	w1, [x0, #88]
	bl	emit_symbol
	ldur	w8, [x29, #-24]
	ldur	x0, [x29, #-16]
	ldur	x1, [x29, #-40]
	ldur	w2, [x29, #-44]
	sub	w8, w8, #16                     // =16
	stur	w8, [x29, #-24]
	bl	emit_buffered_bits
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #104]
	stur	wzr, [x29, #-44]
	stur	x8, [x29, #-40]
	ldur	w8, [x29, #-24]
	cmp	w8, #16                         // =16
	b.ge	.LBB101_16
.LBB101_18:                             // %while.end
                                        //   in Loop: Header=BB101_13 Depth=1
	ldur	w8, [x29, #-20]
	cmp	w8, #2                          // =2
	b.lt	.LBB101_20
// %bb.19:                              // %if.then43
                                        //   in Loop: Header=BB101_13 Depth=1
	ldur	w8, [x29, #-20]
	ldur	w9, [x29, #-44]
	ldur	x10, [x29, #-40]
	and	w8, w8, #0x1
	add	w11, w9, #1                     // =1
	stur	w11, [x29, #-44]
	strb	w8, [x10, x9]
	b	.LBB101_12
.LBB101_20:                             // %if.end48
                                        //   in Loop: Header=BB101_13 Depth=1
	ldur	x0, [x29, #-16]
	bl	emit_eobrun
	ldur	x0, [x29, #-16]
	ldur	w8, [x29, #-24]
	mov	w2, #1
	ldr	w1, [x0, #88]
	bfi	w2, w8, #4, #28
	bl	emit_symbol
	ldursw	x8, [x29, #-28]
	ldur	x9, [x29, #-64]
	ldur	x0, [x29, #-16]
	mov	w2, #1
	ldrsw	x8, [x19, x8, lsl #2]
	ldrsh	w8, [x9, x8, lsl #1]
	mvn	w8, w8
	lsr	w1, w8, #31
	stur	w1, [x29, #-20]
	bl	emit_bits.40
	ldur	x0, [x29, #-16]
	ldur	x1, [x29, #-40]
	ldur	w2, [x29, #-44]
	bl	emit_buffered_bits
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #104]
	stur	wzr, [x29, #-44]
	stur	wzr, [x29, #-24]
	stur	x8, [x29, #-40]
	b	.LBB101_12
.LBB101_21:                             // %for.end60
	ldur	w8, [x29, #-24]
	cmp	w8, #0                          // =0
	b.gt	.LBB101_23
// %bb.22:                              // %for.end60
	ldur	w8, [x29, #-44]
	cbz	w8, .LBB101_26
.LBB101_23:                             // %if.then65
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #92]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #92]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-44]
	ldr	w10, [x8, #96]
	add	w9, w10, w9
	str	w9, [x8, #96]
	ldur	x8, [x29, #-16]
	mov	w9, #32767
	ldr	w8, [x8, #92]
	cmp	w8, w9
	b.eq	.LBB101_25
// %bb.24:                              // %lor.lhs.false72
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #96]
	cmp	w8, #938                        // =938
	b.lo	.LBB101_26
.LBB101_25:                             // %if.then76
	ldur	x0, [x29, #-16]
	bl	emit_eobrun
.LBB101_26:                             // %if.end78
	ldur	x8, [x29, #-16]
	ldr	x9, [x29, #24]
	ldr	x8, [x8, #32]
	ldr	x9, [x9, #32]
	str	x8, [x9]
	ldur	x8, [x29, #-16]
	ldr	x9, [x29, #24]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	str	x8, [x9, #8]
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #272]
	cbz	w8, .LBB101_30
// %bb.27:                              // %if.then87
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #112]
	cbnz	w8, .LBB101_29
// %bb.28:                              // %if.then91
	ldr	x8, [x29, #24]
	ldur	x9, [x29, #-16]
	ldr	w8, [x8, #272]
	str	w8, [x9, #112]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #116]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #116]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #116]
	and	w9, w9, #0x7
	str	w9, [x8, #116]
.LBB101_29:                             // %if.end98
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #112]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #112]
.LBB101_30:                             // %if.end100
	ldp	x20, x19, [sp, #352]            // 16-byte Folded Reload
	ldr	x28, [sp, #336]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #320]            // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #368                    // =368
	ret
.Lfunc_end101:
	.size	encode_mcu_AC_refine, .Lfunc_end101-encode_mcu_AC_refine
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass_gather_phuff
	.type	finish_pass_gather_phuff,@function
finish_pass_gather_phuff:               // @finish_pass_gather_phuff
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	x0, [x0, #488]
	stur	x0, [x29, #-16]
	bl	emit_eobrun
	ldur	x8, [x29, #-8]
	mov	x19, sp
	mov	w20, #1
	ldr	w8, [x8, #404]
	stp	xzr, xzr, [sp]
	cmp	w8, #0                          // =0
	cset	w8, eq
	stp	wzr, w8, [x29, #-24]
	b	.LBB102_3
.LBB102_1:                              // %if.end23
                                        //   in Loop: Header=BB102_3 Depth=1
	ldr	x8, [sp, #16]
	ldp	x9, x0, [x29, #-16]
	ldursw	x10, [x29, #-28]
	ldr	x1, [x8]
	add	x8, x9, x10, lsl #3
	ldr	x2, [x8, #152]
	bl	jpeg_gen_optimal_table
	ldursw	x8, [x29, #-28]
	str	w20, [x19, x8, lsl #2]
.LBB102_2:                              // %for.inc
                                        //   in Loop: Header=BB102_3 Depth=1
	ldur	w8, [x29, #-24]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-24]
.LBB102_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-24]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB102_12
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB102_3 Depth=1
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-24]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	ldur	w9, [x29, #-20]
	str	x8, [sp, #24]
	cbz	w9, .LBB102_7
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB102_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #412]
	cbnz	w8, .LBB102_2
// %bb.6:                               // %if.end
                                        //   in Loop: Header=BB102_3 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #20]
	stur	w8, [x29, #-28]
	ldursw	x8, [x29, #-28]
	ldr	w8, [x19, x8, lsl #2]
	cbnz	w8, .LBB102_2
	b	.LBB102_8
.LBB102_7:                              // %if.else
                                        //   in Loop: Header=BB102_3 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #24]
	stur	w8, [x29, #-28]
	ldursw	x8, [x29, #-28]
	ldr	w8, [x19, x8, lsl #2]
	cbnz	w8, .LBB102_2
.LBB102_8:                              // %if.then11
                                        //   in Loop: Header=BB102_3 Depth=1
	ldur	w9, [x29, #-20]
	ldur	x8, [x29, #-8]
	cbz	w9, .LBB102_10
// %bb.9:                               // %if.then13
                                        //   in Loop: Header=BB102_3 Depth=1
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	add	x8, x8, #120                    // =120
	str	x8, [sp, #16]
	ldr	x8, [x8]
	cbnz	x8, .LBB102_1
	b	.LBB102_11
.LBB102_10:                             // %if.else16
                                        //   in Loop: Header=BB102_3 Depth=1
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	add	x8, x8, #152                    // =152
	str	x8, [sp, #16]
	ldr	x8, [x8]
	cbnz	x8, .LBB102_1
.LBB102_11:                             // %if.then22
                                        //   in Loop: Header=BB102_3 Depth=1
	ldur	x0, [x29, #-8]
	bl	jpeg_alloc_huff_table
	ldr	x8, [sp, #16]
	str	x0, [x8]
	b	.LBB102_1
.LBB102_12:                             // %for.end
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end102:
	.size	finish_pass_gather_phuff, .Lfunc_end102-finish_pass_gather_phuff
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass_phuff
	.type	finish_pass_phuff,@function
finish_pass_phuff:                      // @finish_pass_phuff
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #488]
	stp	x8, x0, [sp]
	ldr	x9, [x0, #32]
	ldr	x9, [x9]
	str	x9, [x8, #32]
	mov	x8, x0
	ldr	x8, [x8, #32]
	ldr	x9, [sp]
	ldr	x8, [x8, #8]
	str	x8, [x9, #40]
	ldr	x0, [sp]
	bl	emit_eobrun
	ldr	x0, [sp]
	bl	flush_bits.39
	ldp	x8, x9, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	x8, [x8, #32]
	ldr	x9, [x9, #32]
	str	x8, [x9]
	ldp	x8, x9, [sp]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	str	x8, [x9, #8]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end103:
	.size	finish_pass_phuff, .Lfunc_end103-finish_pass_phuff
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_eobrun
	.type	emit_eobrun,@function
emit_eobrun:                            // @emit_eobrun
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	w8, [x0, #92]
	cbz	w8, .LBB104_6
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #92]
	stp	wzr, w8, [sp]
	ldr	w8, [sp, #4]
	asr	w8, w8, #1
	str	w8, [sp, #4]
	cbz	w8, .LBB104_3
.LBB104_2:                              // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp]
	add	w9, w8, #1                      // =1
	ldr	w8, [sp, #4]
	asr	w8, w8, #1
	stp	w9, w8, [sp]
	cbnz	w8, .LBB104_2
.LBB104_3:                              // %while.end
	ldr	x0, [sp, #8]
	ldr	w8, [sp]
	ldr	w1, [x0, #88]
	lsl	w2, w8, #4
	bl	emit_symbol
	ldr	w8, [sp]
	cbz	w8, .LBB104_5
// %bb.4:                               // %if.then3
	ldr	x0, [sp, #8]
	ldr	w2, [sp]
	ldr	w1, [x0, #92]
	bl	emit_bits.40
.LBB104_5:                              // %if.end
	ldr	x8, [sp, #8]
	str	wzr, [x8, #92]
	ldr	x0, [sp, #8]
	ldr	x1, [x0, #104]
	ldr	w2, [x0, #96]
	bl	emit_buffered_bits
	ldr	x8, [sp, #8]
	str	wzr, [x8, #96]
.LBB104_6:                              // %if.end7
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end104:
	.size	emit_eobrun, .Lfunc_end104-emit_eobrun
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function flush_bits.39
	.type	flush_bits.39,@function
flush_bits.39:                          // @flush_bits.39
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w1, #127
	mov	w2, #7
	str	x0, [sp, #8]
	bl	emit_bits.40
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	xzr, [x8, #48]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #56]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end105:
	.size	flush_bits.39, .Lfunc_end105-flush_bits.39
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_bits.40
	.type	emit_bits.40,@function
emit_bits.40:                           // @emit_bits.40
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, w1
	stur	x0, [x29, #-8]
	stp	w2, w1, [x29, #-16]
	str	x8, [sp, #24]
	ldr	w8, [x0, #56]
	str	w8, [sp, #20]
	cbz	w2, .LBB106_3
// %bb.1:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #24]
	cbz	w8, .LBB106_4
.LBB106_2:                              // %if.then6
	mov	w8, #1
	str	w8, [sp, #16]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB106_3:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #39
	ldr	x8, [x8, #64]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #64]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #24]
	cbnz	w8, .LBB106_2
.LBB106_4:                              // %if.end7
	ldur	w8, [x29, #-16]
	ldr	w9, [sp, #20]
	ldr	x11, [sp, #24]
	mov	w10, #1
	lsl	x10, x10, x8
	sub	x10, x10, #1                    // =1
	add	w8, w9, w8
	mov	w9, #24
	and	x10, x11, x10
	ldur	x11, [x29, #-8]
	str	w8, [sp, #20]
	sub	w8, w9, w8
	lsl	x8, x10, x8
	str	x8, [sp, #24]
	ldr	x9, [x11, #48]
	orr	x8, x8, x9
	str	x8, [sp, #24]
	b	.LBB106_6
.LBB106_5:                              // %if.end32
                                        //   in Loop: Header=BB106_6 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #20]
	lsl	x8, x8, #8
	sub	w9, w9, #8                      // =8
	str	x8, [sp, #24]
	str	w9, [sp, #20]
.LBB106_6:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #20]
	cmp	w8, #8                          // =8
	b.lt	.LBB106_12
// %bb.7:                               // %while.body
                                        //   in Loop: Header=BB106_6 Depth=1
	ldrb	w8, [sp, #26]
	ldur	x9, [x29, #-8]
	str	w8, [sp, #12]
	ldr	x10, [x9, #32]
	add	x11, x10, #1                    // =1
	str	x11, [x9, #32]
	strb	w8, [x10]
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #40]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #40]
	b.eq	.LBB106_9
// %bb.8:                               // %if.end20
                                        //   in Loop: Header=BB106_6 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #255                        // =255
	b.ne	.LBB106_5
	b	.LBB106_10
.LBB106_9:                              // %if.then19
                                        //   in Loop: Header=BB106_6 Depth=1
	ldur	x0, [x29, #-8]
	bl	dump_buffer.41
	ldr	w8, [sp, #12]
	cmp	w8, #255                        // =255
	b.ne	.LBB106_5
.LBB106_10:                             // %if.then23
                                        //   in Loop: Header=BB106_6 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #32]
	add	x10, x9, #1                     // =1
	str	x10, [x8, #32]
	strb	wzr, [x9]
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #40]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #40]
	b.ne	.LBB106_5
// %bb.11:                              // %if.then30
                                        //   in Loop: Header=BB106_6 Depth=1
	ldur	x0, [x29, #-8]
	bl	dump_buffer.41
	b	.LBB106_5
.LBB106_12:                             // %while.end
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-8]
	str	x8, [x9, #48]
	ldr	w8, [sp, #20]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #56]
	str	wzr, [sp, #16]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end106:
	.size	emit_bits.40, .Lfunc_end106-emit_bits.40
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function dump_buffer.41
	.type	dump_buffer.41,@function
dump_buffer.41:                         // @dump_buffer.41
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #64]
	ldr	x8, [x8, #32]
	stp	x8, x0, [sp]
	ldr	x8, [x8, #24]
	ldr	x0, [x0, #64]
	blr	x8
	cbnz	w0, .LBB107_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #22
	ldr	x8, [x8, #64]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	x0, [x8, #64]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB107_2:                              // %if.end
	ldp	x8, x9, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	x8, [x8]
	str	x8, [x9, #32]
	ldp	x8, x9, [sp]
	ldr	x8, [x8, #8]
	str	x8, [x9, #40]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end107:
	.size	dump_buffer.41, .Lfunc_end107-dump_buffer.41
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_symbol
	.type	emit_symbol,@function
emit_symbol:                            // @emit_symbol
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	w2, [sp, #16]
	ldr	w8, [x0, #24]
	cbz	w8, .LBB108_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #3
	ldrsw	x9, [sp, #16]
	ldr	x8, [x8, #152]
	lsl	x9, x9, #3
	ldr	x10, [x8, x9]
	add	x10, x10, #1                    // =1
	str	x10, [x8, x9]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB108_2:                              // %if.else
	ldursw	x8, [x29, #-12]
	ldur	x0, [x29, #-8]
	ldrsw	x9, [sp, #16]
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #120]
	str	x8, [sp, #8]
	add	x10, x8, x9
	ldr	w1, [x8, x9, lsl #2]
	ldrb	w2, [x10, #1024]
	bl	emit_bits.40
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end108:
	.size	emit_symbol, .Lfunc_end108-emit_symbol
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_buffered_bits
	.type	emit_buffered_bits,@function
emit_buffered_bits:                     // @emit_buffered_bits
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldr	w8, [x0, #24]
	cbnz	w8, .LBB109_3
	b	.LBB109_2
.LBB109_1:                              // %while.body
                                        //   in Loop: Header=BB109_2 Depth=1
	ldr	x8, [sp, #16]
	ldur	x0, [x29, #-8]
	mov	w2, #1
	ldrb	w1, [x8]
	bl	emit_bits.40
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	add	x8, x8, #1                      // =1
	sub	w9, w9, #1                      // =1
	str	x8, [sp, #16]
	str	w9, [sp, #12]
.LBB109_2:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #12]
	cbnz	w8, .LBB109_1
.LBB109_3:                              // %while.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end109:
	.size	emit_buffered_bits, .Lfunc_end109-emit_buffered_bits
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_restart.42
	.type	emit_restart.42,@function
emit_restart.42:                        // @emit_restart.42
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	bl	emit_eobrun
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #24]
	cbnz	w8, .LBB110_4
// %bb.1:                               // %if.then
	ldr	x0, [sp, #8]
	bl	flush_bits.39
	ldr	x8, [sp, #8]
	mov	w10, #255
	ldr	x9, [x8, #32]
	add	x11, x9, #1                     // =1
	str	x11, [x8, #32]
	strb	w10, [x9]
	ldr	x8, [sp, #8]
	ldr	x9, [x8, #40]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #40]
	b.ne	.LBB110_3
// %bb.2:                               // %if.then1
	ldr	x0, [sp, #8]
	bl	dump_buffer.41
.LBB110_3:                              // %if.end
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #4]
	ldr	x10, [x8, #32]
	add	w9, w9, #208                    // =208
	add	x11, x10, #1                    // =1
	str	x11, [x8, #32]
	strb	w9, [x10]
	ldr	x8, [sp, #8]
	ldr	x9, [x8, #40]
	subs	x9, x9, #1                      // =1
	str	x9, [x8, #40]
	b.eq	.LBB110_7
.LBB110_4:                              // %if.end10
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #64]
	ldr	w8, [x8, #404]
	cbz	w8, .LBB110_8
.LBB110_5:                              // %if.else
	ldr	x8, [sp, #8]
	str	wzr, [x8, #92]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #96]
.LBB110_6:                              // %if.end17
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB110_7:                              // %if.then8
	ldr	x0, [sp, #8]
	bl	dump_buffer.41
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #64]
	ldr	w8, [x8, #404]
	cbnz	w8, .LBB110_5
.LBB110_8:                              // %if.then13
	str	wzr, [sp]
.LBB110_9:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldr	w9, [sp]
	ldr	x8, [x8, #64]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB110_6
// %bb.10:                              // %for.body
                                        //   in Loop: Header=BB110_9 Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #72]
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	b	.LBB110_9
.Lfunc_end110:
	.size	emit_restart.42, .Lfunc_end110-emit_restart.42
	.cfi_endproc
                                        // -- End function
	.globl	jinit_c_prep_controller         // -- Begin function jinit_c_prep_controller
	.p2align	2
	.type	jinit_c_prep_controller,@function
jinit_c_prep_controller:                // @jinit_c_prep_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	cbz	w1, .LBB111_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB111_2:                              // %if.end
	ldur	x0, [x29, #-8]
	mov	w1, #1
	mov	w2, #112
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_prep
	str	x0, [sp, #24]
	add	x9, x9, :lo12:start_pass_prep
	str	x0, [x8, #440]
	mov	x8, x0
	str	x9, [x8]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #472]
	ldr	w9, [x8, #16]
	mov	x8, x0
	cbz	w9, .LBB111_5
// %bb.3:                               // %if.then4
	adrp	x9, pre_process_context
	add	x9, x9, :lo12:pre_process_context
	str	x9, [x8, #8]
	ldur	x0, [x29, #-8]
	bl	create_context_buffer
.LBB111_4:                              // %if.end14
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB111_5:                              // %if.else
	adrp	x9, pre_process_data
	add	x9, x9, :lo12:pre_process_data
	str	x9, [x8, #8]
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #20]
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
.LBB111_6:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #20]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB111_4
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB111_6 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #8]
	mov	w1, #1
	ldr	x9, [x0, #8]
	ldr	w10, [x8, #28]
	ldrsw	x11, [x0, #304]
	ldrsw	x8, [x8, #8]
	ldr	x9, [x9, #16]
	ldr	w3, [x0, #308]
	mul	x10, x10, x11
	lsl	x10, x10, #3
	sdiv	x2, x10, x8
                                        // kill: def $w2 killed $w2 killed $x2
	blr	x9
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #16]
	ldr	w8, [sp, #20]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #20]
	str	x9, [sp, #8]
	b	.LBB111_6
.Lfunc_end111:
	.size	jinit_c_prep_controller, .Lfunc_end111-jinit_c_prep_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_prep
	.type	start_pass_prep,@function
start_pass_prep:                        // @start_pass_prep
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #440]
	str	x8, [sp, #8]
	cbz	w1, .LBB112_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB112_2:                              // %if.end
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #44]
	str	w8, [x9, #96]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #100]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #104]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldr	w8, [x8, #308]
	lsl	w8, w8, #1
	str	w8, [x9, #108]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end112:
	.size	start_pass_prep, .Lfunc_end112-start_pass_prep
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function pre_process_context
	.type	pre_process_context,@function
pre_process_context:                    // @pre_process_context
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x19, [sp, #96]                  // 8-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x2, x1, [x29, #-16]
	stur	w3, [x29, #-20]
	stur	x4, [x29, #-32]
	str	x5, [sp, #40]
	str	w6, [sp, #36]
	ldr	x8, [x0, #440]
	mov	w19, #1
	str	x8, [sp, #24]
	ldr	w8, [x0, #308]
	add	w8, w8, w8, lsl #1
	str	w8, [sp, #12]
	b	.LBB113_2
.LBB113_1:                              // %if.end70
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x9, [x29, #24]
	ldr	w10, [x8, #100]
	ldr	w9, [x9, #308]
	add	w9, w10, w9
	str	w9, [x8, #108]
.LBB113_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB113_14 Depth 2
                                        //     Child Loop BB113_7 Depth 2
                                        //       Child Loop BB113_9 Depth 3
	ldr	x8, [sp, #40]
	ldr	w9, [sp, #36]
	ldr	w8, [x8]
	cmp	w8, w9
	b.hs	.LBB113_23
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB113_2 Depth=1
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8]
	cmp	w8, w9
	b.hs	.LBB113_11
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB113_2 Depth=1
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	x11, [sp, #24]
	ldr	x0, [x29, #24]
	ldr	w10, [x8]
	add	x2, x11, #16                    // =16
	sub	w9, w9, w10
	str	w9, [sp, #8]
	ldr	w10, [x11, #108]
	ldr	w12, [x11, #100]
	sub	w10, w10, w12
	cmp	w10, w9
	csel	w4, w10, w9, lo
	str	w4, [sp, #20]
	ldr	x9, [x0, #464]
	ldur	x10, [x29, #-8]
	ldr	w8, [x8]
	ldr	w3, [x11, #100]
	ldr	x9, [x9, #8]
	add	x1, x10, x8, lsl #3
	blr	x9
	ldr	x8, [sp, #24]
	ldr	x9, [x29, #24]
	ldr	w8, [x8, #96]
	ldr	w9, [x9, #44]
	cmp	w8, w9
	b.ne	.LBB113_16
// %bb.5:                               // %if.then7
                                        //   in Loop: Header=BB113_2 Depth=1
	str	wzr, [sp, #16]
	b	.LBB113_7
.LBB113_6:                              // %for.end
                                        //   in Loop: Header=BB113_7 Depth=2
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
.LBB113_7:                              // %for.cond
                                        //   Parent Loop BB113_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB113_9 Depth 3
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB113_16
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB113_7 Depth=2
	str	w19, [sp, #4]
.LBB113_9:                              // %for.cond9
                                        //   Parent Loop BB113_2 Depth=1
                                        //     Parent Loop BB113_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #308]
	cmp	w9, w8
	b.gt	.LBB113_6
// %bb.10:                              // %for.body12
                                        //   in Loop: Header=BB113_9 Depth=3
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	ldr	x10, [x29, #24]
	ldr	w11, [sp, #4]
	mov	w4, #1
	add	x8, x8, x9, lsl #3
	ldr	x0, [x8, #16]
	ldr	w5, [x10, #40]
	neg	w3, w11
	mov	w1, wzr
	mov	x2, x0
	bl	jcopy_sample_rows
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b	.LBB113_9
.LBB113_11:                             // %if.else
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #96]
	cbnz	w8, .LBB113_23
// %bb.12:                              // %if.end28
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #100]
	ldr	w8, [x8, #108]
	cmp	w9, w8
	b.ge	.LBB113_18
// %bb.13:                              // %if.then32
                                        //   in Loop: Header=BB113_2 Depth=1
	str	wzr, [sp, #16]
.LBB113_14:                             // %for.cond33
                                        //   Parent Loop BB113_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #68]
	ldr	x8, [sp, #24]
	cmp	w9, w10
	b.ge	.LBB113_17
// %bb.15:                              // %for.body36
                                        //   in Loop: Header=BB113_14 Depth=2
	ldrsw	x9, [sp, #16]
	ldr	x10, [x29, #24]
	ldr	x11, [sp, #24]
	add	x8, x8, x9, lsl #3
	ldr	w1, [x10, #40]
	ldr	w2, [x11, #100]
	ldr	x0, [x8, #16]
	ldr	w3, [x11, #108]
	bl	expand_bottom_edge
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	b	.LBB113_14
.LBB113_16:                             // %if.end
                                        //   in Loop: Header=BB113_2 Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #20]
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #20]
	ldr	w10, [x8, #100]
	add	w9, w10, w9
	str	w9, [x8, #100]
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #20]
	ldr	w10, [x8, #96]
	sub	w9, w10, w9
	str	w9, [x8, #96]
	b	.LBB113_18
.LBB113_17:                             // %for.end45
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	w8, [x8, #108]
	ldr	x9, [sp, #24]
	str	w8, [x9, #100]
.LBB113_18:                             // %if.end49
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #100]
	ldr	w8, [x8, #108]
	cmp	w9, w8
	b.ne	.LBB113_2
// %bb.19:                              // %if.then53
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x0, [x29, #24]
	ldr	x8, [sp, #24]
	ldr	x10, [sp, #40]
	ldur	x3, [x29, #-32]
	ldr	x9, [x0, #472]
	ldr	w2, [x8, #104]
	ldr	w4, [x10]
	add	x1, x8, #16                     // =16
	ldr	x9, [x9, #8]
	blr	x9
	ldr	x8, [sp, #40]
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	ldr	x8, [x29, #24]
	ldr	x9, [sp, #24]
	ldr	w8, [x8, #308]
	ldr	w10, [x9, #104]
	add	w8, w10, w8
	str	w8, [x9, #104]
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #104]
	cmp	w8, w9
	b.lt	.LBB113_21
// %bb.20:                              // %if.then63
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	str	wzr, [x8, #104]
.LBB113_21:                             // %if.end65
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #100]
	cmp	w8, w9
	b.lt	.LBB113_1
// %bb.22:                              // %if.then68
                                        //   in Loop: Header=BB113_2 Depth=1
	ldr	x8, [sp, #24]
	str	wzr, [x8, #100]
	b	.LBB113_1
.LBB113_23:                             // %while.end
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end113:
	.size	pre_process_context, .Lfunc_end113-pre_process_context
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function create_context_buffer
	.type	create_context_buffer,@function
create_context_buffer:                  // @create_context_buffer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #440]
	mov	w1, #1
	stur	x8, [x29, #-8]
	ldrsw	x8, [x0, #308]
	stur	w8, [x29, #-12]
	ldr	x9, [x0, #8]
	ldrsw	x10, [x0, #68]
	ldr	x9, [x9]
	mul	x8, x10, x8
	add	x8, x8, x8, lsl #2
	lsl	x2, x8, #3
	blr	x9
	ldr	x8, [x29, #24]
	str	x0, [sp]
	stur	wzr, [x29, #-16]
	mov	w19, #40
	ldr	x8, [x8, #80]
	str	x8, [sp, #16]
	b	.LBB114_2
.LBB114_1:                              // %for.end
                                        //   in Loop: Header=BB114_2 Depth=1
	ldr	x8, [sp]
	ldpsw	x11, x9, [x29, #-16]
	ldur	x10, [x29, #-8]
	add	x8, x8, x9, lsl #3
	add	x9, x10, x11, lsl #3
	str	x8, [x9, #16]
	ldp	w10, w8, [x29, #-16]
	ldr	x9, [sp]
	ldr	x11, [sp, #16]
                                        // kill: def $w8 killed $w8 def $x8
	sxtw	x8, w8
	madd	x8, x8, x19, x9
	add	w9, w10, #1                     // =1
	add	x10, x11, #96                   // =96
	str	x8, [sp]
	stur	w9, [x29, #-16]
	str	x10, [sp, #16]
.LBB114_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB114_4 Depth 2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-16]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB114_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB114_2 Depth=1
	ldr	x0, [x29, #24]
	ldr	x8, [sp, #16]
	ldur	w12, [x29, #-12]
	mov	w1, #1
	ldr	x9, [x0, #8]
	ldr	w10, [x8, #28]
	ldrsw	x11, [x0, #304]
	ldrsw	x8, [x8, #8]
	ldr	x9, [x9, #16]
	add	w3, w12, w12, lsl #1
	mul	x10, x10, x11
	lsl	x10, x10, #3
	sdiv	x2, x10, x8
                                        // kill: def $w2 killed $w2 killed $x2
	blr	x9
	ldr	x8, [sp]
	ldursw	x9, [x29, #-12]
	mov	x1, x0
	str	x0, [sp, #8]
	add	x0, x8, x9, lsl #3
	add	x8, x9, x9, lsl #1
	lsl	x2, x8, #3
	bl	memcpy
	stur	wzr, [x29, #-20]
	mov	w8, wzr
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.ge	.LBB114_1
.LBB114_4:                              // %for.body21
                                        //   Parent Loop BB114_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w8, [x29, #-12]
	ldursw	x9, [x29, #-20]
	ldp	x11, x10, [sp]
	add	w8, w9, w8, lsl #1
	ldr	x8, [x10, w8, sxtw #3]
	str	x8, [x11, x9, lsl #3]
	ldp	x11, x8, [sp]
	ldursw	x9, [x29, #-20]
	ldur	w10, [x29, #-12]
	ldr	x8, [x8, x9, lsl #3]
	add	w9, w9, w10, lsl #2
	str	x8, [x11, w9, sxtw #3]
	ldur	w8, [x29, #-20]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-20]
	mov	w8, w8
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB114_4
	b	.LBB114_1
.LBB114_5:                              // %for.end40
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end114:
	.size	create_context_buffer, .Lfunc_end114-create_context_buffer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function pre_process_data
	.type	pre_process_data,@function
pre_process_data:                       // @pre_process_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stur	x4, [x29, #-40]
	str	x5, [sp, #48]
	str	w6, [sp, #44]
	ldr	x8, [x0, #440]
	str	x8, [sp, #32]
	b	.LBB115_2
.LBB115_1:                              // %if.end29
                                        //   in Loop: Header=BB115_2 Depth=1
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #96]
	cbz	w8, .LBB115_9
.LBB115_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB115_7 Depth 2
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8]
	cmp	w8, w9
	b.hs	.LBB115_17
// %bb.3:                               // %land.rhs
                                        //   in Loop: Header=BB115_2 Depth=1
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #44]
	ldr	w8, [x8]
	cmp	w8, w9
	b.hs	.LBB115_17
// %bb.4:                               // %while.body
                                        //   in Loop: Header=BB115_2 Depth=1
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldur	x0, [x29, #-8]
	ldr	x11, [sp, #32]
	ldr	w10, [x8]
	add	x2, x11, #16                    // =16
	sub	w9, w9, w10
	str	w9, [sp, #20]
	ldr	w10, [x0, #308]
	ldr	w12, [x11, #100]
	sub	w10, w10, w12
	cmp	w10, w9
	csel	w4, w10, w9, lo
	str	w4, [sp, #28]
	ldr	x9, [x0, #464]
	ldur	x10, [x29, #-16]
	ldr	w8, [x8]
	ldr	w3, [x11, #100]
	ldr	x9, [x9, #8]
	add	x1, x10, x8, lsl #3
	blr	x9
	ldur	x8, [x29, #-24]
	ldr	w9, [sp, #28]
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #28]
	ldr	w10, [x8, #100]
	add	w9, w10, w9
	str	w9, [x8, #100]
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #28]
	ldr	w10, [x8, #96]
	sub	w9, w10, w9
	str	w9, [x8, #96]
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #96]
	cbnz	w8, .LBB115_11
// %bb.5:                               // %land.lhs.true
                                        //   in Loop: Header=BB115_2 Depth=1
	ldr	x8, [sp, #32]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #100]
	ldr	w9, [x9, #308]
	cmp	w8, w9
	b.ge	.LBB115_11
// %bb.6:                               // %if.then
                                        //   in Loop: Header=BB115_2 Depth=1
	str	wzr, [sp, #24]
.LBB115_7:                              // %for.cond
                                        //   Parent Loop BB115_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB115_10
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB115_7 Depth=2
	ldr	x8, [sp, #32]
	ldrsw	x9, [sp, #24]
	ldur	x10, [x29, #-8]
	ldr	w2, [x8, #100]
	add	x9, x8, x9, lsl #3
	ldr	w1, [x10, #40]
	ldr	x0, [x9, #16]
	ldr	w3, [x10, #308]
	bl	expand_bottom_edge
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
	b	.LBB115_7
.LBB115_9:                              // %land.lhs.true32
                                        //   in Loop: Header=BB115_2 Depth=1
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #44]
	ldr	w8, [x8]
	cmp	w8, w9
	b.hs	.LBB115_2
	b	.LBB115_13
.LBB115_10:                             // %for.end
                                        //   in Loop: Header=BB115_2 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #32]
	ldr	w8, [x8, #308]
	str	w8, [x9, #100]
.LBB115_11:                             // %if.end
                                        //   in Loop: Header=BB115_2 Depth=1
	ldr	x8, [sp, #32]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #100]
	ldr	w9, [x9, #308]
	cmp	w8, w9
	b.ne	.LBB115_1
// %bb.12:                              // %if.then23
                                        //   in Loop: Header=BB115_2 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x9, [sp, #48]
	ldr	x10, [sp, #32]
	ldur	x3, [x29, #-40]
	ldr	x8, [x0, #472]
	ldr	w4, [x9]
	add	x1, x10, #16                    // =16
	mov	w2, wzr
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #32]
	str	wzr, [x8, #100]
	ldr	x8, [sp, #48]
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	b	.LBB115_1
.LBB115_13:                             // %if.then34
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #24]
	ldr	x8, [x8, #80]
	str	x8, [sp, #8]
.LBB115_14:                             // %for.cond35
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB115_16
// %bb.15:                              // %for.body38
                                        //   in Loop: Header=BB115_14 Depth=1
	ldr	x8, [sp, #8]
	ldr	x9, [sp, #48]
	ldur	x10, [x29, #-40]
	ldrsw	x11, [sp, #24]
	ldr	w12, [x8, #28]
	ldr	w9, [x9]
	ldr	w8, [x8, #12]
	ldr	w13, [sp, #44]
	ldr	x0, [x10, x11, lsl #3]
	lsl	w1, w12, #3
	mul	w2, w9, w8
	mul	w3, w13, w8
	bl	expand_bottom_edge
	ldr	w8, [sp, #24]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #24]
	str	x9, [sp, #8]
	b	.LBB115_14
.LBB115_16:                             // %for.end46
	ldr	w8, [sp, #44]
	ldr	x9, [sp, #48]
	str	w8, [x9]
.LBB115_17:                             // %while.end
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end115:
	.size	pre_process_data, .Lfunc_end115-pre_process_data
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function expand_bottom_edge
	.type	expand_bottom_edge,@function
expand_bottom_edge:                     // @expand_bottom_edge
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stp	w3, w2, [sp, #12]
	str	w2, [sp, #8]
	ldp	w8, w9, [sp, #8]
	cmp	w8, w9
	b.ge	.LBB116_2
.LBB116_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	ldr	w8, [sp, #16]
	ldr	w3, [sp, #8]
	ldur	w5, [x29, #-12]
	mov	w4, #1
	sub	w1, w8, #1                      // =1
	mov	x2, x0
	bl	jcopy_sample_rows
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
	ldp	w8, w9, [sp, #8]
	cmp	w8, w9
	b.lt	.LBB116_1
.LBB116_2:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end116:
	.size	expand_bottom_edge, .Lfunc_end116-expand_bottom_edge
	.cfi_endproc
                                        // -- End function
	.globl	jinit_downsampler               // -- Begin function jinit_downsampler
	.p2align	2
	.type	jinit_downsampler,@function
jinit_downsampler:                      // @jinit_downsampler
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	w19, #1
	stur	x0, [x29, #-8]
	str	w19, [sp, #12]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #104
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_downsample
	stur	x0, [x29, #-16]
	add	x9, x9, :lo12:start_pass_downsample
	str	x0, [x8, #472]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, sep_downsample
	mov	x8, x0
	add	x9, x9, :lo12:sep_downsample
	str	x9, [x8, #8]
	mov	x8, x0
	str	wzr, [x8, #16]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #260]
	cbz	w8, .LBB117_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #23
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB117_2:                              // %if.end
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-20]
	adrp	x20, fullsize_smooth_downsample
	adrp	x21, fullsize_downsample
	ldr	x8, [x8, #80]
	adrp	x22, h2v1_downsample
	adrp	x23, h2v2_smooth_downsample
	adrp	x24, h2v2_downsample
	adrp	x25, int_downsample
	add	x20, x20, :lo12:fullsize_smooth_downsample
	add	x21, x21, :lo12:fullsize_downsample
	add	x22, x22, :lo12:h2v1_downsample
	add	x23, x23, :lo12:h2v2_smooth_downsample
	add	x24, x24, :lo12:h2v2_downsample
	add	x25, x25, :lo12:int_downsample
	mov	w26, #37
	str	x8, [sp, #16]
	b	.LBB117_6
.LBB117_3:                              // %if.else54
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #304]
	ldr	w9, [x9, #8]
	sdiv	w10, w8, w9
	msub	w8, w10, w9, w8
	cbz	w8, .LBB117_19
.LBB117_4:                              // %if.else67
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w26, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB117_5:                              // %for.inc
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	w8, [x29, #-20]
	ldr	x9, [sp, #16]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-20]
	str	x9, [sp, #16]
.LBB117_6:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB117_23
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB117_6 Depth=1
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #8]
	ldr	w9, [x9, #304]
	cmp	w8, w9
	b.ne	.LBB117_11
// %bb.8:                               // %land.lhs.true
                                        //   in Loop: Header=BB117_6 Depth=1
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #12]
	ldr	w9, [x9, #308]
	cmp	w8, w9
	b.ne	.LBB117_11
// %bb.9:                               // %if.then9
                                        //   in Loop: Header=BB117_6 Depth=1
	ldp	x9, x8, [x29, #-16]
	ldr	w10, [x8, #264]
	ldursw	x8, [x29, #-20]
	add	x9, x9, #24                     // =24
	cbz	w10, .LBB117_21
// %bb.10:                              // %if.then11
                                        //   in Loop: Header=BB117_6 Depth=1
	str	x20, [x9, x8, lsl #3]
	b	.LBB117_18
.LBB117_11:                             // %if.else18
                                        //   in Loop: Header=BB117_6 Depth=1
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #8]
	ldr	w9, [x9, #304]
	cmp	w9, w8, lsl #1
	b.ne	.LBB117_14
// %bb.12:                              // %land.lhs.true22
                                        //   in Loop: Header=BB117_6 Depth=1
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #12]
	ldr	w9, [x9, #308]
	cmp	w8, w9
	b.ne	.LBB117_14
// %bb.13:                              // %if.then26
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	str	wzr, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	x22, [x8, #24]
	b	.LBB117_5
.LBB117_14:                             // %if.else30
                                        //   in Loop: Header=BB117_6 Depth=1
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #8]
	ldr	w9, [x9, #304]
	cmp	w9, w8, lsl #1
	b.ne	.LBB117_3
// %bb.15:                              // %land.lhs.true35
                                        //   in Loop: Header=BB117_6 Depth=1
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #12]
	ldr	w9, [x9, #308]
	cmp	w9, w8, lsl #1
	b.ne	.LBB117_3
// %bb.16:                              // %if.then40
                                        //   in Loop: Header=BB117_6 Depth=1
	ldp	x9, x8, [x29, #-16]
	ldr	w10, [x8, #264]
	ldursw	x8, [x29, #-20]
	add	x9, x9, #24                     // =24
	cbz	w10, .LBB117_22
// %bb.17:                              // %if.then43
                                        //   in Loop: Header=BB117_6 Depth=1
	str	x23, [x9, x8, lsl #3]
.LBB117_18:                             // %for.inc
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	x8, [x29, #-16]
	str	w19, [x8, #16]
	b	.LBB117_5
.LBB117_19:                             // %land.lhs.true58
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #308]
	ldr	w9, [x9, #12]
	sdiv	w10, w8, w9
	msub	w8, w10, w9, w8
	cbnz	w8, .LBB117_4
// %bb.20:                              // %if.then63
                                        //   in Loop: Header=BB117_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	str	wzr, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	x25, [x8, #24]
	b	.LBB117_5
.LBB117_21:                             // %if.else
                                        //   in Loop: Header=BB117_6 Depth=1
	str	x21, [x9, x8, lsl #3]
	b	.LBB117_5
.LBB117_22:                             // %if.else49
                                        //   in Loop: Header=BB117_6 Depth=1
	str	x24, [x9, x8, lsl #3]
	b	.LBB117_5
.LBB117_23:                             // %for.end
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #264]
	cbz	w8, .LBB117_26
// %bb.24:                              // %for.end
	ldr	w8, [sp, #12]
	cbnz	w8, .LBB117_26
// %bb.25:                              // %if.then80
	ldur	x8, [x29, #-8]
	mov	w9, #98
	mov	w1, wzr
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB117_26:                             // %if.end84
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end117:
	.size	jinit_downsampler, .Lfunc_end117-jinit_downsampler
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_downsample
	.type	start_pass_downsample,@function
start_pass_downsample:                  // @start_pass_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end118:
	.size	start_pass_downsample, .Lfunc_end118-start_pass_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function sep_downsample
	.type	sep_downsample,@function
sep_downsample:                         // @sep_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	w2, [x29, #-20]
	stur	x3, [x29, #-32]
	stur	w4, [x29, #-36]
	ldr	x8, [x0, #472]
	str	wzr, [sp, #28]
	str	x8, [sp, #32]
	ldr	x8, [x0, #80]
	str	x8, [sp, #16]
.LBB119_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #28]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB119_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB119_1 Depth=1
	ldrsw	x8, [sp, #28]
	ldp	x9, x0, [x29, #-16]
	ldur	w10, [x29, #-20]
	ldr	x1, [sp, #16]
	lsl	x8, x8, #3
	ldr	x9, [x9, x8]
	ldur	x11, [x29, #-32]
	ldur	w12, [x29, #-36]
	ldr	x13, [sp, #32]
	add	x2, x9, x10, lsl #3
	ldr	w9, [x1, #12]
	ldr	x10, [x11, x8]
	add	x8, x13, x8
	mul	w9, w12, w9
	add	x3, x10, w9, uxtw #3
	stp	x3, x2, [sp]
	ldr	x8, [x8, #24]
	blr	x8
	ldr	w8, [sp, #28]
	ldr	x9, [sp, #16]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #28]
	str	x9, [sp, #16]
	b	.LBB119_1
.LBB119_3:                              // %for.end
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end119:
	.size	sep_downsample, .Lfunc_end119-sep_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fullsize_smooth_downsample
	.type	fullsize_smooth_downsample,@function
fullsize_smooth_downsample:             // @fullsize_smooth_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #128                   // =128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	w8, [x1, #28]
	mov	x9, x0
	sub	x0, x2, #8                      // =8
	lsl	w3, w8, #3
	stur	w3, [x29, #-44]
	ldr	w10, [x9, #308]
	ldr	w8, [x9, #40]
	add	w1, w10, #2                     // =2
	mov	w2, w8
	bl	expand_right_edge
	ldur	x8, [x29, #-8]
	mov	w10, #65536
	ldrsw	x9, [x8, #264]
	ldrsw	x8, [x8, #264]
	stur	wzr, [x29, #-36]
	sub	x9, x10, x9, lsl #9
	lsl	x8, x8, #6
	stp	x8, x9, [sp, #16]
	b	.LBB120_2
.LBB120_1:                              // %for.end
                                        //   in Loop: Header=BB120_2 Depth=1
	ldrb	w8, [x8]
	ldpsw	x10, x9, [sp, #8]
	sub	x11, x9, x8
	add	x10, x10, x11
	add	x9, x10, x9
	ldp	x11, x10, [sp, #16]
	str	x9, [sp, #32]
	mul	x9, x9, x11
	ldr	x11, [sp, #48]
	madd	x8, x8, x10, x9
	str	x8, [sp, #40]
	add	w8, w8, #8, lsl #12             // =32768
	lsr	w8, w8, #16
	strb	w8, [x11]
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
.LBB120_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_4 Depth 2
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #12]
	cmp	w9, w8
	b.ge	.LBB120_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB120_2 Depth=1
	ldursw	x8, [x29, #-36]
	ldp	x9, x10, [x29, #-32]
	lsl	x8, x8, #3
	ldr	x12, [x9, x8]
	add	x8, x10, x8
	ldp	x10, x9, [x8, #-8]
	stur	x9, [x29, #-56]
	str	x10, [sp, #64]
	ldr	x8, [x8, #8]
	add	x13, x10, #1                    // =1
	add	x14, x9, #1                     // =1
	stp	x12, x8, [sp, #48]
	add	x11, x8, #1                     // =1
	ldrb	w12, [x10]
	stp	x11, x13, [sp, #56]
	ldrb	w11, [x8]
	ldrb	w13, [x9]
	stur	x14, [x29, #-56]
	add	w11, w12, w11
	add	w11, w11, w13
	str	w11, [sp, #12]
	ldrb	w10, [x10, #1]
	ldrb	w8, [x8, #1]
	ldrb	w12, [x9]
	ldrb	w9, [x9, #1]
	ldr	x13, [sp, #48]
	add	w8, w10, w8
	sub	x14, x11, x12
	add	w8, w8, w9
	ldp	x9, x10, [sp, #16]
	add	x11, x11, x14
	str	w8, [sp, #4]
	add	x8, x11, x8
	str	x8, [sp, #32]
	mul	x8, x8, x9
	add	x14, x13, #1                    // =1
	madd	x8, x12, x10, x8
	stp	x12, x14, [sp, #40]
	str	x8, [sp, #40]
	add	w8, w8, #8, lsl #12             // =32768
	lsr	w8, w8, #16
	strb	w8, [x13]
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #4]
	ldur	w10, [x29, #-44]
	stp	w8, w9, [sp, #8]
	sub	w8, w10, #2                     // =2
	stur	w8, [x29, #-40]
	mov	w9, w8
	ldur	x8, [x29, #-56]
	cbz	w9, .LBB120_1
.LBB120_4:                              // %for.body44
                                        //   Parent Loop BB120_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x11, x10, [sp, #56]
	add	x9, x8, #1                      // =1
	stur	x9, [x29, #-56]
	ldrb	w9, [x8]
	add	x15, x10, #1                    // =1
	add	x14, x11, #1                    // =1
	stp	x14, x15, [sp, #56]
	ldrb	w10, [x10, #1]
	ldrb	w11, [x11, #1]
	ldrb	w8, [x8, #1]
	ldpsw	x12, x13, [sp, #8]
	ldr	x14, [sp, #48]
	add	w10, w10, w11
	add	w8, w10, w8
	ldp	x10, x11, [sp, #16]
	sub	x13, x13, x9
	add	x12, x12, x13
	str	w8, [sp, #4]
	add	x8, x12, x8
	str	x8, [sp, #32]
	mul	x8, x8, x10
	add	x13, x14, #1                    // =1
	madd	x8, x9, x11, x8
	stp	x9, x13, [sp, #40]
	str	x8, [sp, #40]
	add	w8, w8, #8, lsl #12             // =32768
	lsr	w8, w8, #16
	strb	w8, [x14]
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #4]
	ldur	w10, [x29, #-40]
	stp	w8, w9, [sp, #8]
	sub	w8, w10, #1                     // =1
	stur	w8, [x29, #-40]
	mov	w9, w8
	ldur	x8, [x29, #-56]
	cbnz	w9, .LBB120_4
	b	.LBB120_1
.LBB120_5:                              // %for.end83
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end120:
	.size	fullsize_smooth_downsample, .Lfunc_end120-fullsize_smooth_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fullsize_downsample
	.type	fullsize_downsample,@function
fullsize_downsample:                    // @fullsize_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	x2, x1, [sp, #8]
	str	x3, [sp]
	ldr	w4, [x0, #308]
	ldr	w5, [x0, #40]
	mov	x0, x2
	mov	w1, wzr
	mov	x2, x3
	mov	w3, wzr
	bl	jcopy_sample_rows
	ldr	x9, [sp, #16]
	ldur	x8, [x29, #-8]
	ldr	x0, [sp]
	ldr	w9, [x9, #28]
	ldr	w1, [x8, #308]
	ldr	w2, [x8, #40]
	lsl	w3, w9, #3
	bl	expand_right_edge
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end121:
	.size	fullsize_downsample, .Lfunc_end121-fullsize_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v1_downsample
	.type	h2v1_downsample,@function
h2v1_downsample:                        // @h2v1_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	w9, [x1, #28]
	mov	x8, x2
	lsl	w10, w9, #3
	str	w10, [sp, #36]
	ldr	w1, [x0, #308]
	ldr	w2, [x0, #40]
	lsl	w3, w9, #4
	mov	x0, x8
	bl	expand_right_edge
	stur	wzr, [x29, #-36]
	b	.LBB122_2
.LBB122_1:                              // %for.inc11
                                        //   in Loop: Header=BB122_2 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
.LBB122_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB122_4 Depth 2
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #12]
	cmp	w9, w8
	b.ge	.LBB122_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB122_2 Depth=1
	ldursw	x8, [x29, #-36]
	ldp	x9, x10, [x29, #-32]
	lsl	x8, x8, #3
	ldr	x9, [x9, x8]
	ldr	x8, [x10, x8]
	str	wzr, [sp, #12]
	str	wzr, [sp, #40]
	stp	x9, x8, [sp, #16]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9
	b.hs	.LBB122_1
.LBB122_4:                              // %for.body6
                                        //   Parent Loop BB122_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x9, x8, [sp, #16]
	ldr	w11, [sp, #12]
	ldrb	w10, [x8]
	ldrb	w8, [x8, #1]
	add	x12, x9, #1                     // =1
	add	w8, w10, w8
	add	w8, w8, w11
	lsr	w8, w8, #1
	strb	w8, [x9]
	ldr	w8, [sp, #12]
	ldr	x9, [sp, #24]
	ldr	w10, [sp, #40]
	eor	w8, w8, #0x1
	add	x9, x9, #2                      // =2
	add	w10, w10, #1                    // =1
	str	w8, [sp, #12]
	stp	x12, x9, [sp, #16]
	str	w10, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9
	b.lo	.LBB122_4
	b	.LBB122_1
.LBB122_5:                              // %for.end13
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end122:
	.size	h2v1_downsample, .Lfunc_end122-h2v1_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v2_smooth_downsample
	.type	h2v2_smooth_downsample,@function
h2v2_smooth_downsample:                 // @h2v2_smooth_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #128                   // =128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	w9, [x1, #28]
	mov	x8, x0
	sub	x0, x2, #8                      // =8
	lsl	w10, w9, #3
	stur	w10, [x29, #-48]
	ldr	w10, [x8, #308]
	ldr	w8, [x8, #40]
	lsl	w3, w9, #4
	add	w1, w10, #2                     // =2
	mov	w2, w8
	bl	expand_right_edge
	ldur	x8, [x29, #-8]
	mov	w10, #80
	mov	w11, #16384
	ldrsw	x9, [x8, #264]
	ldrsw	x8, [x8, #264]
	stur	xzr, [x29, #-40]
	msub	x9, x9, x10, x11
	lsl	x8, x8, #4
	stp	x8, x9, [sp, #8]
	b	.LBB123_2
.LBB123_1:                              // %for.end
                                        //   in Loop: Header=BB123_2 Depth=1
	ldp	x11, x10, [sp, #56]
	ldrb	w9, [x9, #1]
	ldurb	w12, [x10, #-1]
	ldrb	w10, [x10, #1]
	add	x8, x9, w8, uxtw
	ldr	x9, [sp, #48]
	add	x8, x8, x12
	add	x8, x8, x10
	add	x8, x8, x8
	str	x8, [sp, #24]
	ldurb	w10, [x11, #-1]
	ldrb	w11, [x11, #1]
	ldurb	w12, [x9, #-1]
	ldrb	w9, [x9, #1]
	add	x10, x10, x11
	add	x10, x10, x12
	add	x9, x10, x9
	add	x8, x8, x9
	ldp	x10, x9, [sp, #8]
	str	x8, [sp, #24]
	mul	x8, x8, x10
	ldp	x11, x10, [sp, #32]
	madd	x8, x11, x9, x8
	str	x8, [sp, #32]
	add	w8, w8, #8, lsl #12             // =32768
	lsr	w8, w8, #16
	strb	w8, [x10]
	ldp	w9, w8, [x29, #-40]
	add	w8, w8, #2                      // =2
	add	w9, w9, #1                      // =1
	stp	w9, w8, [x29, #-40]
.LBB123_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_4 Depth 2
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-40]
	ldr	w8, [x8, #12]
	cmp	w9, w8
	b.ge	.LBB123_6
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB123_2 Depth=1
	ldp	x8, x10, [x29, #-32]
	ldpsw	x9, x11, [x29, #-40]
	add	x10, x10, x11, lsl #3
	ldr	x12, [x8, x9, lsl #3]
	ldp	x8, x9, [x10]
	stur	x8, [x29, #-56]
	ldur	x11, [x10, #-8]
	stp	x11, x9, [sp, #56]
	ldr	x10, [x10, #16]
	stp	x12, x10, [sp, #40]
	ldrb	w12, [x8]
	ldrb	w13, [x8, #1]
	ldrb	w14, [x9]
	ldrb	w15, [x9, #1]
	add	x12, x12, x13
	add	x12, x12, x14
	add	x12, x12, x15
	str	x12, [sp, #32]
	ldrb	w12, [x11]
	ldrb	w11, [x11, #1]
	ldrb	w14, [x10]
	ldrb	w10, [x10, #1]
	ldr	x13, [sp, #40]
	add	x11, x12, x11
	add	x11, x11, x14
	ldrb	w14, [x8]
	add	x10, x11, x10
	ldrb	w8, [x8, #2]
	add	x15, x13, #1                    // =1
	add	x10, x10, x14
	ldrb	w14, [x9]
	ldrb	w9, [x9, #2]
	add	x8, x10, x8
	ldp	x10, x11, [sp, #48]
	add	x8, x8, x14
	add	x8, x8, x9
	add	x8, x8, x8
	str	x8, [sp, #24]
	ldrb	w9, [x11]
	ldrb	w11, [x11, #2]
	ldrb	w14, [x10]
	ldrb	w10, [x10, #2]
	add	x9, x9, x11
	ldp	x12, x11, [sp, #8]
	add	x9, x9, x14
	add	x9, x9, x10
	ldr	x10, [sp, #32]
	add	x8, x8, x9
	str	x8, [sp, #24]
	mul	x8, x8, x12
	madd	x8, x10, x11, x8
	stp	x8, x15, [sp, #32]
	add	w8, w8, #8, lsl #12             // =32768
	lsr	w8, w8, #16
	strb	w8, [x13]
	ldur	x8, [x29, #-56]
	ldp	x10, x9, [sp, #56]
	ldr	x11, [sp, #48]
	ldur	w12, [x29, #-48]
	add	x8, x8, #2                      // =2
	add	x9, x9, #2                      // =2
	add	x10, x10, #2                    // =2
	add	x11, x11, #2                    // =2
	sub	w12, w12, #2                    // =2
	stur	x8, [x29, #-56]
	stp	x10, x9, [sp, #56]
	str	x11, [sp, #48]
	stur	w12, [x29, #-44]
.LBB123_4:                              // %for.cond70
                                        //   Parent Loop BB123_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x9, [x29, #-56]
	ldp	x13, x8, [sp, #56]
	ldur	w10, [x29, #-44]
	ldrb	w11, [x9]
	ldrb	w12, [x9, #1]
	ldrb	w14, [x8]
	ldrb	w8, [x8, #1]
	add	x11, x11, x12
	ldr	x12, [sp, #48]
	add	x11, x11, x14
	add	x8, x11, x8
	str	x8, [sp, #32]
	ldrb	w8, [x13]
	ldrb	w11, [x13, #1]
	ldrb	w13, [x12]
	ldrb	w12, [x12, #1]
	ldurb	w14, [x9, #-1]
	add	x8, x8, x11
	add	x8, x8, x13
	add	x8, x8, x12
	add	x8, x8, x14
	cbz	w10, .LBB123_1
// %bb.5:                               // %for.body73
                                        //   in Loop: Header=BB123_4 Depth=2
	ldp	x11, x10, [sp, #56]
	ldrb	w9, [x9, #2]
	ldp	x13, x12, [sp, #40]
	ldurb	w14, [x10, #-1]
	ldrb	w10, [x10, #2]
	add	x8, x8, x9
	add	x15, x13, #1                    // =1
	add	x8, x8, x14
	add	x8, x8, x10
	add	x8, x8, x8
	str	x8, [sp, #24]
	ldurb	w10, [x11, #-1]
	ldrb	w11, [x11, #2]
	ldurb	w14, [x12, #-1]
	ldrb	w12, [x12, #2]
	add	x9, x10, x11
	add	x9, x9, x14
	add	x9, x9, x12
	ldp	x11, x12, [sp, #8]
	ldr	x10, [sp, #32]
	add	x8, x8, x9
	str	x8, [sp, #24]
	mul	x8, x8, x11
	madd	x8, x10, x12, x8
	stp	x8, x15, [sp, #32]
	add	w8, w8, #8, lsl #12             // =32768
	lsr	w8, w8, #16
	strb	w8, [x13]
	ldur	x8, [x29, #-56]
	ldp	x10, x9, [sp, #56]
	ldr	x11, [sp, #48]
	add	x8, x8, #2                      // =2
	stur	x8, [x29, #-56]
	ldur	w8, [x29, #-44]
	add	x9, x9, #2                      // =2
	add	x10, x10, #2                    // =2
	add	x11, x11, #2                    // =2
	sub	w8, w8, #1                      // =1
	stp	x10, x9, [sp, #56]
	str	x11, [sp, #48]
	stur	w8, [x29, #-44]
	b	.LBB123_4
.LBB123_6:                              // %for.end185
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end123:
	.size	h2v2_smooth_downsample, .Lfunc_end123-h2v2_smooth_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v2_downsample
	.type	h2v2_downsample,@function
h2v2_downsample:                        // @h2v2_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	w9, [x1, #28]
	mov	x8, x2
	lsl	w10, w9, #3
	str	w10, [sp, #32]
	ldr	w1, [x0, #308]
	ldr	w2, [x0, #40]
	lsl	w3, w9, #4
	mov	x0, x8
	bl	expand_right_edge
	mov	w8, #1
	stur	wzr, [x29, #-36]
	str	wzr, [sp, #40]
	b	.LBB124_2
.LBB124_1:                              // %for.end
                                        //   in Loop: Header=BB124_2 Depth=1
	ldur	w9, [x29, #-36]
	ldr	w10, [sp, #40]
	add	w9, w9, #2                      // =2
	add	w10, w10, #1                    // =1
	stur	w9, [x29, #-36]
	str	w10, [sp, #40]
.LBB124_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB124_4 Depth 2
	ldur	x9, [x29, #-16]
	ldr	w10, [sp, #40]
	ldr	w9, [x9, #12]
	cmp	w10, w9
	b.ge	.LBB124_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB124_2 Depth=1
	ldp	x9, x11, [x29, #-32]
	ldrsw	x10, [sp, #40]
	ldursw	x12, [x29, #-36]
	ldr	x13, [x9, x10, lsl #3]
	add	x10, x11, x12, lsl #3
	ldr	x9, [x10]
	str	x9, [sp, #24]
	ldr	x9, [x10, #8]
	str	w8, [sp, #4]
	str	wzr, [sp, #36]
	stp	x13, x9, [sp, #8]
	ldp	w10, w9, [sp, #32]
	cmp	w9, w10
	b.hs	.LBB124_1
.LBB124_4:                              // %for.body8
                                        //   Parent Loop BB124_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x10, x9, [sp, #16]
	ldr	w14, [sp, #4]
	ldr	x11, [sp, #8]
	ldrb	w12, [x9]
	ldrb	w9, [x9, #1]
	ldrb	w13, [x10]
	ldrb	w10, [x10, #1]
	add	x15, x11, #1                    // =1
	add	w9, w12, w9
	add	w9, w9, w13
	add	w9, w9, w10
	add	w9, w9, w14
	lsr	w9, w9, #2
	strb	w9, [x11]
	ldr	w9, [sp, #4]
	ldp	x11, x10, [sp, #16]
	ldr	w12, [sp, #36]
	eor	w9, w9, #0x3
	str	w9, [sp, #4]
	add	x9, x10, #2                     // =2
	add	x10, x11, #2                    // =2
	add	w11, w12, #1                    // =1
	str	x9, [sp, #24]
	stp	x15, x10, [sp, #8]
	str	w11, [sp, #36]
	ldp	w10, w9, [sp, #32]
	cmp	w9, w10
	b.lo	.LBB124_4
	b	.LBB124_1
.LBB124_5:                              // %for.end23
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end124:
	.size	h2v2_downsample, .Lfunc_end124-h2v2_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function int_downsample
	.type	int_downsample,@function
int_downsample:                         // @int_downsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	w8, [x1, #28]
	mov	x9, x0
	mov	x11, x1
	mov	x10, x0
	lsl	w8, w8, #3
	str	w8, [sp, #36]
	ldr	w9, [x9, #304]
	ldr	w11, [x11, #8]
	mov	x12, x1
	ldr	w10, [x10, #308]
	mov	x0, x2
	sdiv	w9, w9, w11
	ldr	w11, [x12, #12]
	mul	w3, w8, w9
	sdiv	w10, w10, w11
	stp	w10, w9, [x29, #-48]
	mul	w10, w9, w10
	ldur	x11, [x29, #-8]
	cmp	w10, #0                         // =0
	stur	w10, [x29, #-52]
	cinc	w10, w10, lt
	asr	w10, w10, #1
	str	w10, [sp, #56]
	ldr	w1, [x11, #308]
	ldr	w2, [x11, #40]
	bl	expand_right_edge
	stur	xzr, [x29, #-40]
	b	.LBB125_2
.LBB125_1:                              // %for.end32
                                        //   in Loop: Header=BB125_2 Depth=1
	ldur	w8, [x29, #-48]
	ldp	w10, w9, [x29, #-40]
	add	w8, w9, w8
	add	w9, w10, #1                     // =1
	stp	w9, w8, [x29, #-40]
.LBB125_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB125_5 Depth 2
                                        //       Child Loop BB125_8 Depth 3
                                        //         Child Loop BB125_10 Depth 4
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-40]
	ldr	w8, [x8, #12]
	cmp	w9, w8
	b.ge	.LBB125_11
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB125_2 Depth=1
	ldur	x8, [x29, #-32]
	ldursw	x9, [x29, #-40]
	ldr	x8, [x8, x9, lsl #3]
	str	xzr, [sp, #40]
	str	x8, [sp, #16]
	b	.LBB125_5
.LBB125_4:                              // %for.end22
                                        //   in Loop: Header=BB125_5 Depth=2
	ldp	x8, x11, [sp, #8]
	ldrsw	x9, [sp, #56]
	ldursw	x10, [x29, #-52]
	add	x8, x8, x9
	sdiv	x8, x8, x10
	add	x9, x11, #1                     // =1
	str	x9, [sp, #16]
	strb	w8, [x11]
	ldp	w10, w8, [sp, #40]
	ldur	w9, [x29, #-44]
	add	w8, w8, #1                      // =1
	add	w9, w10, w9
	stp	w9, w8, [sp, #40]
.LBB125_5:                              // %for.cond7
                                        //   Parent Loop BB125_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB125_8 Depth 3
                                        //         Child Loop BB125_10 Depth 4
	ldr	w8, [sp, #44]
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.hs	.LBB125_1
// %bb.6:                               // %for.body9
                                        //   in Loop: Header=BB125_5 Depth=2
	str	xzr, [sp, #8]
	str	wzr, [sp, #48]
	b	.LBB125_8
.LBB125_7:                              // %for.inc20
                                        //   in Loop: Header=BB125_8 Depth=3
	ldr	w8, [sp, #48]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #48]
.LBB125_8:                              // %for.cond10
                                        //   Parent Loop BB125_2 Depth=1
                                        //     Parent Loop BB125_5 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB125_10 Depth 4
	ldr	w8, [sp, #48]
	ldur	w9, [x29, #-48]
	cmp	w8, w9
	b.ge	.LBB125_4
// %bb.9:                               // %for.body12
                                        //   in Loop: Header=BB125_8 Depth=3
	ldur	w8, [x29, #-36]
	ldr	w9, [sp, #48]
	ldur	x10, [x29, #-24]
	ldr	w11, [sp, #40]
	add	w8, w8, w9
	ldr	x8, [x10, w8, sxtw #3]
	str	wzr, [sp, #52]
	add	x8, x8, x11
	str	x8, [sp, #24]
	mov	w8, wzr
	ldur	w9, [x29, #-44]
	cmp	w8, w9
	b.ge	.LBB125_7
.LBB125_10:                             // %for.body17
                                        //   Parent Loop BB125_2 Depth=1
                                        //     Parent Loop BB125_5 Depth=2
                                        //       Parent Loop BB125_8 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #8]
	ldr	w10, [sp, #52]
	add	x11, x8, #1                     // =1
	str	x11, [sp, #24]
	ldrb	w8, [x8]
	add	w10, w10, #1                    // =1
	str	w10, [sp, #52]
	add	x8, x9, x8
	str	x8, [sp, #8]
	mov	w8, w10
	ldur	w9, [x29, #-44]
	cmp	w8, w9
	b.lt	.LBB125_10
	b	.LBB125_7
.LBB125_11:                             // %for.end36
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end125:
	.size	int_downsample, .Lfunc_end125-int_downsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function expand_right_edge
	.type	expand_right_edge,@function
expand_right_edge:                      // @expand_right_edge
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa_offset 48
	sub	w8, w3, w2
	cmp	w8, #1                          // =1
	str	x0, [sp, #40]
	stp	w2, w1, [sp, #32]
	str	w3, [sp, #28]
	str	w8, [sp]
	b.lt	.LBB126_6
// %bb.1:                               // %if.then
	str	wzr, [sp, #4]
	b	.LBB126_3
.LBB126_2:                              // %for.inc6
                                        //   in Loop: Header=BB126_3 Depth=1
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB126_3:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB126_5 Depth 2
	ldr	w8, [sp, #4]
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.ge	.LBB126_6
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB126_3 Depth=1
	ldr	x8, [sp, #40]
	ldrsw	x9, [sp, #4]
	ldr	w10, [sp, #32]
	ldr	x8, [x8, x9, lsl #3]
	ldr	w9, [sp]
	add	x8, x8, x10
	str	x8, [sp, #16]
	ldurb	w8, [x8, #-1]
	str	w9, [sp, #8]
	strb	w8, [sp, #12]
	mov	w8, w9
	cmp	w8, #1                          // =1
	b.lt	.LBB126_2
.LBB126_5:                              // %for.body5
                                        //   Parent Loop BB126_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #16]
	ldrb	w9, [sp, #12]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	strb	w9, [x8]
	ldr	w8, [sp, #8]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #8]
	mov	w8, w8
	cmp	w8, #1                          // =1
	b.ge	.LBB126_5
	b	.LBB126_2
.LBB126_6:                              // %if.end
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end126:
	.size	expand_right_edge, .Lfunc_end126-expand_right_edge
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_write_coefficients         // -- Begin function jpeg_write_coefficients
	.p2align	2
	.type	jpeg_write_coefficients,@function
jpeg_write_coefficients:                // @jpeg_write_coefficients
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [sp]
	ldr	w8, [x0, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB127_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB127_2:                              // %if.end
	ldr	x0, [sp, #8]
	mov	w1, wzr
	bl	jpeg_suppress_tables
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #16]
	blr	x8
	ldp	x1, x0, [sp]
	bl	transencode_master_selection
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	mov	w9, #103
	str	wzr, [x8, #296]
	ldr	x8, [sp, #8]
	str	w9, [x8, #28]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end127:
	.size	jpeg_write_coefficients, .Lfunc_end127-jpeg_write_coefficients
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function transencode_master_selection
	.type	transencode_master_selection,@function
transencode_master_selection:           // @transencode_master_selection
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x1, [sp, #8]
	mov	w19, #1
	mov	w1, #1
	str	x0, [x29, #24]
	str	w19, [x0, #48]
	bl	jinit_c_master_control
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #252]
	cbz	w9, .LBB128_2
// %bb.1:                               // %if.then
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB128_5
.LBB128_2:                              // %if.else
	ldr	w8, [x8, #300]
	ldr	x0, [x29, #24]
	cbz	w8, .LBB128_4
// %bb.3:                               // %if.then3
	bl	jinit_phuff_encoder
	b	.LBB128_5
.LBB128_4:                              // %if.else4
	bl	jinit_huff_encoder
.LBB128_5:                              // %if.end5
	ldr	x0, [x29, #24]
	ldr	x1, [sp, #8]
	bl	transencode_coef_controller
	ldr	x0, [x29, #24]
	bl	jinit_marker_writer
	ldr	x0, [x29, #24]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #48]
	blr	x8
	ldr	x0, [x29, #24]
	ldr	x8, [x0, #456]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end128:
	.size	transencode_master_selection, .Lfunc_end128-transencode_master_selection
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function transencode_coef_controller
	.type	transencode_coef_controller,@function
transencode_coef_controller:            // @transencode_coef_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #120
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_coef.47
	str	x0, [sp, #24]
	add	x9, x9, :lo12:start_pass_coef.47
	str	x0, [x8, #448]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, compress_output.48
	mov	x8, x0
	add	x9, x9, :lo12:compress_output.48
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	mov	x9, x0
	mov	w1, #1
	mov	w2, #1280
	str	x8, [x9, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	mov	w1, #1280
	str	x0, [sp, #16]
	bl	jzero_far
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #9                          // =9
	b.gt	.LBB129_2
.LBB129_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x8, x10, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #7
	add	x9, x10, x9, lsl #3
	str	x8, [x9, #40]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #9                          // =9
	b.le	.LBB129_1
.LBB129_2:                              // %for.end
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end129:
	.size	transencode_coef_controller, .Lfunc_end129-transencode_coef_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_coef.47
	.type	start_pass_coef.47,@function
start_pass_coef.47:                     // @start_pass_coef.47
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #448]
	cmp	w1, #2                          // =2
	str	x8, [sp, #8]
	b.eq	.LBB130_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB130_2:                              // %if.end
	ldr	x8, [sp, #8]
	str	wzr, [x8, #16]
	ldur	x0, [x29, #-8]
	bl	start_iMCU_row.49
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end130:
	.size	start_pass_coef.47, .Lfunc_end130-start_pass_coef.47
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function compress_output.48
	.type	compress_output.48,@function
compress_output.48:                     // @compress_output.48
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #272                    // =272
	stp	x29, x30, [sp, #208]            // 16-byte Folded Spill
	stp	x28, x23, [sp, #224]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #240]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #256]            // 16-byte Folded Spill
	add	x29, sp, #208                   // =208
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w28, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	sub	x19, x29, #32                   // =32
	stp	x1, x0, [x19, #8]
	ldr	x8, [x0, #448]
	add	x20, sp, #104                   // =104
	str	x8, [x19]
	ldr	w8, [x0, #352]
	sub	w9, w8, #1                      // =1
	ldr	w8, [x0, #312]
	stur	wzr, [x29, #-52]
	sub	w8, w8, #1                      // =1
	stp	w8, w9, [x29, #-44]
.LBB131_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x19, #16]
	ldur	w9, [x29, #-52]
	ldr	w8, [x8, #316]
	cmp	w9, w8
	b.ge	.LBB131_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB131_1 Depth=1
	ldr	x0, [x19, #16]
	ldursw	x8, [x29, #-52]
	ldr	x9, [x19]
	mov	w4, wzr
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #320]
	str	x8, [sp, #8]
	ldr	x10, [x0, #8]
	ldr	x11, [x9, #32]
	ldrsw	x12, [x8, #4]
	ldr	w9, [x9, #16]
	ldr	w3, [x8, #12]
	ldr	x8, [x10, #64]
	ldr	x1, [x11, x12, lsl #3]
	mul	w2, w9, w3
	blr	x8
	ldursw	x8, [x29, #-52]
	ldur	w9, [x29, #-52]
	str	x0, [x20, x8, lsl #3]
	add	w8, w9, #1                      // =1
	stur	w8, [x29, #-52]
	b	.LBB131_1
.LBB131_3:                              // %for.end
	ldr	x8, [x19]
	mov	w20, #68
	mov	w21, #52
	add	x22, sp, #104                   // =104
	ldr	w8, [x8, #24]
	add	x23, sp, #24                    // =24
	stur	w8, [x29, #-64]
.LBB131_4:                              // %for.cond8
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB131_6 Depth 2
                                        //       Child Loop BB131_9 Depth 3
                                        //         Child Loop BB131_11 Depth 4
                                        //           Child Loop BB131_15 Depth 5
                                        //           Child Loop BB131_18 Depth 5
	ldr	x8, [x19]
	ldur	w9, [x29, #-64]
	ldr	w10, [x8, #28]
	cmp	w9, w10
	b.ge	.LBB131_25
// %bb.5:                               // %for.body10
                                        //   in Loop: Header=BB131_4 Depth=1
	ldr	w8, [x8, #20]
.LBB131_6:                              // %for.cond11
                                        //   Parent Loop BB131_4 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB131_9 Depth 3
                                        //         Child Loop BB131_11 Depth 4
                                        //           Child Loop BB131_15 Depth 5
                                        //           Child Loop BB131_18 Depth 5
	stur	w8, [x29, #-36]
	ldr	x8, [x19, #16]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #352]
	cmp	w9, w8
	b.hs	.LBB131_22
// %bb.7:                               // %for.body14
                                        //   in Loop: Header=BB131_6 Depth=2
	stur	xzr, [x29, #-52]
	b	.LBB131_9
.LBB131_8:                              // %for.inc69
                                        //   in Loop: Header=BB131_9 Depth=3
	ldur	w8, [x29, #-52]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-52]
.LBB131_9:                              // %for.cond15
                                        //   Parent Loop BB131_4 Depth=1
                                        //     Parent Loop BB131_6 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB131_11 Depth 4
                                        //           Child Loop BB131_15 Depth 5
                                        //           Child Loop BB131_18 Depth 5
	ldr	x8, [x19, #16]
	ldur	w9, [x29, #-52]
	ldr	w10, [x8, #316]
	cmp	w9, w10
	b.ge	.LBB131_20
// %bb.10:                              // %for.body18
                                        //   in Loop: Header=BB131_9 Depth=3
	ldursw	x9, [x29, #-52]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #320]
	ldp	w10, w9, [x29, #-40]
	str	x8, [sp, #8]
	cmp	w9, w10
	ldr	w11, [x8, #52]
	csel	x10, x21, x20, lo
	ldr	w8, [x8, x10]
	stur	wzr, [x29, #-60]
	mul	w9, w9, w11
	stp	w9, w8, [x29, #-72]
.LBB131_11:                             // %for.cond25
                                        //   Parent Loop BB131_4 Depth=1
                                        //     Parent Loop BB131_6 Depth=2
                                        //       Parent Loop BB131_9 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB131_15 Depth 5
                                        //           Child Loop BB131_18 Depth 5
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-60]
	ldr	w8, [x8, #56]
	cmp	w9, w8
	b.ge	.LBB131_8
// %bb.12:                              // %for.body27
                                        //   in Loop: Header=BB131_11 Depth=4
	ldr	x8, [x19]
	ldur	w9, [x29, #-44]
	ldr	w8, [x8, #16]
	cmp	w8, w9
	b.lo	.LBB131_14
// %bb.13:                              // %lor.lhs.false
                                        //   in Loop: Header=BB131_11 Depth=4
	ldr	x8, [sp, #8]
	ldp	w10, w9, [x29, #-64]
	ldr	w8, [x8, #72]
	add	w9, w9, w10
	cmp	w9, w8
	b.ge	.LBB131_16
.LBB131_14:                             // %if.then
                                        //   in Loop: Header=BB131_11 Depth=4
	ldursw	x8, [x29, #-52]
	ldp	w10, w9, [x29, #-64]
	ldur	w11, [x29, #-72]
	ldr	x8, [x22, x8, lsl #3]
	add	w9, w9, w10
	ldr	x8, [x8, w9, sxtw #3]
	stur	wzr, [x29, #-56]
	add	x8, x8, x11, lsl #7
	str	x8, [sp, #16]
	mov	w8, wzr
	ldur	w9, [x29, #-68]
	cmp	w8, w9
	b.ge	.LBB131_18
.LBB131_15:                             // %for.body38
                                        //   Parent Loop BB131_4 Depth=1
                                        //     Parent Loop BB131_6 Depth=2
                                        //       Parent Loop BB131_9 Depth=3
                                        //         Parent Loop BB131_11 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	x8, [sp, #16]
	ldursw	x9, [x29, #-48]
	ldur	w10, [x29, #-56]
	add	x11, x8, #128                   // =128
	add	w12, w9, #1                     // =1
	str	x8, [x23, x9, lsl #3]
	add	w8, w10, #1                     // =1
	str	x11, [sp, #16]
	stur	w12, [x29, #-48]
	stur	w8, [x29, #-56]
	mov	w8, w8
	ldur	w9, [x29, #-68]
	cmp	w8, w9
	b.lt	.LBB131_15
	b	.LBB131_18
.LBB131_16:                             // %if.else
                                        //   in Loop: Header=BB131_11 Depth=4
	stur	wzr, [x29, #-56]
	b	.LBB131_18
.LBB131_17:                             // %for.body48
                                        //   in Loop: Header=BB131_18 Depth=5
	ldursw	x8, [x29, #-48]
	ldr	x9, [x19]
	lsl	x8, x8, #3
	add	x9, x9, x8
	add	x8, x23, x8
	ldr	x9, [x9, #40]
	ldur	x10, [x8, #-8]
	str	x9, [x8]
	ldrh	w8, [x10]
	strh	w8, [x9]
	ldur	w8, [x29, #-48]
	ldur	w9, [x29, #-56]
	add	w8, w8, #1                      // =1
	add	w9, w9, #1                      // =1
	stur	w8, [x29, #-48]
	stur	w9, [x29, #-56]
.LBB131_18:                             // %for.cond45
                                        //   Parent Loop BB131_4 Depth=1
                                        //     Parent Loop BB131_6 Depth=2
                                        //       Parent Loop BB131_9 Depth=3
                                        //         Parent Loop BB131_11 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-56]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.lt	.LBB131_17
// %bb.19:                              // %for.inc66
                                        //   in Loop: Header=BB131_11 Depth=4
	ldur	w8, [x29, #-60]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-60]
	b	.LBB131_11
.LBB131_20:                             // %for.end71
                                        //   in Loop: Header=BB131_6 Depth=2
	ldr	x8, [x8, #488]
	ldr	x0, [x19, #16]
	add	x1, sp, #24                     // =24
	ldr	x8, [x8, #8]
	blr	x8
	cbz	w0, .LBB131_23
// %bb.21:                              // %for.inc77
                                        //   in Loop: Header=BB131_6 Depth=2
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	b	.LBB131_6
.LBB131_22:                             // %for.end79
                                        //   in Loop: Header=BB131_4 Depth=1
	ldr	x8, [x19]
	str	wzr, [x8, #20]
	ldur	w8, [x29, #-64]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-64]
	b	.LBB131_4
.LBB131_23:                             // %if.then73
	ldur	w8, [x29, #-64]
	ldr	x9, [x19]
	mov	w10, #1
	str	w8, [x9, #24]
	ldur	w8, [x29, #-36]
	ldr	x9, [x19]
	str	w8, [x9, #20]
	stur	wzr, [x29, #-4]
	str	w10, [sp, #4]
.LBB131_24:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #256]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #240]            // 16-byte Folded Reload
	ldp	x28, x23, [sp, #224]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #208]            // 16-byte Folded Reload
	add	sp, sp, #272                    // =272
	ret
.LBB131_25:                             // %for.end83
	ldr	w9, [x8, #16]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #16]
	ldr	x0, [x19, #16]
	bl	start_iMCU_row.49
	mov	w8, #1
	stur	w8, [x29, #-4]
	str	w8, [sp, #4]
	b	.LBB131_24
.Lfunc_end131:
	.size	compress_output.48, .Lfunc_end131-compress_output.48
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_iMCU_row.49
	.type	start_iMCU_row.49,@function
start_iMCU_row.49:                      // @start_iMCU_row.49
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #448]
	stp	x8, x0, [sp, #-16]!
	ldr	w9, [x0, #316]
	cmp	w9, #1                          // =1
	b.le	.LBB132_2
// %bb.1:
	mov	w9, #1
	b	.LBB132_6
.LBB132_2:                              // %if.else
	ldr	x9, [sp, #8]
	ldr	w11, [x8, #16]
	ldr	w10, [x9, #312]
	ldr	x8, [x9, #320]
	sub	w9, w10, #1                     // =1
	cmp	w11, w9
	b.hs	.LBB132_4
// %bb.3:                               // %if.then3
	ldr	w9, [x8, #12]
	b	.LBB132_5
.LBB132_4:                              // %if.else5
	ldr	w9, [x8, #72]
.LBB132_5:                              // %if.end9
	ldr	x8, [sp]
.LBB132_6:                              // %if.end9
	str	w9, [x8, #28]
	ldr	x8, [sp]
	str	wzr, [x8, #20]
	ldr	x8, [sp]
	str	wzr, [x8, #24]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end132:
	.size	start_iMCU_row.49, .Lfunc_end132-start_iMCU_row.49
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_copy_critical_parameters   // -- Begin function jpeg_copy_critical_parameters
	.p2align	2
	.type	jpeg_copy_critical_parameters,@function
jpeg_copy_critical_parameters:          // @jpeg_copy_critical_parameters
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	ldr	w8, [x1, #28]
	cmp	w8, #100                        // =100
	b.eq	.LBB133_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-16]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB133_2:                              // %if.end
	ldp	x9, x8, [x29, #-16]
	ldr	w8, [x8, #40]
	str	w8, [x9, #40]
	ldp	x9, x8, [x29, #-16]
	ldr	w8, [x8, #44]
	str	w8, [x9, #44]
	ldp	x9, x8, [x29, #-16]
	ldr	w8, [x8, #48]
	str	w8, [x9, #48]
	ldp	x9, x8, [x29, #-16]
	ldr	w8, [x8, #52]
	str	w8, [x9, #52]
	ldur	x0, [x29, #-16]
	bl	jpeg_set_defaults
	ldp	x0, x8, [x29, #-16]
	ldr	w1, [x8, #52]
	bl	jpeg_set_colorspace
	ldp	x9, x8, [x29, #-16]
	ldr	w8, [x8, #288]
	str	w8, [x9, #64]
	ldp	x9, x8, [x29, #-16]
	ldr	w8, [x8, #384]
	str	w8, [x9, #260]
	str	wzr, [sp, #20]
	b	.LBB133_5
.LBB133_3:                              // %if.end18
                                        //   in Loop: Header=BB133_5 Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #20]
	ldur	x10, [x29, #-24]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	ldr	x9, [x10]
	ldp	q1, q0, [x8, #96]
	ldp	q2, q3, [x8, #64]
	stp	q1, q0, [x9, #96]
	stp	q2, q3, [x9, #64]
	ldp	q1, q0, [x8, #32]
	ldp	q3, q2, [x8]
	stp	q1, q0, [x9, #32]
	stp	q3, q2, [x9]
	ldur	x8, [x29, #-24]
	ldr	x8, [x8]
	str	wzr, [x8, #128]
.LBB133_4:                              // %for.inc
                                        //   in Loop: Header=BB133_5 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB133_5:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [sp, #20]
	ldur	x8, [x29, #-8]
	cmp	w9, #3                          // =3
	b.gt	.LBB133_9
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB133_5 Depth=1
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	cbz	x8, .LBB133_4
// %bb.7:                               // %if.then12
                                        //   in Loop: Header=BB133_5 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	add	x9, x8, #88                     // =88
	stur	x9, [x29, #-24]
	ldr	x8, [x8, #88]
	cbnz	x8, .LBB133_3
// %bb.8:                               // %if.then17
                                        //   in Loop: Header=BB133_5 Depth=1
	ldur	x0, [x29, #-16]
	bl	jpeg_alloc_quant_table
	ldur	x8, [x29, #-24]
	str	x0, [x8]
	b	.LBB133_3
.LBB133_9:                              // %for.end
	ldr	w8, [x8, #48]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #68]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #68]
	cmp	w8, #1                          // =1
	b.lt	.LBB133_11
// %bb.10:                              // %lor.lhs.false
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #68]
	cmp	w8, #11                         // =11
	b.lt	.LBB133_12
.LBB133_11:                             // %if.then31
	ldur	x8, [x29, #-16]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #68]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-16]
	mov	w9, #10
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB133_12:                             // %if.end45
	ldp	x9, x8, [x29, #-16]
	str	wzr, [sp, #16]
	mov	w19, #51
	mov	w20, #43
	ldr	x8, [x8, #296]
	stur	x8, [x29, #-32]
	ldr	x8, [x9, #80]
	str	x8, [sp, #40]
	b	.LBB133_14
.LBB133_13:                             // %for.inc105
                                        //   in Loop: Header=BB133_14 Depth=1
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-32]
	ldr	x10, [sp, #40]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	add	x10, x10, #96                   // =96
	str	w8, [sp, #16]
	stur	x9, [x29, #-32]
	str	x10, [sp, #40]
.LBB133_14:                             // %for.cond47
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB133_22 Depth 2
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #68]
	cmp	w9, w8
	b.ge	.LBB133_25
// %bb.15:                              // %for.body50
                                        //   in Loop: Header=BB133_14 Depth=1
	ldur	x8, [x29, #-32]
	ldr	x9, [sp, #40]
	ldr	w8, [x8]
	str	w8, [x9]
	ldur	x8, [x29, #-32]
	ldr	x9, [sp, #40]
	ldr	w8, [x8, #8]
	str	w8, [x9, #8]
	ldur	x8, [x29, #-32]
	ldr	x9, [sp, #40]
	ldr	w8, [x8, #12]
	str	w8, [x9, #12]
	ldur	x8, [x29, #-32]
	ldr	x9, [sp, #40]
	ldr	w8, [x8, #16]
	str	w8, [x9, #16]
	ldr	x8, [sp, #40]
	ldr	w8, [x8, #16]
	str	w8, [sp, #20]
	tbnz	w8, #31, .LBB133_18
// %bb.16:                              // %for.body50
                                        //   in Loop: Header=BB133_14 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB133_18
// %bb.17:                              // %lor.lhs.false59
                                        //   in Loop: Header=BB133_14 Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	cbnz	x8, .LBB133_19
.LBB133_18:                             // %if.then64
                                        //   in Loop: Header=BB133_14 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB133_19:                             // %if.end73
                                        //   in Loop: Header=BB133_14 Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldur	x9, [x29, #-32]
	ldr	x10, [x8, #192]
	ldr	x8, [x9, #80]
	stp	x10, x8, [sp, #24]
	cbz	x8, .LBB133_13
// %bb.20:                              // %if.then78
                                        //   in Loop: Header=BB133_14 Depth=1
	str	wzr, [sp, #12]
	b	.LBB133_22
.LBB133_21:                             // %for.inc101
                                        //   in Loop: Header=BB133_22 Depth=2
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB133_22:                             // %for.cond79
                                        //   Parent Loop BB133_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #12]
	cmp	w8, #63                         // =63
	b.gt	.LBB133_13
// %bb.23:                              // %for.body81
                                        //   in Loop: Header=BB133_22 Depth=2
	ldrsw	x8, [sp, #12]
	ldp	x10, x9, [sp, #24]
	lsl	x8, x8, #1
	ldrh	w9, [x9, x8]
	ldrh	w8, [x10, x8]
	cmp	w9, w8
	b.eq	.LBB133_21
// %bb.24:                              // %if.then91
                                        //   in Loop: Header=BB133_22 Depth=2
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB133_21
.LBB133_25:                             // %for.end108
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end133:
	.size	jpeg_copy_critical_parameters, .Lfunc_end133-jpeg_copy_critical_parameters
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_CreateDecompress           // -- Begin function jpeg_CreateDecompress
	.p2align	2
	.type	jpeg_CreateDecompress,@function
jpeg_CreateDecompress:                  // @jpeg_CreateDecompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, w1
	cmp	w8, #61                         // =61
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #8]
	str	xzr, [x0, #8]
	b.eq	.LBB134_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #10
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #61
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB134_2:                              // %if.end
	ldr	x8, [sp, #8]
	cmp	x8, #616                        // =616
	b.eq	.LBB134_4
// %bb.3:                               // %if.then9
	ldur	x8, [x29, #-8]
	mov	w9, #19
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #616
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB134_4:                              // %if.end22
	ldur	x0, [x29, #-8]
	mov	w2, #616
	mov	w1, wzr
	ldr	x8, [x0]
	str	x8, [sp]
	bl	memset
	ldr	x8, [sp]
	ldur	x9, [x29, #-8]
	str	x8, [x9]
	ldur	x8, [x29, #-8]
	mov	w9, #1
	str	w9, [x8, #24]
	ldur	x0, [x29, #-8]
	bl	jinit_memory_mgr
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #16]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #32]
	str	wzr, [sp]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB134_6
.LBB134_5:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #192]
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB134_5
.LBB134_6:                              // %for.end
	str	wzr, [sp]
	mov	w8, wzr
	ldur	x0, [x29, #-8]
	cmp	w8, #3                          // =3
	b.gt	.LBB134_8
.LBB134_7:                              // %for.body32
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x8, [sp]
	add	x8, x0, x8, lsl #3
	str	xzr, [x8, #224]
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #256]
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	mov	w8, w8
	ldur	x0, [x29, #-8]
	cmp	w8, #3                          // =3
	b.le	.LBB134_7
.LBB134_8:                              // %for.end39
	bl	jinit_marker_reader
	ldur	x0, [x29, #-8]
	bl	jinit_input_controller
	ldur	x8, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	mov	w9, #200
	str	w9, [x8, #28]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end134:
	.size	jpeg_CreateDecompress, .Lfunc_end134-jpeg_CreateDecompress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_destroy_decompress         // -- Begin function jpeg_destroy_decompress
	.p2align	2
	.type	jpeg_destroy_decompress,@function
jpeg_destroy_decompress:                // @jpeg_destroy_decompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	jpeg_destroy
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end135:
	.size	jpeg_destroy_decompress, .Lfunc_end135-jpeg_destroy_decompress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_abort_decompress           // -- Begin function jpeg_abort_decompress
	.p2align	2
	.type	jpeg_abort_decompress,@function
jpeg_abort_decompress:                  // @jpeg_abort_decompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	jpeg_abort
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end136:
	.size	jpeg_abort_decompress, .Lfunc_end136-jpeg_abort_decompress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_set_marker_processor       // -- Begin function jpeg_set_marker_processor
	.p2align	2
	.type	jpeg_set_marker_processor,@function
jpeg_set_marker_processor:              // @jpeg_set_marker_processor
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	cmp	w1, #254                        // =254
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #8]
	b.ne	.LBB137_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x8, #568]
	str	x9, [x8, #24]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB137_2:                              // %if.else
	ldur	w8, [x29, #-12]
	cmp	w8, #224                        // =224
	b.lt	.LBB137_5
// %bb.3:                               // %if.else
	cmp	w8, #239                        // =239
	b.gt	.LBB137_5
// %bb.4:                               // %if.then3
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-12]
	ldr	x10, [sp, #8]
	ldr	x8, [x8, #568]
	add	x8, x8, x9, lsl #3
	sub	x8, x8, #1760                   // =1760
	str	x10, [x8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB137_5:                              // %if.else5
	ldur	x8, [x29, #-8]
	mov	w9, #67
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end137:
	.size	jpeg_set_marker_processor, .Lfunc_end137-jpeg_set_marker_processor
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_read_header                // -- Begin function jpeg_read_header
	.p2align	2
	.type	jpeg_read_header,@function
jpeg_read_header:                       // @jpeg_read_header
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	ldr	w8, [x0, #28]
	cmp	w8, #200                        // =200
	b.eq	.LBB138_3
// %bb.1:                               // %land.lhs.true
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #28]
	cmp	w8, #201                        // =201
	b.eq	.LBB138_3
// %bb.2:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB138_3:                              // %if.end
	ldr	x0, [sp, #8]
	bl	jpeg_consume_input
	cmp	w0, #2                          // =2
	str	w0, [sp]
	b.eq	.LBB138_6
// %bb.4:                               // %if.end
	cmp	w0, #1                          // =1
	b.ne	.LBB138_10
// %bb.5:                               // %sw.bb
	mov	w8, #1
	b	.LBB138_9
.LBB138_6:                              // %sw.bb6
	ldr	w8, [sp, #4]
	cbz	w8, .LBB138_8
// %bb.7:                               // %if.then7
	ldr	x8, [sp, #8]
	mov	w9, #50
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB138_8:                              // %if.end12
	ldr	x0, [sp, #8]
	bl	jpeg_abort
	mov	w8, #2
.LBB138_9:                              // %sw.epilog
	str	w8, [sp]
.LBB138_10:                             // %sw.epilog
	ldr	w0, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end138:
	.size	jpeg_read_header, .Lfunc_end138-jpeg_read_header
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_consume_input              // -- Begin function jpeg_consume_input
	.p2align	2
	.type	jpeg_consume_input,@function
jpeg_consume_input:                     // @jpeg_consume_input
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	wzr, [sp, #4]
	ldr	w8, [x0, #28]
	sub	w8, w8, #200                    // =200
	cmp	w8, #10                         // =10
	b.hi	.LBB139_8
// %bb.1:                               // %entry
	adrp	x9, .LJTI139_0
	add	x9, x9, :lo12:.LJTI139_0
	adr	x10, .LBB139_2
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB139_2:                              // %sw.bb6
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #560]
	ldr	x8, [x8]
	blr	x8
	str	w0, [sp, #4]
.LBB139_3:                              // %sw.epilog
	ldr	w0, [sp, #4]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB139_4:                              // %sw.bb
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #560]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x8, [sp, #8]
	mov	w9, #201
	str	w9, [x8, #28]
.LBB139_5:                              // %sw.bb2
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #560]
	ldr	x8, [x8]
	blr	x8
	cmp	w0, #1                          // =1
	str	w0, [sp, #4]
	b.ne	.LBB139_3
// %bb.6:                               // %if.then
	ldr	x0, [sp, #8]
	bl	default_decompress_parms
	ldr	x8, [sp, #8]
	mov	w9, #202
	str	w9, [x8, #28]
	ldr	w0, [sp, #4]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB139_7:                              // %sw.bb5
	mov	w8, #1
	str	w8, [sp, #4]
	mov	w0, w8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB139_8:                              // %sw.default
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w0, [sp, #4]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end139:
	.size	jpeg_consume_input, .Lfunc_end139-jpeg_consume_input
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI139_0:
	.byte	(.LBB139_4-.LBB139_2)>>2
	.byte	(.LBB139_5-.LBB139_2)>>2
	.byte	(.LBB139_7-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
	.byte	(.LBB139_8-.LBB139_2)>>2
	.byte	(.LBB139_2-.LBB139_2)>>2
                                        // -- End function
	.text
	.p2align	2                               // -- Begin function default_decompress_parms
	.type	default_decompress_parms,@function
default_decompress_parms:               // @default_decompress_parms
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #48]
	cmp	w8, #4                          // =4
	b.eq	.LBB140_4
// %bb.1:                               // %entry
	cmp	w8, #3                          // =3
	b.eq	.LBB140_8
// %bb.2:                               // %entry
	cmp	w8, #1                          // =1
	b.ne	.LBB140_13
// %bb.3:                               // %sw.bb
	ldur	x8, [x29, #-8]
	mov	w9, #1
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	b	.LBB140_30
.LBB140_4:                              // %sw.bb57
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #376]
	cbz	w9, .LBB140_14
// %bb.5:                               // %if.then60
	ldrb	w8, [x8, #380]
	cmp	w8, #2                          // =2
	b.eq	.LBB140_16
// %bb.6:                               // %if.then60
	cbnz	w8, .LBB140_15
// %bb.7:                               // %sw.bb63
	ldur	x8, [x29, #-8]
	mov	w9, #4
	b	.LBB140_17
.LBB140_8:                              // %sw.bb1
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #364]
	cbnz	w9, .LBB140_28
// %bb.9:                               // %if.else
	ldr	w8, [x8, #376]
	cbz	w8, .LBB140_18
// %bb.10:                              // %if.then4
	ldur	x8, [x29, #-8]
	ldrb	w8, [x8, #380]
	cmp	w8, #1                          // =1
	b.eq	.LBB140_27
// %bb.11:                              // %if.then4
	cbz	w8, .LBB140_24
// %bb.12:                              // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #110
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldrb	w9, [x8, #380]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	b	.LBB140_26
.LBB140_13:                             // %sw.default84
	ldur	x8, [x29, #-8]
	mov	w9, wzr
	str	wzr, [x8, #52]
	ldur	x8, [x29, #-8]
	b	.LBB140_30
.LBB140_14:
	mov	w9, #4
	b	.LBB140_17
.LBB140_15:                             // %sw.default67
	ldur	x8, [x29, #-8]
	mov	w9, #110
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldrb	w9, [x8, #380]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB140_16:                             // %if.end82
	ldur	x8, [x29, #-8]
	mov	w9, #5
.LBB140_17:                             // %if.end82
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #4
	b	.LBB140_30
.LBB140_18:                             // %if.else14
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #296]
	ldr	w10, [x9]
	stur	w10, [x29, #-12]
	ldr	x9, [x8, #296]
	ldr	x8, [x8, #296]
	cmp	w10, #1                         // =1
	ldr	w9, [x9, #96]
	ldr	w8, [x8, #192]
	stp	w8, w9, [sp, #12]
	b.ne	.LBB140_21
// %bb.19:                              // %if.else14
	cmp	w9, #2                          // =2
	b.ne	.LBB140_21
// %bb.20:                              // %if.else14
	cmp	w8, #3                          // =3
	b.eq	.LBB140_27
.LBB140_21:                             // %if.else30
	ldur	w8, [x29, #-12]
	cmp	w8, #82                         // =82
	b.ne	.LBB140_25
// %bb.22:                              // %if.else30
	ldr	w8, [sp, #16]
	cmp	w8, #71                         // =71
	b.ne	.LBB140_25
// %bb.23:                              // %if.else30
	ldr	w8, [sp, #12]
	cmp	w8, #66                         // =66
	b.ne	.LBB140_25
.LBB140_24:                             // %sw.bb5
	ldur	x8, [x29, #-8]
	mov	w9, #2
	b	.LBB140_29
.LBB140_25:                             // %do.body
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	mov	w1, #1
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	str	x10, [sp]
	str	w9, [x8, #44]
	ldr	w8, [sp, #16]
	mov	x9, x10
	str	w8, [x9, #4]
	ldr	w8, [sp, #12]
	mov	x9, x10
	str	w8, [x9, #8]
	ldur	x8, [x29, #-8]
	mov	w9, #107
	ldr	x8, [x8]
	str	w9, [x8, #40]
.LBB140_26:                             // %if.end53
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB140_27:                             // %if.end53
	ldur	x8, [x29, #-8]
.LBB140_28:                             // %if.end53
	mov	w9, #3
.LBB140_29:                             // %if.end53
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #2
.LBB140_30:                             // %sw.epilog87
	str	w9, [x8, #56]
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	x10, #4607182418800017408
	str	w9, [x8, #60]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #64]
	ldur	x8, [x29, #-8]
	str	x10, [x8, #72]
	ldur	x8, [x29, #-8]
	mov	w10, #2
	str	wzr, [x8, #80]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #84]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #88]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #92]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #96]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #100]
	ldur	x8, [x29, #-8]
	str	w10, [x8, #104]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #108]
	ldur	x8, [x29, #-8]
	mov	w9, #256
	str	w9, [x8, #112]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #152]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #116]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #120]
	ldur	x8, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	wzr, [x8, #124]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end140:
	.size	default_decompress_parms, .Lfunc_end140-default_decompress_parms
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_input_complete             // -- Begin function jpeg_input_complete
	.p2align	2
	.type	jpeg_input_complete,@function
jpeg_input_complete:                    // @jpeg_input_complete
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	w8, [x0, #28]
	cmp	w8, #200                        // =200
	b.lt	.LBB141_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #28]
	cmp	w8, #211                        // =211
	b.lt	.LBB141_3
.LBB141_2:                              // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB141_3:                              // %if.end
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	x8, [x8, #560]
	ldr	w0, [x8, #36]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end141:
	.size	jpeg_input_complete, .Lfunc_end141-jpeg_input_complete
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_has_multiple_scans         // -- Begin function jpeg_has_multiple_scans
	.p2align	2
	.type	jpeg_has_multiple_scans,@function
jpeg_has_multiple_scans:                // @jpeg_has_multiple_scans
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	w8, [x0, #28]
	cmp	w8, #202                        // =202
	b.lt	.LBB142_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #28]
	cmp	w8, #211                        // =211
	b.lt	.LBB142_3
.LBB142_2:                              // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB142_3:                              // %if.end
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	x8, [x8, #560]
	ldr	w0, [x8, #32]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end142:
	.size	jpeg_has_multiple_scans, .Lfunc_end142-jpeg_has_multiple_scans
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_finish_decompress          // -- Begin function jpeg_finish_decompress
	.p2align	2
	.type	jpeg_finish_decompress,@function
jpeg_finish_decompress:                 // @jpeg_finish_decompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp]
	ldr	w8, [x0, #28]
	cmp	w8, #205                        // =205
	b.eq	.LBB143_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [sp]
	ldr	w8, [x8, #28]
	cmp	w8, #206                        // =206
	b.ne	.LBB143_3
.LBB143_2:                              // %land.lhs.true
	ldr	x8, [sp]
	ldr	w8, [x8, #80]
	cbz	w8, .LBB143_6
.LBB143_3:                              // %if.else
	ldr	x8, [sp]
	ldr	w9, [x8, #28]
	cmp	w9, #207                        // =207
	b.eq	.LBB143_9
// %bb.4:                               // %if.else11
	ldr	w8, [x8, #28]
	cmp	w8, #210                        // =210
	b.eq	.LBB143_10
// %bb.5:                               // %if.then14
	ldr	x8, [sp]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB143_10
.LBB143_6:                              // %if.then
	ldr	x8, [sp]
	ldr	w9, [x8, #160]
	ldr	w8, [x8, #132]
	cmp	w9, w8
	b.hs	.LBB143_8
// %bb.7:                               // %if.then4
	ldr	x8, [sp]
	mov	w9, #66
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB143_8:                              // %if.end
	ldr	x0, [sp]
	ldr	x8, [x0, #528]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp]
.LBB143_9:                              // %if.then9
	mov	w9, #210
	str	w9, [x8, #28]
.LBB143_10:                             // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp]
	ldr	x9, [x8, #560]
	ldr	w9, [x9, #36]
	cbnz	w9, .LBB143_13
// %bb.11:                              // %while.body
                                        //   in Loop: Header=BB143_10 Depth=1
	ldr	x8, [x8, #560]
	ldr	x0, [sp]
	ldr	x8, [x8]
	blr	x8
	cbnz	w0, .LBB143_10
// %bb.12:                              // %if.then27
	stur	wzr, [x29, #-4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB143_13:                             // %while.end
	ldr	x8, [x8, #32]
	ldr	x0, [sp]
	ldr	x8, [x8, #48]
	blr	x8
	ldr	x0, [sp]
	bl	jpeg_abort
	mov	w8, #1
	stur	w8, [x29, #-4]
	mov	w0, w8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end143:
	.size	jpeg_finish_decompress, .Lfunc_end143-jpeg_finish_decompress
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_start_decompress           // -- Begin function jpeg_start_decompress
	.p2align	2
	.type	jpeg_start_decompress,@function
jpeg_start_decompress:                  // @jpeg_start_decompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [sp, #16]
	ldr	w8, [x0, #28]
	cmp	w8, #202                        // =202
	b.ne	.LBB144_4
// %bb.1:                               // %if.then
	ldr	x0, [sp, #16]
	bl	jinit_master_decompress
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #80]
	cbz	w9, .LBB144_3
// %bb.2:                               // %if.then1
	mov	w9, #207
	mov	w10, #1
	str	w9, [x8, #28]
	stur	w10, [x29, #-4]
	b	.LBB144_25
.LBB144_3:                              // %if.end
	mov	w9, #203
	str	w9, [x8, #28]
.LBB144_4:                              // %if.end4
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #28]
	cmp	w9, #203                        // =203
	b.ne	.LBB144_20
// %bb.5:                               // %if.then7
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #32]
	cbz	w8, .LBB144_23
// %bb.6:                               // %for.cond.preheader
	mov	w19, #1
	mov	w20, #2
	b	.LBB144_9
.LBB144_7:                              // %if.then18
                                        //   in Loop: Header=BB144_9 Depth=1
	stur	wzr, [x29, #-4]
	str	w19, [sp, #8]
.LBB144_8:                              // %cleanup
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	w8, [sp, #8]
	cbnz	w8, .LBB144_22
.LBB144_9:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB144_11
// %bb.10:                              // %if.then11
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	x0, [sp, #16]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB144_11:                             // %if.end14
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	x0, [sp, #16]
	ldr	x8, [x0, #560]
	ldr	x8, [x8]
	blr	x8
	str	w0, [sp, #12]
	cbz	w0, .LBB144_7
// %bb.12:                              // %if.end19
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #2                          // =2
	b.ne	.LBB144_14
// %bb.13:                              // %if.then21
                                        //   in Loop: Header=BB144_9 Depth=1
	str	w20, [sp, #8]
	b	.LBB144_8
.LBB144_14:                             // %if.end22
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB144_19
// %bb.15:                              // %land.lhs.true
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #3                          // =3
	b.eq	.LBB144_17
// %bb.16:                              // %land.lhs.true
                                        //   in Loop: Header=BB144_9 Depth=1
	cmp	w8, #1                          // =1
	b.ne	.LBB144_19
.LBB144_17:                             // %if.then27
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	ldr	x9, [x8, #8]
	add	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	ldr	x8, [x8, #16]
	cmp	x9, x8
	b.lt	.LBB144_19
// %bb.18:                              // %if.then31
                                        //   in Loop: Header=BB144_9 Depth=1
	ldr	x8, [sp, #16]
	ldr	x9, [x8, #16]
	ldr	w8, [x8, #400]
	ldr	x10, [x9, #16]
	add	x8, x10, x8
	str	x8, [x9, #16]
.LBB144_19:                             // %if.end35
                                        //   in Loop: Header=BB144_9 Depth=1
	str	wzr, [sp, #8]
	b	.LBB144_8
.LBB144_20:                             // %if.else
	ldr	w8, [x8, #28]
	cmp	w8, #204                        // =204
	b.eq	.LBB144_24
// %bb.21:                              // %if.then40
	ldr	x8, [sp, #16]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB144_24
.LBB144_22:                             // %cleanup
	cmp	w8, #1                          // =1
	b.eq	.LBB144_25
.LBB144_23:                             // %if.end36
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #164]
	str	w9, [x8, #172]
.LBB144_24:                             // %if.end45
	ldr	x0, [sp, #16]
	bl	output_pass_setup
	stur	w0, [x29, #-4]
.LBB144_25:                             // %return
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end144:
	.size	jpeg_start_decompress, .Lfunc_end144-jpeg_start_decompress
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function output_pass_setup
	.type	output_pass_setup,@function
output_pass_setup:                      // @output_pass_setup
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [sp, #8]
	ldr	w8, [x0, #28]
	cmp	w8, #204                        // =204
	b.eq	.LBB145_2
// %bb.1:                               // %if.then
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #528]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	mov	w9, #204
	str	wzr, [x8, #160]
	ldr	x8, [sp, #8]
	str	w9, [x8, #28]
.LBB145_2:                              // %while.cond.preheader
	mov	w19, #1
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #528]
	ldr	w8, [x8, #16]
	cbnz	w8, .LBB145_4
	b	.LBB145_10
.LBB145_3:                              // %if.end23
                                        //   in Loop: Header=BB145_4 Depth=1
	str	wzr, [sp, #4]
	mov	w8, wzr
	cbnz	w8, .LBB145_11
.LBB145_4:                              // %while.cond3
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #160]
	ldr	w8, [x8, #132]
	cmp	w9, w8
	b.hs	.LBB145_9
// %bb.5:                               // %while.body6
                                        //   in Loop: Header=BB145_4 Depth=1
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB145_7
// %bb.6:                               // %if.then8
                                        //   in Loop: Header=BB145_4 Depth=1
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #160]
	ldr	x8, [x8, #16]
	str	x9, [x8, #8]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #132]
	ldr	x8, [x8, #16]
	str	x9, [x8, #16]
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB145_7:                              // %if.end16
                                        //   in Loop: Header=BB145_4 Depth=1
	ldr	x0, [sp, #8]
	mov	x1, xzr
	mov	w3, wzr
	mov	x2, x0
	ldr	w8, [x2, #160]!
	str	w8, [x29, #24]
	ldr	x8, [x0, #536]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w9, [x29, #24]
	ldr	w8, [x8, #160]
	cmp	w8, w9
	b.ne	.LBB145_3
// %bb.8:                               // %if.then22
                                        //   in Loop: Header=BB145_4 Depth=1
	str	wzr, [x29, #28]
	str	w19, [sp, #4]
	mov	w8, w19
	cbz	w8, .LBB145_4
	b	.LBB145_11
.LBB145_9:                              // %while.end
                                        //   in Loop: Header=BB145_4 Depth=1
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #528]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #528]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	str	wzr, [x8, #160]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #528]
	ldr	w8, [x8, #16]
	cbnz	w8, .LBB145_4
.LBB145_10:                             // %while.end28
	ldr	x8, [sp, #8]
	mov	w10, #205
	mov	w11, #1
	ldr	w9, [x8, #84]
	cmp	w9, #0                          // =0
	cinc	w9, w10, ne
	str	w9, [x8, #28]
	str	w11, [x29, #28]
.LBB145_11:                             // %return
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end145:
	.size	output_pass_setup, .Lfunc_end145-output_pass_setup
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_read_scanlines             // -- Begin function jpeg_read_scanlines
	.p2align	2
	.type	jpeg_read_scanlines,@function
jpeg_read_scanlines:                    // @jpeg_read_scanlines
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x1, [sp, #24]
	str	w2, [sp, #20]
	ldr	w8, [x0, #28]
	cmp	w8, #205                        // =205
	b.eq	.LBB146_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-16]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB146_2:                              // %if.end
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #160]
	ldr	w10, [x8, #132]
	cmp	w9, w10
	b.lo	.LBB146_4
// %bb.3:                               // %if.then5
	ldr	x8, [x8]
	mov	w9, #119
	mov	w1, #-1
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
	mov	w0, wzr
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB146_4:                              // %if.end9
	ldr	x8, [x8, #16]
	cbz	x8, .LBB146_6
// %bb.5:                               // %if.then11
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #160]
	ldr	x8, [x8, #16]
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #132]
	ldr	x8, [x8, #16]
	str	x9, [x8, #16]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB146_6:                              // %if.end19
	ldur	x0, [x29, #-16]
	str	wzr, [sp, #16]
	ldr	x1, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	x8, [x0, #536]
	add	x2, sp, #16                     // =16
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #160]
	add	w9, w10, w9
	str	w9, [x8, #160]
	ldr	w8, [sp, #16]
	mov	w9, #1
	str	w9, [sp, #12]
	stur	w8, [x29, #-4]
	mov	w0, w8
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end146:
	.size	jpeg_read_scanlines, .Lfunc_end146-jpeg_read_scanlines
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_read_raw_data              // -- Begin function jpeg_read_raw_data
	.p2align	2
	.type	jpeg_read_raw_data,@function
jpeg_read_raw_data:                     // @jpeg_read_raw_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x1, [sp, #24]
	str	w2, [sp, #20]
	ldr	w8, [x0, #28]
	cmp	w8, #206                        // =206
	b.eq	.LBB147_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-16]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB147_2:                              // %if.end
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #160]
	ldr	w10, [x8, #132]
	cmp	w9, w10
	b.lo	.LBB147_4
// %bb.3:                               // %if.then5
	ldr	x8, [x8]
	mov	w9, #119
	mov	w1, #-1
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	b	.LBB147_10
.LBB147_4:                              // %if.end9
	ldr	x8, [x8, #16]
	cbz	x8, .LBB147_6
// %bb.5:                               // %if.then11
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #160]
	ldr	x8, [x8, #16]
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #132]
	ldr	x8, [x8, #16]
	str	x9, [x8, #16]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB147_6:                              // %if.end19
	ldur	x8, [x29, #-16]
	ldr	w10, [sp, #20]
	ldr	w9, [x8, #392]
	ldr	w8, [x8, #396]
	mul	w8, w9, w8
	cmp	w10, w8
	str	w8, [sp, #16]
	b.hs	.LBB147_8
// %bb.7:                               // %if.then22
	ldur	x8, [x29, #-16]
	mov	w9, #21
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB147_8:                              // %if.end27
	ldur	x0, [x29, #-16]
	ldr	x1, [sp, #24]
	ldr	x8, [x0, #544]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB147_10
// %bb.9:                               // %if.end29
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #160]
	add	w9, w10, w9
	str	w9, [x8, #160]
	ldr	w8, [sp, #16]
	mov	w9, #1
	str	w9, [sp, #12]
	stur	w8, [x29, #-4]
	mov	w0, w8
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB147_10:                             // %if.then28
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
	mov	w0, wzr
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end147:
	.size	jpeg_read_raw_data, .Lfunc_end147-jpeg_read_raw_data
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_start_output               // -- Begin function jpeg_start_output
	.p2align	2
	.type	jpeg_start_output,@function
jpeg_start_output:                      // @jpeg_start_output
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	ldr	w8, [x0, #28]
	cmp	w8, #207                        // =207
	b.eq	.LBB148_3
// %bb.1:                               // %land.lhs.true
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #28]
	cmp	w8, #204                        // =204
	b.eq	.LBB148_3
// %bb.2:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB148_3:                              // %if.end
	ldr	w8, [sp, #4]
	cmp	w8, #0                          // =0
	b.gt	.LBB148_5
// %bb.4:                               // %if.then7
	mov	w8, #1
	str	w8, [sp, #4]
.LBB148_5:                              // %if.end8
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #36]
	cbz	w8, .LBB148_8
// %bb.6:                               // %land.lhs.true9
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #164]
	cmp	w9, w8
	b.le	.LBB148_8
// %bb.7:                               // %if.then11
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #164]
	str	w8, [sp, #4]
.LBB148_8:                              // %if.end13
	ldr	w8, [sp, #4]
	ldr	x9, [sp, #8]
	str	w8, [x9, #172]
	ldr	x0, [sp, #8]
	bl	output_pass_setup
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end148:
	.size	jpeg_start_output, .Lfunc_end148-jpeg_start_output
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_finish_output              // -- Begin function jpeg_finish_output
	.p2align	2
	.type	jpeg_finish_output,@function
jpeg_finish_output:                     // @jpeg_finish_output
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp]
	ldr	w8, [x0, #28]
	cmp	w8, #205                        // =205
	b.eq	.LBB149_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [sp]
	ldr	w8, [x8, #28]
	cmp	w8, #206                        // =206
	b.ne	.LBB149_4
.LBB149_2:                              // %land.lhs.true
	ldr	x8, [sp]
	ldr	w8, [x8, #80]
	cbz	w8, .LBB149_4
// %bb.3:                               // %if.then
	ldr	x0, [sp]
	ldr	x8, [x0, #528]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp]
	mov	w9, #208
	str	w9, [x8, #28]
	b	.LBB149_6
.LBB149_4:                              // %if.else
	ldr	x8, [sp]
	ldr	w8, [x8, #28]
	cmp	w8, #208                        // =208
	b.eq	.LBB149_6
// %bb.5:                               // %if.then6
	ldr	x8, [sp]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB149_6:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp]
	ldr	w9, [x8, #164]
	ldr	w8, [x8, #172]
	cmp	w9, w8
	b.gt	.LBB149_8
// %bb.7:                               // %land.rhs
                                        //   in Loop: Header=BB149_6 Depth=1
	ldr	x8, [sp]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #36]
	cmp	w8, #0                          // =0
	cset	w8, eq
	ldr	x9, [sp]
	cbnz	w8, .LBB149_9
	b	.LBB149_11
.LBB149_8:                              //   in Loop: Header=BB149_6 Depth=1
	mov	w8, wzr
	ldr	x9, [sp]
	cbz	w8, .LBB149_11
.LBB149_9:                              // %while.body
                                        //   in Loop: Header=BB149_6 Depth=1
	ldr	x8, [x9, #560]
	ldr	x0, [sp]
	ldr	x8, [x8]
	blr	x8
	cbnz	w0, .LBB149_6
// %bb.10:                              // %if.then16
	stur	wzr, [x29, #-4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB149_11:                             // %while.end
	mov	w8, #207
	mov	w10, #1
	str	w8, [x9, #28]
	stur	w10, [x29, #-4]
	mov	w0, w10
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end149:
	.size	jpeg_finish_output, .Lfunc_end149-jpeg_finish_output
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_stdio_dest                 // -- Begin function jpeg_stdio_dest
	.p2align	2
	.type	jpeg_stdio_dest,@function
jpeg_stdio_dest:                        // @jpeg_stdio_dest
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldr	x8, [x0, #32]
	cbnz	x8, .LBB150_2
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	mov	w2, #56
	mov	w1, wzr
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	str	x0, [x8, #32]
.LBB150_2:                              // %if.end
	ldur	x8, [x29, #-8]
	adrp	x9, init_destination
	add	x10, x9, :lo12:init_destination
	adrp	x9, empty_output_buffer
	ldr	x8, [x8, #32]
	add	x9, x9, :lo12:empty_output_buffer
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	x8, [sp, #8]
	stp	x10, x9, [x8, #16]
	adrp	x9, term_destination
	add	x9, x9, :lo12:term_destination
	str	x9, [x8, #32]
	ldp	x9, x8, [sp, #8]
	str	x8, [x9, #40]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end150:
	.size	jpeg_stdio_dest, .Lfunc_end150-jpeg_stdio_dest
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function init_destination
	.type	init_destination,@function
init_destination:                       // @init_destination
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #32]
	mov	w1, #1
	mov	w2, #4096
	mov	w19, #4096
	str	x8, [sp, #8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x0, [x8, #48]
	ldr	x8, [sp, #8]
	ldr	x9, [x8, #48]
	str	x9, [x8]
	ldr	x8, [sp, #8]
	str	x19, [x8, #8]
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end151:
	.size	init_destination, .Lfunc_end151-init_destination
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function empty_output_buffer
	.type	empty_output_buffer,@function
empty_output_buffer:                    // @empty_output_buffer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #32]
	mov	w1, #1
	mov	w2, #4096
	stp	x8, x0, [sp]
	ldp	x3, x0, [x8, #40]
	bl	fwrite
	cmp	x0, #1, lsl #12                 // =4096
	b.eq	.LBB152_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #36
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB152_2:                              // %if.end
	ldr	x8, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	mov	w0, #1
	ldr	x9, [x8, #48]
	str	x9, [x8]
	ldr	x8, [sp]
	mov	w9, #4096
	str	x9, [x8, #8]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end152:
	.size	empty_output_buffer, .Lfunc_end152-empty_output_buffer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function term_destination
	.type	term_destination,@function
term_destination:                       // @term_destination
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	mov	w9, #4096
	str	x8, [sp, #16]
	ldr	x8, [x8, #8]
	subs	x8, x9, x8
	str	x8, [sp, #8]
	b.eq	.LBB153_3
// %bb.1:                               // %if.then
	ldp	x2, x8, [sp, #8]
	mov	w1, #1
	ldp	x3, x0, [x8, #40]
	bl	fwrite
	ldr	x8, [sp, #8]
	cmp	x0, x8
	b.eq	.LBB153_3
// %bb.2:                               // %if.then3
	ldur	x8, [x29, #-8]
	mov	w9, #36
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB153_3:                              // %if.end5
	ldr	x8, [sp, #16]
	ldr	x0, [x8, #40]
	bl	fflush
	ldr	x8, [sp, #16]
	ldr	x0, [x8, #40]
	bl	ferror
	cbz	w0, .LBB153_5
// %bb.4:                               // %if.then10
	ldur	x8, [x29, #-8]
	mov	w9, #36
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB153_5:                              // %if.end15
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end153:
	.size	term_destination, .Lfunc_end153-term_destination
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_stdio_src                  // -- Begin function jpeg_stdio_src
	.p2align	2
	.type	jpeg_stdio_src,@function
jpeg_stdio_src:                         // @jpeg_stdio_src
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldr	x8, [x0, #32]
	cbnz	x8, .LBB154_2
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	mov	w2, #80
	mov	w1, wzr
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	mov	w2, #4096
	mov	w1, wzr
	str	x0, [x8, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	str	x8, [sp, #8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	str	x0, [x8, #64]
.LBB154_2:                              // %if.end
	ldur	x8, [x29, #-8]
	adrp	x9, init_source
	add	x10, x9, :lo12:init_source
	adrp	x9, fill_input_buffer
	ldr	x8, [x8, #32]
	add	x9, x9, :lo12:fill_input_buffer
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	x8, [sp, #8]
	stp	x10, x9, [x8, #16]
	adrp	x9, skip_input_data
	add	x10, x9, :lo12:skip_input_data
	adrp	x9, jpeg_resync_to_restart
	add	x9, x9, :lo12:jpeg_resync_to_restart
	stp	x10, x9, [x8, #32]
	adrp	x9, term_source
	add	x9, x9, :lo12:term_source
	str	x9, [x8, #48]
	ldp	x9, x8, [sp, #8]
	str	x8, [x9, #56]
	ldr	x8, [sp, #8]
	str	xzr, [x8, #8]
	ldr	x8, [sp, #8]
	str	xzr, [x8]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end154:
	.size	jpeg_stdio_src, .Lfunc_end154-jpeg_stdio_src
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function init_source
	.type	init_source,@function
init_source:                            // @init_source
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #32]
	mov	w9, #1
	stp	x8, x0, [sp, #-16]!
	str	w9, [x8, #72]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end155:
	.size	init_source, .Lfunc_end155-init_source
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fill_input_buffer
	.type	fill_input_buffer,@function
fill_input_buffer:                      // @fill_input_buffer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	mov	w1, #1
	mov	w2, #4096
	str	x8, [sp, #16]
	ldp	x3, x0, [x8, #56]
	bl	fread
	str	x0, [sp, #8]
	cbnz	x0, .LBB156_4
// %bb.1:                               // %if.then
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #72]
	cbz	w8, .LBB156_3
// %bb.2:                               // %if.then2
	ldur	x8, [x29, #-8]
	mov	w9, #41
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB156_3:                              // %if.end
	ldur	x8, [x29, #-8]
	mov	w9, #116
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w9, #255
	mov	w10, #2
	ldr	x8, [x8, #64]
	strb	w9, [x8]
	ldr	x8, [sp, #16]
	mov	w9, #217
	ldr	x8, [x8, #64]
	strb	w9, [x8, #1]
	str	x10, [sp, #8]
.LBB156_4:                              // %if.end10
	ldr	x8, [sp, #16]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	mov	w0, #1
	ldr	x9, [x8, #64]
	str	x9, [x8]
	ldp	x8, x9, [sp, #8]
	str	x8, [x9, #8]
	ldr	x8, [sp, #16]
	str	wzr, [x8, #72]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end156:
	.size	fill_input_buffer, .Lfunc_end156-fill_input_buffer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function skip_input_data
	.type	skip_input_data,@function
skip_input_data:                        // @skip_input_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	cmp	x1, #1                          // =1
	stp	x8, x1, [sp, #8]
	b.ge	.LBB157_3
// %bb.1:                               // %if.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB157_2:                              // %while.body
                                        //   in Loop: Header=BB157_3 Depth=1
	ldp	x8, x9, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #8]
	sub	x8, x9, x8
	str	x8, [sp, #16]
	bl	fill_input_buffer
.LBB157_3:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldp	x8, x9, [sp, #8]
	ldr	x8, [x8, #8]
	cmp	x9, x8
	b.gt	.LBB157_2
// %bb.4:                               // %while.end
	ldp	x8, x9, [sp, #8]
	ldr	x10, [x8]
	add	x9, x10, x9
	str	x9, [x8]
	ldp	x8, x9, [sp, #8]
	ldr	x10, [x8, #8]
	sub	x9, x10, x9
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end157:
	.size	skip_input_data, .Lfunc_end157-skip_input_data
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function term_source
	.type	term_source,@function
term_source:                            // @term_source
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end158:
	.size	term_source, .Lfunc_end158-term_source
	.cfi_endproc
                                        // -- End function
	.globl	jinit_d_coef_controller         // -- Begin function jinit_d_coef_controller
	.p2align	2
	.type	jinit_d_coef_controller,@function
jinit_d_coef_controller:                // @jinit_d_coef_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x21, [sp, #48]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #224
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	adrp	x9, start_input_pass
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_input_pass
	str	x0, [x8, #544]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, start_output_pass
	mov	x8, x0
	add	x9, x9, :lo12:start_output_pass
	str	x9, [x8, #16]
	mov	x8, x0
	str	xzr, [x8, #216]
	ldur	w8, [x29, #-4]
	cbz	w8, .LBB159_7
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	str	wzr, [sp, #12]
	ldr	x8, [x8, #296]
	str	x8, [sp]
	b	.LBB159_3
.LBB159_2:                              // %if.end
                                        //   in Loop: Header=BB159_3 Depth=1
	ldr	x19, [x29, #24]
	ldr	x8, [sp]
	ldr	x9, [x19, #8]
	ldr	w0, [x8, #28]
	ldrsw	x1, [x8, #8]
	ldr	x21, [x9, #40]
	bl	jround_up
	ldr	x9, [sp]
	mov	x20, x0
	ldr	w8, [x9, #32]
	ldrsw	x1, [x9, #12]
	mov	x0, x8
	bl	jround_up
	ldr	w5, [sp, #8]
	mov	x4, x0
	mov	w1, #1
	mov	w2, #1
	mov	x0, x19
	mov	w3, w20
                                        // kill: def $w4 killed $w4 killed $x4
	blr	x21
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #136]
	ldr	w8, [sp, #12]
	ldr	x9, [sp]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #12]
	str	x9, [sp]
.LBB159_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB159_6
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB159_3 Depth=1
	ldr	x8, [sp]
	ldr	x9, [x29, #24]
	ldr	w8, [x8, #12]
	str	w8, [sp, #8]
	ldr	w8, [x9, #304]
	cbz	w8, .LBB159_2
// %bb.5:                               // %if.then4
                                        //   in Loop: Header=BB159_3 Depth=1
	ldr	w8, [sp, #8]
	add	w8, w8, w8, lsl #1
	str	w8, [sp, #8]
	b	.LBB159_2
.LBB159_6:                              // %for.end
	ldr	x8, [sp, #16]
	adrp	x9, consume_data
	add	x9, x9, :lo12:consume_data
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	adrp	x9, decompress_data
	add	x9, x9, :lo12:decompress_data
	str	x9, [x8, #24]
	ldr	x8, [sp, #16]
	add	x9, x8, #136                    // =136
	str	x9, [x8, #32]
	b	.LBB159_10
.LBB159_7:                              // %if.else
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #1280
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	str	x0, [sp]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #9                          // =9
	b.gt	.LBB159_9
.LBB159_8:                              // %for.body24
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp]
	ldrsw	x9, [sp, #12]
	ldr	x10, [sp, #16]
	add	x8, x8, x9, lsl #7
	add	x9, x10, x9, lsl #3
	str	x8, [x9, #56]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #9                          // =9
	b.le	.LBB159_8
.LBB159_9:                              // %for.end29
	ldr	x8, [sp, #16]
	adrp	x9, dummy_consume_data
	add	x9, x9, :lo12:dummy_consume_data
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	adrp	x9, decompress_onepass
	add	x9, x9, :lo12:decompress_onepass
	str	x9, [x8, #24]
	ldr	x8, [sp, #16]
	str	xzr, [x8, #32]
.LBB159_10:                             // %if.end36
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x21, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end159:
	.size	jinit_d_coef_controller, .Lfunc_end159-jinit_d_coef_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_input_pass
	.type	start_input_pass,@function
start_input_pass:                       // @start_input_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	wzr, [x0, #168]
	bl	start_iMCU_row.52
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end160:
	.size	start_input_pass, .Lfunc_end160-start_input_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_output_pass
	.type	start_output_pass,@function
start_output_pass:                      // @start_output_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #544]
	stp	x8, x0, [sp]
	ldr	x8, [x8, #32]
	cbz	x8, .LBB161_6
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #96]
	cbz	w8, .LBB161_4
// %bb.2:                               // %land.lhs.true
	ldr	x0, [sp, #8]
	bl	smoothing_ok
	cbz	w0, .LBB161_4
// %bb.3:                               // %if.then3
	ldr	x8, [sp]
	adrp	x9, decompress_smooth_data
	add	x9, x9, :lo12:decompress_smooth_data
	b	.LBB161_5
.LBB161_4:                              // %if.else
	ldr	x8, [sp]
	adrp	x9, decompress_data
	add	x9, x9, :lo12:decompress_data
.LBB161_5:                              // %if.end
	str	x9, [x8, #24]
.LBB161_6:                              // %if.end7
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	wzr, [x8, #176]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end161:
	.size	start_output_pass, .Lfunc_end161-start_output_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function consume_data
	.type	consume_data,@function
consume_data:                           // @consume_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	str	x19, [sp, #112]                 // 8-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldr	x8, [x0, #544]
	add	x19, sp, #24                    // =24
	stur	wzr, [x29, #-24]
	stp	x8, x0, [x29, #-16]
.LBB162_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-24]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB162_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB162_1 Depth=1
	ldp	x9, x0, [x29, #-16]
	ldursw	x8, [x29, #-24]
	mov	w4, #1
	add	x8, x0, x8, lsl #3
	ldr	x8, [x8, #424]
	str	x8, [sp, #8]
	ldrsw	x11, [x8, #4]
	ldr	x10, [x0, #8]
	ldr	w12, [x0, #168]
	ldr	w3, [x8, #12]
	add	x9, x9, x11, lsl #3
	ldr	x10, [x10, #64]
	ldr	x1, [x9, #136]
	mul	w2, w12, w3
	blr	x10
	ldursw	x8, [x29, #-24]
	ldur	w9, [x29, #-24]
	str	x0, [x19, x8, lsl #3]
	add	w8, w9, #1                      // =1
	stur	w8, [x29, #-24]
	b	.LBB162_1
.LBB162_3:                              // %for.end
	ldur	x8, [x29, #-16]
	add	x19, sp, #24                    // =24
	ldr	w8, [x8, #44]
	stur	w8, [x29, #-36]
.LBB162_4:                              // %for.cond7
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB162_6 Depth 2
                                        //       Child Loop BB162_9 Depth 3
                                        //         Child Loop BB162_12 Depth 4
                                        //           Child Loop BB162_14 Depth 5
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB162_21
// %bb.5:                               // %for.body9
                                        //   in Loop: Header=BB162_4 Depth=1
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #40]
.LBB162_6:                              // %for.cond10
                                        //   Parent Loop BB162_4 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB162_9 Depth 3
                                        //         Child Loop BB162_12 Depth 4
                                        //           Child Loop BB162_14 Depth 5
	str	w8, [x29, #24]
	ldur	x8, [x29, #-8]
	ldr	w9, [x29, #24]
	ldr	w8, [x8, #456]
	cmp	w9, w8
	b.hs	.LBB162_18
// %bb.7:                               // %for.body12
                                        //   in Loop: Header=BB162_6 Depth=2
	stur	xzr, [x29, #-24]
	b	.LBB162_9
.LBB162_8:                              // %for.inc41
                                        //   in Loop: Header=BB162_9 Depth=3
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-24]
.LBB162_9:                              // %for.cond13
                                        //   Parent Loop BB162_4 Depth=1
                                        //     Parent Loop BB162_6 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB162_12 Depth 4
                                        //           Child Loop BB162_14 Depth 5
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-24]
	ldr	w10, [x8, #416]
	cmp	w9, w10
	b.ge	.LBB162_16
// %bb.10:                              // %for.body16
                                        //   in Loop: Header=BB162_9 Depth=3
	ldursw	x9, [x29, #-24]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #424]
	ldr	w9, [x29, #24]
	str	x8, [sp, #8]
	ldr	w8, [x8, #52]
	stur	wzr, [x29, #-32]
	mul	w8, w9, w8
	stur	w8, [x29, #-40]
	b	.LBB162_12
.LBB162_11:                             // %for.inc38
                                        //   in Loop: Header=BB162_12 Depth=4
	ldur	w8, [x29, #-32]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-32]
.LBB162_12:                             // %for.cond21
                                        //   Parent Loop BB162_4 Depth=1
                                        //     Parent Loop BB162_6 Depth=2
                                        //       Parent Loop BB162_9 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB162_14 Depth 5
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-32]
	ldr	w10, [x8, #56]
	ldursw	x8, [x29, #-24]
	cmp	w9, w10
	b.ge	.LBB162_8
// %bb.13:                              // %for.body23
                                        //   in Loop: Header=BB162_12 Depth=4
	ldp	w10, w9, [x29, #-36]
	ldr	x8, [x19, x8, lsl #3]
	ldur	w11, [x29, #-40]
	add	w9, w9, w10
	ldr	x8, [x8, w9, sxtw #3]
	stur	wzr, [x29, #-28]
	add	x8, x8, x11, lsl #7
	str	x8, [sp, #16]
.LBB162_14:                             // %for.cond28
                                        //   Parent Loop BB162_4 Depth=1
                                        //     Parent Loop BB162_6 Depth=2
                                        //       Parent Loop BB162_9 Depth=3
                                        //         Parent Loop BB162_12 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #52]
	cmp	w9, w8
	b.ge	.LBB162_11
// %bb.15:                              // %for.body31
                                        //   in Loop: Header=BB162_14 Depth=5
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-16]
	ldursw	x10, [x29, #-20]
	add	x11, x8, #128                   // =128
	str	x11, [sp, #16]
	add	x9, x9, x10, lsl #3
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-20]
	str	x8, [x9, #56]
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
	b	.LBB162_14
.LBB162_16:                             // %for.end43
                                        //   in Loop: Header=BB162_6 Depth=2
	ldr	x8, [x8, #576]
	ldp	x9, x0, [x29, #-16]
	ldr	x8, [x8, #8]
	add	x1, x9, #56                     // =56
	blr	x8
	cbz	w0, .LBB162_19
// %bb.17:                              // %for.inc48
                                        //   in Loop: Header=BB162_6 Depth=2
	ldr	w8, [x29, #24]
	add	w8, w8, #1                      // =1
	b	.LBB162_6
.LBB162_18:                             // %for.end50
                                        //   in Loop: Header=BB162_4 Depth=1
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #40]
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
	b	.LBB162_4
.LBB162_19:                             // %if.then
	ldur	w8, [x29, #-36]
	ldur	x9, [x29, #-16]
	mov	w10, #1
	str	w8, [x9, #44]
	ldr	w8, [x29, #24]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #40]
	str	wzr, [x29, #28]
	str	w10, [sp, #4]
.LBB162_20:                             // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #112]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.LBB162_21:                             // %for.end54
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #168]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #168]
	ldur	x0, [x29, #-8]
	ldr	w8, [x0, #400]
	cmp	w9, w8
	b.hs	.LBB162_23
// %bb.22:                              // %if.then58
	bl	start_iMCU_row.52
	mov	w8, #3
	b	.LBB162_24
.LBB162_23:                             // %if.end59
	ldr	x8, [x0, #560]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	mov	w8, #4
.LBB162_24:                             // %cleanup
	mov	w9, #1
	str	w8, [x29, #28]
	str	w9, [sp, #4]
	b	.LBB162_20
.Lfunc_end162:
	.size	consume_data, .Lfunc_end162-consume_data
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decompress_data
	.type	decompress_data,@function
decompress_data:                        // @decompress_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-24]
	ldr	x8, [x0, #544]
	stur	x8, [x29, #-32]
	ldr	w8, [x0, #400]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-36]
	b	.LBB163_2
.LBB163_1:                              // %while.body
                                        //   in Loop: Header=BB163_2 Depth=1
	ldur	x0, [x29, #-16]
	ldr	x8, [x0, #560]
	ldr	x8, [x8]
	blr	x8
	cbz	w0, .LBB163_21
.LBB163_2:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #164]
	ldr	w8, [x8, #172]
	cmp	w9, w8
	b.lt	.LBB163_1
// %bb.3:                               // %lor.rhs
                                        //   in Loop: Header=BB163_2 Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #164]
	ldr	w8, [x8, #172]
	cmp	w9, w8
	b.ne	.LBB163_5
// %bb.4:                               // %land.rhs
                                        //   in Loop: Header=BB163_2 Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #168]
	ldr	w8, [x8, #176]
	cmp	w9, w8
	b.ls	.LBB163_1
.LBB163_5:                              // %while.end
	ldur	x8, [x29, #-16]
	stur	wzr, [x29, #-44]
	ldr	x8, [x8, #296]
	str	x8, [sp, #16]
	b	.LBB163_7
.LBB163_6:                              // %for.inc40
                                        //   in Loop: Header=BB163_7 Depth=1
	ldur	w8, [x29, #-44]
	ldr	x9, [sp, #16]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-44]
	str	x9, [sp, #16]
.LBB163_7:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_15 Depth 2
                                        //       Child Loop BB163_17 Depth 3
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-44]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB163_19
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB163_7 Depth=1
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #48]
	cbz	w8, .LBB163_6
// %bb.9:                               // %if.end9
                                        //   in Loop: Header=BB163_7 Depth=1
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-32]
	ldursw	x9, [x29, #-44]
	ldr	x10, [sp, #16]
	ldr	x11, [x0, #8]
	mov	w4, wzr
	add	x8, x8, x9, lsl #3
	ldr	w9, [x0, #176]
	ldr	w3, [x10, #12]
	ldr	x10, [x11, #64]
	ldr	x1, [x8, #136]
	mul	w2, w9, w3
	blr	x10
	ldur	x8, [x29, #-16]
	str	x0, [sp, #48]
	ldur	w10, [x29, #-36]
	ldr	w9, [x8, #176]
	ldr	x8, [sp, #16]
	cmp	w9, w10
	b.lo	.LBB163_12
// %bb.10:                              // %if.else
                                        //   in Loop: Header=BB163_7 Depth=1
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #32]
	ldr	w9, [x9, #12]
	udiv	w10, w8, w9
	msub	w8, w10, w9, w8
	stur	w8, [x29, #-52]
	cbnz	w8, .LBB163_13
// %bb.11:                              // %if.then19
                                        //   in Loop: Header=BB163_7 Depth=1
	ldr	x8, [sp, #16]
.LBB163_12:                             // %if.end22
                                        //   in Loop: Header=BB163_7 Depth=1
	ldr	w8, [x8, #12]
	stur	w8, [x29, #-52]
.LBB163_13:                             // %if.end22
                                        //   in Loop: Header=BB163_7 Depth=1
	ldp	x10, x8, [x29, #-24]
	ldursw	x9, [x29, #-44]
	ldr	x8, [x8, #584]
	lsl	x9, x9, #3
	add	x8, x8, x9
	ldr	x8, [x8, #8]
	str	x8, [sp, #8]
	ldr	x8, [x10, x9]
	stur	wzr, [x29, #-48]
	str	x8, [sp, #32]
	b	.LBB163_15
.LBB163_14:                             // %for.end
                                        //   in Loop: Header=BB163_15 Depth=2
	ldr	x8, [sp, #16]
	ldr	x9, [sp, #32]
	ldur	w10, [x29, #-48]
	ldrsw	x8, [x8, #36]
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-48]
	add	x8, x9, x8, lsl #3
	str	x8, [sp, #32]
.LBB163_15:                             // %for.cond28
                                        //   Parent Loop BB163_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB163_17 Depth 3
	ldp	w9, w8, [x29, #-52]
	cmp	w8, w9
	b.ge	.LBB163_6
// %bb.16:                              // %for.body30
                                        //   in Loop: Header=BB163_15 Depth=2
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-48]
	ldr	x8, [x8, x9, lsl #3]
	str	wzr, [sp, #28]
	stur	wzr, [x29, #-40]
	str	x8, [sp, #40]
.LBB163_17:                             // %for.cond33
                                        //   Parent Loop BB163_7 Depth=1
                                        //     Parent Loop BB163_15 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #16]
	ldur	w9, [x29, #-40]
	ldr	w8, [x8, #28]
	cmp	w9, w8
	b.hs	.LBB163_14
// %bb.18:                              // %for.body35
                                        //   in Loop: Header=BB163_17 Depth=3
	ldp	x8, x1, [sp, #8]
	ldur	x0, [x29, #-16]
	ldp	x3, x2, [sp, #32]
	ldr	w4, [sp, #28]
	blr	x8
	ldr	x8, [sp, #40]
	ldr	x9, [sp, #16]
	ldr	w10, [sp, #28]
	ldur	w11, [x29, #-40]
	add	x8, x8, #128                    // =128
	str	x8, [sp, #40]
	ldr	w8, [x9, #36]
	add	w9, w11, #1                     // =1
	stur	w9, [x29, #-40]
	add	w8, w10, w8
	str	w8, [sp, #28]
	b	.LBB163_17
.LBB163_19:                             // %for.end43
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #176]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #176]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #400]
	cmp	w9, w8
	b.hs	.LBB163_22
// %bb.20:                              // %if.then48
	mov	w8, #3
	b	.LBB163_23
.LBB163_21:                             // %if.then
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.LBB163_22:                             // %if.end49
	mov	w8, #4
.LBB163_23:                             // %cleanup
	mov	w9, #1
	stur	w8, [x29, #-4]
	str	w9, [sp, #4]
	mov	w0, w8
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end163:
	.size	decompress_data, .Lfunc_end163-decompress_data
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function dummy_consume_data
	.type	dummy_consume_data,@function
dummy_consume_data:                     // @dummy_consume_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	mov	w0, wzr
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end164:
	.size	dummy_consume_data, .Lfunc_end164-dummy_consume_data
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decompress_onepass
	.type	decompress_onepass,@function
decompress_onepass:                     // @decompress_onepass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-24]
	ldr	x8, [x0, #544]
	mov	w19, #68
	mov	w20, #52
	stur	x8, [x29, #-32]
	ldr	w9, [x0, #456]
	sub	w10, w9, #1                     // =1
	ldr	w9, [x0, #400]
	sub	w9, w9, #1                      // =1
	stp	w9, w10, [x29, #-44]
	ldr	w8, [x8, #44]
	str	w8, [sp, #48]
.LBB165_1:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB165_4 Depth 2
                                        //       Child Loop BB165_9 Depth 3
                                        //         Child Loop BB165_13 Depth 4
                                        //           Child Loop BB165_17 Depth 5
	ldur	x8, [x29, #-32]
	ldr	w9, [sp, #48]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB165_21
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB165_1 Depth=1
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #40]
	b	.LBB165_4
.LBB165_3:                              // %for.inc58
                                        //   in Loop: Header=BB165_4 Depth=2
	ldur	w8, [x29, #-36]
	add	w8, w8, #1                      // =1
.LBB165_4:                              // %for.cond3
                                        //   Parent Loop BB165_1 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB165_9 Depth 3
                                        //         Child Loop BB165_13 Depth 4
                                        //           Child Loop BB165_17 Depth 5
	ldur	w10, [x29, #-40]
	stur	w8, [x29, #-36]
	mov	w9, w8
	ldur	x8, [x29, #-32]
	cmp	w9, w10
	b.hi	.LBB165_18
// %bb.5:                               // %for.body5
                                        //   in Loop: Header=BB165_4 Depth=2
	ldur	x9, [x29, #-16]
	ldr	x0, [x8, #56]
	ldrsw	x9, [x9, #464]
	lsl	x1, x9, #7
	bl	jzero_far
	ldur	x0, [x29, #-16]
	ldur	x9, [x29, #-32]
	ldr	x8, [x0, #576]
	add	x1, x9, #56                     // =56
	ldr	x8, [x8, #8]
	blr	x8
	cbz	w0, .LBB165_19
// %bb.6:                               // %if.end
                                        //   in Loop: Header=BB165_4 Depth=2
	stur	xzr, [x29, #-52]
	b	.LBB165_9
.LBB165_7:                              // %if.then15
                                        //   in Loop: Header=BB165_9 Depth=3
	ldr	x8, [sp, #16]
	ldur	w9, [x29, #-48]
	ldr	w8, [x8, #60]
	add	w8, w9, w8
	stur	w8, [x29, #-48]
.LBB165_8:                              // %for.inc55
                                        //   in Loop: Header=BB165_9 Depth=3
	ldur	w8, [x29, #-52]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-52]
.LBB165_9:                              // %for.cond9
                                        //   Parent Loop BB165_1 Depth=1
                                        //     Parent Loop BB165_4 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB165_13 Depth 4
                                        //           Child Loop BB165_17 Depth 5
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-52]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB165_3
// %bb.10:                              // %for.body12
                                        //   in Loop: Header=BB165_9 Depth=3
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-52]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #424]
	str	x8, [sp, #16]
	ldr	w8, [x8, #48]
	cbz	w8, .LBB165_7
// %bb.11:                              // %if.end16
                                        //   in Loop: Header=BB165_9 Depth=3
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #16]
	ldp	w12, w13, [x29, #-40]
	ldr	x10, [sp, #16]
	ldr	x8, [x8, #584]
	ldrsw	x11, [x9, #4]
	cmp	w13, w12
	csel	x12, x20, x19, lo
	ldursw	x13, [x29, #-52]
	add	x8, x8, x11, lsl #3
	ldr	x8, [x8, #8]
	ldur	w11, [x29, #-36]
	str	x8, [sp, #8]
	ldr	w8, [x9, x12]
	ldur	x12, [x29, #-24]
	str	w8, [sp, #44]
	ldr	w8, [sp, #48]
	ldr	w9, [x9, #36]
	ldr	x12, [x12, x13, lsl #3]
	mul	w8, w8, w9
	add	x8, x12, w8, sxtw #3
	str	x8, [sp, #32]
	ldr	w8, [x10, #64]
	str	wzr, [sp, #52]
	mul	w8, w11, w8
	str	w8, [sp, #28]
	b	.LBB165_13
.LBB165_12:                             // %if.end46
                                        //   in Loop: Header=BB165_13 Depth=4
	ldr	x8, [sp, #16]
	ldur	w9, [x29, #-48]
	ldr	x11, [sp, #32]
	ldr	w12, [sp, #52]
	ldr	w10, [x8, #52]
	add	w9, w9, w10
	stur	w9, [x29, #-48]
	ldrsw	x8, [x8, #36]
	add	w9, w12, #1                     // =1
	str	w9, [sp, #52]
	add	x8, x11, x8, lsl #3
	str	x8, [sp, #32]
.LBB165_13:                             // %for.cond26
                                        //   Parent Loop BB165_1 Depth=1
                                        //     Parent Loop BB165_4 Depth=2
                                        //       Parent Loop BB165_9 Depth=3
                                        // =>      This Loop Header: Depth=4
                                        //           Child Loop BB165_17 Depth 5
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #52]
	ldr	w8, [x8, #56]
	cmp	w9, w8
	b.ge	.LBB165_8
// %bb.14:                              // %for.body29
                                        //   in Loop: Header=BB165_13 Depth=4
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-44]
	ldr	w8, [x8, #168]
	cmp	w8, w9
	b.lo	.LBB165_16
// %bb.15:                              // %lor.lhs.false
                                        //   in Loop: Header=BB165_13 Depth=4
	ldr	x8, [sp, #16]
	ldp	w9, w10, [sp, #48]
	ldr	w8, [x8, #72]
	add	w9, w9, w10
	cmp	w9, w8
	b.ge	.LBB165_12
.LBB165_16:                             // %if.then35
                                        //   in Loop: Header=BB165_13 Depth=4
	ldr	w8, [sp, #28]
	str	wzr, [sp, #56]
	str	w8, [sp, #24]
	mov	w8, wzr
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.ge	.LBB165_12
.LBB165_17:                             // %for.body39
                                        //   Parent Loop BB165_1 Depth=1
                                        //     Parent Loop BB165_4 Depth=2
                                        //       Parent Loop BB165_9 Depth=3
                                        //         Parent Loop BB165_13 Depth=4
                                        // =>        This Inner Loop Header: Depth=5
	ldur	w9, [x29, #-48]
	ldr	w10, [sp, #56]
	ldur	x11, [x29, #-32]
	ldp	x8, x1, [sp, #8]
	ldur	x0, [x29, #-16]
	add	w9, w9, w10
	add	x9, x11, w9, sxtw #3
	ldr	x3, [sp, #32]
	ldr	x2, [x9, #56]
	ldr	w4, [sp, #24]
	blr	x8
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #24]
	ldr	w10, [sp, #56]
	ldr	w8, [x8, #36]
	add	w10, w10, #1                    // =1
	str	w10, [sp, #56]
	add	w8, w9, w8
	str	w8, [sp, #24]
	mov	w8, w10
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.lt	.LBB165_17
	b	.LBB165_12
.LBB165_18:                             // %for.end60
                                        //   in Loop: Header=BB165_1 Depth=1
	str	wzr, [x8, #40]
	ldr	w8, [sp, #48]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #48]
	b	.LBB165_1
.LBB165_19:                             // %if.then
	ldr	w8, [sp, #48]
	ldur	x9, [x29, #-32]
	mov	w10, #1
	str	w8, [x9, #44]
	ldur	w8, [x29, #-36]
	ldur	x9, [x29, #-32]
	str	w8, [x9, #40]
	stur	wzr, [x29, #-4]
	str	w10, [sp, #4]
.LBB165_20:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB165_21:                             // %for.end64
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #176]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #176]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #168]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #168]
	ldur	x0, [x29, #-16]
	ldr	w8, [x0, #400]
	cmp	w9, w8
	b.hs	.LBB165_23
// %bb.22:                              // %if.then71
	bl	start_iMCU_row.52
	mov	w8, #3
	b	.LBB165_24
.LBB165_23:                             // %if.end72
	ldr	x8, [x0, #560]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	mov	w8, #4
.LBB165_24:                             // %cleanup
	mov	w9, #1
	stur	w8, [x29, #-4]
	str	w9, [sp, #4]
	b	.LBB165_20
.Lfunc_end165:
	.size	decompress_onepass, .Lfunc_end165-decompress_onepass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_iMCU_row.52
	.type	start_iMCU_row.52,@function
start_iMCU_row.52:                      // @start_iMCU_row.52
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #544]
	stp	x8, x0, [sp, #-16]!
	ldr	w8, [x0, #416]
	cmp	w8, #2                          // =2
	b.lt	.LBB166_2
// %bb.1:                               // %if.then
	ldr	x9, [sp]
	mov	w8, #1
	b	.LBB166_6
.LBB166_2:                              // %if.else
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #400]
	ldr	w10, [x8, #168]
	ldr	x8, [x8, #424]
	sub	w9, w9, #1                      // =1
	cmp	w10, w9
	b.hs	.LBB166_4
// %bb.3:                               // %if.then3
	ldr	w8, [x8, #12]
	b	.LBB166_5
.LBB166_4:                              // %if.else5
	ldr	w8, [x8, #72]
.LBB166_5:                              // %if.end9
	ldr	x9, [sp]
.LBB166_6:                              // %if.end9
	str	w8, [x9, #48]
	ldr	x8, [sp]
	str	wzr, [x8, #40]
	ldr	x8, [sp]
	str	wzr, [x8, #44]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end166:
	.size	start_iMCU_row.52, .Lfunc_end166-start_iMCU_row.52
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function smoothing_ok
	.type	smoothing_ok,@function
smoothing_ok:                           // @smoothing_ok
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #544]
	stur	wzr, [x29, #-28]
	stp	x8, x0, [x29, #-24]
	ldr	w8, [x0, #304]
	cbz	w8, .LBB167_20
// %bb.1:                               // %lor.lhs.false
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #184]
	cbz	x8, .LBB167_20
// %bb.2:                               // %if.end
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #216]
	cbnz	x8, .LBB167_4
// %bb.3:                               // %if.then5
	ldur	x0, [x29, #-16]
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldrsw	x9, [x0, #48]
	ldr	x8, [x8]
	add	x9, x9, x9, lsl #1
	lsl	x2, x9, #3
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [x8, #216]
.LBB167_4:                              // %if.end7
	ldp	x8, x9, [x29, #-24]
	ldr	x8, [x8, #216]
	stur	wzr, [x29, #-32]
	str	x8, [sp, #8]
	ldr	x8, [x9, #296]
	str	x8, [sp, #32]
	mov	w8, #1
	b	.LBB167_6
.LBB167_5:                              // %for.end
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #8]
	ldur	w10, [x29, #-32]
	ldr	x11, [sp, #32]
	add	x9, x9, #24                     // =24
	add	w10, w10, #1                    // =1
	add	x11, x11, #96                   // =96
	str	x9, [sp, #8]
	stur	w10, [x29, #-32]
	str	x11, [sp, #32]
.LBB167_6:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_17 Depth 2
	ldur	x9, [x29, #-16]
	ldur	w10, [x29, #-32]
	ldr	w9, [x9, #48]
	cmp	w10, w9
	b.ge	.LBB167_21
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #32]
	ldr	x9, [x9, #80]
	str	x9, [sp, #24]
	cbz	x9, .LBB167_20
// %bb.8:                               // %if.end15
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #24]
	ldrh	w9, [x9]
	cbz	w9, .LBB167_20
// %bb.9:                               // %lor.lhs.false19
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #24]
	ldrh	w9, [x9, #2]
	cbz	w9, .LBB167_20
// %bb.10:                              // %lor.lhs.false25
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #24]
	ldrh	w9, [x9, #16]
	cbz	w9, .LBB167_20
// %bb.11:                              // %lor.lhs.false31
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #24]
	ldrh	w9, [x9, #32]
	cbz	w9, .LBB167_20
// %bb.12:                              // %lor.lhs.false37
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #24]
	ldrh	w9, [x9, #18]
	cbz	w9, .LBB167_20
// %bb.13:                              // %lor.lhs.false43
                                        //   in Loop: Header=BB167_6 Depth=1
	ldr	x9, [sp, #24]
	ldrh	w9, [x9, #4]
	cbz	w9, .LBB167_20
// %bb.14:                              // %if.end50
                                        //   in Loop: Header=BB167_6 Depth=1
	ldur	x9, [x29, #-16]
	ldursw	x10, [x29, #-32]
	ldr	x9, [x9, #184]
	lsl	x10, x10, #8
	add	x11, x9, x10
	str	x11, [sp, #16]
	ldr	w9, [x9, x10]
	tbnz	w9, #31, .LBB167_20
// %bb.15:                              // %if.end57
                                        //   in Loop: Header=BB167_6 Depth=1
	stur	w8, [x29, #-36]
	b	.LBB167_17
.LBB167_16:                             // %for.inc
                                        //   in Loop: Header=BB167_17 Depth=2
	ldur	w9, [x29, #-36]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-36]
.LBB167_17:                             // %for.cond58
                                        //   Parent Loop BB167_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w9, [x29, #-36]
	cmp	w9, #5                          // =5
	b.gt	.LBB167_5
// %bb.18:                              // %for.body61
                                        //   in Loop: Header=BB167_17 Depth=2
	ldursw	x9, [x29, #-36]
	ldp	x11, x10, [sp, #8]
	lsl	x9, x9, #2
	ldr	w10, [x10, x9]
	str	w10, [x11, x9]
	ldr	x9, [sp, #16]
	ldursw	x10, [x29, #-36]
	ldr	w9, [x9, x10, lsl #2]
	cbz	w9, .LBB167_16
// %bb.19:                              // %if.then70
                                        //   in Loop: Header=BB167_17 Depth=2
	stur	w8, [x29, #-28]
	b	.LBB167_16
.LBB167_20:                             // %if.then
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.LBB167_21:                             // %for.end74
	ldur	w8, [x29, #-28]
	mov	w9, #1
	str	w9, [sp, #4]
	stur	w8, [x29, #-4]
	mov	w0, w8
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end167:
	.size	smoothing_ok, .Lfunc_end167-smoothing_ok
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decompress_smooth_data
	.type	decompress_smooth_data,@function
decompress_smooth_data:                 // @decompress_smooth_data
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #416                    // =416
	stp	x29, x30, [sp, #368]            // 16-byte Folded Spill
	str	x28, [sp, #384]                 // 8-byte Folded Spill
	stp	x20, x19, [sp, #400]            // 16-byte Folded Spill
	add	x29, sp, #368                   // =368
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #544]
	mov	w19, #3
	stur	x8, [x29, #-24]
	ldr	w8, [x0, #400]
	sub	w8, w8, #1                      // =1
	str	w8, [x29, #24]
	b	.LBB168_2
.LBB168_1:                              // %if.end
                                        //   in Loop: Header=BB168_2 Depth=1
	str	wzr, [sp]
	mov	w8, wzr
	cbz	w8, .LBB168_7
	b	.LBB168_9
.LBB168_2:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #164]
	ldr	w8, [x8, #172]
	cmp	w9, w8
	b.gt	.LBB168_9
// %bb.3:                               // %land.rhs
                                        //   in Loop: Header=BB168_2 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #36]
	cbnz	w8, .LBB168_9
// %bb.4:                               // %while.body
                                        //   in Loop: Header=BB168_2 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #164]
	ldr	w8, [x8, #172]
	cmp	w9, w8
	b.ne	.LBB168_7
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB168_2 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #508]
	cmp	w9, #0                          // =0
	cset	w9, eq
	str	w9, [sp, #120]
	ldr	w9, [x8, #176]
	ldr	w8, [x8, #168]
	cinc	w9, w9, eq
	cmp	w8, w9
	b.ls	.LBB168_1
// %bb.6:                               // %if.then7
                                        //   in Loop: Header=BB168_2 Depth=1
	str	w19, [sp]
	mov	w8, w19
	cbnz	w8, .LBB168_9
.LBB168_7:                              // %if.end8
                                        //   in Loop: Header=BB168_2 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #560]
	ldr	x8, [x8]
	blr	x8
	cbnz	w0, .LBB168_2
// %bb.8:                               // %if.then11
	mov	w8, #1
	str	wzr, [x29, #28]
	str	w8, [sp]
	b	.LBB168_99
.LBB168_9:                              // %while.end
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-36]
	mov	w19, #24
	mov	w20, #1
	ldr	x8, [x8, #296]
	stur	x8, [x29, #-104]
	b	.LBB168_11
.LBB168_10:                             // %for.inc396
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	w8, [x29, #-36]
	ldur	x9, [x29, #-104]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-36]
	stur	x9, [x29, #-104]
.LBB168_11:                             // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB168_22 Depth 2
                                        //       Child Loop BB168_35 Depth 3
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-36]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB168_95
// %bb.12:                              // %for.body
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x8, [x29, #-104]
	ldr	w8, [x8, #48]
	cbz	w8, .LBB168_10
// %bb.13:                              // %if.end16
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w10, [x29, #24]
	ldr	w9, [x8, #176]
	ldur	x8, [x29, #-104]
	cmp	w9, w10
	b.hs	.LBB168_16
// %bb.14:                              // %if.then19
                                        //   in Loop: Header=BB168_11 Depth=1
	ldr	w8, [x8, #12]
	stur	wzr, [x29, #-120]
	stur	w8, [x29, #-44]
	lsl	w8, w8, #1
	stur	w8, [x29, #-48]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #176]
	cbnz	w8, .LBB168_19
.LBB168_15:                             // %if.else37
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldur	w3, [x29, #-48]
	ldr	x10, [x0, #8]
	mov	w2, wzr
	add	x8, x8, x9, lsl #3
	ldr	x1, [x8, #136]
	ldr	x8, [x10, #64]
	mov	w4, wzr
	blr	x8
	stur	x0, [x29, #-56]
	stur	w20, [x29, #-116]
	b	.LBB168_20
.LBB168_16:                             // %if.else
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x9, [x29, #-104]
	ldr	w8, [x8, #32]
	ldr	w9, [x9, #12]
	udiv	w10, w8, w9
	msub	w8, w10, w9, w8
	stur	w8, [x29, #-44]
	cbnz	w8, .LBB168_18
// %bb.17:                              // %if.then22
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x8, [x29, #-104]
	ldr	w8, [x8, #12]
	stur	w8, [x29, #-44]
.LBB168_18:                             // %if.end24
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	w8, [x29, #-44]
	stur	w20, [x29, #-120]
	stur	w8, [x29, #-48]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #176]
	cbz	w8, .LBB168_15
.LBB168_19:                             // %if.then28
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x8, [x29, #-104]
	ldur	w9, [x29, #-48]
	ldur	x0, [x29, #-8]
	ldur	x11, [x29, #-24]
	ldr	w10, [x8, #12]
	ldursw	x12, [x29, #-36]
	mov	w4, wzr
	add	w3, w9, w10
	stur	w3, [x29, #-48]
	ldr	x9, [x0, #8]
	add	x10, x11, x12, lsl #3
	ldr	w11, [x0, #176]
	ldr	w8, [x8, #12]
	ldr	x9, [x9, #64]
	ldr	x1, [x10, #136]
	sub	w10, w11, #1                    // =1
	mul	w2, w10, w8
	blr	x9
	ldur	x8, [x29, #-104]
	stur	x0, [x29, #-56]
	ldrsw	x8, [x8, #12]
	stur	wzr, [x29, #-116]
	add	x8, x0, x8, lsl #3
	stur	x8, [x29, #-56]
.LBB168_20:                             // %if.end44
                                        //   in Loop: Header=BB168_11 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-36]
	ldur	x10, [x29, #-104]
	ldursw	x11, [x29, #-36]
	ldr	x8, [x8, #216]
	madd	x12, x9, x19, x8
	ldr	x8, [x10, #80]
	stp	x8, x12, [sp, #104]
	ldrh	w10, [x8]
	ldrh	w9, [x8, #2]
	stp	x9, x10, [sp, #88]
	ldrh	w9, [x8, #32]
	ldrh	w10, [x8, #16]
	str	x9, [sp, #56]
	ldrh	w9, [x8, #18]
	stp	x9, x10, [sp, #64]
	ldrh	w8, [x8, #4]
	ldur	x9, [x29, #-8]
	ldursw	x10, [x29, #-36]
	str	x8, [sp, #80]
	ldr	x8, [x9, #584]
	ldur	x9, [x29, #-16]
	add	x8, x8, x11, lsl #3
	ldr	x8, [x8, #8]
	stur	x8, [x29, #-112]
	ldr	x8, [x9, x10, lsl #3]
	stur	wzr, [x29, #-40]
	stur	x8, [x29, #-88]
	b	.LBB168_22
.LBB168_21:                             // %for.end
                                        //   in Loop: Header=BB168_22 Depth=2
	ldur	x8, [x29, #-104]
	ldur	x9, [x29, #-88]
	ldur	w10, [x29, #-40]
	ldrsw	x8, [x8, #36]
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-40]
	add	x8, x9, x8, lsl #3
	stur	x8, [x29, #-88]
.LBB168_22:                             // %for.cond69
                                        //   Parent Loop BB168_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB168_35 Depth 3
	ldp	w9, w8, [x29, #-44]
	cmp	w8, w9
	b.ge	.LBB168_10
// %bb.23:                              // %for.body72
                                        //   in Loop: Header=BB168_22 Depth=2
	ldur	x9, [x29, #-56]
	ldursw	x8, [x29, #-40]
	ldur	w10, [x29, #-116]
	ldr	x9, [x9, x8, lsl #3]
	stur	x9, [x29, #-64]
	cbz	w10, .LBB168_26
// %bb.24:                              // %for.body72
                                        //   in Loop: Header=BB168_22 Depth=2
	cbnz	w8, .LBB168_26
// %bb.25:                              // %if.then78
                                        //   in Loop: Header=BB168_22 Depth=2
	ldur	x8, [x29, #-64]
	stur	x8, [x29, #-72]
	ldur	w8, [x29, #-120]
	cbnz	w8, .LBB168_27
	b	.LBB168_29
.LBB168_26:                             // %if.else79
                                        //   in Loop: Header=BB168_22 Depth=2
	ldur	x8, [x29, #-56]
	ldursw	x9, [x29, #-40]
	add	x8, x8, x9, lsl #3
	ldur	x8, [x8, #-8]
	stur	x8, [x29, #-72]
	ldur	w8, [x29, #-120]
	cbz	w8, .LBB168_29
.LBB168_27:                             // %land.lhs.true85
                                        //   in Loop: Header=BB168_22 Depth=2
	ldp	w8, w9, [x29, #-44]
	sub	w8, w8, #1                      // =1
	cmp	w9, w8
	b.ne	.LBB168_29
// %bb.28:                              // %if.then89
                                        //   in Loop: Header=BB168_22 Depth=2
	ldur	x8, [x29, #-64]
	b	.LBB168_30
.LBB168_29:                             // %if.else90
                                        //   in Loop: Header=BB168_22 Depth=2
	ldur	x8, [x29, #-56]
	ldursw	x9, [x29, #-40]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #8]
.LBB168_30:                             // %if.end94
                                        //   in Loop: Header=BB168_22 Depth=2
	stur	x8, [x29, #-80]
	ldp	x8, x9, [x29, #-72]
	ldrsh	w8, [x8]
	stp	w8, w8, [sp, #36]
	str	w8, [sp, #44]
	ldrsh	w8, [x9]
	ldur	x9, [x29, #-80]
	stp	w8, w8, [sp, #24]
	str	w8, [sp, #32]
	ldrsh	w8, [x9]
	ldur	x9, [x29, #-104]
	stur	wzr, [x29, #-92]
	stp	w8, w8, [sp, #12]
	str	w8, [sp, #20]
	ldr	w8, [x9, #28]
	sub	w8, w8, #1                      // =1
	stp	w8, wzr, [x29, #-32]
	b	.LBB168_35
.LBB168_31:                             // %if.end380
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	neg	w8, w8
.LBB168_32:                             // %if.end382
                                        //   in Loop: Header=BB168_35 Depth=3
	str	w8, [sp, #4]
.LBB168_33:                             // %if.end382
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	strh	w8, [sp, #124]
.LBB168_34:                             // %if.end385
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	x8, x1, [x29, #-112]
	ldur	x0, [x29, #-8]
	ldur	x3, [x29, #-88]
	ldur	w4, [x29, #-92]
	add	x2, sp, #120                    // =120
	blr	x8
	ldp	w9, w8, [sp, #36]
	stp	w9, w8, [sp, #40]
	ldp	w8, w10, [sp, #24]
	stp	w8, w10, [sp, #28]
	ldp	w10, w9, [sp, #12]
	stp	w10, w9, [sp, #16]
	ldp	x9, x8, [x29, #-72]
	ldur	x10, [x29, #-80]
	add	x11, x8, #128                   // =128
	ldur	x8, [x29, #-104]
	add	x9, x9, #128                    // =128
	add	x10, x10, #128                  // =128
	stp	x9, x11, [x29, #-72]
	stur	x10, [x29, #-80]
	ldur	w9, [x29, #-92]
	ldr	w8, [x8, #36]
	ldur	w10, [x29, #-28]
	add	w8, w9, w8
	add	w9, w10, #1                     // =1
	stur	w8, [x29, #-92]
	stur	w9, [x29, #-28]
.LBB168_35:                             // %for.cond105
                                        //   Parent Loop BB168_11 Depth=1
                                        //     Parent Loop BB168_22 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w9, w8, [x29, #-32]
	cmp	w8, w9
	b.hi	.LBB168_21
// %bb.36:                              // %for.body108
                                        //   in Loop: Header=BB168_35 Depth=3
	ldur	x0, [x29, #-64]
	add	x1, sp, #120                    // =120
	mov	w2, #1
	bl	jcopy_block_row
	ldp	w9, w8, [x29, #-32]
	cmp	w8, w9
	b.hs	.LBB168_38
// %bb.37:                              // %if.then111
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	x8, x9, [x29, #-72]
	ldrsh	w8, [x8, #128]
	str	w8, [sp, #36]
	ldrsh	w8, [x9, #128]
	ldur	x9, [x29, #-80]
	str	w8, [sp, #24]
	ldrsh	w8, [x9, #128]
	str	w8, [sp, #12]
.LBB168_38:                             // %if.end121
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #4]
	str	w8, [sp, #8]
	cbz	w8, .LBB168_40
// %bb.39:                              // %land.lhs.true125
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsh	w8, [sp, #122]
	cbz	w8, .LBB168_46
.LBB168_40:                             // %if.end171
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #8]
	str	w8, [sp, #8]
	cbz	w8, .LBB168_62
.LBB168_41:                             // %land.lhs.true175
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsh	w8, [sp, #136]
	cbnz	w8, .LBB168_62
// %bb.42:                              // %if.then180
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsw	x8, [sp, #40]
	ldrsw	x9, [sp, #16]
	ldr	x10, [sp, #96]
	ldr	x11, [sp, #72]
	sub	x8, x8, x9
	mul	x8, x10, x8
	add	x8, x8, x8, lsl #3
	lsl	x8, x8, #2
	lsl	x9, x11, #7
	str	x8, [sp, #48]
	tbnz	x8, #63, .LBB168_50
// %bb.43:                              // %if.then187
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #72]
	ldr	w11, [sp, #8]
	add	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_55
// %bb.44:                              // %land.lhs.true195
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_55
// %bb.45:                              // %if.then199
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	b	.LBB168_54
.LBB168_46:                             // %if.then130
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsw	x8, [sp, #32]
	ldrsw	x9, [sp, #24]
	ldp	x11, x10, [sp, #88]
	sub	x8, x8, x9
	mul	x8, x10, x8
	add	x8, x8, x8, lsl #3
	lsl	x8, x8, #2
	lsl	x9, x11, #7
	str	x8, [sp, #48]
	tbnz	x8, #63, .LBB168_56
// %bb.47:                              // %if.then137
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #88]
	ldr	w11, [sp, #8]
	add	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_61
// %bb.48:                              // %land.lhs.true143
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_61
// %bb.49:                              // %if.then147
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	b	.LBB168_60
.LBB168_50:                             // %if.else203
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #72]
	ldr	w11, [sp, #8]
	sub	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_53
// %bb.51:                              // %land.lhs.true211
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_53
// %bb.52:                              // %if.then215
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB168_53:                             // %if.end218
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	neg	w8, w8
.LBB168_54:                             // %if.end220
                                        //   in Loop: Header=BB168_35 Depth=3
	str	w8, [sp, #4]
.LBB168_55:                             // %if.end220
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	strh	w8, [sp, #136]
	b	.LBB168_62
.LBB168_56:                             // %if.else151
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #88]
	ldr	w11, [sp, #8]
	sub	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_59
// %bb.57:                              // %land.lhs.true159
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_59
// %bb.58:                              // %if.then163
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB168_59:                             // %if.end166
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	neg	w8, w8
.LBB168_60:                             // %if.end168
                                        //   in Loop: Header=BB168_35 Depth=3
	str	w8, [sp, #4]
.LBB168_61:                             // %if.end168
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	strh	w8, [sp, #122]
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #8]
	str	w8, [sp, #8]
	cbnz	w8, .LBB168_41
.LBB168_62:                             // %if.end223
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #12]
	str	w8, [sp, #8]
	cbz	w8, .LBB168_64
// %bb.63:                              // %land.lhs.true227
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsh	w8, [sp, #152]
	cbz	w8, .LBB168_70
.LBB168_64:                             // %if.end277
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #16]
	str	w8, [sp, #8]
	cbz	w8, .LBB168_86
.LBB168_65:                             // %land.lhs.true281
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsh	w8, [sp, #138]
	cbnz	w8, .LBB168_86
// %bb.66:                              // %if.then286
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsw	x9, [sp, #44]
	ldrsw	x10, [sp, #36]
	ldrsw	x11, [sp, #20]
	ldrsw	x12, [sp, #12]
	ldr	x8, [sp, #96]
	ldr	x13, [sp, #64]
	sub	x9, x9, x10
	sub	x9, x9, x11
	add	x9, x9, x12
	mul	x8, x8, x9
	adds	x8, x8, x8, lsl #2
	lsl	x9, x13, #7
	str	x8, [sp, #48]
	b.mi	.LBB168_74
// %bb.67:                              // %if.then295
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #64]
	ldr	w11, [sp, #8]
	add	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_79
// %bb.68:                              // %land.lhs.true303
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_79
// %bb.69:                              // %if.then307
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	b	.LBB168_78
.LBB168_70:                             // %if.then232
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsw	x8, [sp, #40]
	ldrsw	x9, [sp, #16]
	ldrsw	x10, [sp, #28]
	ldr	x11, [sp, #96]
	ldr	x12, [sp, #56]
	add	x8, x8, x9
	sub	x8, x8, x10, lsl #1
	mul	x8, x11, x8
	adds	x8, x8, x8, lsl #3
	lsl	x9, x12, #7
	str	x8, [sp, #48]
	b.mi	.LBB168_80
// %bb.71:                              // %if.then241
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #56]
	ldr	w11, [sp, #8]
	add	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_85
// %bb.72:                              // %land.lhs.true249
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_85
// %bb.73:                              // %if.then253
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	b	.LBB168_84
.LBB168_74:                             // %if.else311
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #64]
	ldr	w11, [sp, #8]
	sub	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_77
// %bb.75:                              // %land.lhs.true319
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_77
// %bb.76:                              // %if.then323
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB168_77:                             // %if.end326
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	neg	w8, w8
.LBB168_78:                             // %if.end328
                                        //   in Loop: Header=BB168_35 Depth=3
	str	w8, [sp, #4]
.LBB168_79:                             // %if.end328
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	strh	w8, [sp, #138]
	b	.LBB168_86
.LBB168_80:                             // %if.else257
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #56]
	ldr	w11, [sp, #8]
	sub	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_83
// %bb.81:                              // %land.lhs.true265
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_83
// %bb.82:                              // %if.then269
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB168_83:                             // %if.end272
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	neg	w8, w8
.LBB168_84:                             // %if.end274
                                        //   in Loop: Header=BB168_35 Depth=3
	str	w8, [sp, #4]
.LBB168_85:                             // %if.end274
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #4]
	strh	w8, [sp, #152]
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #16]
	str	w8, [sp, #8]
	cbnz	w8, .LBB168_65
.LBB168_86:                             // %if.end331
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x8, [sp, #112]
	ldr	w8, [x8, #20]
	str	w8, [sp, #8]
	cbz	w8, .LBB168_34
// %bb.87:                              // %land.lhs.true335
                                        //   in Loop: Header=BB168_35 Depth=3
	ldrsh	w8, [sp, #124]
	cbnz	w8, .LBB168_34
// %bb.88:                              // %if.then340
                                        //   in Loop: Header=BB168_35 Depth=3
	ldpsw	x10, x8, [sp, #28]
	ldrsw	x9, [sp, #24]
	ldr	x11, [sp, #96]
	ldr	x12, [sp, #80]
	add	x8, x8, x9
	sub	x8, x8, x10, lsl #1
	mul	x8, x11, x8
	adds	x8, x8, x8, lsl #3
	lsl	x9, x12, #7
	str	x8, [sp, #48]
	b.mi	.LBB168_92
// %bb.89:                              // %if.then349
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #80]
	ldr	w11, [sp, #8]
	add	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_33
// %bb.90:                              // %land.lhs.true357
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_33
// %bb.91:                              // %if.then361
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	b	.LBB168_32
.LBB168_92:                             // %if.else365
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	x10, [sp, #80]
	ldr	w11, [sp, #8]
	sub	x8, x9, x8
	lsl	x9, x10, #8
	sdiv	x8, x8, x9
	cmp	w11, #1                         // =1
	str	w8, [sp, #4]
	b.lt	.LBB168_31
// %bb.93:                              // %land.lhs.true373
                                        //   in Loop: Header=BB168_35 Depth=3
	ldp	w9, w8, [sp, #4]
	lsl	w8, w20, w8
	cmp	w9, w8
	b.lt	.LBB168_31
// %bb.94:                              // %if.then377
                                        //   in Loop: Header=BB168_35 Depth=3
	ldr	w8, [sp, #8]
	lsl	w8, w20, w8
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b	.LBB168_31
.LBB168_95:                             // %for.end399
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #176]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #176]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #400]
	cmp	w9, w8
	b.hs	.LBB168_97
// %bb.96:                              // %if.then405
	mov	w8, #3
	b	.LBB168_98
.LBB168_97:                             // %if.end406
	mov	w8, #4
.LBB168_98:                             // %cleanup407
	mov	w9, #1
	str	w8, [x29, #28]
	str	w9, [sp]
.LBB168_99:                             // %cleanup407
	ldr	w0, [x29, #28]
	ldp	x20, x19, [sp, #400]            // 16-byte Folded Reload
	ldr	x28, [sp, #384]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #368]            // 16-byte Folded Reload
	add	sp, sp, #416                    // =416
	ret
.Lfunc_end168:
	.size	decompress_smooth_data, .Lfunc_end168-decompress_smooth_data
	.cfi_endproc
                                        // -- End function
	.globl	jinit_color_deconverter         // -- Begin function jinit_color_deconverter
	.p2align	2
	.type	jinit_color_deconverter,@function
jinit_color_deconverter:                // @jinit_color_deconverter
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #48
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_dcolor
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_dcolor
	str	x0, [x8, #600]
	mov	x8, x0
	str	x9, [x8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #52]
	sub	w9, w8, #2                      // =2
	cmp	w9, #2                          // =2
	b.lo	.LBB169_3
// %bb.1:                               // %entry
	sub	w9, w8, #4                      // =4
	cmp	w9, #2                          // =2
	b.hs	.LBB169_13
// %bb.2:                               // %sw.bb13
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #4                          // =4
	b.ne	.LBB169_4
	b	.LBB169_5
.LBB169_3:                              // %sw.bb4
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #3                          // =3
	b.eq	.LBB169_5
.LBB169_4:                              // %if.then24
	ldur	x8, [x29, #-8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB169_5:                              // %sw.epilog
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #56]
	cmp	w8, #4                          // =4
	b.eq	.LBB169_15
// %bb.6:                               // %sw.epilog
	cmp	w8, #2                          // =2
	b.eq	.LBB169_17
// %bb.7:                               // %sw.epilog
	cmp	w8, #1                          // =1
	b.ne	.LBB169_20
// %bb.8:                               // %sw.bb30
	ldur	x9, [x29, #-8]
	str	w8, [x9, #136]
	ldur	x9, [x29, #-8]
	ldr	w9, [x9, #52]
	cmp	w9, #1                          // =1
	b.eq	.LBB169_10
// %bb.9:                               // %lor.lhs.false
	ldur	x9, [x29, #-8]
	ldr	w9, [x9, #52]
	cmp	w9, #3                          // =3
	b.ne	.LBB169_24
.LBB169_10:                             // %if.then35
	ldr	x9, [sp, #16]
	adrp	x10, grayscale_convert.53
	add	x10, x10, :lo12:grayscale_convert.53
	str	x10, [x9, #8]
	str	w8, [sp, #12]
	mov	w8, #96
.LBB169_11:                             // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x9, [x29, #-8]
	ldr	w10, [sp, #12]
	ldr	w9, [x9, #48]
	cmp	w10, w9
	b.ge	.LBB169_26
// %bb.12:                              // %for.body
                                        //   in Loop: Header=BB169_11 Depth=1
	ldur	x9, [x29, #-8]
	ldrsw	x10, [sp, #12]
	ldr	x9, [x9, #296]
	madd	x9, x10, x8, x9
	str	wzr, [x9, #48]
	ldr	w9, [sp, #12]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #12]
	b	.LBB169_11
.LBB169_13:                             // %entry
	cmp	w8, #1                          // =1
	b.ne	.LBB169_22
// %bb.14:                              // %sw.bb
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #1                          // =1
	b.ne	.LBB169_4
	b	.LBB169_5
.LBB169_15:                             // %sw.bb64
	ldur	x8, [x29, #-8]
	mov	w9, #4
	str	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #52]
	cmp	w8, #5                          // =5
	b.ne	.LBB169_23
// %bb.16:                              // %if.then68
	ldr	x8, [sp, #16]
	adrp	x9, ycck_cmyk_convert
	add	x9, x9, :lo12:ycck_cmyk_convert
	b	.LBB169_19
.LBB169_17:                             // %sw.bb44
	ldur	x8, [x29, #-8]
	mov	w9, #3
	str	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #52]
	cmp	w8, #3                          // =3
	b.ne	.LBB169_28
// %bb.18:                              // %if.then48
	ldr	x8, [sp, #16]
	adrp	x9, ycc_rgb_convert
	add	x9, x9, :lo12:ycc_rgb_convert
.LBB169_19:                             // %sw.epilog99
	str	x9, [x8, #8]
	ldur	x0, [x29, #-8]
	bl	build_ycc_rgb_table
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #100]
	cbnz	w9, .LBB169_27
	b	.LBB169_30
.LBB169_20:                             // %sw.default84
	ldur	x8, [x29, #-8]
	ldp	w10, w9, [x8, #52]
	cmp	w9, w10
	b.ne	.LBB169_25
// %bb.21:                              // %if.then88
	ldr	w8, [x8, #48]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #136]
	b	.LBB169_29
.LBB169_22:                             // %sw.default
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #0                          // =0
	b.gt	.LBB169_5
	b	.LBB169_4
.LBB169_23:                             // %if.else71
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #52]
	cmp	w8, #4                          // =4
	b.eq	.LBB169_29
.LBB169_24:                             // %if.else
	ldur	x8, [x29, #-8]
.LBB169_25:                             // %if.else93
	ldr	x8, [x8]
	mov	w9, #25
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB169_26:                             // %sw.epilog99
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #100]
	cbz	w9, .LBB169_30
.LBB169_27:
	mov	w9, #1
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w9, [x8, #140]
	add	sp, sp, #48                     // =48
	ret
.LBB169_28:                             // %if.else51
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #52]
	cmp	w8, #2                          // =2
	b.ne	.LBB169_24
.LBB169_29:                             // %if.then54
	ldr	x8, [sp, #16]
	adrp	x9, null_convert.54
	add	x9, x9, :lo12:null_convert.54
	str	x9, [x8, #8]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #100]
	cbnz	w9, .LBB169_27
.LBB169_30:                             // %if.else101
	ldr	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w9, [x8, #140]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end169:
	.size	jinit_color_deconverter, .Lfunc_end169-jinit_color_deconverter
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_dcolor
	.type	start_pass_dcolor,@function
start_pass_dcolor:                      // @start_pass_dcolor
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end170:
	.size	start_pass_dcolor, .Lfunc_end170-start_pass_dcolor
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function grayscale_convert.53
	.type	grayscale_convert.53,@function
grayscale_convert.53:                   // @grayscale_convert.53
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	w2, [x29, #-20]
	str	x3, [sp, #16]
	str	w4, [sp, #12]
	ldr	x8, [x1]
	ldr	w5, [x0, #128]
	mov	w1, w2
	mov	x2, x3
	mov	x0, x8
	mov	w3, wzr
	bl	jcopy_sample_rows
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end171:
	.size	grayscale_convert.53, .Lfunc_end171-grayscale_convert.53
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function ycc_rgb_convert
	.type	ycc_rgb_convert,@function
ycc_rgb_convert:                        // @ycc_rgb_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	.cfi_def_cfa_offset 144
	stp	x1, x0, [sp, #128]
	str	w2, [sp, #124]
	str	x3, [sp, #112]
	str	w4, [sp, #108]
	ldr	x8, [x0, #600]
	mov	x10, x0
	str	x8, [sp, #96]
	ldr	w9, [x0, #128]
	str	w9, [sp, #40]
	ldr	x11, [x10, #408]
	ldr	x8, [x8, #16]
	ldr	x9, [sp, #96]
	stp	x8, x11, [sp, #24]
	ldr	x8, [sp, #96]
	ldr	x10, [x9, #24]
	ldr	x9, [sp, #96]
	ldr	x8, [x8, #32]
	stp	x8, x10, [sp, #8]
	ldr	x8, [x9, #40]
	str	x8, [sp]
.LBB172_1:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB172_3 Depth 2
	ldr	w8, [sp, #108]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #108]
	b.mi	.LBB172_4
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB172_1 Depth=1
	ldr	x8, [sp, #128]
	ldr	w9, [sp, #124]
	ldr	x10, [x8]
	lsl	x11, x9, #3
	add	w9, w9, #1                      // =1
	ldr	x12, [x10, x11]
	ldp	x10, x8, [x8, #8]
	ldr	x10, [x10, x11]
	stp	x10, x12, [sp, #56]
	ldr	x10, [sp, #112]
	ldr	x8, [x8, x11]
	str	w9, [sp, #124]
	add	x11, x10, #8                    // =8
	str	x11, [sp, #112]
	str	x8, [sp, #48]
	ldr	x8, [x10]
	str	wzr, [sp, #44]
	str	x8, [sp, #72]
	ldp	w9, w8, [sp, #40]
	cmp	w8, w9
	b.hs	.LBB172_1
.LBB172_3:                              // %for.body
                                        //   Parent Loop BB172_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x10, x8, [sp, #56]
	ldr	w9, [sp, #44]
	ldr	x11, [sp, #48]
	ldrb	w8, [x8, x9]
	ldrb	w10, [x10, x9]
	stp	w10, w8, [sp, #88]
	ldrb	w9, [x11, x9]
	ldr	x10, [sp, #24]
	ldr	x11, [sp, #72]
	str	w9, [sp, #84]
	ldrsw	x9, [x10, x9, lsl #2]
	ldr	x10, [sp, #32]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11]
	ldp	x8, x10, [sp]
	ldpsw	x11, x9, [sp, #84]
	ldr	x12, [sp, #72]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x9, [x10, x11, lsl #3]
	ldrsw	x11, [sp, #92]
	ldr	x10, [sp, #32]
	add	x8, x8, x9
	lsr	x8, x8, #16
	add	x8, x11, w8, sxtw
	ldrb	w8, [x10, x8]
	strb	w8, [x12, #1]
	ldr	x8, [sp, #16]
	ldpsw	x9, x10, [sp, #88]
	ldr	x11, [sp, #72]
	ldrsw	x8, [x8, x9, lsl #2]
	ldr	x9, [sp, #32]
	add	x8, x10, x8
	ldrb	w8, [x9, x8]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #72]
	ldr	w9, [sp, #44]
	add	x8, x8, #3                      // =3
	add	w9, w9, #1                      // =1
	str	x8, [sp, #72]
	str	w9, [sp, #44]
	ldp	w9, w8, [sp, #40]
	cmp	w8, w9
	b.lo	.LBB172_3
	b	.LBB172_1
.LBB172_4:                              // %while.end
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end172:
	.size	ycc_rgb_convert, .Lfunc_end172-ycc_rgb_convert
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function build_ycc_rgb_table
	.type	build_ycc_rgb_table,@function
build_ycc_rgb_table:                    // @build_ycc_rgb_table
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #600]
	mov	w1, #1
	mov	w2, #1024
	str	x8, [sp, #16]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w1, #1
	mov	w2, #1024
	str	x0, [x8, #16]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w1, #1
	mov	w2, #2048
	str	x0, [x8, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w1, #1
	mov	w2, #2048
	str	x0, [x8, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x12, [sp, #16]
	mov	w8, #26345
	mov	w10, #50594
	mov	x13, #-128
	movk	w8, #1, lsl #16
	orr	x9, xzr, #0x8000
	movk	w10, #1, lsl #16
	mov	x11, #-46802
	str	x0, [x12, #40]
	mov	x12, #-22554
	str	wzr, [sp, #12]
	str	x13, [sp]
	mov	w13, wzr
	cmp	w13, #255                       // =255
	b.gt	.LBB173_2
.LBB173_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #16]
	madd	x14, x14, x8, x9
	lsr	x14, x14, #16
	str	w14, [x13, x15, lsl #2]
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #24]
	madd	x14, x14, x10, x9
	lsr	x14, x14, #16
	str	w14, [x13, x15, lsl #2]
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #32]
	mul	x14, x14, x11
	str	x14, [x13, x15, lsl #3]
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #40]
	madd	x14, x14, x12, x9
	str	x14, [x13, x15, lsl #3]
	ldr	w13, [sp, #12]
	ldr	x14, [sp]
	add	w13, w13, #1                    // =1
	add	x14, x14, #1                    // =1
	str	w13, [sp, #12]
	str	x14, [sp]
	mov	w13, w13
	cmp	w13, #255                       // =255
	b.le	.LBB173_1
.LBB173_2:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end173:
	.size	build_ycc_rgb_table, .Lfunc_end173-build_ycc_rgb_table
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function null_convert.54
	.type	null_convert.54,@function
null_convert.54:                        // @null_convert.54
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	.cfi_def_cfa_offset 80
	stp	x1, x0, [sp, #64]
	str	w2, [sp, #60]
	str	x3, [sp, #48]
	str	w4, [sp, #44]
	ldr	w9, [x0, #48]
	ldr	w8, [x0, #128]
	stp	w8, w9, [sp, #12]
	b	.LBB174_2
.LBB174_1:                              // %for.end13
                                        //   in Loop: Header=BB174_2 Depth=1
	ldr	w8, [sp, #60]
	ldr	x9, [sp, #48]
	add	w8, w8, #1                      // =1
	add	x9, x9, #8                      // =8
	str	w8, [sp, #60]
	str	x9, [sp, #48]
.LBB174_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB174_5 Depth 2
                                        //       Child Loop BB174_7 Depth 3
	ldr	w8, [sp, #44]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #44]
	b.mi	.LBB174_8
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB174_2 Depth=1
	str	wzr, [sp, #8]
	b	.LBB174_5
.LBB174_4:                              // %for.inc12
                                        //   in Loop: Header=BB174_5 Depth=2
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
.LBB174_5:                              // %for.cond
                                        //   Parent Loop BB174_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB174_7 Depth 3
	ldr	w8, [sp, #8]
	ldr	w9, [sp, #16]
	cmp	w8, w9
	b.ge	.LBB174_1
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB174_5 Depth=2
	ldr	x8, [sp, #64]
	ldrsw	x9, [sp, #8]
	ldr	w10, [sp, #60]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x11, [x8, x10, lsl #3]
	ldr	x10, [sp, #48]
	ldr	x8, [x10]
	ldr	w10, [sp, #12]
	add	x8, x8, x9
	stp	x8, x11, [sp, #24]
	str	w10, [sp, #20]
	mov	w8, w10
	cbz	w8, .LBB174_4
.LBB174_7:                              // %for.body8
                                        //   Parent Loop BB174_2 Depth=1
                                        //     Parent Loop BB174_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	x9, x8, [sp, #24]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	strb	w8, [x9]
	ldp	w8, w10, [sp, #16]
	ldr	x9, [sp, #24]
                                        // kill: def $w8 killed $w8 def $x8
	sxtw	x8, w8
	add	x8, x9, x8
	sub	w9, w10, #1                     // =1
	stp	x8, x11, [sp, #24]
	str	w9, [sp, #20]
	mov	w8, w9
	cbnz	w8, .LBB174_7
	b	.LBB174_4
.LBB174_8:                              // %while.end
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end174:
	.size	null_convert.54, .Lfunc_end174-null_convert.54
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function ycck_cmyk_convert
	.type	ycck_cmyk_convert,@function
ycck_cmyk_convert:                      // @ycck_cmyk_convert
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #160                    // =160
	.cfi_def_cfa_offset 160
	stp	x1, x0, [sp, #144]
	str	w2, [sp, #140]
	str	x3, [sp, #128]
	str	w4, [sp, #124]
	ldr	x8, [x0, #600]
	mov	x10, x0
	str	x8, [sp, #112]
	ldr	w9, [x0, #128]
	str	w9, [sp, #48]
	ldr	x11, [x10, #408]
	ldr	x8, [x8, #16]
	ldr	x9, [sp, #112]
	stp	x8, x11, [sp, #32]
	ldr	x8, [sp, #112]
	ldr	x10, [x9, #24]
	ldr	x9, [sp, #112]
	ldr	x8, [x8, #32]
	stp	x8, x10, [sp, #16]
	ldr	x8, [x9, #40]
	str	x8, [sp, #8]
.LBB175_1:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB175_3 Depth 2
	ldr	w8, [sp, #124]
	subs	w8, w8, #1                      // =1
	str	w8, [sp, #124]
	b.mi	.LBB175_4
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB175_1 Depth=1
	ldr	x8, [sp, #144]
	ldr	w9, [sp, #140]
	ldr	w11, [sp, #140]
	ldr	x10, [x8]
	lsl	x9, x9, #3
	ldr	x12, [x10, x9]
	ldr	x10, [x8, #8]
	ldr	x10, [x10, x9]
	stp	x10, x12, [sp, #72]
	ldp	x10, x8, [x8, #16]
	ldr	x12, [x10, x9]
	ldr	x10, [sp, #128]
	ldr	x8, [x8, x9]
	add	w9, w11, #1                     // =1
	str	w9, [sp, #140]
	add	x9, x10, #8                     // =8
	str	x9, [sp, #128]
	stp	x8, x12, [sp, #56]
	ldr	x8, [x10]
	str	wzr, [sp, #52]
	str	x8, [sp, #88]
	ldp	w9, w8, [sp, #48]
	cmp	w8, w9
	b.hs	.LBB175_1
.LBB175_3:                              // %for.body
                                        //   Parent Loop BB175_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x10, x8, [sp, #72]
	ldr	w9, [sp, #52]
	ldr	x11, [sp, #64]
	ldrb	w8, [x8, x9]
	ldrb	w10, [x10, x9]
	stp	w10, w8, [sp, #104]
	ldrb	w9, [x11, x9]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	str	w9, [sp, #100]
	ldrsw	x9, [x10, x9, lsl #2]
	ldr	x10, [sp, #40]
	add	x8, x8, x9
	sub	x8, x10, x8
	ldrb	w8, [x8, #255]
	strb	w8, [x11]
	ldp	x8, x10, [sp, #8]
	ldpsw	x11, x9, [sp, #100]
	ldr	x12, [sp, #88]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x9, [x10, x11, lsl #3]
	ldrsw	x11, [sp, #108]
	ldr	x10, [sp, #40]
	add	x8, x8, x9
	lsr	x8, x8, #16
	add	x8, x11, w8, sxtw
	sub	x8, x10, x8
	ldrb	w8, [x8, #255]
	strb	w8, [x12, #1]
	ldr	x8, [sp, #24]
	ldpsw	x9, x10, [sp, #104]
	ldr	x11, [sp, #88]
	ldrsw	x8, [x8, x9, lsl #2]
	ldr	x9, [sp, #40]
	add	x8, x10, x8
	sub	x8, x9, x8
	ldrb	w8, [x8, #255]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #56]
	ldr	w9, [sp, #52]
	ldr	x10, [sp, #88]
	ldrb	w8, [x8, x9]
	strb	w8, [x10, #3]
	ldr	x8, [sp, #88]
	ldr	w9, [sp, #52]
	add	x8, x8, #4                      // =4
	add	w9, w9, #1                      // =1
	str	x8, [sp, #88]
	str	w9, [sp, #52]
	ldp	w9, w8, [sp, #48]
	cmp	w8, w9
	b.lo	.LBB175_3
	b	.LBB175_1
.LBB175_4:                              // %while.end
	add	sp, sp, #160                    // =160
	ret
.Lfunc_end175:
	.size	ycck_cmyk_convert, .Lfunc_end175-ycck_cmyk_convert
	.cfi_endproc
                                        // -- End function
	.globl	jinit_inverse_dct               // -- Begin function jinit_inverse_dct
	.p2align	2
	.type	jinit_inverse_dct,@function
jinit_inverse_dct:                      // @jinit_inverse_dct
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #128
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	adrp	x9, start_pass
	stur	x0, [x29, #-8]
	add	x9, x9, :lo12:start_pass
	str	x0, [x8, #584]
	mov	x8, x0
	str	x9, [x8]
	ldr	x8, [x29, #24]
	stur	wzr, [x29, #-12]
	mov	w19, #-1
	ldr	x8, [x8, #296]
	str	x8, [sp, #8]
.LBB176_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB176_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB176_1 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #256
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	movi	v0.2d, #0000000000000000
	str	x0, [x8, #88]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #88]
	stp	q0, q0, [x8, #224]
	stp	q0, q0, [x8, #192]
	stp	q0, q0, [x8, #160]
	stp	q0, q0, [x8, #128]
	stp	q0, q0, [x8, #96]
	stp	q0, q0, [x8, #64]
	stp	q0, q0, [x8, #32]
	stp	q0, q0, [x8]
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #2
	str	w19, [x8, #88]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #8]
	b	.LBB176_1
.LBB176_3:                              // %for.end
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end176:
	.size	jinit_inverse_dct, .Lfunc_end176-jinit_inverse_dct
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass
	.type	start_pass,@function
start_pass:                             // @start_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #176                    // =176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldr	x8, [x0, #584]
	stur	wzr, [x29, #-36]
	str	xzr, [sp, #32]
	stur	wzr, [x29, #-20]
	stp	x8, x0, [x29, #-16]
	ldr	x8, [x0, #296]
	adrp	x20, start_pass.aanscalefactor
	adrp	x21, start_pass.aanscales
	adrp	x24, .LJTI177_0
	adrp	x25, jpeg_idct_1x1
	adrp	x26, jpeg_idct_2x2
	adrp	x27, jpeg_idct_4x4
	adrp	x28, jpeg_idct_islow
	mov	w19, #6
	add	x20, x20, :lo12:start_pass.aanscalefactor
	add	x21, x21, :lo12:start_pass.aanscales
	orr	x22, xzr, #0x800
	mov	w23, #47
	add	x24, x24, :lo12:.LJTI177_0
	add	x25, x25, :lo12:jpeg_idct_1x1
	add	x26, x26, :lo12:jpeg_idct_2x2
	add	x27, x27, :lo12:jpeg_idct_4x4
	add	x28, x28, :lo12:jpeg_idct_islow
	stur	x8, [x29, #-32]
	b	.LBB177_3
.LBB177_1:                              // %sw.default85
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB177_2:                              // %for.inc91
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	w8, [x29, #-20]
	ldur	x9, [x29, #-32]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-20]
	stur	x9, [x29, #-32]
.LBB177_3:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB177_25 Depth 2
                                        //     Child Loop BB177_32 Depth 2
                                        //     Child Loop BB177_28 Depth 2
                                        //       Child Loop BB177_30 Depth 3
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB177_33
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #36]
	sub	w8, w8, #1                      // =1
	cmp	w8, #7                          // =7
	b.hi	.LBB177_8
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB177_3 Depth=1
	adr	x9, .LBB177_6
	ldrb	w10, [x24, x8]
	add	x9, x9, x10, lsl #2
	br	x9
.LBB177_6:                              // %sw.bb
                                        //   in Loop: Header=BB177_3 Depth=1
	str	x25, [sp, #32]
	stur	wzr, [x29, #-36]
	b	.LBB177_18
.LBB177_7:                              // %sw.bb2
                                        //   in Loop: Header=BB177_3 Depth=1
	str	x26, [sp, #32]
	stur	wzr, [x29, #-36]
	b	.LBB177_18
.LBB177_8:                              // %sw.default9
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #36]
	ldr	x9, [x9]
	str	w8, [x9, #44]
	b	.LBB177_17
.LBB177_9:                              // %sw.bb3
                                        //   in Loop: Header=BB177_3 Depth=1
	str	x27, [sp, #32]
	stur	wzr, [x29, #-36]
	b	.LBB177_18
.LBB177_10:                             // %sw.bb4
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #88]
	cmp	w8, #2                          // =2
	b.eq	.LBB177_14
// %bb.11:                              // %sw.bb4
                                        //   in Loop: Header=BB177_3 Depth=1
	cmp	w8, #1                          // =1
	b.eq	.LBB177_15
// %bb.12:                              // %sw.bb4
                                        //   in Loop: Header=BB177_3 Depth=1
	cbnz	w8, .LBB177_16
// %bb.13:                              // %sw.bb5
                                        //   in Loop: Header=BB177_3 Depth=1
	str	x28, [sp, #32]
	stur	wzr, [x29, #-36]
	b	.LBB177_18
.LBB177_14:                             // %sw.bb7
                                        //   in Loop: Header=BB177_3 Depth=1
	adrp	x8, jpeg_idct_float
	add	x8, x8, :lo12:jpeg_idct_float
	str	x8, [sp, #32]
	mov	w8, #2
	stur	w8, [x29, #-36]
	b	.LBB177_18
.LBB177_15:                             // %sw.bb6
                                        //   in Loop: Header=BB177_3 Depth=1
	adrp	x8, jpeg_idct_ifast
	add	x8, x8, :lo12:jpeg_idct_ifast
	str	x8, [sp, #32]
	mov	w8, #1
	stur	w8, [x29, #-36]
	b	.LBB177_18
.LBB177_16:                             // %sw.default
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w23, [x8, #40]
.LBB177_17:                             // %sw.epilog17
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB177_18:                             // %sw.epilog17
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	ldr	x10, [sp, #32]
	add	x8, x8, x9, lsl #3
	str	x10, [x8, #8]
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #48]
	cbz	w8, .LBB177_2
// %bb.19:                              // %lor.lhs.false
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #2
	ldr	w8, [x8, #88]
	ldur	w9, [x29, #-36]
	cmp	w8, w9
	b.eq	.LBB177_2
// %bb.20:                              // %if.end
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-32]
	ldr	x8, [x8, #80]
	str	x8, [sp, #24]
	cbz	x8, .LBB177_2
// %bb.21:                              // %if.end24
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	ldur	w10, [x29, #-36]
	add	x8, x8, x9, lsl #2
	str	w10, [x8, #88]
	ldur	w8, [x29, #-36]
	cmp	w8, #2                          // =2
	b.eq	.LBB177_26
// %bb.22:                              // %if.end24
                                        //   in Loop: Header=BB177_3 Depth=1
	cmp	w8, #1                          // =1
	b.eq	.LBB177_31
// %bb.23:                              // %if.end24
                                        //   in Loop: Header=BB177_3 Depth=1
	cbnz	w8, .LBB177_1
// %bb.24:                              // %sw.bb28
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-32]
	ldr	x8, [x8, #88]
	stur	wzr, [x29, #-24]
	str	x8, [sp, #16]
	mov	w8, wzr
	cmp	w8, #63                         // =63
	b.gt	.LBB177_2
.LBB177_25:                             // %for.body31
                                        //   Parent Loop BB177_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x10, x8, [sp, #16]
	ldursw	x9, [x29, #-24]
	ldrh	w8, [x8, x9, lsl #1]
	str	w8, [x10, x9, lsl #2]
	ldur	w8, [x29, #-24]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-24]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB177_25
	b	.LBB177_2
.LBB177_26:                             // %sw.bb55
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-32]
	ldr	x8, [x8, #88]
	stur	wzr, [x29, #-24]
	str	wzr, [sp, #12]
	str	x8, [sp, #16]
	b	.LBB177_28
.LBB177_27:                             // %for.inc82
                                        //   in Loop: Header=BB177_28 Depth=2
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB177_28:                             // %for.cond57
                                        //   Parent Loop BB177_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB177_30 Depth 3
	ldr	w8, [sp, #12]
	cmp	w8, #7                          // =7
	b.gt	.LBB177_2
// %bb.29:                              // %for.body60
                                        //   in Loop: Header=BB177_28 Depth=2
	str	wzr, [sp, #8]
	mov	w8, wzr
	cmp	w8, #7                          // =7
	b.gt	.LBB177_27
.LBB177_30:                             // %for.body64
                                        //   Parent Loop BB177_3 Depth=1
                                        //     Parent Loop BB177_28 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #24]
	ldursw	x9, [x29, #-24]
	ldpsw	x11, x10, [sp, #8]
	ldr	h0, [x8, x9, lsl #1]
	ldr	d1, [x20, x10, lsl #3]
	ldr	d2, [x20, x11, lsl #3]
	ldr	x8, [sp, #16]
	ucvtf	d0, d0
	fmul	d0, d0, d1
	fmul	d0, d0, d2
	fcvt	s0, d0
	str	s0, [x8, x9, lsl #2]
	ldur	w8, [x29, #-24]
	ldr	w9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	w9, w9, #1                      // =1
	stur	w8, [x29, #-24]
	str	w9, [sp, #8]
	mov	w8, w9
	cmp	w8, #7                          // =7
	b.le	.LBB177_30
	b	.LBB177_27
.LBB177_31:                             // %sw.bb36
                                        //   in Loop: Header=BB177_3 Depth=1
	ldur	x8, [x29, #-32]
	ldr	x8, [x8, #88]
	stur	wzr, [x29, #-24]
	str	x8, [sp, #16]
	mov	w8, wzr
	cmp	w8, #63                         // =63
	b.gt	.LBB177_2
.LBB177_32:                             // %for.body41
                                        //   Parent Loop BB177_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursw	x8, [x29, #-24]
	ldp	x11, x9, [sp, #16]
	lsl	x10, x8, #1
	ldrh	w9, [x9, x10]
	ldrsh	x10, [x21, x10]
	madd	x9, x9, x10, x22
	lsr	x9, x9, #12
	str	w9, [x11, x8, lsl #2]
	ldur	w8, [x29, #-24]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-24]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB177_32
	b	.LBB177_2
.LBB177_33:                             // %for.end93
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176                    // =176
	ret
.Lfunc_end177:
	.size	start_pass, .Lfunc_end177-start_pass
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI177_0:
	.byte	(.LBB177_6-.LBB177_6)>>2
	.byte	(.LBB177_7-.LBB177_6)>>2
	.byte	(.LBB177_8-.LBB177_6)>>2
	.byte	(.LBB177_9-.LBB177_6)>>2
	.byte	(.LBB177_8-.LBB177_6)>>2
	.byte	(.LBB177_8-.LBB177_6)>>2
	.byte	(.LBB177_8-.LBB177_6)>>2
	.byte	(.LBB177_10-.LBB177_6)>>2
                                        // -- End function
	.text
	.globl	jpeg_make_d_derived_tbl         // -- Begin function jpeg_make_d_derived_tbl
	.p2align	2
	.type	jpeg_make_d_derived_tbl,@function
jpeg_make_d_derived_tbl:                // @jpeg_make_d_derived_tbl
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x28, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #1360                   // =1360
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w28, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	sub	x19, x29, #32                   // =32
	stp	x1, x0, [x19, #16]
	str	x2, [x19, #8]
	ldr	x8, [x2]
	cbnz	x8, .LBB178_2
// %bb.1:                               // %if.then
	ldr	x0, [x19, #24]
	mov	w1, #1
	mov	w2, #1640
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x19, #8]
	str	x0, [x8]
.LBB178_2:                              // %if.end
	ldp	x8, x9, [x19, #8]
	ldr	x10, [x8]
	mov	w8, #1
	str	x10, [x19]
	str	x9, [x10, #352]
	add	x9, sp, #1044                   // =1044
	stur	wzr, [x29, #-36]
	stur	w8, [x29, #-44]
	b	.LBB178_4
.LBB178_3:                              // %for.inc10
                                        //   in Loop: Header=BB178_4 Depth=1
	add	w10, w10, #1                    // =1
	stur	w10, [x29, #-44]
.LBB178_4:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB178_6 Depth 2
	ldur	w10, [x29, #-44]
	cmp	w10, #16                        // =16
	b.gt	.LBB178_8
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB178_4 Depth=1
	stur	w8, [x29, #-40]
.LBB178_6:                              // %for.cond2
                                        //   Parent Loop BB178_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x11, [x19, #16]
	ldp	w10, w12, [x29, #-44]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	ldrb	w11, [x11, x10]
	cmp	w12, w11
	b.gt	.LBB178_3
// %bb.7:                               // %for.body5
                                        //   in Loop: Header=BB178_6 Depth=2
	ldp	w12, w11, [x29, #-40]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	add	w13, w11, #1                    // =1
	strb	w10, [x9, x11]
	add	w10, w12, #1                    // =1
	stp	w10, w13, [x29, #-40]
	b	.LBB178_6
.LBB178_8:                              // %for.end12
	ldursw	x9, [x29, #-36]
	add	x8, sp, #1044                   // =1044
	str	wzr, [sp, #12]
	stur	wzr, [x29, #-36]
	strb	wzr, [x8, x9]
	ldrb	w9, [sp, #1044]
	stur	w9, [x29, #-48]
	add	x9, sp, #16                     // =16
	ldursw	x10, [x29, #-36]
	ldrb	w10, [x8, x10]
	cbnz	w10, .LBB178_10
	b	.LBB178_12
.LBB178_9:                              // %while.body25
                                        //   in Loop: Header=BB178_10 Depth=1
	ldursw	x11, [x29, #-36]
	ldr	w12, [sp, #12]
	add	w13, w11, #1                    // =1
	str	w10, [x9, x11, lsl #2]
	add	w10, w12, #1                    // =1
	stur	w13, [x29, #-36]
	str	w10, [sp, #12]
.LBB178_10:                             // %while.cond19
                                        // =>This Inner Loop Header: Depth=1
	ldursw	x10, [x29, #-36]
	ldur	w12, [x29, #-48]
	ldrb	w11, [x8, x10]
	ldr	w10, [sp, #12]
	cmp	w11, w12
	b.eq	.LBB178_9
// %bb.11:                              // %while.end
                                        //   in Loop: Header=BB178_10 Depth=1
	ldur	w11, [x29, #-48]
	lsl	w10, w10, #1
	str	w10, [sp, #12]
	add	w10, w11, #1                    // =1
	stur	w10, [x29, #-48]
	ldursw	x10, [x29, #-36]
	ldrb	w10, [x8, x10]
	cbnz	w10, .LBB178_10
.LBB178_12:                             // %while.end31
	mov	w8, #1
	stur	w8, [x29, #-44]
	add	x8, sp, #16                     // =16
	stur	wzr, [x29, #-36]
	b	.LBB178_15
.LBB178_13:                             // %if.else
                                        //   in Loop: Header=BB178_15 Depth=1
	ldr	x10, [x19]
	ldur	w9, [x29, #-44]
	add	x11, x10, #136                  // =136
	mov	x10, #-1
.LBB178_14:                             // %if.end60
                                        //   in Loop: Header=BB178_15 Depth=1
	str	x10, [x11, w9, sxtw #3]
	ldur	w9, [x29, #-44]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-44]
.LBB178_15:                             // %for.cond32
                                        // =>This Inner Loop Header: Depth=1
	ldur	w9, [x29, #-44]
	cmp	w9, #16                         // =16
	b.gt	.LBB178_18
// %bb.16:                              // %for.body35
                                        //   in Loop: Header=BB178_15 Depth=1
	ldr	x9, [x19, #16]
	ldursw	x10, [x29, #-44]
	ldrb	w9, [x9, x10]
	cbz	w9, .LBB178_13
// %bb.17:                              // %if.then40
                                        //   in Loop: Header=BB178_15 Depth=1
	ldr	x9, [x19]
	ldursw	x10, [x29, #-44]
	ldur	w11, [x29, #-36]
	add	x9, x9, x10, lsl #2
	str	w11, [x9, #280]
	ldursw	x9, [x29, #-36]
	ldr	x10, [x19]
	ldursw	x11, [x29, #-44]
	ldr	w9, [x8, x9, lsl #2]
	str	x9, [x10, x11, lsl #3]
	ldr	x10, [x19, #16]
	ldursw	x9, [x29, #-44]
	ldur	w11, [x29, #-36]
	ldr	x12, [x19]
	ldrb	w10, [x10, x9]
	add	w11, w11, w10
	add	x10, x8, w11, sxtw #2
	ldur	w10, [x10, #-4]
	stur	w11, [x29, #-36]
	add	x11, x12, #136                  // =136
	b	.LBB178_14
.LBB178_18:                             // %for.end63
	ldr	x8, [x19]
	mov	w9, #1048575
	mov	w2, #1024
	mov	w1, wzr
	str	x9, [x8, #272]
	ldr	x8, [x19]
	add	x0, x8, #360                    // =360
	bl	memset
	mov	w8, #1
	add	x9, sp, #16                     // =16
	mov	w10, #8
	stur	wzr, [x29, #-36]
	stur	w8, [x29, #-44]
	b	.LBB178_20
.LBB178_19:                             // %for.inc102
                                        //   in Loop: Header=BB178_20 Depth=1
	ldur	w11, [x29, #-44]
	add	w11, w11, #1                    // =1
	stur	w11, [x29, #-44]
.LBB178_20:                             // %for.cond66
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB178_23 Depth 2
                                        //       Child Loop BB178_25 Depth 3
	ldur	w11, [x29, #-44]
	cmp	w11, #8                         // =8
	b.gt	.LBB178_26
// %bb.21:                              // %for.body69
                                        //   in Loop: Header=BB178_20 Depth=1
	stur	w8, [x29, #-40]
	b	.LBB178_23
.LBB178_22:                             // %for.inc98
                                        //   in Loop: Header=BB178_23 Depth=2
	ldp	w11, w12, [x29, #-40]
	add	w11, w11, #1                    // =1
	add	w12, w12, #1                    // =1
	stp	w11, w12, [x29, #-40]
.LBB178_23:                             // %for.cond70
                                        //   Parent Loop BB178_20 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB178_25 Depth 3
	ldr	x11, [x19, #16]
	ldp	w12, w13, [x29, #-44]
                                        // kill: def $w12 killed $w12 def $x12
	sxtw	x12, w12
	ldrb	w11, [x11, x12]
	cmp	w13, w11
	b.gt	.LBB178_19
// %bb.24:                              // %for.body77
                                        //   in Loop: Header=BB178_23 Depth=2
	ldursw	x11, [x29, #-36]
	ldur	w12, [x29, #-44]
	ldr	w11, [x9, x11, lsl #2]
	sub	w12, w10, w12
	lsl	w13, w8, w12
	lsl	w11, w11, w12
	stp	w13, w11, [x29, #-56]
	ldur	w11, [x29, #-56]
	cmp	w11, #1                         // =1
	b.lt	.LBB178_22
.LBB178_25:                             // %for.body87
                                        //   Parent Loop BB178_20 Depth=1
                                        //     Parent Loop BB178_23 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x11, [x19]
	ldursw	x12, [x29, #-52]
	ldur	w13, [x29, #-44]
	add	x11, x11, x12, lsl #2
	str	w13, [x11, #360]
	ldr	x11, [x19, #16]
	ldursw	x12, [x29, #-36]
	ldr	x13, [x19]
	add	x11, x11, x12
	ldursw	x12, [x29, #-52]
	ldrb	w11, [x11, #17]
	add	x12, x13, x12
	strb	w11, [x12, #1384]
	ldp	w12, w11, [x29, #-56]
	add	w11, w11, #1                    // =1
	sub	w12, w12, #1                    // =1
	stp	w12, w11, [x29, #-56]
	ldur	w11, [x29, #-56]
	cmp	w11, #1                         // =1
	b.ge	.LBB178_25
	b	.LBB178_22
.LBB178_26:                             // %for.end104
	add	sp, sp, #1360                   // =1360
	ldp	x28, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end178:
	.size	jpeg_make_d_derived_tbl, .Lfunc_end178-jpeg_make_d_derived_tbl
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_fill_bit_buffer            // -- Begin function jpeg_fill_bit_buffer
	.p2align	2
	.type	jpeg_fill_bit_buffer,@function
jpeg_fill_bit_buffer:                   // @jpeg_fill_bit_buffer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x21, [sp, #64]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	stp	x1, x0, [x29, #-16]
	str	w2, [x29, #24]
	stur	w3, [x29, #-20]
	ldp	x9, x8, [x0]
	mov	w19, #113
	mov	w20, #1
	mov	w21, #255
	stp	x8, x9, [sp, #8]
	b	.LBB179_3
.LBB179_1:                              // %if.end57
                                        //   in Loop: Header=BB179_3 Depth=1
	str	wzr, [sp, #4]
.LBB179_2:                              // %if.end59
                                        //   in Loop: Header=BB179_3 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #4]
	ldr	w10, [x29, #24]
	orr	x8, x9, x8, lsl #8
	add	w9, w10, #8                     // =8
	stur	x8, [x29, #-16]
	str	w9, [x29, #24]
.LBB179_3:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB179_13 Depth 2
	ldr	w8, [x29, #24]
	cmp	w8, #24                         // =24
	b.gt	.LBB179_20
// %bb.4:                               // %while.body
                                        //   in Loop: Header=BB179_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #16]
	cbz	w8, .LBB179_8
// %bb.5:                               // %no_more_data
                                        //   in Loop: Header=BB179_3 Depth=1
	ldr	w8, [x29, #24]
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.ge	.LBB179_20
.LBB179_6:                              // %if.end49
                                        //   in Loop: Header=BB179_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #48]
	ldr	w8, [x8]
	cbnz	w8, .LBB179_1
// %bb.7:                               // %if.then51
                                        //   in Loop: Header=BB179_3 Depth=1
	ldur	x8, [x29, #-8]
	mov	w1, #-1
	ldr	x8, [x8, #40]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #40]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #48]
	str	w20, [x8]
	b	.LBB179_1
.LBB179_8:                              // %if.end
                                        //   in Loop: Header=BB179_3 Depth=1
	ldr	x8, [sp, #8]
	cbnz	x8, .LBB179_11
// %bb.9:                               // %if.then5
                                        //   in Loop: Header=BB179_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #40]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB179_19
// %bb.10:                              // %if.end8
                                        //   in Loop: Header=BB179_3 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #40]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	ldr	x8, [x8, #32]
	ldr	x9, [x9]
	ldr	x8, [x8, #8]
	stp	x8, x9, [sp, #8]
.LBB179_11:                             // %if.end15
                                        //   in Loop: Header=BB179_3 Depth=1
	ldp	x8, x9, [sp, #8]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	cmp	w8, #255                        // =255
	str	w8, [sp, #4]
	b.eq	.LBB179_13
	b	.LBB179_2
.LBB179_12:                             // %if.end36
                                        //   in Loop: Header=BB179_13 Depth=2
	ldp	x8, x9, [sp, #8]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	cmp	w8, #255                        // =255
	str	w8, [sp, #4]
	b.ne	.LBB179_16
.LBB179_13:                             // %do.body
                                        //   Parent Loop BB179_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #8]
	cbnz	x8, .LBB179_12
// %bb.14:                              // %if.then21
                                        //   in Loop: Header=BB179_13 Depth=2
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #40]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB179_19
// %bb.15:                              // %if.end29
                                        //   in Loop: Header=BB179_13 Depth=2
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #40]
	ldr	x8, [x8, #40]
	ldr	x9, [x9, #32]
	ldr	x8, [x8, #32]
	ldr	x9, [x9]
	ldr	x8, [x8, #8]
	stp	x8, x9, [sp, #8]
	b	.LBB179_12
.LBB179_16:                             // %do.end
                                        //   in Loop: Header=BB179_3 Depth=1
	ldr	w8, [sp, #4]
	cbz	w8, .LBB179_18
// %bb.17:                              // %if.else
                                        //   in Loop: Header=BB179_3 Depth=1
	ldr	w8, [sp, #4]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #16]
	ldr	w8, [x29, #24]
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.lt	.LBB179_6
	b	.LBB179_20
.LBB179_18:                             // %if.then44
                                        //   in Loop: Header=BB179_3 Depth=1
	str	w21, [sp, #4]
	b	.LBB179_2
.LBB179_19:                             // %if.then7
	mov	w8, #1
	str	wzr, [x29, #28]
	str	w8, [sp]
	b	.LBB179_21
.LBB179_20:                             // %while.end
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-8]
	mov	w10, #1
	str	x8, [x9]
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	str	x8, [x9, #8]
	ldp	x8, x9, [x29, #-16]
	str	x8, [x9, #24]
	ldr	w8, [x29, #24]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #32]
	str	w10, [x29, #28]
	str	w10, [sp]
.LBB179_21:                             // %cleanup
	ldr	w0, [x29, #28]
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldr	x21, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end179:
	.size	jpeg_fill_bit_buffer, .Lfunc_end179-jpeg_fill_bit_buffer
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_huff_decode                // -- Begin function jpeg_huff_decode
	.p2align	2
	.type	jpeg_huff_decode,@function
jpeg_huff_decode:                       // @jpeg_huff_decode
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	cmp	w2, w4
	stp	x1, x0, [x29, #-24]
	stur	w2, [x29, #-28]
	str	x3, [sp, #24]
	stp	w4, w4, [sp, #16]
	b.ge	.LBB180_3
// %bb.1:                               // %if.then
	ldp	x1, x0, [x29, #-24]
	ldur	w2, [x29, #-28]
	ldr	w3, [sp, #16]
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB180_11
// %bb.2:                               // %if.end
	ldur	x8, [x29, #-16]
	ldr	x9, [x8, #24]
	stur	x9, [x29, #-24]
	ldr	w8, [x8, #32]
	stur	w8, [x29, #-28]
.LBB180_3:                              // %if.end4
	ldr	w8, [sp, #16]
	ldur	w9, [x29, #-28]
	ldur	x10, [x29, #-24]
	mov	w11, #1
	sub	w9, w9, w8
	lsl	w8, w11, w8
	stur	w9, [x29, #-28]
	asr	x9, x10, x9
	sub	w8, w8, #1                      // =1
	and	w8, w9, w8
	sxtw	x8, w8
	str	x8, [sp, #8]
	b	.LBB180_5
.LBB180_4:                              // %if.end19
                                        //   in Loop: Header=BB180_5 Depth=1
	ldur	w8, [x29, #-28]
	ldur	x10, [x29, #-24]
	ldr	w9, [sp, #16]
	ldr	x11, [sp, #8]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
	lsr	x8, x10, x8
	and	w8, w8, #0x1
	add	w9, w9, #1                      // =1
	orr	x8, x11, x8
	str	x8, [sp, #8]
	str	w9, [sp, #16]
.LBB180_5:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	ldr	x10, [sp, #8]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #136]
	cmp	x10, x8
	b.le	.LBB180_9
// %bb.6:                               // %while.body
                                        //   in Loop: Header=BB180_5 Depth=1
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-28]
	lsl	x8, x8, #1
	cmp	w9, #0                          // =0
	str	x8, [sp, #8]
	b.gt	.LBB180_4
// %bb.7:                               // %if.then12
                                        //   in Loop: Header=BB180_5 Depth=1
	ldp	x1, x0, [x29, #-24]
	ldur	w2, [x29, #-28]
	mov	w3, #1
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB180_11
// %bb.8:                               // %if.end16
                                        //   in Loop: Header=BB180_5 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [x8, #24]
	stur	x9, [x29, #-24]
	ldr	w8, [x8, #32]
	stur	w8, [x29, #-28]
	b	.LBB180_4
.LBB180_9:                              // %while.end
	ldp	x8, x9, [x29, #-24]
	str	x8, [x9, #24]
	ldur	w8, [x29, #-28]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #32]
	ldr	w8, [sp, #16]
	cmp	w8, #17                         // =17
	b.lt	.LBB180_12
// %bb.10:                              // %if.then30
	ldur	x8, [x29, #-16]
	mov	w9, #114
	mov	w1, #-1
	ldr	x8, [x8, #40]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	x0, [x8, #40]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB180_11:                             // %if.then1
	mov	w8, #-1
	b	.LBB180_13
.LBB180_12:                             // %if.end34
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #16]
	ldr	w10, [sp, #8]
	add	x11, x8, x9, lsl #2
	ldr	x9, [x8, x9, lsl #3]
	ldrsw	x11, [x11, #280]
	ldr	x8, [x8, #352]
	sub	w9, w10, w9
	add	x9, x11, w9, sxtw
	add	x8, x8, x9
	ldrb	w8, [x8, #17]
.LBB180_13:                             // %cleanup
	mov	w9, #1
	stur	w8, [x29, #-4]
	str	w9, [sp, #4]
	mov	w0, w8
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end180:
	.size	jpeg_huff_decode, .Lfunc_end180-jpeg_huff_decode
	.cfi_endproc
                                        // -- End function
	.globl	jinit_huff_decoder              // -- Begin function jinit_huff_decoder
	.p2align	2
	.type	jinit_huff_decoder,@function
jinit_huff_decoder:                     // @jinit_huff_decoder
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #120
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_huff_decoder
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_huff_decoder
	str	x0, [x8, #576]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, decode_mcu
	mov	x8, x0
	add	x9, x9, :lo12:decode_mcu
	str	x9, [x8, #8]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB181_2
.LBB181_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #88]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #56]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB181_1
.LBB181_2:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end181:
	.size	jinit_huff_decoder, .Lfunc_end181-jinit_huff_decoder
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_huff_decoder
	.type	start_pass_huff_decoder,@function
start_pass_huff_decoder:                // @start_pass_huff_decoder
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #576]
	stur	x8, [x29, #-8]
	ldr	w8, [x0, #508]
	cbnz	w8, .LBB182_4
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #512]
	cmp	w8, #63                         // =63
	b.ne	.LBB182_4
// %bb.2:                               // %lor.lhs.false3
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #516]
	cbnz	w8, .LBB182_4
// %bb.3:                               // %lor.lhs.false5
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #520]
	cbz	w8, .LBB182_5
.LBB182_4:                              // %if.then
	ldr	x8, [x29, #24]
	mov	w9, #118
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB182_5:                              // %if.end
	mov	w19, #49
	stur	wzr, [x29, #-12]
	b	.LBB182_8
.LBB182_6:                              // %if.then30
                                        //   in Loop: Header=BB182_8 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB182_7:                              // %if.end39
                                        //   in Loop: Header=BB182_8 Depth=1
	ldrsw	x8, [sp, #16]
	ldr	x0, [x29, #24]
	ldur	x9, [x29, #-8]
	lsl	x8, x8, #3
	add	x10, x0, x8
	ldr	x1, [x10, #224]
	add	x8, x9, x8
	add	x2, x8, #56                     // =56
	bl	jpeg_make_d_derived_tbl
	ldrsw	x8, [sp, #12]
	ldr	x0, [x29, #24]
	ldur	x9, [x29, #-8]
	lsl	x8, x8, #3
	add	x10, x0, x8
	ldr	x1, [x10, #256]
	add	x8, x9, x8
	add	x2, x8, #88                     // =88
	bl	jpeg_make_d_derived_tbl
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #32]
	ldur	w8, [x29, #-12]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-12]
.LBB182_8:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB182_16
// %bb.9:                               // %for.body
                                        //   in Loop: Header=BB182_8 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #3
	ldr	x9, [x8, #424]
	str	x9, [sp]
	ldp	w8, w9, [x9, #20]
	stp	w9, w8, [sp, #12]
	tbnz	w8, #31, .LBB182_12
// %bb.10:                              // %for.body
                                        //   in Loop: Header=BB182_8 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB182_12
// %bb.11:                              // %lor.lhs.false12
                                        //   in Loop: Header=BB182_8 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #224]
	cbnz	x8, .LBB182_13
.LBB182_12:                             // %if.then16
                                        //   in Loop: Header=BB182_8 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #16]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB182_13:                             // %if.end22
                                        //   in Loop: Header=BB182_8 Depth=1
	ldr	w8, [sp, #12]
	tbnz	w8, #31, .LBB182_6
// %bb.14:                              // %if.end22
                                        //   in Loop: Header=BB182_8 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB182_6
// %bb.15:                              // %lor.lhs.false26
                                        //   in Loop: Header=BB182_8 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #256]
	cbnz	x8, .LBB182_7
	b	.LBB182_6
.LBB182_16:                             // %for.end
	ldur	x8, [x29, #-8]
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #16]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #28]
	ldr	x8, [x29, #24]
	ldur	x9, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldr	w8, [x8, #360]
	str	w8, [x9, #48]
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end182:
	.size	start_pass_huff_decoder, .Lfunc_end182-start_pass_huff_decoder
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decode_mcu
	.type	decode_mcu,@function
decode_mcu:                             // @decode_mcu
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #288                    // =288
	stp	x29, x30, [sp, #208]            // 16-byte Folded Spill
	stp	x28, x25, [sp, #224]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #240]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #256]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #272]            // 16-byte Folded Spill
	add	x29, sp, #208                   // =208
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w28, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	sub	x19, x29, #64                   // =64
	stp	x1, x0, [x19, #40]
	ldr	x8, [x0, #576]
	str	x8, [x19, #32]
	ldr	w8, [x0, #360]
	cbz	w8, .LBB183_3
// %bb.1:                               // %if.then
	ldr	x8, [x19, #32]
	ldr	w8, [x8, #48]
	cbnz	w8, .LBB183_3
// %bb.2:                               // %if.then2
	ldr	x0, [x19, #48]
	bl	process_restart
	cbz	w0, .LBB183_67
.LBB183_3:                              // %if.end6
	ldr	x8, [x19, #48]
	adrp	x21, extend_test
	adrp	x22, extend_offset
	adrp	x24, jpeg_natural_order
	str	x8, [sp, #112]
	ldr	x9, [x8, #32]
	mov	w20, #1
	add	x21, x21, :lo12:extend_test
	add	x22, x22, :lo12:extend_offset
	ldr	x10, [x9]
	ldr	x9, [x8, #32]
	add	x23, sp, #48                    // =48
	add	x24, x24, :lo12:jpeg_natural_order
	mov	w25, #9
	ldr	x9, [x9, #8]
	stp	x10, x9, [sp, #72]
	ldr	w8, [x8, #524]
	ldr	x9, [x19, #32]
	ldr	x10, [x19, #32]
	str	w8, [sp, #88]
	ldr	x8, [x9, #16]
	stur	x8, [x29, #-72]
	ldr	w8, [x9, #24]
	add	x9, x9, #28                     // =28
	str	x9, [sp, #120]
	stur	w8, [x29, #-76]
	ldr	q0, [x10, #32]
	stur	wzr, [x29, #-48]
	str	q0, [sp, #48]
.LBB183_4:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB183_49 Depth 2
                                        //     Child Loop BB183_27 Depth 2
	ldr	x8, [x19, #48]
	ldur	w9, [x29, #-48]
	ldr	w8, [x8, #464]
	cmp	w9, w8
	b.ge	.LBB183_69
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB183_4 Depth=1
	ldursw	x8, [x29, #-48]
	ldp	x10, x9, [x19, #32]
	ldr	x11, [x19, #48]
	ldr	x9, [x9, x8, lsl #3]
	add	x8, x11, x8, lsl #2
	str	x9, [x19]
	ldrsw	x8, [x8, #468]
	stur	w8, [x29, #-52]
	add	x8, x11, x8, lsl #3
	ldr	x8, [x8, #424]
	str	x8, [sp, #24]
	ldpsw	x9, x8, [x8, #20]
	add	x9, x10, x9, lsl #3
	ldr	x11, [x9, #56]
	add	x8, x10, x8, lsl #3
	ldur	w9, [x29, #-76]
	ldr	x8, [x8, #88]
	cmp	w9, #7                          // =7
	stp	x8, x11, [sp, #32]
	b.gt	.LBB183_9
// %bb.6:                               // %if.then26
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	add	x0, sp, #72                     // =72
	mov	w3, wzr
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB183_14
// %bb.7:                               // %if.end30
                                        //   in Loop: Header=BB183_4 Depth=1
	ldr	w9, [sp, #104]
	ldr	x8, [sp, #96]
	cmp	w9, #7                          // =7
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b.gt	.LBB183_9
// %bb.8:                               // %if.then34
                                        //   in Loop: Header=BB183_4 Depth=1
	str	w20, [sp, #16]
	b	.LBB183_12
.LBB183_9:                              // %if.end36
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	ldr	x10, [sp, #40]
	sub	w8, w8, #8                      // =8
	asr	x8, x9, x8
	and	w8, w8, #0xff
	str	w8, [sp, #12]
	add	x8, x10, w8, uxtw #2
	ldr	w8, [x8, #360]
	str	w8, [sp, #16]
	cbz	w8, .LBB183_11
// %bb.10:                              // %if.then41
                                        //   in Loop: Header=BB183_4 Depth=1
	ldp	w11, w8, [sp, #12]
	ldur	w9, [x29, #-76]
	ldr	x10, [sp, #40]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
	add	x8, x10, x11
	ldrb	w8, [x8, #1384]
	stur	w8, [x29, #-36]
	str	wzr, [sp, #20]
	mov	w8, wzr
	cbz	w8, .LBB183_15
	b	.LBB183_68
.LBB183_11:                             // %if.else
                                        //   in Loop: Header=BB183_4 Depth=1
	str	w25, [sp, #16]
.LBB183_12:                             // %label1
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldr	x3, [sp, #40]
	ldr	w4, [sp, #16]
	add	x0, sp, #72                     // =72
	bl	jpeg_huff_decode
	stur	w0, [x29, #-36]
	tbnz	w0, #31, .LBB183_14
// %bb.13:                              // %if.end50
                                        //   in Loop: Header=BB183_4 Depth=1
	ldr	x8, [sp, #96]
	ldr	w9, [sp, #104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	str	wzr, [sp, #20]
	mov	w8, wzr
	cbz	w8, .LBB183_15
	b	.LBB183_68
.LBB183_14:                             // %if.then29
                                        //   in Loop: Header=BB183_4 Depth=1
	stur	wzr, [x29, #-4]
	str	w20, [sp, #20]
	mov	w8, w20
	cbnz	w8, .LBB183_68
.LBB183_15:                             // %cleanup.cont
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	w8, [x29, #-36]
	cbz	w8, .LBB183_22
// %bb.16:                              // %if.then56
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-36]
	cmp	w8, w9
	b.ge	.LBB183_19
// %bb.17:                              // %if.then59
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-36]
	add	x0, sp, #72                     // =72
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB183_67
// %bb.18:                              // %if.end63
                                        //   in Loop: Header=BB183_4 Depth=1
	ldr	x8, [sp, #96]
	ldr	w9, [sp, #104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB183_19:                             // %if.end66
                                        //   in Loop: Header=BB183_4 Depth=1
	ldursw	x10, [x29, #-36]
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-36]
	ldur	x11, [x29, #-72]
	ldr	w10, [x21, x10, lsl #2]
	sub	w8, w8, w9
	lsl	w9, w20, w9
	stur	w8, [x29, #-76]
	asr	x8, x11, x8
	sub	w9, w9, #1                      // =1
	and	w8, w8, w9
	cmp	w8, w10
	stur	w8, [x29, #-44]
	b.ge	.LBB183_21
// %bb.20:                              // %cond.true
                                        //   in Loop: Header=BB183_4 Depth=1
	ldursw	x9, [x29, #-36]
	ldr	w9, [x22, x9, lsl #2]
	add	w8, w8, w9
.LBB183_21:                             // %cond.end
                                        //   in Loop: Header=BB183_4 Depth=1
	stur	w8, [x29, #-36]
.LBB183_22:                             // %if.end79
                                        //   in Loop: Header=BB183_4 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #48]
	cbz	w8, .LBB183_46
// %bb.23:                              // %if.end82
                                        //   in Loop: Header=BB183_4 Depth=1
	ldursw	x8, [x29, #-52]
	ldur	w9, [x29, #-36]
	ldr	x11, [x19]
	lsl	x8, x8, #2
	ldr	w10, [x23, x8]
	add	w9, w9, w10
	stur	w9, [x29, #-36]
	str	w9, [x23, x8]
	strh	w9, [x11]
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #36]
	cmp	w8, #2                          // =2
	b.lt	.LBB183_46
// %bb.24:                              // %if.then93
                                        //   in Loop: Header=BB183_4 Depth=1
	stur	w20, [x29, #-40]
	b	.LBB183_27
.LBB183_25:                             // %cond.end174
                                        //   in Loop: Header=BB183_27 Depth=2
	ldursw	x9, [x29, #-40]
	ldr	x10, [x19]
	stur	w8, [x29, #-36]
	ldrsw	x9, [x24, x9, lsl #2]
	strh	w8, [x10, x9, lsl #1]
.LBB183_26:                             // %for.inc
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
.LBB183_27:                             // %for.cond94
                                        //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w8, [x29, #-40]
	cmp	w8, #63                         // =63
	b.gt	.LBB183_66
// %bb.28:                              // %for.body97
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	w8, [x29, #-76]
	cmp	w8, #7                          // =7
	b.gt	.LBB183_32
// %bb.29:                              // %if.then102
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	add	x0, sp, #72                     // =72
	mov	w3, wzr
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB183_37
// %bb.30:                              // %if.end106
                                        //   in Loop: Header=BB183_27 Depth=2
	ldr	w9, [sp, #104]
	ldr	x8, [sp, #96]
	cmp	w9, #7                          // =7
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b.gt	.LBB183_32
// %bb.31:                              // %if.then111
                                        //   in Loop: Header=BB183_27 Depth=2
	str	w20, [sp, #16]
	b	.LBB183_35
.LBB183_32:                             // %if.end113
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	ldr	x10, [sp, #32]
	sub	w8, w8, #8                      // =8
	asr	x8, x9, x8
	and	w8, w8, #0xff
	str	w8, [sp, #12]
	add	x8, x10, w8, uxtw #2
	ldr	w8, [x8, #360]
	str	w8, [sp, #16]
	cbz	w8, .LBB183_34
// %bb.33:                              // %if.then124
                                        //   in Loop: Header=BB183_27 Depth=2
	ldp	w11, w8, [sp, #12]
	ldur	w9, [x29, #-76]
	ldr	x10, [sp, #32]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
	add	x8, x10, x11
	ldrb	w8, [x8, #1384]
	stur	w8, [x29, #-36]
	str	wzr, [sp, #20]
	mov	w8, wzr
	cbz	w8, .LBB183_38
	b	.LBB183_68
.LBB183_34:                             // %if.else130
                                        //   in Loop: Header=BB183_27 Depth=2
	str	w25, [sp, #16]
.LBB183_35:                             // %label2
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldr	x3, [sp, #32]
	ldr	w4, [sp, #16]
	add	x0, sp, #72                     // =72
	bl	jpeg_huff_decode
	stur	w0, [x29, #-36]
	tbnz	w0, #31, .LBB183_37
// %bb.36:                              // %if.end135
                                        //   in Loop: Header=BB183_27 Depth=2
	ldr	x8, [sp, #96]
	ldr	w9, [sp, #104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	str	wzr, [sp, #20]
	mov	w8, wzr
	cbz	w8, .LBB183_38
	b	.LBB183_68
.LBB183_37:                             // %if.then105
                                        //   in Loop: Header=BB183_27 Depth=2
	stur	wzr, [x29, #-4]
	str	w20, [sp, #20]
	mov	w8, w20
	cbnz	w8, .LBB183_68
.LBB183_38:                             // %cleanup.cont142
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	w9, [x29, #-36]
	asr	w8, w9, #4
	ands	w9, w9, #0xf
	stur	w8, [x29, #-44]
	stur	w9, [x29, #-36]
	b.eq	.LBB183_44
// %bb.39:                              // %if.then146
                                        //   in Loop: Header=BB183_27 Depth=2
	ldp	w9, w11, [x29, #-40]
	ldur	w10, [x29, #-76]
	add	w8, w9, w8
	cmp	w10, w11
	stur	w8, [x29, #-40]
	b.ge	.LBB183_42
// %bb.40:                              // %if.then150
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-36]
	add	x0, sp, #72                     // =72
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB183_67
// %bb.41:                              // %if.end154
                                        //   in Loop: Header=BB183_27 Depth=2
	ldr	x8, [sp, #96]
	ldr	w9, [sp, #104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB183_42:                             // %if.end157
                                        //   in Loop: Header=BB183_27 Depth=2
	ldursw	x10, [x29, #-36]
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-36]
	ldur	x11, [x29, #-72]
	ldr	w10, [x21, x10, lsl #2]
	sub	w8, w8, w9
	lsl	w9, w20, w9
	stur	w8, [x29, #-76]
	asr	x8, x11, x8
	sub	w9, w9, #1                      // =1
	and	w8, w8, w9
	cmp	w8, w10
	stur	w8, [x29, #-44]
	b.ge	.LBB183_25
// %bb.43:                              // %cond.true169
                                        //   in Loop: Header=BB183_27 Depth=2
	ldursw	x9, [x29, #-36]
	ldr	w9, [x22, x9, lsl #2]
	add	w8, w8, w9
	b	.LBB183_25
.LBB183_44:                             // %if.else181
                                        //   in Loop: Header=BB183_27 Depth=2
	cmp	w8, #15                         // =15
	b.ne	.LBB183_66
// %bb.45:                              // %if.end185
                                        //   in Loop: Header=BB183_27 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #15                     // =15
	stur	w8, [x29, #-40]
	b	.LBB183_26
.LBB183_46:                             // %skip_ACs
                                        //   in Loop: Header=BB183_4 Depth=1
	stur	w20, [x29, #-40]
	b	.LBB183_49
.LBB183_47:                             // %if.end252
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-76]
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
.LBB183_48:                             // %for.inc261
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
.LBB183_49:                             // %for.cond189
                                        //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w8, [x29, #-40]
	cmp	w8, #63                         // =63
	b.gt	.LBB183_66
// %bb.50:                              // %for.body192
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	w8, [x29, #-76]
	cmp	w8, #7                          // =7
	b.gt	.LBB183_54
// %bb.51:                              // %if.then197
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	add	x0, sp, #72                     // =72
	mov	w3, wzr
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB183_59
// %bb.52:                              // %if.end201
                                        //   in Loop: Header=BB183_49 Depth=2
	ldr	w9, [sp, #104]
	ldr	x8, [sp, #96]
	cmp	w9, #7                          // =7
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b.gt	.LBB183_54
// %bb.53:                              // %if.then206
                                        //   in Loop: Header=BB183_49 Depth=2
	str	w20, [sp, #16]
	b	.LBB183_57
.LBB183_54:                             // %if.end208
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	ldr	x10, [sp, #32]
	sub	w8, w8, #8                      // =8
	asr	x8, x9, x8
	and	w8, w8, #0xff
	str	w8, [sp, #12]
	add	x8, x10, w8, uxtw #2
	ldr	w8, [x8, #360]
	str	w8, [sp, #16]
	cbz	w8, .LBB183_56
// %bb.55:                              // %if.then219
                                        //   in Loop: Header=BB183_49 Depth=2
	ldp	w11, w8, [sp, #12]
	ldur	w9, [x29, #-76]
	ldr	x10, [sp, #32]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
	add	x8, x10, x11
	ldrb	w8, [x8, #1384]
	stur	w8, [x29, #-36]
	str	wzr, [sp, #20]
	mov	w8, wzr
	cbz	w8, .LBB183_60
	b	.LBB183_68
.LBB183_56:                             // %if.else225
                                        //   in Loop: Header=BB183_49 Depth=2
	str	w25, [sp, #16]
.LBB183_57:                             // %label3
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldr	x3, [sp, #32]
	ldr	w4, [sp, #16]
	add	x0, sp, #72                     // =72
	bl	jpeg_huff_decode
	stur	w0, [x29, #-36]
	tbnz	w0, #31, .LBB183_59
// %bb.58:                              // %if.end230
                                        //   in Loop: Header=BB183_49 Depth=2
	ldr	x8, [sp, #96]
	ldr	w9, [sp, #104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	str	wzr, [sp, #20]
	mov	w8, wzr
	cbz	w8, .LBB183_60
	b	.LBB183_68
.LBB183_59:                             // %if.then200
                                        //   in Loop: Header=BB183_49 Depth=2
	stur	wzr, [x29, #-4]
	str	w20, [sp, #20]
	mov	w8, w20
	cbnz	w8, .LBB183_68
.LBB183_60:                             // %cleanup.cont237
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	w9, [x29, #-36]
	asr	w8, w9, #4
	ands	w9, w9, #0xf
	stur	w8, [x29, #-44]
	stur	w9, [x29, #-36]
	b.eq	.LBB183_64
// %bb.61:                              // %if.then241
                                        //   in Loop: Header=BB183_49 Depth=2
	ldp	w9, w11, [x29, #-40]
	ldur	w10, [x29, #-76]
	add	w8, w9, w8
	cmp	w10, w11
	stur	w8, [x29, #-40]
	b.ge	.LBB183_47
// %bb.62:                              // %if.then245
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-36]
	add	x0, sp, #72                     // =72
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB183_67
// %bb.63:                              // %if.end249
                                        //   in Loop: Header=BB183_49 Depth=2
	ldr	x8, [sp, #96]
	ldr	w9, [sp, #104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b	.LBB183_47
.LBB183_64:                             // %if.else254
                                        //   in Loop: Header=BB183_49 Depth=2
	cmp	w8, #15                         // =15
	b.ne	.LBB183_66
// %bb.65:                              // %if.end258
                                        //   in Loop: Header=BB183_49 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #15                     // =15
	stur	w8, [x29, #-40]
	b	.LBB183_48
.LBB183_66:                             // %for.inc265
                                        //   in Loop: Header=BB183_4 Depth=1
	ldur	w8, [x29, #-48]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-48]
	b	.LBB183_4
.LBB183_67:                             // %if.then4
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #20]
.LBB183_68:                             // %cleanup282
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #272]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #256]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #240]            // 16-byte Folded Reload
	ldp	x28, x25, [sp, #224]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #208]            // 16-byte Folded Reload
	add	sp, sp, #288                    // =288
	ret
.LBB183_69:                             // %for.end267
	ldr	x8, [x19, #48]
	ldr	x9, [sp, #72]
	mov	w10, #1
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldr	x8, [x19, #48]
	ldr	x9, [sp, #80]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldr	w8, [sp, #88]
	ldr	x9, [x19, #48]
	str	w8, [x9, #524]
	ldur	x8, [x29, #-72]
	ldr	x9, [x19, #32]
	str	x8, [x9, #16]
	ldur	w8, [x29, #-76]
	ldr	x9, [x19, #32]
	str	w8, [x9, #24]
	ldr	x8, [x19, #32]
	ldr	q0, [sp, #48]
	str	q0, [x8, #32]
	ldr	x8, [x19, #32]
	ldr	w9, [x8, #48]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #48]
	stur	w10, [x29, #-4]
	str	w10, [sp, #20]
	b	.LBB183_68
.Lfunc_end183:
	.size	decode_mcu, .Lfunc_end183-decode_mcu
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function process_restart
	.type	process_restart,@function
process_restart:                        // @process_restart
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #576]
	stp	x8, x0, [sp, #8]
	ldr	x9, [x0, #568]
	ldr	w8, [x8, #24]
	ldr	w10, [x9, #172]
	add	w11, w8, #7                     // =7
	cmp	w8, #0                          // =0
	csel	w8, w11, w8, lt
	add	w8, w10, w8, asr #3
	str	w8, [x9, #172]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldr	x8, [x0, #568]
	ldr	x8, [x8, #16]
	blr	x8
	cbz	w0, .LBB184_5
// %bb.1:                               // %if.end
	str	wzr, [sp, #4]
.LBB184_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB184_4
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB184_2 Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #4]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #32]
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b	.LBB184_2
.LBB184_4:                              // %for.end
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8, #360]
	str	w8, [x9, #48]
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	wzr, [x8, #28]
	stur	w9, [x29, #-4]
	str	w9, [sp]
	mov	w0, w9
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB184_5:                              // %if.then
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp]
	mov	w0, wzr
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end184:
	.size	process_restart, .Lfunc_end184-process_restart
	.cfi_endproc
                                        // -- End function
	.globl	jinit_input_controller          // -- Begin function jinit_input_controller
	.p2align	2
	.type	jinit_input_controller,@function
jinit_input_controller:                 // @jinit_input_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w2, #48
	mov	w1, wzr
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, consume_markers
	str	x0, [sp]
	add	x9, x9, :lo12:consume_markers
	str	x0, [x8, #560]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, reset_input_controller
	mov	x8, x0
	add	x9, x9, :lo12:reset_input_controller
	str	x9, [x8, #8]
	adrp	x9, start_input_pass.57
	mov	x8, x0
	add	x9, x9, :lo12:start_input_pass.57
	str	x9, [x8, #16]
	adrp	x9, finish_input_pass
	mov	x8, x0
	add	x9, x9, :lo12:finish_input_pass
	str	x9, [x8, #24]
	mov	x8, x0
	str	wzr, [x8, #32]
	mov	x8, x0
	str	wzr, [x8, #36]
	ldr	x8, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	mov	w9, #1
	str	w9, [x8, #40]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end185:
	.size	jinit_input_controller, .Lfunc_end185-jinit_input_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function consume_markers
	.type	consume_markers,@function
consume_markers:                        // @consume_markers
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #560]
	stp	x8, x0, [sp, #8]
	ldr	w8, [x8, #36]
	cbz	w8, .LBB186_2
// %bb.1:                               // %if.then
	mov	w8, #2
	b	.LBB186_15
.LBB186_2:                              // %if.end
	ldr	x0, [sp, #16]
	ldr	x8, [x0, #568]
	ldr	x8, [x8, #8]
	blr	x8
	cmp	w0, #2                          // =2
	str	w0, [sp, #4]
	b.eq	.LBB186_6
// %bb.3:                               // %if.end
	cmp	w0, #1                          // =1
	b.ne	.LBB186_14
// %bb.4:                               // %sw.bb
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #40]
	cbz	w8, .LBB186_9
// %bb.5:                               // %if.then3
	ldr	x0, [sp, #16]
	bl	initial_setup.59
	ldr	x8, [sp, #8]
	str	wzr, [x8, #40]
	b	.LBB186_14
.LBB186_6:                              // %sw.bb11
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	w9, [x8, #36]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #40]
	ldr	x8, [sp, #16]
	cbz	w9, .LBB186_12
// %bb.7:                               // %if.then16
	ldr	x8, [x8, #568]
	ldr	w8, [x8, #164]
	cbz	w8, .LBB186_14
// %bb.8:                               // %if.then19
	ldr	x8, [sp, #16]
	mov	w9, #58
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB186_14
.LBB186_9:                              // %if.else
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #32]
	cbnz	w8, .LBB186_11
// %bb.10:                              // %if.then7
	ldr	x8, [sp, #16]
	mov	w9, #34
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB186_11:                             // %if.end9
	ldr	x0, [sp, #16]
	bl	start_input_pass.57
	b	.LBB186_14
.LBB186_12:                             // %if.else25
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #172]
	ldr	w9, [x9, #164]
	cmp	w8, w9
	b.le	.LBB186_14
// %bb.13:                              // %if.then26
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #164]
	str	w9, [x8, #172]
.LBB186_14:                             // %sw.epilog
	ldr	w8, [sp, #4]
.LBB186_15:                             // %cleanup
	stur	w8, [x29, #-4]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	mov	w9, #1
	str	w9, [sp], #48
	mov	w0, w8
	ret
.Lfunc_end186:
	.size	consume_markers, .Lfunc_end186-consume_markers
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function reset_input_controller
	.type	reset_input_controller,@function
reset_input_controller:                 // @reset_input_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #560]
	adrp	x9, consume_markers
	add	x9, x9, :lo12:consume_markers
	stp	x8, x0, [sp]
	str	x9, [x8]
	mov	w9, #1
	str	xzr, [x8, #32]
	str	w9, [x8, #40]
	ldr	x8, [x0]
	ldr	x8, [x8, #32]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #568]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	xzr, [x8, #184]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end187:
	.size	reset_input_controller, .Lfunc_end187-reset_input_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_input_pass.57
	.type	start_input_pass.57,@function
start_input_pass.57:                    // @start_input_pass.57
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	per_scan_setup.58
	ldr	x0, [sp, #8]
	bl	latch_quant_tables
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #576]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #544]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	x9, [x8, #544]
	ldr	x8, [x8, #560]
	ldr	x9, [x9, #8]
	str	x9, [x8]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end188:
	.size	start_input_pass.57, .Lfunc_end188-start_input_pass.57
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_input_pass
	.type	finish_input_pass,@function
finish_input_pass:                      // @finish_input_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	ldr	x8, [x0, #560]
	adrp	x9, consume_markers
	add	x9, x9, :lo12:consume_markers
	str	x9, [x8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end189:
	.size	finish_input_pass, .Lfunc_end189-finish_input_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function per_scan_setup.58
	.type	per_scan_setup.58,@function
per_scan_setup.58:                      // @per_scan_setup.58
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	w8, [x0, #416]
	cmp	w8, #1                          // =1
	b.ne	.LBB190_5
// %bb.1:                               // %if.then
	ldr	x8, [x0, #424]
	ldr	x9, [x29, #24]
	str	x8, [sp, #8]
	ldr	w8, [x8, #28]
	str	w8, [x9, #456]
	ldr	x8, [sp, #8]
	ldr	x9, [x29, #24]
	ldr	w8, [x8, #32]
	str	w8, [x9, #460]
	ldr	x9, [sp, #8]
	mov	w8, #1
	str	w8, [x9, #52]
	ldr	x9, [sp, #8]
	str	w8, [x9, #56]
	ldr	x9, [sp, #8]
	str	w8, [x9, #60]
	ldr	x9, [sp, #8]
	ldr	w10, [x9, #36]
	str	w10, [x9, #64]
	ldr	x9, [sp, #8]
	str	w8, [x9, #68]
	ldr	x9, [sp, #8]
	ldr	w10, [x9, #32]
	ldr	w9, [x9, #12]
	udiv	w11, w10, w9
	msub	w9, w11, w9, w10
	stur	w9, [x29, #-12]
	cbnz	w9, .LBB190_3
// %bb.2:                               // %if.then3
	ldr	x9, [sp, #8]
	ldr	w9, [x9, #12]
	stur	w9, [x29, #-12]
.LBB190_3:                              // %if.end
	ldur	w9, [x29, #-12]
	ldr	x10, [sp, #8]
	str	w9, [x10, #72]
	ldr	x9, [x29, #24]
	str	w8, [x9, #464]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #468]
.LBB190_4:                              // %if.end81
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB190_5:                              // %if.else
	ldr	w8, [x0, #416]
	cmp	w8, #1                          // =1
	b.lt	.LBB190_7
// %bb.6:                               // %lor.lhs.false
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #416]
	cmp	w8, #5                          // =5
	b.lt	.LBB190_8
.LBB190_7:                              // %if.then10
	ldr	x8, [x29, #24]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #416]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB190_8:                              // %if.end19
	ldr	x8, [x29, #24]
	ldrsw	x9, [x8, #388]
	ldr	w0, [x8, #40]
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldr	x8, [x29, #24]
	str	w0, [x8, #456]
	ldr	x8, [x29, #24]
	ldrsw	x9, [x8, #392]
	ldr	w0, [x8, #44]
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldr	x8, [x29, #24]
	mov	w19, #11
	str	w0, [x8, #460]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #464]
	stur	wzr, [x29, #-4]
.LBB190_9:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB190_17 Depth 2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB190_4
// %bb.10:                              // %for.body
                                        //   in Loop: Header=BB190_9 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-4]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #424]
	str	x8, [sp, #8]
	ldp	w10, w9, [x8, #8]
	stp	w10, w9, [x8, #52]
	ldp	w9, w10, [x8, #52]
	mul	w11, w9, w10
	ldr	w9, [x8, #52]
	ldr	w10, [x8, #36]
	mul	w9, w9, w10
	stp	w11, w9, [x8, #60]
	ldr	w9, [x8, #28]
	ldr	w8, [x8, #52]
	udiv	w10, w9, w8
	msub	w8, w10, w8, w9
	stur	w8, [x29, #-12]
	cbnz	w8, .LBB190_12
// %bb.11:                              // %if.then51
                                        //   in Loop: Header=BB190_9 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #52]
	stur	w8, [x29, #-12]
.LBB190_12:                             // %if.end53
                                        //   in Loop: Header=BB190_9 Depth=1
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	str	w8, [x9, #68]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #32]
	ldr	w8, [x8, #56]
	udiv	w10, w9, w8
	msub	w8, w10, w8, w9
	stur	w8, [x29, #-12]
	cbnz	w8, .LBB190_14
// %bb.13:                              // %if.then60
                                        //   in Loop: Header=BB190_9 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #56]
	stur	w8, [x29, #-12]
.LBB190_14:                             // %if.end62
                                        //   in Loop: Header=BB190_9 Depth=1
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	str	w8, [x9, #72]
	ldr	x8, [sp, #8]
	ldr	x9, [x29, #24]
	ldr	w8, [x8, #60]
	stur	w8, [x29, #-8]
	ldr	w9, [x9, #464]
	add	w8, w9, w8
	cmp	w8, #11                         // =11
	b.lt	.LBB190_17
// %bb.15:                              // %if.then68
                                        //   in Loop: Header=BB190_9 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB190_17
.LBB190_16:                             // %while.body
                                        //   in Loop: Header=BB190_17 Depth=2
	ldr	x9, [x29, #24]
	ldrsw	x10, [x9, #464]
	add	x11, x9, x10, lsl #2
	add	w10, w10, #1                    // =1
	str	w10, [x9, #464]
	str	w8, [x11, #468]
.LBB190_17:                             // %while.cond
                                        //   Parent Loop BB190_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [x29, #-8]
	subs	w9, w9, #1                      // =1
	stur	w9, [x29, #-8]
	b.ge	.LBB190_16
// %bb.18:                              // %for.inc
                                        //   in Loop: Header=BB190_9 Depth=1
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-4]
	b	.LBB190_9
.Lfunc_end190:
	.size	per_scan_setup.58, .Lfunc_end190-per_scan_setup.58
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function latch_quant_tables
	.type	latch_quant_tables,@function
latch_quant_tables:                     // @latch_quant_tables
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	w19, #51
	str	x0, [x29, #24]
	stur	wzr, [x29, #-4]
	b	.LBB191_4
.LBB191_1:                              // %if.then8
                                        //   in Loop: Header=BB191_4 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-8]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB191_2:                              // %if.end12
                                        //   in Loop: Header=BB191_4 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #1
	mov	w2, #132
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-8]
	str	x0, [sp, #8]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	ldr	w9, [x8, #128]
	ldp	q1, q0, [x8, #96]
	ldr	q2, [x8, #80]
	str	w9, [x0, #128]
	stp	q1, q0, [x0, #96]
	str	q2, [x0, #80]
	ldp	q0, q1, [x8, #48]
	ldp	q3, q2, [x8, #16]
	stp	q0, q1, [x0, #48]
	stp	q3, q2, [x0, #16]
	ldr	q0, [x8]
	str	q0, [x0]
	ldp	x8, x9, [sp, #8]
	str	x8, [x9, #80]
.LBB191_3:                              // %for.inc
                                        //   in Loop: Header=BB191_4 Depth=1
	ldur	w8, [x29, #-4]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-4]
.LBB191_4:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB191_9
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB191_4 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-4]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #424]
	str	x8, [sp, #16]
	ldr	x8, [x8, #80]
	cbnz	x8, .LBB191_3
// %bb.6:                               // %if.end
                                        //   in Loop: Header=BB191_4 Depth=1
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #16]
	stur	w8, [x29, #-8]
	tbnz	w8, #31, .LBB191_1
// %bb.7:                               // %if.end
                                        //   in Loop: Header=BB191_4 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB191_1
// %bb.8:                               // %lor.lhs.false4
                                        //   in Loop: Header=BB191_4 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-8]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	cbnz	x8, .LBB191_2
	b	.LBB191_1
.LBB191_9:                              // %for.end
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end191:
	.size	latch_quant_tables, .Lfunc_end191-latch_quant_tables
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function initial_setup.59
	.type	initial_setup.59,@function
initial_setup.59:                       // @initial_setup.59
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	w9, [x0, #44]
	mov	w8, #65500
	cmp	x9, x8
	b.gt	.LBB192_25
// %bb.1:                               // %lor.lhs.false
	ldur	x9, [x29, #-8]
	mov	w10, #65501
	ldr	w9, [x9, #40]
	cmp	x9, x10
	b.ge	.LBB192_25
// %bb.2:                               // %if.end
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #288]
	cmp	w8, #8                          // =8
	b.ne	.LBB192_26
.LBB192_3:                              // %if.end19
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #11                         // =11
	b.lt	.LBB192_5
.LBB192_4:                              // %if.then22
	ldur	x8, [x29, #-8]
	mov	w9, #24
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	mov	w9, #10
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB192_5:                              // %if.end36
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w19, #16
	str	w9, [x8, #388]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #392]
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-12]
	ldr	x8, [x8, #296]
	str	x8, [sp, #8]
	b	.LBB192_8
.LBB192_6:                              // %cond.false72
                                        //   in Loop: Header=BB192_8 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #12]
.LBB192_7:                              // %cond.end74
                                        //   in Loop: Header=BB192_8 Depth=1
	ldur	x9, [x29, #-8]
	str	w8, [x9, #392]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #8]
.LBB192_8:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB192_19
// %bb.9:                               // %for.body
                                        //   in Loop: Header=BB192_8 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #8]
	cmp	w8, #1                          // =1
	b.lt	.LBB192_13
// %bb.10:                              // %lor.lhs.false42
                                        //   in Loop: Header=BB192_8 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #8]
	cmp	w8, #4                          // =4
	b.gt	.LBB192_13
// %bb.11:                              // %lor.lhs.false46
                                        //   in Loop: Header=BB192_8 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #12]
	cmp	w8, #1                          // =1
	b.lt	.LBB192_13
// %bb.12:                              // %lor.lhs.false49
                                        //   in Loop: Header=BB192_8 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #12]
	cmp	w8, #5                          // =5
	b.lt	.LBB192_14
.LBB192_13:                             // %if.then53
                                        //   in Loop: Header=BB192_8 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB192_14:                             // %if.end58
                                        //   in Loop: Header=BB192_8 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #388]
	ldr	w9, [x9, #8]
	cmp	w8, w9
	b.le	.LBB192_16
// %bb.15:                              // %cond.true
                                        //   in Loop: Header=BB192_8 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #388]
	b	.LBB192_17
.LBB192_16:                             // %cond.false
                                        //   in Loop: Header=BB192_8 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #8]
.LBB192_17:                             // %cond.end
                                        //   in Loop: Header=BB192_8 Depth=1
	ldur	x9, [x29, #-8]
	str	w8, [x9, #388]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #392]
	ldr	w9, [x9, #12]
	cmp	w8, w9
	b.le	.LBB192_6
// %bb.18:                              // %cond.true70
                                        //   in Loop: Header=BB192_8 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #392]
	b	.LBB192_7
.LBB192_19:                             // %for.end
	ldur	x8, [x29, #-8]
	mov	w19, #8
	mov	w20, #1
	str	w19, [x8, #396]
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-12]
	ldr	x8, [x8, #296]
	str	x8, [sp, #8]
.LBB192_20:                             // %for.cond78
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB192_22
// %bb.21:                              // %for.body82
                                        //   in Loop: Header=BB192_20 Depth=1
	ldr	x8, [sp, #8]
	str	w19, [x8, #36]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w10, [x8, #40]
	ldrsw	x9, [x9, #8]
	ldrsw	x8, [x8, #388]
	mul	x0, x10, x9
	lsl	x1, x8, #3
	bl	jdiv_round_up
	ldr	x8, [sp, #8]
	str	w0, [x8, #28]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w10, [x8, #44]
	ldrsw	x9, [x9, #12]
	ldrsw	x8, [x8, #392]
	mul	x0, x10, x9
	lsl	x1, x8, #3
	bl	jdiv_round_up
	ldr	x8, [sp, #8]
	str	w0, [x8, #32]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w10, [x8, #40]
	ldrsw	x9, [x9, #8]
	ldrsw	x1, [x8, #388]
	mul	x0, x10, x9
	bl	jdiv_round_up
	ldr	x8, [sp, #8]
	str	w0, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w10, [x8, #44]
	ldrsw	x9, [x9, #12]
	ldrsw	x1, [x8, #392]
	mul	x0, x10, x9
	bl	jdiv_round_up
	ldr	x8, [sp, #8]
	str	w0, [x8, #44]
	ldr	x8, [sp, #8]
	str	w20, [x8, #48]
	ldr	x8, [sp, #8]
	str	xzr, [x8, #80]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #8]
	b	.LBB192_20
.LBB192_22:                             // %for.end122
	ldur	x8, [x29, #-8]
	ldrsw	x9, [x8, #392]
	ldr	w0, [x8, #44]
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	str	w0, [x8, #400]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #416]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.lt	.LBB192_24
// %bb.23:                              // %lor.lhs.false133
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #304]
	cbz	w8, .LBB192_27
.LBB192_24:                             // %if.then134
	ldur	x8, [x29, #-8]
	mov	w9, #1
	b	.LBB192_28
.LBB192_25:                             // %if.then
	ldur	x9, [x29, #-8]
	mov	w10, #40
	ldr	x9, [x9]
	str	w10, [x9, #40]
	ldur	x9, [x29, #-8]
	ldr	x9, [x9]
	str	w8, [x9, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #288]
	cmp	w8, #8                          // =8
	b.eq	.LBB192_3
.LBB192_26:                             // %if.then9
	ldur	x8, [x29, #-8]
	mov	w9, #13
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #288]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #11                         // =11
	b.ge	.LBB192_4
	b	.LBB192_5
.LBB192_27:                             // %if.else
	ldur	x8, [x29, #-8]
	mov	w9, wzr
.LBB192_28:                             // %if.end137
	ldr	x8, [x8, #560]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w9, [x8, #32]
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end192:
	.size	initial_setup.59, .Lfunc_end192-initial_setup.59
	.cfi_endproc
                                        // -- End function
	.globl	jinit_d_main_controller         // -- Begin function jinit_d_main_controller
	.p2align	2
	.type	jinit_d_main_controller,@function
jinit_d_main_controller:                // @jinit_d_main_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #136
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_main.60
	str	x0, [sp, #24]
	add	x9, x9, :lo12:start_pass_main.60
	str	x0, [x8, #536]
	mov	x8, x0
	str	x9, [x8]
	ldur	w8, [x29, #-12]
	cbz	w8, .LBB193_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB193_2:                              // %if.end
	ldur	x8, [x29, #-8]
	ldr	x9, [x8, #592]
	ldr	w8, [x8, #396]
	ldr	w9, [x9, #16]
	cbz	w9, .LBB193_6
// %bb.3:                               // %if.then3
	cmp	w8, #1                          // =1
	b.gt	.LBB193_5
// %bb.4:                               // %if.then4
	ldur	x8, [x29, #-8]
	mov	w9, #46
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB193_5:                              // %if.end9
	ldur	x0, [x29, #-8]
	bl	alloc_funny_pointers
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #396]
	add	w8, w8, #2                      // =2
.LBB193_6:                              // %if.else
	str	w8, [sp, #12]
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #20]
	ldr	x8, [x8, #296]
	str	x8, [sp]
.LBB193_7:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #20]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB193_9
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB193_7 Depth=1
	ldr	x8, [sp]
	ldur	x0, [x29, #-8]
	ldr	w12, [sp, #12]
	mov	w1, #1
	ldr	w9, [x8, #12]
	ldr	w10, [x8, #36]
	ldr	w11, [x0, #396]
	mul	w9, w9, w10
	sdiv	w9, w9, w11
	str	w9, [sp, #16]
	ldr	x10, [x0, #8]
	ldr	w11, [x8, #28]
	ldr	w8, [x8, #36]
	mul	w3, w9, w12
	ldr	x10, [x10, #16]
	mul	w2, w11, w8
	blr	x10
	ldr	x8, [sp, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #16]
	ldr	w8, [sp, #20]
	ldr	x9, [sp]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #20]
	str	x9, [sp]
	b	.LBB193_7
.LBB193_9:                              // %for.end
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end193:
	.size	jinit_d_main_controller, .Lfunc_end193-jinit_d_main_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_main.60
	.type	start_pass_main.60,@function
start_pass_main.60:                     // @start_pass_main.60
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #536]
	cmp	w1, #2                          // =2
	str	x8, [sp, #8]
	b.eq	.LBB194_4
// %bb.1:                               // %entry
	cbnz	w1, .LBB194_5
// %bb.2:                               // %sw.bb
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #592]
	ldr	w9, [x8, #16]
	ldr	x8, [sp, #8]
	cbz	w9, .LBB194_6
// %bb.3:                               // %if.then
	adrp	x9, process_data_context_main
	add	x9, x9, :lo12:process_data_context_main
	str	x9, [x8, #8]
	ldur	x0, [x29, #-8]
	bl	make_funny_pointers
	ldr	x8, [sp, #8]
	str	wzr, [x8, #120]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #124]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #132]
	b	.LBB194_7
.LBB194_4:                              // %sw.bb3
	ldr	x8, [sp, #8]
	adrp	x9, process_data_crank_post
	add	x9, x9, :lo12:process_data_crank_post
	str	x9, [x8, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB194_5:                              // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB194_6:                              // %if.else
	adrp	x9, process_data_simple_main.61
	add	x9, x9, :lo12:process_data_simple_main.61
	str	x9, [x8, #8]
.LBB194_7:                              // %if.end
	ldr	x8, [sp, #8]
	str	wzr, [x8, #96]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #100]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end194:
	.size	start_pass_main.60, .Lfunc_end194-start_pass_main.60
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function alloc_funny_pointers
	.type	alloc_funny_pointers,@function
alloc_funny_pointers:                   // @alloc_funny_pointers
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #536]
	mov	w1, #1
	stp	x8, x0, [x29, #-16]
	ldr	w8, [x0, #396]
	str	w8, [sp, #20]
	ldr	x8, [x0, #8]
	ldrsw	x9, [x0, #48]
	ldr	x8, [x8]
	lsl	x2, x9, #4
	blr	x8
	ldp	x8, x9, [x29, #-16]
	str	x0, [x8, #104]
	ldur	x8, [x29, #-16]
	ldrsw	x9, [x9, #48]
	ldr	x10, [x8, #104]
	add	x9, x10, x9, lsl #3
	str	x9, [x8, #112]
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-20]
	ldr	x8, [x8, #296]
	str	x8, [sp, #8]
.LBB195_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB195_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB195_1 Depth=1
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	mov	w1, #1
	ldr	w9, [x8, #12]
	ldr	w8, [x8, #36]
	ldr	w10, [x0, #396]
	mul	w8, w9, w8
	sdiv	w8, w8, w10
	str	w8, [sp, #24]
	ldr	x9, [x0, #8]
	ldrsw	x10, [sp, #20]
	sxtw	x8, w8
	ldr	x9, [x9]
	add	x10, x10, #4                    // =4
	mul	x8, x8, x10
	lsl	x2, x8, #4
	blr	x9
	ldrsw	x8, [sp, #24]
	ldur	x9, [x29, #-16]
	ldursw	x10, [x29, #-20]
	add	x8, x0, x8, lsl #3
	str	x8, [sp]
	ldr	x9, [x9, #104]
	str	x8, [x9, x10, lsl #3]
	ldp	w8, w9, [sp, #20]
	ldr	x10, [sp]
	add	w8, w8, #4                      // =4
	mul	w8, w9, w8
	ldur	x9, [x29, #-16]
	add	x8, x10, w8, sxtw #3
	str	x8, [sp]
	ldursw	x10, [x29, #-20]
	ldr	x9, [x9, #112]
	str	x8, [x9, x10, lsl #3]
	ldur	w8, [x29, #-20]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-20]
	str	x9, [sp, #8]
	b	.LBB195_1
.LBB195_3:                              // %for.end
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end195:
	.size	alloc_funny_pointers, .Lfunc_end195-alloc_funny_pointers
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function process_data_context_main
	.type	process_data_context_main,@function
process_data_context_main:              // @process_data_context_main
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	str	x2, [sp, #24]
	str	w3, [sp, #20]
	ldr	x8, [x0, #536]
	str	x8, [sp, #8]
	ldr	w8, [x8, #96]
	cbz	w8, .LBB196_2
// %bb.1:                               // %if.end4
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #124]
	cbnz	w8, .LBB196_4
	b	.LBB196_8
.LBB196_2:                              // %if.then
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldrsw	x10, [x8, #120]
	ldr	x9, [x0, #544]
	add	x8, x8, x10, lsl #3
	ldr	x9, [x9, #24]
	ldr	x1, [x8, #104]
	blr	x9
	cbz	w0, .LBB196_12
// %bb.3:                               // %if.end
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	w9, [x8, #96]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #132]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #132]
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #124]
	cbz	w8, .LBB196_8
.LBB196_4:                              // %if.end4
	cmp	w8, #1                          // =1
	b.eq	.LBB196_11
// %bb.5:                               // %if.end4
	cmp	w8, #2                          // =2
	b.ne	.LBB196_16
// %bb.6:                               // %sw.bb
	ldr	x8, [sp, #8]
	ldp	x4, x0, [x29, #-16]
	ldr	x5, [sp, #24]
	ldr	w6, [sp, #20]
	ldrsw	x10, [x8, #120]
	ldr	x9, [x0, #552]
	ldr	w3, [x8, #128]
	add	x2, x8, #100                    // =100
	add	x10, x8, x10, lsl #3
	ldr	x9, [x9, #8]
	ldr	x1, [x10, #104]
	blr	x9
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #100]
	ldr	w8, [x8, #128]
	cmp	w9, w8
	b.lo	.LBB196_12
// %bb.7:                               // %if.end12
	ldr	x8, [sp, #8]
	str	wzr, [x8, #124]
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #20]
	ldr	w8, [x8]
	cmp	w8, w9
	b.hs	.LBB196_12
.LBB196_8:                              // %sw.bb17
	ldr	x8, [sp, #8]
	str	wzr, [x8, #100]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #396]
	sub	w8, w8, #1                      // =1
	str	w8, [x9, #128]
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #132]
	ldr	w9, [x9, #400]
	cmp	w8, w9
	b.ne	.LBB196_10
// %bb.9:                               // %if.then22
	ldur	x0, [x29, #-8]
	bl	set_bottom_pointers
.LBB196_10:                             // %if.end23
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	w9, [x8, #124]
.LBB196_11:                             // %sw.bb25
	ldr	x8, [sp, #8]
	ldp	x4, x0, [x29, #-16]
	ldr	x5, [sp, #24]
	ldr	w6, [sp, #20]
	ldrsw	x10, [x8, #120]
	ldr	x9, [x0, #552]
	ldr	w3, [x8, #128]
	add	x2, x8, #100                    // =100
	add	x10, x8, x10, lsl #3
	ldr	x9, [x9, #8]
	ldr	x1, [x10, #104]
	blr	x9
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #100]
	ldr	w8, [x8, #128]
	cmp	w9, w8
	b.hs	.LBB196_13
.LBB196_12:                             // %if.then2
	mov	w8, #1
	str	w8, [sp, #4]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB196_13:                             // %if.end38
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #132]
	cmp	w8, #1                          // =1
	b.ne	.LBB196_15
// %bb.14:                              // %if.then41
	ldur	x0, [x29, #-8]
	bl	set_wraparound_pointers
.LBB196_15:                             // %if.end42
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #120]
	eor	w9, w9, #0x1
	str	w9, [x8, #120]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #96]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #396]
	add	w8, w8, #1                      // =1
	str	w8, [x9, #100]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #396]
	add	w8, w8, #2                      // =2
	str	w8, [x9, #128]
	ldr	x8, [sp, #8]
	mov	w9, #2
	str	w9, [x8, #124]
.LBB196_16:                             // %sw.epilog
	str	wzr, [sp, #4]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end196:
	.size	process_data_context_main, .Lfunc_end196-process_data_context_main
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function make_funny_pointers
	.type	make_funny_pointers,@function
make_funny_pointers:                    // @make_funny_pointers
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa_offset 64
	ldr	x8, [x0, #536]
	stp	x8, x0, [sp, #48]
	ldr	w8, [x0, #396]
	str	wzr, [sp, #44]
	str	w8, [sp, #32]
	ldr	x8, [x0, #296]
	str	x8, [sp, #24]
	b	.LBB197_2
.LBB197_1:                              // %for.inc53
                                        //   in Loop: Header=BB197_2 Depth=1
	ldr	w8, [sp, #44]
	ldr	x9, [sp, #24]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #44]
	str	x9, [sp, #24]
.LBB197_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB197_4 Depth 2
                                        //     Child Loop BB197_7 Depth 2
                                        //     Child Loop BB197_9 Depth 2
	ldr	x8, [sp, #56]
	ldr	w9, [sp, #44]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB197_10
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB197_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #56]
	ldr	w10, [x8, #12]
	ldr	w8, [x8, #36]
	ldr	w9, [x9, #396]
	mul	w8, w10, w8
	ldr	x10, [sp, #48]
	sdiv	w8, w8, w9
	ldrsw	x9, [sp, #44]
	stp	w8, wzr, [sp, #36]
	ldr	x8, [x10, #104]
	lsl	x9, x9, #3
	ldr	x11, [x8, x9]
	ldr	x8, [x10, #112]
	ldr	x8, [x8, x9]
	add	x9, x10, x9
	stp	x8, x11, [sp]
	ldr	x8, [x9, #16]
	str	x8, [sp, #16]
.LBB197_4:                              // %for.cond9
                                        //   Parent Loop BB197_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [sp, #32]
	ldr	w10, [sp, #40]
	add	w8, w8, #2                      // =2
	mul	w8, w9, w8
	cmp	w10, w8
	b.ge	.LBB197_6
// %bb.5:                               // %for.body12
                                        //   in Loop: Header=BB197_4 Depth=2
	ldrsw	x8, [sp, #40]
	ldr	x9, [sp, #16]
	ldr	x10, [sp]
	lsl	x8, x8, #3
	ldr	x9, [x9, x8]
	str	x9, [x10, x8]
	ldr	x8, [sp, #8]
	ldrsw	x10, [sp, #40]
	str	x9, [x8, x10, lsl #3]
	ldr	w8, [sp, #40]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #40]
	b	.LBB197_4
.LBB197_6:                              // %for.end
                                        //   in Loop: Header=BB197_2 Depth=1
	str	wzr, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9, lsl #1
	b.ge	.LBB197_8
.LBB197_7:                              // %for.body22
                                        //   Parent Loop BB197_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [sp, #32]
	ldr	w10, [sp, #40]
	ldr	x11, [sp, #16]
	madd	w12, w8, w9, w10
	ldr	x11, [x11, w12, sxtw #3]
	ldr	x12, [sp]
	sub	w9, w9, #2                      // =2
	madd	w8, w8, w9, w10
	str	x11, [x12, w8, sxtw #3]
	ldp	w9, w8, [sp, #32]
	ldr	w10, [sp, #40]
	ldr	x11, [sp, #16]
	sub	w12, w9, #2                     // =2
	madd	w12, w8, w12, w10
	ldr	x11, [x11, w12, sxtw #3]
	ldr	x12, [sp]
	madd	w8, w8, w9, w10
	str	x11, [x12, w8, sxtw #3]
	ldr	w8, [sp, #40]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9, lsl #1
	b.lt	.LBB197_7
.LBB197_8:                              // %for.end42
                                        //   in Loop: Header=BB197_2 Depth=1
	str	wzr, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9
	b.ge	.LBB197_1
.LBB197_9:                              // %for.body45
                                        //   Parent Loop BB197_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #8]
	ldp	w10, w9, [sp, #36]
	ldr	x11, [x8]
	sub	w9, w9, w10
	str	x11, [x8, w9, sxtw #3]
	ldr	w8, [sp, #40]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9
	b.lt	.LBB197_9
	b	.LBB197_1
.LBB197_10:                             // %for.end55
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end197:
	.size	make_funny_pointers, .Lfunc_end197-make_funny_pointers
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function process_data_simple_main.61
	.type	process_data_simple_main.61,@function
process_data_simple_main.61:            // @process_data_simple_main.61
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	str	x2, [sp, #24]
	str	w3, [sp, #20]
	ldr	x8, [x0, #536]
	str	x8, [sp, #8]
	ldr	w8, [x8, #96]
	cbnz	w8, .LBB198_3
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x0, #544]
	add	x1, x9, #16                     // =16
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB198_6
// %bb.2:                               // %if.end
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	w9, [x8, #96]
.LBB198_3:                              // %if.end4
	ldp	x4, x0, [x29, #-16]
	ldr	x9, [sp, #8]
	ldr	x5, [sp, #24]
	ldr	w6, [sp, #20]
	ldr	w3, [x0, #396]
	add	x1, x9, #16                     // =16
	add	x2, x9, #100                    // =100
	str	w3, [sp, #4]
	ldr	x8, [x0, #552]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #100]
	cmp	w8, w9
	b.lo	.LBB198_5
// %bb.4:                               // %if.then8
	ldr	x8, [sp, #8]
	str	wzr, [x8, #96]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #100]
.LBB198_5:                              // %if.end11
	str	wzr, [sp]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB198_6:                              // %if.then2
	mov	w8, #1
	str	w8, [sp]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end198:
	.size	process_data_simple_main.61, .Lfunc_end198-process_data_simple_main.61
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function process_data_crank_post
	.type	process_data_crank_post,@function
process_data_crank_post:                // @process_data_crank_post
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	x2, x1, [sp, #8]
	str	w3, [sp, #4]
	ldr	x8, [x0, #552]
	mov	w6, w3
	mov	x5, x2
	mov	x4, x1
	ldr	x8, [x8, #8]
	mov	x1, xzr
	mov	x2, xzr
	mov	w3, wzr
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end199:
	.size	process_data_crank_post, .Lfunc_end199-process_data_crank_post
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function set_bottom_pointers
	.type	set_bottom_pointers,@function
set_bottom_pointers:                    // @set_bottom_pointers
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa_offset 64
	ldr	x8, [x0, #536]
	str	wzr, [sp, #44]
	stp	x8, x0, [sp, #48]
	ldr	x8, [x0, #296]
	str	x8, [sp, #16]
	b	.LBB200_2
.LBB200_1:                              // %for.inc18
                                        //   in Loop: Header=BB200_2 Depth=1
	ldr	w8, [sp, #44]
	ldr	x9, [sp, #16]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #44]
	str	x9, [sp, #16]
.LBB200_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB200_6 Depth 2
	ldr	x8, [sp, #56]
	ldr	w9, [sp, #44]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB200_9
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB200_2 Depth=1
	ldr	x8, [sp, #16]
	ldr	x11, [sp, #56]
	ldr	w9, [x8, #12]
	ldr	w10, [x8, #36]
	mul	w9, w9, w10
	ldr	w10, [x11, #396]
	sdiv	w10, w9, w10
	stp	w9, w10, [sp, #32]
	ldr	w8, [x8, #44]
	udiv	w10, w8, w9
	msub	w8, w10, w9, w8
	str	w8, [sp, #28]
	cbz	w8, .LBB200_7
// %bb.4:                               // %if.end
                                        //   in Loop: Header=BB200_2 Depth=1
	ldr	w8, [sp, #44]
	cbz	w8, .LBB200_8
.LBB200_5:                              // %if.end5
                                        //   in Loop: Header=BB200_2 Depth=1
	ldr	x8, [sp, #48]
	ldrsw	x10, [sp, #44]
	ldrsw	x9, [x8, #120]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #104]
	ldr	x8, [x8, x10, lsl #3]
	str	wzr, [sp, #40]
	str	x8, [sp, #8]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9, lsl #1
	b.ge	.LBB200_1
.LBB200_6:                              // %for.body11
                                        //   Parent Loop BB200_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #28]
	ldr	w11, [sp, #40]
	add	x10, x8, x9, lsl #3
	ldur	x10, [x10, #-8]
	add	w9, w9, w11
	str	x10, [x8, w9, sxtw #3]
	ldr	w8, [sp, #40]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9, lsl #1
	b.lt	.LBB200_6
	b	.LBB200_1
.LBB200_7:                              // %if.then
                                        //   in Loop: Header=BB200_2 Depth=1
	ldr	w8, [sp, #32]
	str	w8, [sp, #28]
	ldr	w8, [sp, #44]
	cbnz	w8, .LBB200_5
.LBB200_8:                              // %if.then3
                                        //   in Loop: Header=BB200_2 Depth=1
	ldr	w8, [sp, #28]
	ldr	w9, [sp, #36]
	ldr	x10, [sp, #48]
	sub	w8, w8, #1                      // =1
	sdiv	w8, w8, w9
	add	w8, w8, #1                      // =1
	str	w8, [x10, #128]
	b	.LBB200_5
.LBB200_9:                              // %for.end20
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end200:
	.size	set_bottom_pointers, .Lfunc_end200-set_bottom_pointers
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function set_wraparound_pointers
	.type	set_wraparound_pointers,@function
set_wraparound_pointers:                // @set_wraparound_pointers
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa_offset 64
	ldr	x8, [x0, #536]
	stp	x8, x0, [sp, #48]
	ldr	w8, [x0, #396]
	str	wzr, [sp, #44]
	str	w8, [sp, #32]
	ldr	x8, [x0, #296]
	str	x8, [sp, #24]
	b	.LBB201_2
.LBB201_1:                              // %for.inc38
                                        //   in Loop: Header=BB201_2 Depth=1
	ldr	w8, [sp, #44]
	ldr	x9, [sp, #24]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #44]
	str	x9, [sp, #24]
.LBB201_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB201_4 Depth 2
	ldr	x8, [sp, #56]
	ldr	w9, [sp, #44]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB201_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB201_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #56]
	ldr	w10, [x8, #12]
	ldr	w8, [x8, #36]
	ldr	w9, [x9, #396]
	mul	w8, w10, w8
	ldr	x10, [sp, #48]
	sdiv	w8, w8, w9
	ldrsw	x9, [sp, #44]
	stp	w8, wzr, [sp, #36]
	ldr	x8, [x10, #104]
	lsl	x9, x9, #3
	ldr	x11, [x8, x9]
	ldr	x8, [x10, #112]
	ldr	x8, [x8, x9]
	stp	x8, x11, [sp, #8]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9
	b.ge	.LBB201_1
.LBB201_4:                              // %for.body9
                                        //   Parent Loop BB201_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [sp, #32]
	ldr	w10, [sp, #40]
	ldr	x11, [sp, #16]
	add	w9, w9, #1                      // =1
	madd	w9, w8, w9, w10
	ldr	x9, [x11, w9, sxtw #3]
	sub	w8, w10, w8
	str	x9, [x11, w8, sxtw #3]
	ldp	w9, w8, [sp, #32]
	ldr	w10, [sp, #40]
	ldr	x11, [sp, #8]
	add	w9, w9, #1                      // =1
	madd	w9, w8, w9, w10
	ldr	x9, [x11, w9, sxtw #3]
	sub	w8, w10, w8
	str	x9, [x11, w8, sxtw #3]
	ldr	x8, [sp, #16]
	ldp	w11, w9, [sp, #36]
                                        // kill: def $w9 killed $w9 def $x9
	ldr	w10, [sp, #32]
	sxtw	x9, w9
	ldr	x12, [x8, x9, lsl #3]
	add	w10, w10, #2                    // =2
	madd	w9, w11, w10, w9
	str	x12, [x8, w9, sxtw #3]
	ldr	x8, [sp, #8]
	ldp	w11, w9, [sp, #36]
                                        // kill: def $w9 killed $w9 def $x9
	ldr	w10, [sp, #32]
	sxtw	x9, w9
	ldr	x12, [x8, x9, lsl #3]
	add	w10, w10, #2                    // =2
	madd	w9, w11, w10, w9
	str	x12, [x8, w9, sxtw #3]
	ldr	w8, [sp, #40]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #40]
	ldp	w9, w8, [sp, #36]
	cmp	w8, w9
	b.lt	.LBB201_4
	b	.LBB201_1
.LBB201_5:                              // %for.end40
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end201:
	.size	set_wraparound_pointers, .Lfunc_end201-set_wraparound_pointers
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_resync_to_restart          // -- Begin function jpeg_resync_to_restart
	.p2align	2
	.type	jpeg_resync_to_restart,@function
jpeg_resync_to_restart:                 // @jpeg_resync_to_restart
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [sp, #16]
	ldr	w8, [x0, #524]
	mov	w19, #1
	str	w19, [sp, #4]
	mov	w9, #117
	stp	w8, w1, [sp, #8]
	ldr	x8, [x0]
	str	w9, [x8, #40]
	mov	x8, x0
	ldr	w9, [sp, #8]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	mov	x8, x0
	ldr	x8, [x8]
	mov	w9, w1
	mov	w1, #-1
	str	w9, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	mov	w20, #2
	mov	w21, #96
	mov	w22, #3
.LBB202_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #8]
	cmp	w8, #191                        // =191
	b.gt	.LBB202_3
.LBB202_2:                              // %if.then
                                        //   in Loop: Header=BB202_1 Depth=1
	str	w20, [sp, #4]
	b	.LBB202_8
.LBB202_3:                              // %if.else
                                        //   in Loop: Header=BB202_1 Depth=1
	ldr	w8, [sp, #8]
	cmp	w8, #208                        // =208
	b.lt	.LBB202_7
// %bb.4:                               // %if.else
                                        //   in Loop: Header=BB202_1 Depth=1
	cmp	w8, #216                        // =216
	b.ge	.LBB202_7
// %bb.5:                               // %if.else10
                                        //   in Loop: Header=BB202_1 Depth=1
	ldp	w9, w8, [sp, #8]
	mov	w10, #208
	add	w8, w8, #1                      // =1
	bfxil	w10, w8, #0, #3
	cmp	w9, w10
	b.eq	.LBB202_7
// %bb.6:                               // %lor.lhs.false13
                                        //   in Loop: Header=BB202_1 Depth=1
	ldp	w9, w8, [sp, #8]
	mov	w10, #208
	add	w8, w8, #2                      // =2
	bfxil	w10, w8, #0, #3
	cmp	w9, w10
	b.ne	.LBB202_13
.LBB202_7:                              // %if.then9
                                        //   in Loop: Header=BB202_1 Depth=1
	str	w22, [sp, #4]
.LBB202_8:                              // %if.end32
                                        //   in Loop: Header=BB202_1 Depth=1
	ldr	x8, [sp, #16]
	mov	w1, #4
	ldr	x8, [x8]
	str	w21, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #8]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #4]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #4]
	cmp	w8, #2                          // =2
	b.eq	.LBB202_11
// %bb.9:                               // %if.end32
                                        //   in Loop: Header=BB202_1 Depth=1
	cmp	w8, #3                          // =3
	b.eq	.LBB202_16
// %bb.10:                              // %if.end32
                                        //   in Loop: Header=BB202_1 Depth=1
	cmp	w8, #1                          // =1
	b.ne	.LBB202_1
	b	.LBB202_17
.LBB202_11:                             // %sw.bb46
                                        //   in Loop: Header=BB202_1 Depth=1
	ldr	x0, [sp, #16]
	bl	next_marker
	cbz	w0, .LBB202_18
// %bb.12:                              // %if.end48
                                        //   in Loop: Header=BB202_1 Depth=1
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #524]
	str	w8, [sp, #8]
	b	.LBB202_1
.LBB202_13:                             // %if.else19
                                        //   in Loop: Header=BB202_1 Depth=1
	ldp	w9, w8, [sp, #8]
	mov	w10, #208
	sub	w8, w8, #1                      // =1
	bfxil	w10, w8, #0, #3
	cmp	w9, w10
	b.eq	.LBB202_2
// %bb.14:                              // %lor.lhs.false23
                                        //   in Loop: Header=BB202_1 Depth=1
	ldp	w9, w8, [sp, #8]
	mov	w10, #208
	sub	w8, w8, #2                      // =2
	bfxil	w10, w8, #0, #3
	cmp	w9, w10
	b.eq	.LBB202_2
// %bb.15:                              // %if.else29
                                        //   in Loop: Header=BB202_1 Depth=1
	str	w19, [sp, #4]
	b	.LBB202_8
.LBB202_16:                             // %sw.bb50
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB202_19
.LBB202_17:                             // %sw.bb
	ldr	x8, [sp, #16]
	mov	w9, #1
	str	wzr, [x8, #524]
	stur	w9, [x29, #-4]
	str	w9, [sp]
	b	.LBB202_20
.LBB202_18:                             // %if.then47
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB202_19:                             // %cleanup
	str	w8, [sp]
.LBB202_20:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end202:
	.size	jpeg_resync_to_restart, .Lfunc_end202-jpeg_resync_to_restart
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function next_marker
	.type	next_marker,@function
next_marker:                            // @next_marker
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #24]
	ldr	x8, [x8, #8]
	str	x8, [sp, #16]
	b	.LBB203_2
.LBB203_1:                              // %do.body
                                        //   in Loop: Header=BB203_2 Depth=1
	ldp	x8, x9, [sp, #24]
	str	x8, [x9]
	ldr	x8, [sp, #16]
	ldr	x9, [sp, #32]
	str	x8, [x9, #8]
.LBB203_2:                              // %do.body
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB203_9 Depth 2
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB203_5
// %bb.3:                               // %if.then
                                        //   in Loop: Header=BB203_2 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB203_13
// %bb.4:                               // %if.end
                                        //   in Loop: Header=BB203_2 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB203_5:                              // %if.end6
                                        //   in Loop: Header=BB203_2 Depth=1
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	stur	w8, [x29, #-20]
	mov	w8, w8
	cmp	w8, #255                        // =255
	b.eq	.LBB203_9
// %bb.6:                               // %while.body
                                        //   in Loop: Header=BB203_2 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #568]
	ldr	w9, [x8, #172]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #172]
	b	.LBB203_1
.LBB203_7:                              // %if.end37
                                        //   in Loop: Header=BB203_9 Depth=2
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB203_8:                              // %if.end40
                                        //   in Loop: Header=BB203_9 Depth=2
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	cmp	w8, #255                        // =255
	stur	w8, [x29, #-20]
	b.ne	.LBB203_11
.LBB203_9:                              // %do.body29
                                        //   Parent Loop BB203_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB203_8
// %bb.10:                              // %if.then32
                                        //   in Loop: Header=BB203_9 Depth=2
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbnz	w0, .LBB203_7
	b	.LBB203_13
.LBB203_11:                             // %do.end49
                                        //   in Loop: Header=BB203_2 Depth=1
	ldur	x8, [x29, #-16]
	ldur	w10, [x29, #-20]
	ldr	x9, [x8, #568]
	ldr	w8, [x9, #172]
	cbnz	w10, .LBB203_14
// %bb.12:                              // %if.end53
                                        //   in Loop: Header=BB203_2 Depth=1
	add	w8, w8, #2                      // =2
	str	w8, [x9, #172]
	b	.LBB203_1
.LBB203_13:                             // %if.then3
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
	mov	w0, wzr
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB203_14:                             // %for.end
	cbz	w8, .LBB203_16
// %bb.15:                              // %if.then62
	ldur	x8, [x29, #-16]
	mov	w9, #112
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	x9, [x8, #568]
	ldr	x8, [x8]
	ldr	w9, [x9, #172]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #568]
	str	wzr, [x8, #172]
.LBB203_16:                             // %if.end73
	ldur	w8, [x29, #-20]
	ldur	x9, [x29, #-16]
	mov	w10, #1
	str	w8, [x9, #524]
	ldp	x8, x9, [sp, #24]
	str	x8, [x9]
	ldr	x8, [sp, #16]
	ldr	x9, [sp, #32]
	str	x8, [x9, #8]
	stur	w10, [x29, #-4]
	str	w10, [sp, #12]
	mov	w0, w10
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end203:
	.size	next_marker, .Lfunc_end203-next_marker
	.cfi_endproc
                                        // -- End function
	.globl	jinit_marker_reader             // -- Begin function jinit_marker_reader
	.p2align	2
	.type	jinit_marker_reader,@function
jinit_marker_reader:                    // @jinit_marker_reader
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w2, #176
	mov	w1, wzr
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, reset_marker_reader
	add	x9, x9, :lo12:reset_marker_reader
	str	x0, [x8, #568]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #568]
	str	x9, [x8]
	ldr	x8, [sp, #8]
	adrp	x9, read_markers
	add	x9, x9, :lo12:read_markers
	ldr	x8, [x8, #568]
	str	x9, [x8, #8]
	ldr	x8, [sp, #8]
	adrp	x9, read_restart_marker
	add	x9, x9, :lo12:read_restart_marker
	ldr	x8, [x8, #568]
	str	x9, [x8, #16]
	ldr	x8, [sp, #8]
	ldr	x9, [x8, #568]
	adrp	x8, skip_variable
	add	x8, x8, :lo12:skip_variable
	str	x8, [x9, #24]
	str	wzr, [sp, #4]
.LBB204_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #8]
	ldr	w10, [sp, #4]
	ldr	x9, [x9, #568]
	cmp	w10, #15                        // =15
	add	x9, x9, #32                     // =32
	b.gt	.LBB204_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB204_1 Depth=1
	ldrsw	x10, [sp, #4]
	str	x8, [x9, x10, lsl #3]
	ldr	w9, [sp, #4]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #4]
	b	.LBB204_1
.LBB204_3:                              // %for.end
	adrp	x8, get_app0
	add	x8, x8, :lo12:get_app0
	str	x8, [x9]
	ldr	x8, [sp, #8]
	adrp	x9, get_app14
	add	x9, x9, :lo12:get_app14
	ldr	x8, [x8, #568]
	str	x9, [x8, #144]
	ldr	x0, [sp, #8]
	bl	reset_marker_reader
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end204:
	.size	jinit_marker_reader, .Lfunc_end204-jinit_marker_reader
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function reset_marker_reader
	.type	reset_marker_reader,@function
reset_marker_reader:                    // @reset_marker_reader
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	mov	x8, x0
	str	x0, [sp, #8]
	str	xzr, [x0, #296]
	str	wzr, [x8, #164]
	mov	x8, x0
	str	wzr, [x8, #524]
	mov	x8, x0
	ldr	x8, [x8, #568]
	str	wzr, [x8, #160]
	mov	x8, x0
	ldr	x8, [x8, #568]
	str	wzr, [x8, #164]
	mov	x8, x0
	ldr	x8, [x8, #568]
	str	wzr, [x8, #172]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end205:
	.size	reset_marker_reader, .Lfunc_end205-reset_marker_reader
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_markers
	.type	read_markers,@function
read_markers:                           // @read_markers
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	adrp	x20, .LJTI206_0
	mov	w19, #67
	add	x20, x20, :lo12:.LJTI206_0
	mov	w21, #91
	mov	w22, #59
	str	x0, [sp]
	b	.LBB206_3
.LBB206_1:                              // %sw.bb84
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x8, [sp]
	mov	w1, #1
	ldr	x8, [x8]
	str	w21, [x8, #40]
	ldr	x8, [sp]
	ldr	w9, [x8, #524]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB206_2:                              // %sw.epilog
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x8, [sp]
	str	wzr, [x8, #524]
.LBB206_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp]
	ldr	w8, [x8, #524]
	cbnz	w8, .LBB206_7
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	ldr	x8, [x0, #568]
	ldr	w8, [x8, #160]
	cbz	w8, .LBB206_6
// %bb.5:                               // %if.else
                                        //   in Loop: Header=BB206_3 Depth=1
	bl	next_marker
	cbnz	w0, .LBB206_7
	b	.LBB206_29
.LBB206_6:                              // %if.then1
                                        //   in Loop: Header=BB206_3 Depth=1
	bl	first_marker
	cbz	w0, .LBB206_29
.LBB206_7:                              // %if.end9
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x8, [sp]
	ldr	w8, [x8, #524]
	sub	w8, w8, #1                      // =1
	cmp	w8, #253                        // =253
	b.hi	.LBB206_13
// %bb.8:                               // %if.end9
                                        //   in Loop: Header=BB206_3 Depth=1
	adr	x9, .LBB206_1
	ldrb	w10, [x20, x8]
	add	x9, x9, x10, lsl #2
	br	x9
.LBB206_9:                              // %sw.bb70
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	ldr	x8, [x0, #568]
	ldrsw	x9, [x0, #524]
	add	x8, x8, x9, lsl #3
	sub	x8, x8, #1760                   // =1760
	ldr	x8, [x8]
	blr	x8
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_10:                             // %sw.bb35
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x8, [sp]
	ldr	x8, [x8]
	str	w22, [x8, #40]
.LBB206_11:                             // %sw.epilog
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x8, [sp]
	ldr	w9, [x8, #524]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB206_2
.LBB206_12:                             // %sw.bb15
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	mov	w1, wzr
	b	.LBB206_15
.LBB206_13:                             // %sw.default
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x8, [sp]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	b	.LBB206_11
.LBB206_14:                             // %sw.bb20
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	mov	w1, #1
.LBB206_15:                             // %sw.bb15
                                        //   in Loop: Header=BB206_3 Depth=1
	mov	w2, wzr
	bl	get_sof
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_16:                             // %sw.bb55
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	bl	get_dht
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_17:                             // %sw.bb25
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	mov	w2, #1
	mov	w1, wzr
	bl	get_sof
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_18:                             // %sw.bb30
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	mov	w1, #1
	mov	w2, #1
	bl	get_sof
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_19:                             // %sw.bb50
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	bl	get_dac
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_20:                             // %sw.bb
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	bl	get_soi
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_21:                             // %sw.bb60
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	bl	get_dqt
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_22:                             // %sw.bb94
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	bl	skip_variable
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_23:                             // %sw.bb65
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	bl	get_dri
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_24:                             // %sw.bb78
                                        //   in Loop: Header=BB206_3 Depth=1
	ldr	x0, [sp]
	ldr	x8, [x0, #568]
	ldr	x8, [x8, #24]
	blr	x8
	cbnz	w0, .LBB206_2
	b	.LBB206_29
.LBB206_25:                             // %sw.bb45
	ldr	x8, [sp]
	mov	w9, #84
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp]
	mov	w9, #2
	b	.LBB206_28
.LBB206_26:                             // %sw.bb39
	ldr	x0, [sp]
	bl	get_sos
	cbz	w0, .LBB206_29
// %bb.27:                              // %if.end43
	ldr	x8, [sp]
	mov	w9, #1
.LBB206_28:                             // %return
	str	wzr, [x8, #524]
	stur	w9, [x29, #-4]
	b	.LBB206_30
.LBB206_29:                             // %if.then3
	stur	wzr, [x29, #-4]
.LBB206_30:                             // %return
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end206:
	.size	read_markers, .Lfunc_end206-read_markers
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI206_0:
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_12-.LBB206_1)>>2
	.byte	(.LBB206_12-.LBB206_1)>>2
	.byte	(.LBB206_14-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_16-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_17-.LBB206_1)>>2
	.byte	(.LBB206_18-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_19-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_10-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_1-.LBB206_1)>>2
	.byte	(.LBB206_20-.LBB206_1)>>2
	.byte	(.LBB206_25-.LBB206_1)>>2
	.byte	(.LBB206_26-.LBB206_1)>>2
	.byte	(.LBB206_21-.LBB206_1)>>2
	.byte	(.LBB206_22-.LBB206_1)>>2
	.byte	(.LBB206_23-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_9-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_13-.LBB206_1)>>2
	.byte	(.LBB206_24-.LBB206_1)>>2
                                        // -- End function
	.text
	.p2align	2                               // -- Begin function read_restart_marker
	.type	read_restart_marker,@function
read_restart_marker:                    // @read_restart_marker
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp]
	ldr	w8, [x0, #524]
	cbnz	w8, .LBB207_2
// %bb.1:                               // %if.then
	ldr	x0, [sp]
	bl	next_marker
	cbz	w0, .LBB207_6
.LBB207_2:                              // %if.end2
	ldr	x8, [sp]
	ldr	x9, [x8, #568]
	ldr	w10, [x8, #524]
	ldr	w9, [x9, #168]
	add	w9, w9, #208                    // =208
	cmp	w10, w9
	b.ne	.LBB207_4
// %bb.3:                               // %if.then5
	ldr	x8, [x8]
	mov	w9, #97
	mov	w1, #3
	str	w9, [x8, #40]
	ldr	x8, [sp]
	ldr	x9, [x8, #568]
	ldr	x8, [x8]
	ldr	w9, [x9, #168]
	str	w9, [x8, #44]
	ldr	x0, [sp]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp]
	str	wzr, [x8, #524]
	b	.LBB207_5
.LBB207_4:                              // %if.else
	ldr	x0, [sp]
	ldr	x8, [x8, #32]
	ldr	x9, [x0, #568]
	ldr	x8, [x8, #40]
	ldr	w1, [x9, #168]
	blr	x8
	cbz	w0, .LBB207_6
.LBB207_5:                              // %if.end18
	ldr	x8, [sp]
	mov	w10, #1
	ldr	x8, [x8, #568]
	ldr	w9, [x8, #168]
	add	w9, w9, #1                      // =1
	and	w9, w9, #0x7
	str	w9, [x8, #168]
	stur	w10, [x29, #-4]
	mov	w0, w10
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB207_6:                              // %if.then16
	stur	wzr, [x29, #-4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end207:
	.size	read_restart_marker, .Lfunc_end207-read_restart_marker
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function skip_variable
	.type	skip_variable,@function
skip_variable:                          // @skip_variable
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #16]
	ldr	x8, [x8, #8]
	str	x8, [sp, #8]
	cbnz	x8, .LBB208_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB208_7
// %bb.2:                               // %if.end
	ldr	x8, [sp, #24]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #8]
.LBB208_3:                              // %if.end6
	ldp	x8, x9, [sp, #8]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-16]
	b.ne	.LBB208_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB208_7
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #24]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #8]
.LBB208_6:                              // %if.end18
	ldp	x8, x9, [sp, #8]
	mov	w1, #1
	mov	w19, #1
	sub	x11, x8, #1                     // =1
	add	x8, x9, #1                      // =1
	stp	x11, x8, [sp, #8]
	ldrb	w8, [x9]
	ldp	x10, x9, [x29, #-16]
	add	x8, x10, x8
	stur	x8, [x29, #-16]
	ldr	x8, [x9]
	mov	w9, #90
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #524]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldp	x9, x8, [x29, #-16]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldp	x8, x9, [sp, #16]
	str	x8, [x9]
	ldr	x8, [sp, #8]
	ldr	x9, [sp, #24]
	str	x8, [x9, #8]
	ldp	x9, x0, [x29, #-16]
	ldr	x8, [x0, #32]
	sub	x1, x9, #2                      // =2
	ldr	x8, [x8, #32]
	blr	x8
	stp	w19, w19, [x29, #24]
	b	.LBB208_8
.LBB208_7:                              // %if.then3
	mov	w8, #1
	stp	w8, wzr, [x29, #24]
.LBB208_8:                              // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end208:
	.size	skip_variable, .Lfunc_end208-skip_variable
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_app0
	.type	get_app0,@function
get_app0:                               // @get_app0
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x19, [sp, #96]                  // 8-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #32]
	ldr	x8, [x8, #8]
	str	x8, [sp, #24]
	cbnz	x8, .LBB209_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB209_15
// %bb.2:                               // %if.end
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB209_3:                              // %if.end6
	ldp	x8, x9, [sp, #24]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-16]
	b.ne	.LBB209_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB209_15
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB209_6:                              // %if.end18
	ldp	x8, x9, [sp, #24]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	add	x8, x9, x8
	sub	x8, x8, #2                      // =2
	cmp	x8, #14                         // =14
	stur	x8, [x29, #-16]
	b.lt	.LBB209_13
// %bb.7:                               // %if.then24
	sub	x19, x29, #32                   // =32
	str	wzr, [x29, #24]
	b	.LBB209_9
.LBB209_8:                              // %if.end38
                                        //   in Loop: Header=BB209_9 Depth=1
	ldp	x8, x9, [sp, #24]
	ldr	w11, [x29, #24]
	ldrsw	x10, [x29, #24]
	sub	x8, x8, #1                      // =1
	add	x12, x9, #1                     // =1
	stp	x8, x12, [sp, #24]
	ldrb	w8, [x9]
	add	w9, w11, #1                     // =1
	str	w9, [x29, #24]
	strb	w8, [x19, x10]
.LBB209_9:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x29, #24]
	cmp	w8, #13                         // =13
	b.gt	.LBB209_16
// %bb.10:                              // %do.body27
                                        //   in Loop: Header=BB209_9 Depth=1
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB209_8
// %bb.11:                              // %if.then30
                                        //   in Loop: Header=BB209_9 Depth=1
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB209_15
// %bb.12:                              // %if.end35
                                        //   in Loop: Header=BB209_9 Depth=1
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
	b	.LBB209_8
.LBB209_13:                             // %if.else194
	ldur	x8, [x29, #-8]
	mov	w9, #76
.LBB209_14:                             // %if.end204
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldp	x9, x8, [x29, #-16]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	b	.LBB209_22
.LBB209_15:                             // %if.then3
	str	wzr, [x29, #28]
	mov	w8, #1
	b	.LBB209_26
.LBB209_16:                             // %for.end
	ldur	x8, [x29, #-16]
	ldurb	w9, [x29, #-32]
	sub	x8, x8, #14                     // =14
	cmp	w9, #74                         // =74
	stur	x8, [x29, #-16]
	b.ne	.LBB209_21
// %bb.17:                              // %land.lhs.true
	ldurb	w8, [x29, #-31]
	cmp	w8, #70                         // =70
	b.ne	.LBB209_21
// %bb.18:                              // %land.lhs.true52
	ldurb	w8, [x29, #-30]
	cmp	w8, #73                         // =73
	b.ne	.LBB209_21
// %bb.19:                              // %land.lhs.true57
	ldurb	w8, [x29, #-29]
	cmp	w8, #70                         // =70
	b.ne	.LBB209_21
// %bb.20:                              // %land.lhs.true62
	ldurb	w8, [x29, #-28]
	cbz	w8, .LBB209_27
.LBB209_21:                             // %if.else182
	ldur	x8, [x29, #-8]
	mov	w9, #76
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-16]
	ldr	x8, [x8]
	add	w9, w9, #14                     // =14
	str	w9, [x8, #44]
.LBB209_22:                             // %if.end204
	ldur	x0, [x29, #-8]
	mov	w1, #1
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB209_23:                             // %if.end204
	ldp	x8, x9, [sp, #32]
	str	x8, [x9]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #40]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-16]
	cmp	x8, #1                          // =1
	b.lt	.LBB209_25
// %bb.24:                              // %if.then209
	ldp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #32]
	blr	x8
.LBB209_25:                             // %if.end211
	mov	w8, #1
	str	w8, [x29, #28]
.LBB209_26:                             // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	str	w8, [sp, #20]
	add	sp, sp, #112                    // =112
	ret
.LBB209_27:                             // %if.then67
	ldurb	w8, [x29, #-27]
	cmp	w8, #1                          // =1
	b.eq	.LBB209_29
// %bb.28:                              // %if.then72
	ldur	x8, [x29, #-8]
	mov	w9, #115
	mov	w1, #-1
	b	.LBB209_31
.LBB209_29:                             // %if.else
	ldurb	w8, [x29, #-26]
	cmp	w8, #3                          // =3
	b.lt	.LBB209_32
// %bb.30:                              // %if.then88
	ldur	x8, [x29, #-8]
	mov	w9, #88
	mov	w1, #1
.LBB209_31:                             // %if.end106
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldurb	w9, [x29, #-27]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldurb	w9, [x29, #-26]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB209_32:                             // %if.end106
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w1, #1
	str	w9, [x8, #364]
	ldurb	w8, [x29, #-25]
	ldur	x9, [x29, #-8]
	strb	w8, [x9, #368]
	ldurb	w8, [x29, #-24]
	ldurb	w9, [x29, #-23]
	ldur	x10, [x29, #-8]
	bfi	w9, w8, #8, #24
	strh	w9, [x10, #370]
	ldurb	w8, [x29, #-22]
	ldurb	w9, [x29, #-21]
	ldur	x10, [x29, #-8]
	bfi	w9, w8, #8, #24
	strh	w9, [x10, #372]
	ldur	x8, [x29, #-8]
	ldr	x9, [x8]
	add	x10, x9, #44                    // =44
	str	x10, [sp, #8]
	ldrh	w8, [x8, #370]
	str	w8, [x9, #44]
	ldur	x8, [x29, #-8]
	mov	x9, x10
	ldrh	w8, [x8, #372]
	str	w8, [x9, #4]
	ldur	x8, [x29, #-8]
	mov	x9, x10
	ldrb	w8, [x8, #368]
	str	w8, [x9, #8]
	ldur	x8, [x29, #-8]
	mov	w9, #86
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldurb	w8, [x29, #-20]
	ldurb	w9, [x29, #-19]
	orr	w8, w8, w9
	cbz	w8, .LBB209_34
// %bb.33:                              // %if.then146
	ldur	x8, [x29, #-8]
	mov	w9, #89
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldurb	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldurb	w9, [x29, #-19]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB209_34:                             // %if.end163
	ldurb	w8, [x29, #-20]
	ldurb	w9, [x29, #-19]
	ldur	x10, [x29, #-16]
	mul	x8, x8, x9
	add	x8, x8, x8, lsl #1
	cmp	x10, x8
	b.eq	.LBB209_23
// %bb.35:                              // %if.then171
	ldur	x8, [x29, #-8]
	mov	w9, #87
	b	.LBB209_14
.Lfunc_end209:
	.size	get_app0, .Lfunc_end209-get_app0
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_app14
	.type	get_app14,@function
get_app14:                              // @get_app14
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	str	x19, [sp, #112]                 // 8-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #32]
	ldr	x8, [x8, #8]
	str	x8, [sp, #24]
	cbnz	x8, .LBB210_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB210_14
// %bb.2:                               // %if.end
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB210_3:                              // %if.end6
	ldp	x8, x9, [sp, #24]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-16]
	b.ne	.LBB210_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB210_14
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB210_6:                              // %if.end18
	ldp	x8, x9, [sp, #24]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	add	x8, x9, x8
	sub	x8, x8, #2                      // =2
	cmp	x8, #12                         // =12
	stur	x8, [x29, #-16]
	b.lt	.LBB210_13
// %bb.7:                               // %if.then24
	sub	x19, x29, #28                   // =28
	str	wzr, [x29, #24]
	b	.LBB210_9
.LBB210_8:                              // %if.end38
                                        //   in Loop: Header=BB210_9 Depth=1
	ldp	x8, x9, [sp, #24]
	ldr	w11, [x29, #24]
	ldrsw	x10, [x29, #24]
	sub	x8, x8, #1                      // =1
	add	x12, x9, #1                     // =1
	stp	x8, x12, [sp, #24]
	ldrb	w8, [x9]
	add	w9, w11, #1                     // =1
	str	w9, [x29, #24]
	strb	w8, [x19, x10]
.LBB210_9:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x29, #24]
	cmp	w8, #11                         // =11
	b.gt	.LBB210_15
// %bb.10:                              // %do.body27
                                        //   in Loop: Header=BB210_9 Depth=1
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB210_8
// %bb.11:                              // %if.then30
                                        //   in Loop: Header=BB210_9 Depth=1
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB210_14
// %bb.12:                              // %if.end35
                                        //   in Loop: Header=BB210_9 Depth=1
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
	b	.LBB210_8
.LBB210_13:                             // %if.else109
	ldur	x8, [x29, #-8]
	mov	w9, #77
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldp	x9, x8, [x29, #-16]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	b	.LBB210_22
.LBB210_14:                             // %if.then3
	str	wzr, [x29, #28]
	mov	w8, #1
	b	.LBB210_26
.LBB210_15:                             // %for.end
	ldur	x8, [x29, #-16]
	ldurb	w9, [x29, #-28]
	sub	x8, x8, #12                     // =12
	cmp	w9, #65                         // =65
	stur	x8, [x29, #-16]
	b.ne	.LBB210_21
// %bb.16:                              // %land.lhs.true
	ldurb	w8, [x29, #-27]
	cmp	w8, #100                        // =100
	b.ne	.LBB210_21
// %bb.17:                              // %land.lhs.true52
	ldurb	w8, [x29, #-26]
	cmp	w8, #111                        // =111
	b.ne	.LBB210_21
// %bb.18:                              // %land.lhs.true57
	ldurb	w8, [x29, #-25]
	cmp	w8, #98                         // =98
	b.ne	.LBB210_21
// %bb.19:                              // %land.lhs.true62
	ldurb	w8, [x29, #-24]
	cmp	w8, #101                        // =101
	b.ne	.LBB210_21
// %bb.20:                              // %if.then67
	ldurh	w9, [x29, #-21]
	ldurh	w10, [x29, #-23]
	ldurh	w8, [x29, #-19]
	ldurb	w11, [x29, #-17]
	lsl	w9, w9, #16
	rev	w12, w9
	ldur	x9, [x29, #-8]
	lsl	w10, w10, #16
	lsl	w8, w8, #16
	rev	w10, w10
	rev	w8, w8
	stp	w12, w10, [x29, #-36]
	stp	w11, w8, [x29, #-44]
	ldr	x8, [x9]
	mov	w1, #1
	mov	w19, #1
	add	x9, x8, #44                     // =44
	str	x9, [sp, #8]
	str	w10, [x8, #44]
	ldp	w8, w10, [x29, #-40]
	stp	w10, w8, [x9, #4]
	ldur	w8, [x29, #-44]
	str	w8, [x9, #12]
	ldur	x8, [x29, #-8]
	mov	w9, #75
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-8]
	str	w19, [x8, #376]
	ldur	w8, [x29, #-44]
	ldur	x9, [x29, #-8]
	strb	w8, [x9, #380]
	b	.LBB210_23
.LBB210_21:                             // %if.else
	ldur	x8, [x29, #-8]
	mov	w9, #77
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-16]
	ldr	x8, [x8]
	add	w9, w9, #12                     // =12
	str	w9, [x8, #44]
.LBB210_22:                             // %if.end119
	ldur	x0, [x29, #-8]
	mov	w1, #1
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB210_23:                             // %if.end119
	ldp	x8, x9, [sp, #32]
	str	x8, [x9]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #40]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-16]
	cmp	x8, #1                          // =1
	b.lt	.LBB210_25
// %bb.24:                              // %if.then124
	ldp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #32]
	ldr	x8, [x8, #32]
	blr	x8
.LBB210_25:                             // %if.end126
	mov	w8, #1
	str	w8, [x29, #28]
.LBB210_26:                             // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #112]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	str	w8, [sp, #20]
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end210:
	.size	get_app14, .Lfunc_end210-get_app14
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function first_marker
	.type	first_marker,@function
first_marker:                           // @first_marker
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #24]
	ldr	x8, [x8, #8]
	str	x8, [sp, #16]
	cbnz	x8, .LBB211_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB211_10
// %bb.2:                               // %if.end
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB211_3:                              // %if.end6
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	stur	w8, [x29, #-20]
	b.ne	.LBB211_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB211_10
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB211_6:                              // %if.end18
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldur	w10, [x29, #-20]
	ldrb	w8, [x9]
	cmp	w10, #255                       // =255
	stur	w8, [x29, #-24]
	b.ne	.LBB211_8
// %bb.7:                               // %if.end18
	cmp	w8, #216                        // =216
	b.eq	.LBB211_9
.LBB211_8:                              // %if.then28
	ldur	x8, [x29, #-16]
	mov	w9, #52
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-24]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB211_9:                              // %if.end35
	ldur	w8, [x29, #-24]
	ldur	x9, [x29, #-16]
	mov	w10, #1
	str	w8, [x9, #524]
	ldp	x8, x9, [sp, #24]
	str	x8, [x9]
	ldr	x8, [sp, #16]
	ldr	x9, [sp, #32]
	str	x8, [x9, #8]
	stur	w10, [x29, #-4]
	str	w10, [sp, #12]
	mov	w0, w10
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB211_10:                             // %if.then3
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
	mov	w0, wzr
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end211:
	.size	first_marker, .Lfunc_end211-first_marker
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_soi
	.type	get_soi,@function
get_soi:                                // @get_soi
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0]
	mov	w9, #101
	mov	w1, #1
	mov	w19, #1
	str	w9, [x8, #40]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [x29, #24]
	ldr	x8, [x8, #568]
	ldr	w8, [x8, #160]
	cbz	w8, .LBB212_2
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	mov	w9, #60
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB212_2:                              // %if.end
	mov	w8, #5
	stur	wzr, [x29, #-4]
	mov	w10, wzr
	ldr	x9, [x29, #24]
	cmp	w10, #15                        // =15
	b.gt	.LBB212_4
.LBB212_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldursw	x10, [x29, #-4]
	add	x9, x9, x10
	strb	wzr, [x9, #312]
	ldr	x9, [x29, #24]
	ldursw	x10, [x29, #-4]
	add	x9, x9, x10
	strb	w19, [x9, #328]
	ldr	x9, [x29, #24]
	ldursw	x10, [x29, #-4]
	add	x9, x9, x10
	strb	w8, [x9, #344]
	ldur	w9, [x29, #-4]
	add	w9, w9, #1                      // =1
	stur	w9, [x29, #-4]
	mov	w10, w9
	ldr	x9, [x29, #24]
	cmp	w10, #15                        // =15
	b.le	.LBB212_3
.LBB212_4:                              // %for.end
	str	wzr, [x9, #360]
	ldr	x8, [x29, #24]
	mov	w9, #1
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	mov	w0, #1
	str	wzr, [x8, #52]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #384]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #364]
	ldr	x8, [x29, #24]
	strb	wzr, [x8, #368]
	ldr	x8, [x29, #24]
	strh	w9, [x8, #370]
	ldr	x8, [x29, #24]
	strh	w9, [x8, #372]
	ldr	x8, [x29, #24]
	str	wzr, [x8, #376]
	ldr	x8, [x29, #24]
	strb	wzr, [x8, #380]
	ldr	x8, [x29, #24]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	x8, [x8, #568]
	str	w9, [x8, #160]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end212:
	.size	get_soi, .Lfunc_end212-get_soi
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_sof
	.type	get_sof,@function
get_sof:                                // @get_sof
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x19, [sp, #96]                  // 8-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	str	w1, [x29, #24]
	stur	w2, [x29, #-12]
	ldr	x8, [x0, #32]
	str	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
	mov	w8, w2
	mov	x9, x0
	str	w1, [x0, #304]
	str	w8, [x9, #308]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.2:                               // %if.end
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_3:                              // %if.end6
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-24]
	b.ne	.LBB213_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_6:                              // %if.end18
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-24]
	add	x8, x9, x8
	stur	x8, [x29, #-24]
	b.ne	.LBB213_9
// %bb.7:                               // %if.then25
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.8:                               // %if.end30
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_9:                              // %if.end33
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #288]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_12
// %bb.10:                              // %if.then42
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.11:                              // %if.end47
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_12:                             // %if.end50
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-8]
	lsl	w8, w8, #8
	str	w8, [x9, #44]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_15
// %bb.13:                              // %if.then57
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.14:                              // %if.end62
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_15:                             // %if.end65
	ldp	x8, x9, [sp, #16]
	ldur	x10, [x29, #-8]
	sub	x8, x8, #1                      // =1
	add	x11, x9, #1                     // =1
	stp	x8, x11, [sp, #16]
	ldrb	w8, [x9]
	ldr	w9, [x10, #44]
	add	w8, w9, w8
	str	w8, [x10, #44]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_18
// %bb.16:                              // %if.then76
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.17:                              // %if.end81
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_18:                             // %if.end84
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-8]
	lsl	w8, w8, #8
	str	w8, [x9, #40]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_21
// %bb.19:                              // %if.then91
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.20:                              // %if.end96
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_21:                             // %if.end99
	ldp	x8, x9, [sp, #16]
	ldur	x10, [x29, #-8]
	sub	x8, x8, #1                      // =1
	add	x11, x9, #1                     // =1
	stp	x8, x11, [sp, #16]
	ldrb	w8, [x9]
	ldr	w9, [x10, #40]
	add	w8, w9, w8
	str	w8, [x10, #40]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_24
// %bb.22:                              // %if.then110
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.23:                              // %if.end115
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_24:                             // %if.end118
	ldp	x8, x9, [sp, #16]
	ldur	x10, [x29, #-8]
	mov	w1, #1
	sub	x11, x8, #1                     // =1
	add	x8, x9, #1                      // =1
	stp	x11, x8, [sp, #16]
	ldrb	w8, [x9]
	str	w8, [x10, #48]
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-8]
	sub	x8, x8, #8                      // =8
	stur	x8, [x29, #-24]
	ldr	x8, [x9]
	add	x10, x8, #44                    // =44
	str	x10, [sp, #40]
	ldr	w9, [x9, #524]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	mov	x9, x10
	ldr	w8, [x8, #40]
	str	w8, [x9, #4]
	ldur	x8, [x29, #-8]
	mov	x9, x10
	ldr	w8, [x8, #44]
	str	w8, [x9, #8]
	ldur	x8, [x29, #-8]
	mov	x9, x10
	ldr	w8, [x8, #48]
	str	w8, [x9, #12]
	ldur	x8, [x29, #-8]
	mov	w9, #99
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #568]
	ldr	w8, [x8, #164]
	cbz	w8, .LBB213_26
// %bb.25:                              // %if.then136
	ldur	x8, [x29, #-8]
	mov	w9, #57
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB213_26:                             // %if.end140
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #44]
	cbz	w8, .LBB213_29
// %bb.27:                              // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #40]
	cbz	w8, .LBB213_29
// %bb.28:                              // %lor.lhs.false147
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #48]
	cmp	w8, #0                          // =0
	b.gt	.LBB213_30
.LBB213_29:                             // %if.then151
	ldur	x8, [x29, #-8]
	mov	w9, #31
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB213_30:                             // %if.end156
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldrsw	x8, [x8, #48]
	add	x8, x8, x8, lsl #1
	cmp	x9, x8
	b.eq	.LBB213_32
// %bb.31:                              // %if.then161
	ldur	x8, [x29, #-8]
	mov	w9, #9
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB213_32:                             // %if.end166
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #296]
	cbnz	x8, .LBB213_34
// %bb.33:                              // %if.then169
	ldur	x0, [x29, #-8]
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldrsw	x9, [x0, #48]
	ldr	x8, [x8]
	add	x9, x9, x9, lsl #1
	lsl	x2, x9, #5
	blr	x8
	ldur	x8, [x29, #-8]
	str	x0, [x8, #296]
.LBB213_34:                             // %if.end175
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-32]
	mov	w19, #100
	ldr	x8, [x8, #296]
	str	x8, [sp, #40]
	b	.LBB213_37
.LBB213_35:                             // %if.end223
                                        //   in Loop: Header=BB213_37 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_36:                             // %if.end226
                                        //   in Loop: Header=BB213_37 Depth=1
	ldp	x8, x9, [sp, #16]
	ldr	x10, [sp, #40]
	mov	w1, #1
	sub	x11, x8, #1                     // =1
	add	x8, x9, #1                      // =1
	stp	x11, x8, [sp, #16]
	ldrb	w8, [x9]
	str	w8, [x10, #16]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #40]
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	str	x10, [sp]
	ldr	w9, [x9]
	str	w9, [x8, #44]
	ldr	x8, [sp, #40]
	mov	x9, x10
	ldr	w8, [x8, #8]
	str	w8, [x9, #4]
	ldr	x8, [sp, #40]
	mov	x9, x10
	ldr	w8, [x8, #12]
	str	w8, [x9, #8]
	ldr	x8, [sp, #40]
	mov	x9, x10
	ldr	w8, [x8, #16]
	str	w8, [x9, #12]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	w8, [x29, #-32]
	ldr	x9, [sp, #40]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-32]
	str	x9, [sp, #40]
.LBB213_37:                             // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB213_48
// %bb.38:                              // %for.body
                                        //   in Loop: Header=BB213_37 Depth=1
	ldur	w8, [x29, #-32]
	ldr	x9, [sp, #40]
	str	w8, [x9, #4]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_41
// %bb.39:                              // %if.then183
                                        //   in Loop: Header=BB213_37 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.40:                              // %if.end188
                                        //   in Loop: Header=BB213_37 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_41:                             // %if.end191
                                        //   in Loop: Header=BB213_37 Depth=1
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldr	x9, [sp, #40]
	str	w8, [x9]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_44
// %bb.42:                              // %if.then200
                                        //   in Loop: Header=BB213_37 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB213_46
// %bb.43:                              // %if.end205
                                        //   in Loop: Header=BB213_37 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB213_44:                             // %if.end208
                                        //   in Loop: Header=BB213_37 Depth=1
	ldp	x8, x9, [sp, #16]
	sub	x10, x8, #1                     // =1
	add	x8, x9, #1                      // =1
	stp	x10, x8, [sp, #16]
	ldrb	w8, [x9]
	ldr	x9, [sp, #40]
	stur	w8, [x29, #-28]
	lsr	w8, w8, #4
	str	w8, [x9, #8]
	ldur	w8, [x29, #-28]
	ldr	x9, [sp, #40]
	and	w8, w8, #0xf
	str	w8, [x9, #12]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB213_36
// %bb.45:                              // %if.then218
                                        //   in Loop: Header=BB213_37 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbnz	w0, .LBB213_35
.LBB213_46:                             // %if.then3
	mov	w8, #1
	str	wzr, [x29, #28]
	str	w8, [sp, #12]
.LBB213_47:                             // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.LBB213_48:                             // %for.end
	ldur	x8, [x29, #-8]
	mov	w9, #1
	ldr	x8, [x8, #568]
	str	w9, [x8, #164]
	ldp	x8, x10, [sp, #24]
	str	x8, [x10]
	ldr	x8, [sp, #16]
	ldr	x10, [sp, #32]
	str	x8, [x10, #8]
	str	w9, [x29, #28]
	str	w9, [sp, #12]
	b	.LBB213_47
.Lfunc_end213:
	.size	get_sof, .Lfunc_end213-get_sof
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_sos
	.type	get_sos,@function
get_sos:                                // @get_sos
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-16]
	ldr	x8, [x0, #32]
	str	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
	ldr	x8, [x0, #568]
	ldr	w8, [x8, #164]
	cbz	w8, .LBB214_2
// %bb.1:                               // %do.body
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB214_5
	b	.LBB214_3
.LBB214_2:                              // %if.then
	ldur	x8, [x29, #-16]
	mov	w9, #61
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB214_5
.LBB214_3:                              // %if.then4
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.4:                               // %if.end7
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_5:                              // %if.end10
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-24]
	b.ne	.LBB214_8
// %bb.6:                               // %if.then14
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.7:                               // %if.end19
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_8:                              // %if.end22
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-24]
	add	x8, x9, x8
	stur	x8, [x29, #-24]
	b.ne	.LBB214_11
// %bb.9:                               // %if.then29
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.10:                              // %if.end34
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_11:                             // %if.end37
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-24]
	lsl	x10, x8, #1
	add	x10, x10, #6                    // =6
	cmp	x9, x10
	stur	w8, [x29, #-36]
	b.ne	.LBB214_14
// %bb.12:                              // %if.end37
	cmp	w8, #1                          // =1
	b.lt	.LBB214_14
// %bb.13:                              // %if.end37
	cmp	w8, #5                          // =5
	b.lt	.LBB214_15
.LBB214_14:                             // %if.then52
	ldur	x8, [x29, #-16]
	mov	w9, #9
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB214_15:                             // %if.end57
	ldur	x8, [x29, #-16]
	mov	w9, #102
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-36]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	w8, [x29, #-36]
	ldur	x9, [x29, #-16]
	mov	w19, #103
	mov	w20, #5
	str	w8, [x9, #416]
	stur	wzr, [x29, #-28]
	b	.LBB214_18
.LBB214_16:                             // %for.end
                                        //   in Loop: Header=BB214_18 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-44]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB214_17:                             // %id_found
                                        //   in Loop: Header=BB214_18 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	ldr	x10, [sp, #40]
	mov	w1, #1
	add	x8, x8, x9, lsl #3
	str	x10, [x8, #424]
	ldur	w8, [x29, #-40]
	ldr	x9, [sp, #40]
	ubfx	w8, w8, #4, #4
	str	w8, [x9, #20]
	ldur	w8, [x29, #-40]
	ldr	x9, [sp, #40]
	and	w8, w8, #0xf
	str	w8, [x9, #24]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-44]
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	str	x10, [sp]
	str	w9, [x8, #44]
	ldr	x8, [sp, #40]
	mov	x9, x10
	ldr	w8, [x8, #20]
	str	w8, [x9, #4]
	ldr	x8, [sp, #40]
	mov	x9, x10
	ldr	w8, [x8, #24]
	str	w8, [x9, #8]
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	w8, [x29, #-28]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
.LBB214_18:                             // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB214_26 Depth 2
	ldur	w9, [x29, #-28]
	ldur	w10, [x29, #-36]
	ldr	x8, [sp, #16]
	cmp	w9, w10
	b.ge	.LBB214_29
// %bb.19:                              // %do.body65
                                        //   in Loop: Header=BB214_18 Depth=1
	cbnz	x8, .LBB214_22
// %bb.20:                              // %if.then68
                                        //   in Loop: Header=BB214_18 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.21:                              // %if.end73
                                        //   in Loop: Header=BB214_18 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_22:                             // %if.end76
                                        //   in Loop: Header=BB214_18 Depth=1
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	stur	w8, [x29, #-44]
	b.ne	.LBB214_25
// %bb.23:                              // %if.then85
                                        //   in Loop: Header=BB214_18 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.24:                              // %if.end90
                                        //   in Loop: Header=BB214_18 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_25:                             // %if.end93
                                        //   in Loop: Header=BB214_18 Depth=1
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	stur	wzr, [x29, #-32]
	stur	w8, [x29, #-40]
	ldr	x8, [x9, #296]
	str	x8, [sp, #40]
.LBB214_26:                             // %for.cond99
                                        //   Parent Loop BB214_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-32]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB214_16
// %bb.27:                              // %for.body102
                                        //   in Loop: Header=BB214_26 Depth=2
	ldr	x8, [sp, #40]
	ldur	w9, [x29, #-44]
	ldr	w8, [x8]
	cmp	w9, w8
	b.eq	.LBB214_17
// %bb.28:                              // %for.inc
                                        //   in Loop: Header=BB214_26 Depth=2
	ldur	w8, [x29, #-32]
	ldr	x9, [sp, #40]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-32]
	str	x9, [sp, #40]
	b	.LBB214_26
.LBB214_29:                             // %do.body136
	cbnz	x8, .LBB214_32
// %bb.30:                              // %if.then139
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.31:                              // %if.end144
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_32:                             // %if.end147
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	stur	w8, [x29, #-40]
	str	w8, [x9, #508]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB214_35
// %bb.33:                              // %if.then156
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.34:                              // %if.end161
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_35:                             // %if.end164
	ldp	x8, x9, [sp, #16]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	stur	w8, [x29, #-40]
	str	w8, [x9, #512]
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB214_38
// %bb.36:                              // %if.then173
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB214_39
// %bb.37:                              // %if.end178
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB214_38:                             // %if.end181
	ldp	x8, x9, [sp, #16]
	mov	w1, #1
	mov	w19, #1
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	stur	w8, [x29, #-40]
	lsr	w8, w8, #4
	str	w8, [x9, #516]
	ldur	w8, [x29, #-40]
	ldur	x9, [x29, #-16]
	and	w8, w8, #0xf
	str	w8, [x9, #520]
	ldur	x8, [x29, #-16]
	ldr	x9, [x8]
	add	x10, x9, #44                    // =44
	str	x10, [sp]
	ldr	w8, [x8, #508]
	str	w8, [x9, #44]
	ldur	x8, [x29, #-16]
	mov	x9, x10
	ldr	w8, [x8, #512]
	str	w8, [x9, #4]
	ldur	x8, [x29, #-16]
	mov	x9, x10
	ldr	w8, [x8, #516]
	str	w8, [x9, #8]
	ldur	x8, [x29, #-16]
	mov	x9, x10
	ldr	w8, [x8, #520]
	str	w8, [x9, #12]
	ldur	x8, [x29, #-16]
	mov	w9, #104
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldr	x8, [x8, #568]
	str	wzr, [x8, #168]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #164]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #164]
	ldp	x8, x9, [sp, #24]
	str	x8, [x9]
	ldr	x8, [sp, #16]
	ldr	x9, [sp, #32]
	str	x8, [x9, #8]
	stur	w19, [x29, #-4]
	str	w19, [sp, #12]
	b	.LBB214_40
.LBB214_39:                             // %if.then6
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
.LBB214_40:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end214:
	.size	get_sos, .Lfunc_end214-get_sos
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_dac
	.type	get_dac,@function
get_dac:                                // @get_dac
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	str	x21, [sp, #80]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #24]
	ldr	x8, [x8, #8]
	str	x8, [sp, #16]
	cbnz	x8, .LBB215_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB215_21
// %bb.2:                               // %if.end
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB215_3:                              // %if.end6
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-16]
	b.ne	.LBB215_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB215_21
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB215_6:                              // %if.end18
	ldp	x8, x9, [sp, #16]
	ldur	x10, [x29, #-16]
	mov	w19, #78
	mov	w20, #26
	sub	x8, x8, #1                      // =1
	add	x11, x9, #1                     // =1
	stp	x8, x11, [sp, #16]
	ldrb	w8, [x9]
	mov	w21, #27
	add	x8, x10, x8
	sub	x8, x8, #2                      // =2
	stur	x8, [x29, #-16]
	b	.LBB215_8
.LBB215_7:                              // %if.then80
                                        //   in Loop: Header=BB215_8 Depth=1
	ldur	x9, [x29, #-8]
	ldrsw	x10, [x29, #24]
	add	x9, x10, x9
	strb	w8, [x9, #328]
.LBB215_8:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	cmp	x8, #1                          // =1
	b.lt	.LBB215_22
// %bb.9:                               // %do.body24
                                        //   in Loop: Header=BB215_8 Depth=1
	ldr	x8, [sp, #16]
	cbnz	x8, .LBB215_12
// %bb.10:                              // %if.then27
                                        //   in Loop: Header=BB215_8 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB215_21
// %bb.11:                              // %if.end32
                                        //   in Loop: Header=BB215_8 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB215_12:                             // %if.end35
                                        //   in Loop: Header=BB215_8 Depth=1
	ldp	x8, x9, [sp, #16]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	str	w8, [x29, #24]
	b.ne	.LBB215_15
// %bb.13:                              // %if.then44
                                        //   in Loop: Header=BB215_8 Depth=1
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB215_21
// %bb.14:                              // %if.end49
                                        //   in Loop: Header=BB215_8 Depth=1
	ldr	x8, [sp, #32]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #16]
.LBB215_15:                             // %if.end52
                                        //   in Loop: Header=BB215_8 Depth=1
	ldp	x8, x9, [sp, #16]
	mov	w1, #1
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #16]
	ldrb	w8, [x9]
	ldp	x9, x10, [x29, #-16]
	stur	w8, [x29, #-20]
	sub	x8, x9, #2                      // =2
	stur	x8, [x29, #-16]
	ldr	x8, [x10]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x29, #24]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [x29, #24]
	tbnz	w8, #31, .LBB215_18
// %bb.16:                              // %if.end52
                                        //   in Loop: Header=BB215_8 Depth=1
	cmp	w8, #32                         // =32
	b.ge	.LBB215_18
// %bb.17:                              // %if.end77
                                        //   in Loop: Header=BB215_8 Depth=1
	ldr	w9, [x29, #24]
	ldur	w8, [x29, #-20]
	cmp	w9, #16                         // =16
	b.ge	.LBB215_7
	b	.LBB215_19
.LBB215_18:                             // %if.then69
                                        //   in Loop: Header=BB215_8 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x29, #24]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w9, [x29, #24]
	ldur	w8, [x29, #-20]
	cmp	w9, #16                         // =16
	b.ge	.LBB215_7
.LBB215_19:                             // %if.else
                                        //   in Loop: Header=BB215_8 Depth=1
	ldur	x9, [x29, #-8]
	ldrsw	x10, [x29, #24]
	and	w8, w8, #0xf
	add	x9, x9, x10
	strb	w8, [x9, #312]
	ldur	w8, [x29, #-20]
	ldur	x9, [x29, #-8]
	ldrsw	x10, [x29, #24]
	lsr	w8, w8, #4
	add	x9, x9, x10
	strb	w8, [x9, #328]
	ldur	x8, [x29, #-8]
	ldrsw	x9, [x29, #24]
	add	x8, x8, x9
	ldrb	w9, [x8, #312]
	ldrb	w8, [x8, #328]
	cmp	w9, w8
	b.le	.LBB215_8
// %bb.20:                              // %if.then100
                                        //   in Loop: Header=BB215_8 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w21, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB215_8
.LBB215_21:                             // %if.then3
	mov	w8, #1
	str	wzr, [x29, #28]
	str	w8, [sp, #12]
	b	.LBB215_23
.LBB215_22:                             // %while.end
	ldp	x8, x9, [sp, #24]
	mov	w10, #1
	str	x8, [x9]
	ldr	x8, [sp, #16]
	ldr	x9, [sp, #32]
	str	x8, [x9, #8]
	str	w10, [x29, #28]
	str	w10, [sp, #12]
.LBB215_23:                             // %cleanup
	ldr	w0, [x29, #28]
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x21, [sp, #80]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end215:
	.size	get_dac, .Lfunc_end215-get_dac
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_dht
	.type	get_dht,@function
get_dht:                                // @get_dht
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #464                    // =464
	stp	x29, x30, [sp, #368]            // 16-byte Folded Spill
	str	x28, [sp, #384]                 // 8-byte Folded Spill
	stp	x26, x25, [sp, #400]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #416]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #432]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #448]            // 16-byte Folded Spill
	add	x29, sp, #368                   // =368
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	stur	x0, [x29, #-16]
	ldr	x8, [x0, #32]
	str	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
	cbnz	x8, .LBB216_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB216_33
// %bb.2:                               // %if.end
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB216_3:                              // %if.end6
	ldp	x8, x9, [sp, #24]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-24]
	b.ne	.LBB216_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB216_33
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB216_6:                              // %if.end18
	ldp	x8, x9, [sp, #24]
	ldur	x10, [x29, #-24]
	add	x19, sp, #68                    // =68
	mov	w20, #79
	sub	x8, x8, #1                      // =1
	add	x11, x9, #1                     // =1
	stp	x8, x11, [sp, #24]
	ldrb	w8, [x9]
	mov	w21, #1
	sub	x22, x29, #44                   // =44
	mov	w23, #85
	add	x8, x10, x8
	mov	w24, #28
	add	x25, sp, #68                    // =68
	sub	x8, x8, #2                      // =2
	mov	w26, #29
	stur	x8, [x29, #-24]
	cmp	x8, #1                          // =1
	b.lt	.LBB216_35
.LBB216_7:                              // %do.body24
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB216_13 Depth 2
                                        //     Child Loop BB216_21 Depth 2
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB216_10
// %bb.8:                               // %if.then27
                                        //   in Loop: Header=BB216_7 Depth=1
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB216_33
// %bb.9:                               // %if.end32
                                        //   in Loop: Header=BB216_7 Depth=1
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB216_10:                             // %if.end35
                                        //   in Loop: Header=BB216_7 Depth=1
	ldp	x8, x9, [sp, #24]
	mov	w1, #1
	sub	x10, x8, #1                     // =1
	add	x8, x9, #1                      // =1
	stp	x10, x8, [sp, #24]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	str	w8, [sp, #60]
	ldr	x8, [x9]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #60]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	sturb	wzr, [x29, #-44]
	str	wzr, [sp, #56]
	str	w21, [sp, #64]
	b	.LBB216_13
.LBB216_11:                             // %if.end55
                                        //   in Loop: Header=BB216_13 Depth=2
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB216_12:                             // %if.end58
                                        //   in Loop: Header=BB216_13 Depth=2
	ldp	x8, x9, [sp, #24]
	ldrsw	x10, [sp, #64]
	ldr	w11, [sp, #64]
	sub	x8, x8, #1                      // =1
	add	x12, x9, #1                     // =1
	stp	x8, x12, [sp, #24]
	ldrb	w8, [x9]
	ldr	w9, [sp, #56]
	add	w11, w11, #1                    // =1
	str	w11, [sp, #64]
	strb	w8, [x22, x10]
	add	w8, w9, w8
	str	w8, [sp, #56]
.LBB216_13:                             // %for.cond
                                        //   Parent Loop BB216_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #64]
	cmp	w8, #16                         // =16
	b.gt	.LBB216_16
// %bb.14:                              // %do.body47
                                        //   in Loop: Header=BB216_13 Depth=2
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB216_12
// %bb.15:                              // %if.then50
                                        //   in Loop: Header=BB216_13 Depth=2
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbnz	w0, .LBB216_11
	b	.LBB216_33
.LBB216_16:                             // %for.end
                                        //   in Loop: Header=BB216_7 Depth=1
	ldp	x8, x9, [x29, #-24]
	mov	w1, #2
	sub	x8, x8, #17                     // =17
	stur	x8, [x29, #-24]
	ldr	x8, [x9]
	ldurb	w9, [x29, #-43]
	add	x10, x8, #44                    // =44
	str	x10, [sp, #8]
	str	w9, [x8, #44]
	ldurb	w8, [x29, #-42]
	ldr	x9, [sp, #8]
	str	w8, [x9, #4]
	ldurb	w8, [x29, #-41]
	ldr	x9, [sp, #8]
	str	w8, [x9, #8]
	ldurb	w8, [x29, #-40]
	ldr	x9, [sp, #8]
	str	w8, [x9, #12]
	ldurb	w8, [x29, #-39]
	ldr	x9, [sp, #8]
	str	w8, [x9, #16]
	ldurb	w8, [x29, #-38]
	ldr	x9, [sp, #8]
	str	w8, [x9, #20]
	ldurb	w8, [x29, #-37]
	ldr	x9, [sp, #8]
	str	w8, [x9, #24]
	ldurb	w8, [x29, #-36]
	ldr	x9, [sp, #8]
	str	w8, [x9, #28]
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-16]
	ldurb	w9, [x29, #-35]
	mov	w1, #2
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	str	x10, [sp, #8]
	str	w9, [x8, #44]
	ldurb	w8, [x29, #-34]
	ldr	x9, [sp, #8]
	str	w8, [x9, #4]
	ldurb	w8, [x29, #-33]
	ldr	x9, [sp, #8]
	str	w8, [x9, #8]
	ldurb	w8, [x29, #-32]
	ldr	x9, [sp, #8]
	str	w8, [x9, #12]
	ldurb	w8, [x29, #-31]
	ldr	x9, [sp, #8]
	str	w8, [x9, #16]
	ldurb	w8, [x29, #-30]
	ldr	x9, [sp, #8]
	str	w8, [x9, #20]
	ldurb	w8, [x29, #-29]
	ldr	x9, [sp, #8]
	str	w8, [x9, #24]
	ldurb	w8, [x29, #-28]
	ldr	x9, [sp, #8]
	str	w8, [x9, #28]
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w23, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #56]
	cmp	w8, #256                        // =256
	b.gt	.LBB216_18
// %bb.17:                              // %lor.lhs.false
                                        //   in Loop: Header=BB216_7 Depth=1
	ldrsw	x8, [sp, #56]
	ldur	x9, [x29, #-24]
	cmp	x8, x9
	b.le	.LBB216_19
.LBB216_18:                             // %if.then144
                                        //   in Loop: Header=BB216_7 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w24, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB216_19:                             // %if.end148
                                        //   in Loop: Header=BB216_7 Depth=1
	str	wzr, [sp, #64]
	b	.LBB216_21
.LBB216_20:                             // %if.end164
                                        //   in Loop: Header=BB216_21 Depth=2
	ldp	x8, x9, [sp, #24]
	ldr	w11, [sp, #64]
	ldrsw	x10, [sp, #64]
	sub	x8, x8, #1                      // =1
	add	x12, x9, #1                     // =1
	stp	x8, x12, [sp, #24]
	ldrb	w8, [x9]
	add	w9, w11, #1                     // =1
	str	w9, [sp, #64]
	strb	w8, [x25, x10]
.LBB216_21:                             // %for.cond149
                                        //   Parent Loop BB216_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #56]
	cmp	w8, w9
	b.ge	.LBB216_25
// %bb.22:                              // %do.body153
                                        //   in Loop: Header=BB216_21 Depth=2
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB216_20
// %bb.23:                              // %if.then156
                                        //   in Loop: Header=BB216_21 Depth=2
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB216_33
// %bb.24:                              // %if.end161
                                        //   in Loop: Header=BB216_21 Depth=2
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
	b	.LBB216_20
.LBB216_25:                             // %for.end173
                                        //   in Loop: Header=BB216_7 Depth=1
	ldrsw	x8, [sp, #56]
	ldur	x9, [x29, #-24]
	ldrb	w10, [sp, #60]
	sub	x8, x9, x8
	stur	x8, [x29, #-24]
	tbz	w10, #4, .LBB216_27
// %bb.26:                              // %if.then177
                                        //   in Loop: Header=BB216_7 Depth=1
	ldr	w8, [sp, #60]
	ldur	x9, [x29, #-16]
	sub	w8, w8, #16                     // =16
	str	w8, [sp, #60]
	add	x8, x9, w8, sxtw #3
	add	x8, x8, #256                    // =256
	str	x8, [sp, #48]
	ldr	w8, [sp, #60]
	tbz	w8, #31, .LBB216_28
	b	.LBB216_31
.LBB216_27:                             // %if.else
                                        //   in Loop: Header=BB216_7 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #60]
	add	x8, x8, x9, lsl #3
	add	x8, x8, #224                    // =224
	str	x8, [sp, #48]
	ldr	w8, [sp, #60]
	tbnz	w8, #31, .LBB216_31
.LBB216_28:                             // %if.end183
                                        //   in Loop: Header=BB216_7 Depth=1
	cmp	w8, #4                          // =4
	b.ge	.LBB216_31
// %bb.29:                              // %if.end198
                                        //   in Loop: Header=BB216_7 Depth=1
	ldr	x8, [sp, #48]
	ldr	x8, [x8]
	cbz	x8, .LBB216_32
.LBB216_30:                             // %if.end203
                                        //   in Loop: Header=BB216_7 Depth=1
	ldr	x8, [sp, #48]
	ldurb	w9, [x29, #-28]
	ldr	q0, [x19, #256]
	ldr	x8, [x8]
	strb	w9, [x8, #16]
	str	q0, [x8]
	ldr	x8, [sp, #48]
	ldur	q0, [sp, #132]
	ldp	q2, q1, [x19, #96]
	ldr	q3, [x19, #80]
	ldr	x8, [x8]
	stur	q0, [x8, #81]
	stur	q1, [x8, #129]
	stur	q2, [x8, #113]
	stur	q3, [x8, #97]
	ldp	q0, q3, [x19, #128]
	ldp	q2, q1, [x19, #160]
	add	x9, x8, #17                     // =17
	stur	q0, [x8, #145]
	stur	q1, [x8, #193]
	stur	q2, [x8, #177]
	stur	q3, [x8, #161]
	ldp	q0, q2, [x19, #192]
	ldp	q1, q3, [x19, #224]
	stur	q0, [x8, #209]
	stur	q1, [x8, #241]
	stur	q2, [x8, #225]
	ldur	q0, [sp, #100]
	ldur	q1, [sp, #116]
	ldur	q2, [sp, #68]
	ldur	q4, [sp, #84]
	stur	q0, [x8, #49]
	stur	q1, [x8, #65]
	stur	q2, [x8, #17]
	stur	q4, [x8, #33]
	str	q3, [x9, #240]
	ldur	x8, [x29, #-24]
	cmp	x8, #1                          // =1
	b.ge	.LBB216_7
	b	.LBB216_35
.LBB216_31:                             // %if.then189
                                        //   in Loop: Header=BB216_7 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w26, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #60]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #48]
	ldr	x8, [x8]
	cbnz	x8, .LBB216_30
.LBB216_32:                             // %if.then201
                                        //   in Loop: Header=BB216_7 Depth=1
	ldur	x0, [x29, #-16]
	bl	jpeg_alloc_huff_table
	ldr	x8, [sp, #48]
	str	x0, [x8]
	b	.LBB216_30
.LBB216_33:                             // %if.then3
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #20]
.LBB216_34:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #448]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #432]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #416]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #400]            // 16-byte Folded Reload
	ldr	x28, [sp, #384]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #368]            // 16-byte Folded Reload
	add	sp, sp, #464                    // =464
	ret
.LBB216_35:                             // %while.end
	ldp	x8, x9, [sp, #32]
	mov	w10, #1
	str	x8, [x9]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #40]
	str	x8, [x9, #8]
	stur	w10, [x29, #-4]
	str	w10, [sp, #20]
	b	.LBB216_34
.Lfunc_end216:
	.size	get_dht, .Lfunc_end216-get_dht
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_dqt
	.type	get_dqt,@function
get_dqt:                                // @get_dqt
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	stur	x0, [x29, #-16]
	ldr	x8, [x0, #32]
	str	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
	cbnz	x8, .LBB217_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB217_35
// %bb.2:                               // %if.end
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB217_3:                              // %if.end6
	ldp	x8, x9, [sp, #24]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-24]
	b.ne	.LBB217_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB217_35
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB217_6:                              // %if.end18
	ldp	x8, x9, [sp, #24]
	ldur	x10, [x29, #-24]
	adrp	x21, jpeg_natural_order
	mov	w19, #80
	sub	x8, x8, #1                      // =1
	add	x11, x9, #1                     // =1
	stp	x8, x11, [sp, #24]
	ldrb	w8, [x9]
	mov	w20, #30
	add	x21, x21, :lo12:jpeg_natural_order
	mov	w22, #92
	add	x8, x10, x8
	sub	x8, x8, #2                      // =2
	stur	x8, [x29, #-24]
.LBB217_7:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB217_18 Depth 2
                                        //     Child Loop BB217_32 Depth 2
	ldur	x8, [x29, #-24]
	cmp	x8, #1                          // =1
	b.lt	.LBB217_37
// %bb.8:                               // %do.body24
                                        //   in Loop: Header=BB217_7 Depth=1
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB217_11
// %bb.9:                               // %if.then27
                                        //   in Loop: Header=BB217_7 Depth=1
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB217_35
// %bb.10:                              // %if.end32
                                        //   in Loop: Header=BB217_7 Depth=1
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB217_11:                             // %if.end35
                                        //   in Loop: Header=BB217_7 Depth=1
	ldp	x8, x9, [sp, #24]
	mov	w1, #1
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	lsr	w10, w8, #4
	and	w8, w8, #0xf
	stur	w10, [x29, #-36]
	stur	w8, [x29, #-28]
	ldr	x8, [x9]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-16]
	mov	w9, w10
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	w8, [x29, #-28]
	cmp	w8, #4                          // =4
	b.lt	.LBB217_13
// %bb.12:                              // %if.then50
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB217_13:                             // %if.end58
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	cbnz	x8, .LBB217_15
// %bb.14:                              // %if.then62
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x0, [x29, #-16]
	bl	jpeg_alloc_quant_table
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #192]
.LBB217_15:                             // %if.end67
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #192]
	stur	wzr, [x29, #-32]
	str	x8, [sp, #48]
	b	.LBB217_18
.LBB217_16:                             // %if.end101
                                        //   in Loop: Header=BB217_18 Depth=2
	ldp	x8, x9, [sp, #24]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	ldur	w9, [x29, #-40]
	add	w8, w9, w8
.LBB217_17:                             // %if.end125
                                        //   in Loop: Header=BB217_18 Depth=2
	stur	w8, [x29, #-40]
	ldursw	x8, [x29, #-32]
	ldur	w9, [x29, #-40]
	ldr	x10, [sp, #48]
	ldrsw	x8, [x21, x8, lsl #2]
	strh	w9, [x10, x8, lsl #1]
	ldur	w8, [x29, #-32]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-32]
.LBB217_18:                             // %for.cond
                                        //   Parent Loop BB217_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w8, [x29, #-32]
	cmp	w8, #63                         // =63
	b.gt	.LBB217_30
// %bb.19:                              // %for.body
                                        //   in Loop: Header=BB217_18 Depth=2
	ldur	w9, [x29, #-36]
	ldr	x8, [sp, #24]
	cbz	w9, .LBB217_26
// %bb.20:                              // %do.body75
                                        //   in Loop: Header=BB217_18 Depth=2
	cbnz	x8, .LBB217_23
// %bb.21:                              // %if.then78
                                        //   in Loop: Header=BB217_18 Depth=2
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB217_35
// %bb.22:                              // %if.end83
                                        //   in Loop: Header=BB217_18 Depth=2
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB217_23:                             // %if.end86
                                        //   in Loop: Header=BB217_18 Depth=2
	ldp	x8, x9, [sp, #24]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	lsl	w8, w8, #8
	stur	w8, [x29, #-40]
	b.ne	.LBB217_16
// %bb.24:                              // %if.then93
                                        //   in Loop: Header=BB217_18 Depth=2
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB217_35
// %bb.25:                              // %if.end98
                                        //   in Loop: Header=BB217_18 Depth=2
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
	b	.LBB217_16
.LBB217_26:                             // %do.body108
                                        //   in Loop: Header=BB217_18 Depth=2
	cbnz	x8, .LBB217_29
// %bb.27:                              // %if.then111
                                        //   in Loop: Header=BB217_18 Depth=2
	ldr	x8, [sp, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB217_35
// %bb.28:                              // %if.end116
                                        //   in Loop: Header=BB217_18 Depth=2
	ldr	x8, [sp, #40]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #24]
.LBB217_29:                             // %if.end119
                                        //   in Loop: Header=BB217_18 Depth=2
	ldp	x8, x9, [sp, #24]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w8, [x9]
	b	.LBB217_17
.LBB217_30:                             // %for.end
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	ldr	w8, [x8, #124]
	cmp	w8, #2                          // =2
	b.lt	.LBB217_33
// %bb.31:                              // %if.then134
                                        //   in Loop: Header=BB217_7 Depth=1
	stur	wzr, [x29, #-32]
	mov	w8, wzr
	cmp	w8, #63                         // =63
	b.gt	.LBB217_33
.LBB217_32:                             // %do.body139
                                        //   Parent Loop BB217_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #48]
	ldursw	x10, [x29, #-32]
	mov	w1, #2
	ldr	x8, [x8]
	add	x11, x8, #44                    // =44
	str	x11, [sp, #8]
	ldrh	w9, [x9, x10, lsl #1]
	mov	x10, x11
	str	w9, [x8, #44]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #2]
	str	w8, [x10, #4]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	mov	x10, x11
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #4]
	str	w8, [x10, #8]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	mov	x10, x11
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #6]
	str	w8, [x10, #12]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	ldr	x10, [sp, #8]
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #8]
	str	w8, [x10, #16]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	ldr	x10, [sp, #8]
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #10]
	str	w8, [x10, #20]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	ldr	x10, [sp, #8]
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #12]
	str	w8, [x10, #24]
	ldr	x8, [sp, #48]
	ldursw	x9, [x29, #-32]
	add	x8, x8, x9, lsl #1
	ldrh	w8, [x8, #14]
	ldr	x9, [sp, #8]
	str	w8, [x9, #28]
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	str	w22, [x8, #40]
	ldur	x0, [x29, #-16]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	w8, [x29, #-32]
	add	w8, w8, #8                      // =8
	stur	w8, [x29, #-32]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB217_32
.LBB217_33:                             // %if.end199
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-36]
	sub	x8, x8, #65                     // =65
	stur	x8, [x29, #-24]
	cbz	w9, .LBB217_7
// %bb.34:                              // %if.then202
                                        //   in Loop: Header=BB217_7 Depth=1
	ldur	x8, [x29, #-24]
	sub	x8, x8, #64                     // =64
	stur	x8, [x29, #-24]
	b	.LBB217_7
.LBB217_35:                             // %if.then3
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #20]
.LBB217_36:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB217_37:                             // %while.end
	ldp	x8, x9, [sp, #32]
	mov	w10, #1
	str	x8, [x9]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #40]
	str	x8, [x9, #8]
	stur	w10, [x29, #-4]
	str	w10, [sp, #20]
	b	.LBB217_36
.Lfunc_end217:
	.size	get_dqt, .Lfunc_end217-get_dqt
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_dri
	.type	get_dri,@function
get_dri:                                // @get_dri
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #32]
	ldr	x9, [x8]
	stp	x9, x8, [sp, #16]
	ldr	x8, [x8, #8]
	str	x8, [sp, #8]
	cbnz	x8, .LBB218_3
// %bb.1:                               // %if.then
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB218_15
// %bb.2:                               // %if.end
	ldr	x8, [sp, #24]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #8]
.LBB218_3:                              // %if.end6
	ldp	x8, x9, [sp, #8]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	lsl	x8, x8, #8
	stur	x8, [x29, #-16]
	b.ne	.LBB218_6
// %bb.4:                               // %if.then10
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB218_15
// %bb.5:                               // %if.end15
	ldr	x8, [sp, #24]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #8]
.LBB218_6:                              // %if.end18
	ldp	x8, x9, [sp, #8]
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	ldur	x9, [x29, #-16]
	add	x8, x9, x8
	cmp	x8, #4                          // =4
	stur	x8, [x29, #-16]
	b.eq	.LBB218_8
// %bb.7:                               // %if.then24
	ldur	x8, [x29, #-8]
	mov	w9, #9
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB218_8:                              // %do.body27
	ldr	x8, [sp, #8]
	cbnz	x8, .LBB218_11
// %bb.9:                               // %if.then30
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB218_15
// %bb.10:                              // %if.end35
	ldr	x8, [sp, #24]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #8]
.LBB218_11:                             // %if.end38
	ldp	x8, x9, [sp, #8]
	subs	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	lsl	w8, w8, #8
	str	w8, [x29, #24]
	b.ne	.LBB218_14
// %bb.12:                              // %if.then45
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #24]
	blr	x8
	cbz	w0, .LBB218_15
// %bb.13:                              // %if.end50
	ldr	x8, [sp, #24]
	ldp	x9, x8, [x8]
	stp	x8, x9, [sp, #8]
.LBB218_14:                             // %if.end53
	ldp	x8, x9, [sp, #8]
	mov	w1, #1
	mov	w19, #1
	sub	x8, x8, #1                      // =1
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #8]
	ldrb	w8, [x9]
	ldr	w9, [x29, #24]
	ldur	x10, [x29, #-8]
	add	w8, w9, w8
	str	w8, [x29, #24]
	ldr	x8, [x10]
	mov	w9, #81
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x29, #24]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [x29, #24]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #360]
	ldp	x8, x9, [sp, #16]
	str	x8, [x9]
	ldr	x8, [sp, #8]
	ldr	x9, [sp, #24]
	str	x8, [x9, #8]
	str	w19, [x29, #28]
	str	w19, [sp, #4]
	b	.LBB218_16
.LBB218_15:                             // %if.then3
	mov	w8, #1
	str	wzr, [x29, #28]
	str	w8, [sp, #4]
.LBB218_16:                             // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end218:
	.size	get_dri, .Lfunc_end218-get_dri
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_calc_output_dimensions     // -- Begin function jpeg_calc_output_dimensions
	.p2align	2
	.type	jpeg_calc_output_dimensions,@function
jpeg_calc_output_dimensions:            // @jpeg_calc_output_dimensions
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #28]
	cmp	w8, #202                        // =202
	b.eq	.LBB219_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB219_2:                              // %if.end
	ldur	x8, [x29, #-8]
	ldp	w9, w10, [x8, #60]
	cmp	w10, w9, lsl #3
	b.lo	.LBB219_4
// %bb.3:                               // %if.then5
	ldr	w0, [x8, #40]
	mov	w1, #8
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	mov	w1, #8
	str	w0, [x8, #128]
	ldur	x8, [x29, #-8]
	ldr	w0, [x8, #44]
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	mov	w9, #1
	str	w0, [x8, #132]
	ldur	x8, [x29, #-8]
	b	.LBB219_9
.LBB219_4:                              // %if.else
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #60]
	ldr	w10, [x9, #64]
	cmp	w10, w8, lsl #2
	b.lo	.LBB219_6
// %bb.5:                               // %if.then15
	ldr	w0, [x9, #40]
	mov	w1, #4
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	mov	w1, #4
	str	w0, [x8, #128]
	ldur	x8, [x29, #-8]
	ldr	w0, [x8, #44]
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	mov	w9, #2
	str	w0, [x8, #132]
	ldur	x8, [x29, #-8]
	b	.LBB219_9
.LBB219_6:                              // %if.else27
	ldur	x8, [x29, #-8]
	ldr	w9, [x9, #60]
	ldr	w10, [x8, #64]
	ldr	w0, [x8, #40]
	cmp	w10, w9, lsl #1
	b.lo	.LBB219_8
// %bb.7:                               // %if.then33
	mov	w1, #2
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	mov	w1, #2
	str	w0, [x8, #128]
	ldur	x8, [x29, #-8]
	ldr	w0, [x8, #44]
	bl	jdiv_round_up
	ldur	x8, [x29, #-8]
	mov	w9, #4
	str	w0, [x8, #132]
	ldur	x8, [x29, #-8]
	b	.LBB219_9
.LBB219_8:                              // %if.else45
	ldur	x8, [x29, #-8]
	str	w0, [x8, #128]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #44]
	str	w9, [x8, #132]
	ldur	x8, [x29, #-8]
	mov	w9, #8
.LBB219_9:                              // %if.end53
	str	w9, [x8, #396]
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-12]
	ldr	x8, [x8, #296]
	str	x8, [sp, #8]
	b	.LBB219_11
.LBB219_10:                             // %while.end
                                        //   in Loop: Header=BB219_11 Depth=1
	ldr	x8, [sp, #8]
	str	w9, [x8, #36]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #8]
.LBB219_11:                             // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB219_17
// %bb.12:                              // %for.body
                                        //   in Loop: Header=BB219_11 Depth=1
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #396]
	str	w8, [sp, #4]
	mov	w8, w8
	cmp	w8, #7                          // =7
	b.gt	.LBB219_15
.LBB219_13:                             // %land.lhs.true
                                        //   in Loop: Header=BB219_11 Depth=1
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	ldr	w10, [sp, #4]
	ldr	w8, [x8, #8]
	ldr	w11, [x9, #388]
	ldr	w9, [x9, #396]
	mul	w8, w8, w10
	mul	w9, w11, w9
	cmp	w9, w8, lsl #1
	b.lt	.LBB219_15
// %bb.14:                              // %land.rhs
                                        //   in Loop: Header=BB219_11 Depth=1
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	ldr	w10, [sp, #4]
	ldr	w8, [x8, #12]
	ldr	w11, [x9, #392]
	ldr	w9, [x9, #396]
	mul	w8, w8, w10
	mul	w9, w11, w9
	cmp	w9, w8, lsl #1
	cset	w8, ge
	ldr	w9, [sp, #4]
	cbnz	w8, .LBB219_16
	b	.LBB219_10
.LBB219_15:                             //   in Loop: Header=BB219_11 Depth=1
	mov	w8, wzr
	ldr	w9, [sp, #4]
	cbz	w8, .LBB219_10
.LBB219_16:                             // %while.body
                                        //   in Loop: Header=BB219_11 Depth=1
	lsl	w8, w9, #1
	str	w8, [sp, #4]
	mov	w8, w8
	cmp	w8, #7                          // =7
	b.le	.LBB219_13
	b	.LBB219_15
.LBB219_17:                             // %for.end
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-12]
	ldr	x8, [x8, #296]
	str	x8, [sp, #8]
.LBB219_18:                             // %for.cond73
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	w10, [x8, #48]
	cmp	w9, w10
	b.ge	.LBB219_20
// %bb.19:                              // %for.body77
                                        //   in Loop: Header=BB219_18 Depth=1
	ldr	x9, [sp, #8]
	ldur	x10, [x29, #-8]
	ldr	w8, [x8, #40]
	ldrsw	x11, [x9, #8]
	ldrsw	x9, [x9, #36]
	ldrsw	x10, [x10, #388]
	mul	x9, x11, x9
	mul	x0, x8, x9
	lsl	x1, x10, #3
	bl	jdiv_round_up
	ldr	x8, [sp, #8]
	str	w0, [x8, #40]
	ldr	x8, [sp, #8]
	ldur	x9, [x29, #-8]
	ldrsw	x10, [x8, #12]
	ldrsw	x8, [x8, #36]
	ldr	w11, [x9, #44]
	ldrsw	x9, [x9, #392]
	mul	x8, x10, x8
	mul	x0, x11, x8
	lsl	x1, x9, #3
	bl	jdiv_round_up
	ldr	x8, [sp, #8]
	str	w0, [x8, #44]
	ldur	w8, [x29, #-12]
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-12]
	str	x9, [sp, #8]
	b	.LBB219_18
.LBB219_20:                             // %for.end105
	ldr	w8, [x8, #56]
	sub	w9, w8, #2                      // =2
	cmp	w9, #2                          // =2
	b.lo	.LBB219_24
// %bb.21:                              // %for.end105
	sub	w9, w8, #4                      // =4
	cmp	w9, #2                          // =2
	b.hs	.LBB219_29
// %bb.22:                              // %sw.bb108
	ldur	x8, [x29, #-8]
	mov	w9, #4
	str	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB219_25
.LBB219_23:
	mov	w8, #1
	b	.LBB219_26
.LBB219_24:                             // %sw.bb106
	ldur	x8, [x29, #-8]
	mov	w9, #3
	str	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbnz	w8, .LBB219_23
.LBB219_25:                             // %cond.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #136]
.LBB219_26:                             // %cond.end
	ldur	x9, [x29, #-8]
	str	w8, [x9, #140]
	ldur	x0, [x29, #-8]
	bl	use_merged_upsample
	ldur	x8, [x29, #-8]
	cbz	w0, .LBB219_28
// %bb.27:                              // %if.then115
	ldr	w9, [x8, #392]
	ldur	x8, [x29, #-8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w9, [x8, #144]
	add	sp, sp, #48                     // =48
	ret
.LBB219_28:
	mov	w9, #1
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w9, [x8, #144]
	add	sp, sp, #48                     // =48
	ret
.LBB219_29:                             // %for.end105
	cmp	w8, #1                          // =1
	b.ne	.LBB219_31
// %bb.30:                              // %sw.bb
	ldur	x8, [x29, #-8]
	mov	w9, #1
	str	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbnz	w8, .LBB219_23
	b	.LBB219_25
.LBB219_31:                             // %sw.default
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #48]
	str	w9, [x8, #136]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbnz	w8, .LBB219_23
	b	.LBB219_25
.Lfunc_end219:
	.size	jpeg_calc_output_dimensions, .Lfunc_end219-jpeg_calc_output_dimensions
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function use_merged_upsample
	.type	use_merged_upsample,@function
use_merged_upsample:                    // @use_merged_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	str	x0, [sp, #-16]!
	ldr	w8, [x0, #92]
	cbnz	w8, .LBB220_2
// %bb.1:                               // %lor.lhs.false
	ldr	x8, [sp]
	ldr	w8, [x8, #384]
	cbz	w8, .LBB220_3
.LBB220_2:                              // %if.then
	str	wzr, [sp, #12]
	mov	w0, wzr
	add	sp, sp, #16                     // =16
	ret
.LBB220_3:                              // %if.end
	ldr	x8, [sp]
	ldr	w8, [x8, #52]
	cmp	w8, #3                          // =3
	b.ne	.LBB220_7
// %bb.4:                               // %lor.lhs.false2
	ldr	x8, [sp]
	ldr	w8, [x8, #48]
	cmp	w8, #3                          // =3
	b.ne	.LBB220_7
// %bb.5:                               // %lor.lhs.false4
	ldr	x8, [sp]
	ldr	w8, [x8, #56]
	cmp	w8, #2                          // =2
	b.ne	.LBB220_7
// %bb.6:                               // %lor.lhs.false6
	ldr	x8, [sp]
	ldr	w8, [x8, #136]
	cmp	w8, #3                          // =3
	b.eq	.LBB220_8
.LBB220_7:                              // %if.then8
	str	wzr, [sp, #12]
	mov	w0, wzr
	add	sp, sp, #16                     // =16
	ret
.LBB220_8:                              // %if.end9
	ldr	x8, [sp]
	ldr	x8, [x8, #296]
	ldr	w8, [x8, #8]
	cmp	w8, #2                          // =2
	b.ne	.LBB220_14
// %bb.9:                               // %lor.lhs.false11
	ldr	x8, [sp]
	ldr	x8, [x8, #296]
	ldr	w8, [x8, #104]
	cmp	w8, #1                          // =1
	b.ne	.LBB220_14
// %bb.10:                              // %lor.lhs.false16
	ldr	x8, [sp]
	ldr	x8, [x8, #296]
	ldr	w8, [x8, #200]
	cmp	w8, #1                          // =1
	b.ne	.LBB220_14
// %bb.11:                              // %lor.lhs.false21
	ldr	x8, [sp]
	ldr	x8, [x8, #296]
	ldr	w8, [x8, #12]
	cmp	w8, #2                          // =2
	b.gt	.LBB220_14
// %bb.12:                              // %lor.lhs.false25
	ldr	x8, [sp]
	ldr	x8, [x8, #296]
	ldr	w8, [x8, #108]
	cmp	w8, #1                          // =1
	b.ne	.LBB220_14
// %bb.13:                              // %lor.lhs.false30
	ldr	x8, [sp]
	ldr	x8, [x8, #296]
	ldr	w8, [x8, #204]
	cmp	w8, #1                          // =1
	b.eq	.LBB220_15
.LBB220_14:                             // %if.then35
	str	wzr, [sp, #12]
	mov	w0, wzr
	add	sp, sp, #16                     // =16
	ret
.LBB220_15:                             // %if.end36
	ldr	x8, [sp]
	ldr	x9, [x8, #296]
	ldr	w8, [x8, #396]
	ldr	w9, [x9, #36]
	cmp	w9, w8
	b.ne	.LBB220_18
// %bb.16:                              // %lor.lhs.false40
	ldr	x8, [sp]
	ldr	x9, [x8, #296]
	ldr	w8, [x8, #396]
	ldr	w9, [x9, #132]
	cmp	w9, w8
	b.ne	.LBB220_18
// %bb.17:                              // %lor.lhs.false46
	ldr	x8, [sp]
	ldr	x9, [x8, #296]
	ldr	w8, [x8, #396]
	ldr	w9, [x9, #228]
	cmp	w9, w8
	b.eq	.LBB220_19
.LBB220_18:                             // %if.then52
	str	wzr, [sp, #12]
	mov	w0, wzr
	add	sp, sp, #16                     // =16
	ret
.LBB220_19:                             // %if.end53
	mov	w8, #1
	str	w8, [sp, #12]
	mov	w0, w8
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end220:
	.size	use_merged_upsample, .Lfunc_end220-use_merged_upsample
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_new_colormap               // -- Begin function jpeg_new_colormap
	.p2align	2
	.type	jpeg_new_colormap,@function
jpeg_new_colormap:                      // @jpeg_new_colormap
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #528]
	stp	x8, x0, [sp]
	ldr	w8, [x0, #28]
	cmp	w8, #207                        // =207
	b.eq	.LBB221_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB221_2:                              // %if.end
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB221_6
// %bb.3:                               // %land.lhs.true
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #120]
	cbz	w8, .LBB221_6
// %bb.4:                               // %land.lhs.true6
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #152]
	cbz	x8, .LBB221_6
// %bb.5:                               // %if.then8
	ldp	x8, x9, [sp]
	ldr	x8, [x8, #40]
	str	x8, [x9, #608]
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #608]
	ldr	x8, [x8, #24]
	blr	x8
	ldr	x8, [sp]
	str	wzr, [x8, #16]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB221_6:                              // %if.else
	ldr	x8, [sp, #8]
	mov	w9, #45
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end221:
	.size	jpeg_new_colormap, .Lfunc_end221-jpeg_new_colormap
	.cfi_endproc
                                        // -- End function
	.globl	jinit_master_decompress         // -- Begin function jinit_master_decompress
	.p2align	2
	.type	jinit_master_decompress,@function
jinit_master_decompress:                // @jinit_master_decompress
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #48
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, prepare_for_output_pass
	str	x0, [sp]
	add	x9, x9, :lo12:prepare_for_output_pass
	str	x0, [x8, #528]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, finish_output_pass
	mov	x8, x0
	add	x9, x9, :lo12:finish_output_pass
	str	x9, [x8, #8]
	mov	x8, x0
	str	wzr, [x8, #16]
	ldr	x0, [sp, #8]
	bl	master_selection
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end222:
	.size	jinit_master_decompress, .Lfunc_end222-jinit_master_decompress
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function prepare_for_output_pass
	.type	prepare_for_output_pass,@function
prepare_for_output_pass:                // @prepare_for_output_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #528]
	stp	x8, x0, [sp]
	ldr	w8, [x8, #16]
	cbz	w8, .LBB223_3
// %bb.1:                               // %if.then
	ldp	x8, x0, [sp]
	mov	w1, wzr
	str	wzr, [x8, #16]
	ldr	x8, [x0, #608]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	mov	w1, #2
	ldr	x8, [x0, #552]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	mov	w1, #2
.LBB223_2:                              // %if.end51
	ldr	x8, [x0, #536]
	ldr	x8, [x8]
	blr	x8
	b	.LBB223_6
.LBB223_3:                              // %if.else
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB223_5
// %bb.4:                               // %land.lhs.true
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #152]
	cbz	x8, .LBB223_16
.LBB223_5:                              // %if.end22
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #584]
	ldr	x8, [x8]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #544]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #84]
	cbz	w8, .LBB223_11
.LBB223_6:                              // %if.end51
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB223_9
// %bb.7:                               // %if.then53
	ldp	x8, x9, [sp]
	ldr	w8, [x8, #24]
	ldr	x9, [x9, #16]
	str	w8, [x9, #24]
	ldp	x8, x9, [sp]
	ldr	w10, [x8, #16]
	ldr	w8, [x8, #24]
	ldr	x9, [x9, #16]
	cmp	w10, #0                         // =0
	mov	w10, #1
	cinc	w10, w10, ne
	add	w8, w8, w10
	str	w8, [x9, #28]
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #80]
	cbz	w8, .LBB223_9
// %bb.8:                               // %land.lhs.true62
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #36]
	cbz	w8, .LBB223_10
.LBB223_9:                              // %if.end72
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB223_10:                             // %if.then64
	ldr	x8, [sp, #8]
	ldr	x9, [x8, #16]
	ldr	w8, [x8, #124]
	ldr	w10, [x9, #28]
	cmp	w8, #0                          // =0
	mov	w8, #1
	cinc	w8, w8, ne
	add	w8, w10, w8
	str	w8, [x9, #28]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB223_11:                             // %if.then27
	ldr	x8, [sp]
	ldr	w8, [x8, #28]
	cbnz	w8, .LBB223_13
// %bb.12:                              // %if.then29
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #600]
	ldr	x8, [x8]
	blr	x8
.LBB223_13:                             // %if.end32
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #592]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB223_15
// %bb.14:                              // %if.then37
	ldp	x9, x0, [sp]
	ldr	x8, [x0, #608]
	ldr	w1, [x9, #16]
	ldr	x8, [x8]
	blr	x8
.LBB223_15:                             // %if.end42
	ldp	x8, x0, [sp]
	ldr	x9, [x0, #552]
	ldr	w8, [x8, #16]
	ldr	x9, [x9]
	cmp	w8, #0                          // =0
	mov	w8, #3
	csel	w1, w8, wzr, ne
	blr	x9
	ldr	x0, [sp, #8]
	mov	w1, wzr
	b	.LBB223_2
.LBB223_16:                             // %if.then7
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #108]
	cbz	w8, .LBB223_19
// %bb.17:                              // %land.lhs.true9
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #124]
	cbz	w8, .LBB223_19
// %bb.18:                              // %if.then11
	ldp	x8, x9, [sp]
	ldr	x8, [x8, #40]
	str	x8, [x9, #608]
	ldr	x8, [sp]
	mov	w9, #1
	str	w9, [x8, #16]
	b	.LBB223_5
.LBB223_19:                             // %if.else15
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #116]
	cbz	w8, .LBB223_21
// %bb.20:                              // %if.then17
	ldp	x8, x9, [sp]
	ldr	x8, [x8, #32]
	str	x8, [x9, #608]
	b	.LBB223_5
.LBB223_21:                             // %if.else19
	ldr	x8, [sp, #8]
	mov	w9, #45
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB223_5
.Lfunc_end223:
	.size	prepare_for_output_pass, .Lfunc_end223-prepare_for_output_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_output_pass
	.type	finish_output_pass,@function
finish_output_pass:                     // @finish_output_pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #528]
	stp	x8, x0, [sp]
	ldr	w8, [x0, #100]
	cbz	w8, .LBB224_2
// %bb.1:                               // %if.then
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #608]
	ldr	x8, [x8, #16]
	blr	x8
.LBB224_2:                              // %if.end
	ldr	x8, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	w9, [x8, #24]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #24]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end224:
	.size	finish_output_pass, .Lfunc_end224-finish_output_pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function master_selection
	.type	master_selection,@function
master_selection:                       // @master_selection
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #528]
	stp	x8, x0, [x29, #-16]
	bl	jpeg_calc_output_dimensions
	ldur	x0, [x29, #-8]
	bl	prepare_range_limit_table
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #128]
	ldrsw	x8, [x8, #136]
	mul	x8, x9, x8
	tst	x8, #0xffffffff00000000
	str	x8, [sp, #16]
	str	w8, [sp, #12]
	b.eq	.LBB225_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #69
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB225_2:                              // %if.end
	ldp	x8, x0, [x29, #-16]
	str	wzr, [x8, #24]
	bl	use_merged_upsample
	ldur	x8, [x29, #-16]
	str	w0, [x8, #28]
	ldur	x8, [x29, #-16]
	str	xzr, [x8, #32]
	ldur	x8, [x29, #-16]
	str	xzr, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB225_4
// %bb.3:                               // %lor.lhs.false
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #80]
	cbnz	w8, .LBB225_5
.LBB225_4:                              // %if.then8
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #116]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #120]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #124]
.LBB225_5:                              // %if.end9
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB225_16
// %bb.6:                               // %if.then12
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #84]
	cbz	w8, .LBB225_8
// %bb.7:                               // %if.then14
	ldur	x8, [x29, #-8]
	mov	w9, #46
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB225_8:                              // %if.end19
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #136]
	cmp	w9, #3                          // =3
	b.eq	.LBB225_10
// %bb.9:                               // %if.then23
	mov	w9, #1
	str	w9, [x8, #116]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #120]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #124]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #152]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #116]
	cbnz	w8, .LBB225_12
	b	.LBB225_13
.LBB225_10:                             // %if.else
	ldr	x9, [x8, #152]
	ldur	x8, [x29, #-8]
	cbz	x9, .LBB225_37
// %bb.11:                              // %if.then30
	mov	w9, #1
	str	w9, [x8, #120]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #116]
	cbz	w8, .LBB225_13
.LBB225_12:                             // %if.then43
	ldur	x0, [x29, #-8]
	bl	jinit_1pass_quantizer
	ldp	x9, x8, [x29, #-16]
	ldr	x8, [x8, #608]
	str	x8, [x9, #32]
.LBB225_13:                             // %if.end45
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #124]
	cbnz	w8, .LBB225_15
// %bb.14:                              // %lor.lhs.false48
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #120]
	cbz	w8, .LBB225_16
.LBB225_15:                             // %if.then51
	ldur	x0, [x29, #-8]
	bl	jinit_2pass_quantizer
	ldp	x9, x8, [x29, #-16]
	ldr	x8, [x8, #608]
	str	x8, [x9, #40]
.LBB225_16:                             // %if.end55
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #84]
	cbnz	w8, .LBB225_21
// %bb.17:                              // %if.then58
	ldp	x8, x0, [x29, #-16]
	ldr	w8, [x8, #28]
	cbz	w8, .LBB225_19
// %bb.18:                              // %if.then61
	bl	jinit_merged_upsampler
	b	.LBB225_20
.LBB225_19:                             // %if.else62
	bl	jinit_color_deconverter
	ldur	x0, [x29, #-8]
	bl	jinit_upsampler
.LBB225_20:                             // %if.end63
	ldur	x0, [x29, #-8]
	ldr	w1, [x0, #124]
	bl	jinit_d_post_controller
.LBB225_21:                             // %if.end65
	ldur	x0, [x29, #-8]
	bl	jinit_inverse_dct
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #308]
	cbz	w9, .LBB225_23
// %bb.22:                              // %if.then67
	ldr	x8, [x8]
	mov	w9, #1
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #32]
	cbnz	w8, .LBB225_25
	b	.LBB225_27
.LBB225_23:                             // %if.else72
	ldr	w8, [x8, #304]
	ldur	x0, [x29, #-8]
	cbz	w8, .LBB225_26
// %bb.24:                              // %if.then74
	bl	jinit_phuff_decoder
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #32]
	cbz	w8, .LBB225_27
.LBB225_25:
	mov	w1, #1
	b	.LBB225_28
.LBB225_26:                             // %if.else75
	bl	jinit_huff_decoder
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #32]
	cbnz	w8, .LBB225_25
.LBB225_27:                             // %lor.rhs
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #80]
	cmp	w8, #0                          // =0
	cset	w1, ne
.LBB225_28:                             // %lor.end
	ldur	x0, [x29, #-8]
	stur	w1, [x29, #-20]
	bl	jinit_d_coef_controller
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #84]
	cbnz	w8, .LBB225_30
// %bb.29:                              // %if.then83
	ldur	x0, [x29, #-8]
	mov	w1, wzr
	bl	jinit_d_main_controller
.LBB225_30:                             // %if.end84
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #48]
	blr	x8
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #560]
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB225_32
// %bb.31:                              // %land.lhs.true
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #80]
	cbz	w8, .LBB225_33
.LBB225_32:                             // %if.end114
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB225_33:                             // %land.lhs.true92
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #32]
	cbz	w8, .LBB225_32
// %bb.34:                              // %if.then96
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #304]
	ldr	w8, [x8, #48]
	cbz	w9, .LBB225_36
// %bb.35:                              // %if.then99
	add	w8, w8, w8, lsl #1
	add	w8, w8, #2                      // =2
.LBB225_36:                             // %if.else101
	str	w8, [sp, #8]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #16]
	str	xzr, [x8, #8]
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #8]
	ldr	w10, [x8, #400]
	ldr	x8, [x8, #16]
	mul	x9, x10, x9
	str	x9, [x8, #16]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #16]
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #124]
	ldr	x8, [x8, #16]
	cmp	w9, #0                          // =0
	mov	w9, #2
	cinc	w9, w9, ne
	str	w9, [x8, #28]
	ldur	x8, [x29, #-16]
	ldr	w9, [x8, #24]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #24]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB225_37:                             // %if.else32
	ldr	w8, [x8, #108]
	ldur	x9, [x29, #-8]
	mov	w10, #116
	mov	w11, #124
	cmp	w8, #0                          // =0
	csel	x8, x11, x10, ne
	mov	w10, #1
	str	w10, [x9, x8]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #116]
	cbnz	w8, .LBB225_12
	b	.LBB225_13
.Lfunc_end225:
	.size	master_selection, .Lfunc_end225-master_selection
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function prepare_range_limit_table
	.type	prepare_range_limit_table,@function
prepare_range_limit_table:              // @prepare_range_limit_table
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #1408
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	add	x9, x0, #256                    // =256
	str	x9, [sp, #16]
	movi	v0.2d, #0000000000000000
	str	x9, [x8, #408]
	mov	x8, x9
	stp	q0, q0, [x8, #-256]
	stp	q0, q0, [x8, #-224]
	stp	q0, q0, [x8, #-192]
	stp	q0, q0, [x8, #-160]
	stp	q0, q0, [x8, #-128]
	stp	q0, q0, [x8, #-96]
	stp	q0, q0, [x8, #-64]
	stp	q0, q0, [x8, #-32]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #255                        // =255
	b.gt	.LBB226_2
.LBB226_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x8, [sp, #12]
	ldr	x9, [sp, #16]
	strb	w8, [x9, x8]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #255                        // =255
	b.le	.LBB226_1
.LBB226_2:                              // %for.end
	ldr	x8, [sp, #16]
	mov	w9, #128
	str	w9, [sp, #12]
	mov	w9, #255
	add	x8, x8, #128                    // =128
	str	x8, [sp, #16]
	ldr	w10, [sp, #12]
	cmp	w10, #511                       // =511
	b.gt	.LBB226_4
.LBB226_3:                              // %for.body6
                                        // =>This Inner Loop Header: Depth=1
	ldrsw	x10, [sp, #12]
	strb	w9, [x8, x10]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w10, w8
	ldr	x8, [sp, #16]
	cmp	w10, #511                       // =511
	b.le	.LBB226_3
.LBB226_4:                              // %for.end11
	movi	v0.2d, #0000000000000000
	stp	q0, q0, [x8, #864]
	stp	q0, q0, [x8, #832]
	stp	q0, q0, [x8, #800]
	stp	q0, q0, [x8, #768]
	stp	q0, q0, [x8, #736]
	stp	q0, q0, [x8, #704]
	stp	q0, q0, [x8, #672]
	stp	q0, q0, [x8, #640]
	stp	q0, q0, [x8, #608]
	stp	q0, q0, [x8, #576]
	stp	q0, q0, [x8, #544]
	stp	q0, q0, [x8, #512]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #16]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldr	x8, [x8, #408]
	ldp	q1, q0, [x8, #96]
	ldp	q2, q3, [x8, #64]
	stp	q1, q0, [x9, #992]
	stp	q2, q3, [x9, #960]
	ldp	q1, q0, [x8, #32]
	ldp	q3, q2, [x8]
	stp	q1, q0, [x9, #928]
	stp	q3, q2, [x9, #896]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end226:
	.size	prepare_range_limit_table, .Lfunc_end226-prepare_range_limit_table
	.cfi_endproc
                                        // -- End function
	.globl	jinit_merged_upsampler          // -- Begin function jinit_merged_upsampler
	.p2align	2
	.type	jinit_merged_upsampler,@function
jinit_merged_upsampler:                 // @jinit_merged_upsampler
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #88
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, start_pass_merged_upsample
	str	x0, [sp]
	add	x9, x9, :lo12:start_pass_merged_upsample
	str	x0, [x8, #592]
	mov	x8, x0
	str	x9, [x8]
	mov	x8, x0
	str	wzr, [x8, #16]
	ldr	x8, [sp, #8]
	mov	x10, x0
	ldr	w9, [x8, #128]
	ldr	w8, [x8, #136]
	mul	w8, w9, w8
	str	w8, [x10, #76]
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #392]
	mov	x8, x0
	cmp	w9, #2                          // =2
	b.ne	.LBB227_2
// %bb.1:                               // %if.then
	adrp	x9, merged_2v_upsample
	add	x9, x9, :lo12:merged_2v_upsample
	str	x9, [x8, #8]
	ldp	x8, x0, [sp]
	adrp	x9, h2v2_merged_upsample
	add	x9, x9, :lo12:h2v2_merged_upsample
	mov	w1, #1
	str	x9, [x8, #24]
	ldr	x8, [x0, #8]
	ldr	x9, [sp]
	ldr	x8, [x8, #8]
	ldr	w2, [x9, #76]
	blr	x8
	b	.LBB227_3
.LBB227_2:                              // %if.else
	adrp	x9, merged_1v_upsample
	add	x9, x9, :lo12:merged_1v_upsample
	str	x9, [x8, #8]
	ldr	x8, [sp]
	adrp	x9, h2v1_merged_upsample
	add	x9, x9, :lo12:h2v1_merged_upsample
	mov	x0, xzr
	str	x9, [x8, #24]
.LBB227_3:                              // %if.end
	ldr	x8, [sp]
	str	x0, [x8, #64]
	ldr	x0, [sp, #8]
	bl	build_ycc_rgb_table.70
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end227:
	.size	jinit_merged_upsampler, .Lfunc_end227-jinit_merged_upsampler
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_merged_upsample
	.type	start_pass_merged_upsample,@function
start_pass_merged_upsample:             // @start_pass_merged_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #592]
	stp	x8, x0, [sp, #-16]!
	str	wzr, [x8, #72]
	mov	x8, x0
	ldr	w8, [x8, #132]
	ldr	x9, [sp]
	str	w8, [x9, #80]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end228:
	.size	start_pass_merged_upsample, .Lfunc_end228-start_pass_merged_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function merged_2v_upsample
	.type	merged_2v_upsample,@function
merged_2v_upsample:                     // @merged_2v_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x19, [sp, #96]                  // 8-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x2, x1, [x29, #-16]
	stur	w3, [x29, #-20]
	stur	x4, [x29, #-32]
	str	x5, [sp, #40]
	str	w6, [sp, #36]
	ldr	x8, [x0, #592]
	str	x8, [sp, #24]
	ldr	w8, [x8, #72]
	cbz	w8, .LBB229_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #40]
	ldr	x9, [sp, #24]
	ldur	x10, [x29, #-32]
	mov	w4, #1
	ldr	w8, [x8]
	ldr	w5, [x9, #76]
	add	x0, x9, #64                     // =64
	mov	w1, wzr
	add	x2, x10, x8, lsl #3
	mov	w3, wzr
	mov	w19, #1
	bl	jcopy_sample_rows
	ldr	x8, [sp, #24]
	str	w19, [sp, #4]
	str	wzr, [x8, #72]
	b	.LBB229_10
.LBB229_2:                              // %if.else
	ldr	x8, [sp, #24]
	mov	w9, #2
	str	w9, [sp, #4]
	ldr	w8, [x8, #80]
	cmp	w8, #1                          // =1
	b.hi	.LBB229_4
// %bb.3:                               // %if.then3
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #80]
	str	w8, [sp, #4]
.LBB229_4:                              // %if.end
	ldr	x8, [sp, #40]
	ldr	w9, [sp, #36]
	ldr	w10, [sp, #4]
	ldr	w8, [x8]
	sub	w8, w9, w8
	cmp	w10, w8
	str	w8, [sp, #36]
	b.ls	.LBB229_6
// %bb.5:                               // %if.then6
	ldr	w8, [sp, #36]
	str	w8, [sp, #4]
.LBB229_6:                              // %if.end7
	ldr	x8, [sp, #40]
	ldur	x9, [x29, #-32]
	ldr	w10, [sp, #4]
	ldr	w8, [x8]
	cmp	w10, #2                         // =2
	ldr	x8, [x9, x8, lsl #3]
	str	x8, [sp, #8]
	b.lo	.LBB229_8
// %bb.7:                               // %if.then10
	ldr	x8, [sp, #40]
	ldur	x9, [x29, #-32]
	ldr	w8, [x8]
	add	w8, w8, #1                      // =1
	ldr	x8, [x9, w8, uxtw #3]
	str	x8, [sp, #16]
	b	.LBB229_9
.LBB229_8:                              // %if.else14
	ldr	x8, [sp, #24]
	mov	w10, #1
	ldr	x9, [x8, #64]
	str	x9, [sp, #16]
	str	w10, [x8, #72]
.LBB229_9:                              // %if.end18
	ldr	x8, [sp, #24]
	ldp	x9, x1, [x29, #-16]
	ldr	x0, [x29, #24]
	add	x3, sp, #8                      // =8
	ldr	x8, [x8, #24]
	ldr	w2, [x9]
	blr	x8
.LBB229_10:                             // %if.end19
	ldr	x8, [sp, #40]
	ldr	w9, [sp, #4]
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #4]
	ldr	w10, [x8, #80]
	sub	w9, w10, w9
	str	w9, [x8, #80]
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #72]
	cbz	w8, .LBB229_12
// %bb.11:                              // %if.end26
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.LBB229_12:                             // %if.then25
	ldur	x8, [x29, #-16]
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end229:
	.size	merged_2v_upsample, .Lfunc_end229-merged_2v_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v2_merged_upsample
	.type	h2v2_merged_upsample,@function
h2v2_merged_upsample:                   // @h2v2_merged_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #160                    // =160
	.cfi_def_cfa_offset 160
	stp	x1, x0, [sp, #144]
	str	w2, [sp, #140]
	ldr	x8, [x0, #592]
	mov	x9, x0
	mov	x10, x0
	stp	x8, x3, [sp, #120]
	ldr	x12, [x9, #408]
	ldr	x8, [x8, #32]
	ldr	x9, [sp, #120]
	ldr	x11, [sp, #120]
	stp	x8, x12, [sp, #24]
	ldr	x12, [x9, #40]
	ldr	x8, [x11, #48]
	ldr	x9, [sp, #120]
	mov	x11, x1
	stp	x8, x12, [sp, #8]
	ldr	x8, [x9, #56]
	mov	x9, x1
	mov	w12, w2
	str	x8, [sp]
	mov	w8, w2
	ldr	x9, [x9]
	lsl	w8, w8, #1
	ldr	x13, [x9, w8, uxtw #3]
	ldr	x8, [x11]
	mov	w9, #1
	bfi	w9, w12, #1, #31
	ldr	x11, [sp, #144]
	ldr	x8, [x8, w9, uxtw #3]
	ldr	x9, [sp, #144]
	ldr	w12, [sp, #140]
	stp	x8, x13, [sp, #64]
	ldr	x8, [x9, #8]
	ldr	w9, [sp, #140]
	ldr	x13, [x8, x9, lsl #3]
	ldr	x8, [x11, #16]
	ldr	x9, [sp, #128]
	ldr	x8, [x8, x12, lsl #3]
	stp	x8, x13, [sp, #48]
	ldr	x8, [sp, #128]
	ldr	x9, [x9]
	ldr	x8, [x8, #8]
	stp	x8, x9, [sp, #80]
	ldr	w8, [x10, #128]
	lsr	w8, w8, #1
	str	w8, [sp, #44]
	mov	w8, w8
	cbz	w8, .LBB230_2
.LBB230_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x9, x8, [sp, #48]
	add	x11, x8, #1                     // =1
	add	x10, x9, #1                     // =1
	ldrb	w8, [x8]
	stp	x10, x11, [sp, #48]
	ldrb	w9, [x9]
	ldr	x10, [sp, #24]
	ldp	x11, x12, [sp]
	stp	w9, w8, [sp, #96]
	ldrsw	x10, [x10, x9, lsl #2]
	ldr	x11, [x11, x8, lsl #3]
	ldr	x9, [x12, x9, lsl #3]
	ldr	x12, [sp, #16]
	add	x9, x11, x9
	lsr	x9, x9, #16
	ldr	x11, [sp, #72]
	stp	w9, w10, [sp, #108]
	ldr	w8, [x12, x8, lsl #2]
	add	x9, x11, #1                     // =1
	str	x9, [sp, #72]
	str	w8, [sp, #104]
	ldrb	w8, [x11]
	ldr	x9, [sp, #32]
	ldr	x11, [sp, #88]
	str	w8, [sp, #116]
	add	x8, x8, x10
	ldrb	w8, [x9, x8]
	strb	w8, [x11]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #108]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #104]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #88]
	ldr	x9, [sp, #72]
	add	x10, x8, #3                     // =3
	add	x11, x9, #1                     // =1
	str	x10, [sp, #88]
	str	x11, [sp, #72]
	ldrb	w9, [x9]
	ldrsw	x10, [sp, #112]
	ldr	x11, [sp, #32]
	str	w9, [sp, #116]
	add	x9, x9, x10
	ldrb	w9, [x11, x9]
	strb	w9, [x8, #3]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #108]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #104]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldp	x11, x8, [sp, #80]
	ldr	x9, [sp, #64]
	add	x8, x8, #3                      // =3
	add	x10, x9, #1                     // =1
	str	x8, [sp, #88]
	str	x10, [sp, #64]
	ldrb	w8, [x9]
	ldrsw	x9, [sp, #112]
	ldr	x10, [sp, #32]
	str	w8, [sp, #116]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #108]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #80]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #104]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #80]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #80]
	ldr	x9, [sp, #64]
	add	x10, x8, #3                     // =3
	add	x11, x9, #1                     // =1
	str	x10, [sp, #80]
	str	x11, [sp, #64]
	ldrb	w9, [x9]
	ldrsw	x10, [sp, #112]
	ldr	x11, [sp, #32]
	str	w9, [sp, #116]
	add	x9, x9, x10
	ldrb	w9, [x11, x9]
	strb	w9, [x8, #3]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #108]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #80]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #104]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #80]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #80]
	ldr	w9, [sp, #44]
	add	x8, x8, #3                      // =3
	sub	w9, w9, #1                      // =1
	str	x8, [sp, #80]
	str	w9, [sp, #44]
	mov	w8, w9
	cbnz	w8, .LBB230_1
.LBB230_2:                              // %for.end
	ldr	x8, [sp, #152]
	ldrb	w8, [x8, #128]
	tbz	w8, #0, .LBB230_4
// %bb.3:                               // %if.then
	ldp	x9, x8, [sp, #48]
	ldr	x10, [sp, #24]
	ldp	x11, x12, [sp]
	ldrb	w8, [x8]
	ldrb	w9, [x9]
	stp	w9, w8, [sp, #96]
	ldrsw	x10, [x10, x9, lsl #2]
	ldr	x11, [x11, x8, lsl #3]
	ldr	x9, [x12, x9, lsl #3]
	ldr	x12, [sp, #16]
	add	x9, x11, x9
	lsr	x9, x9, #16
	stp	w9, w10, [sp, #108]
	ldr	w8, [x12, x8, lsl #2]
	ldr	x9, [sp, #72]
	ldr	x11, [sp, #88]
	str	w8, [sp, #104]
	ldrb	w8, [x9]
	ldr	x9, [sp, #32]
	str	w8, [sp, #116]
	add	x8, x8, x10
	ldrb	w8, [x9, x8]
	strb	w8, [x11]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #108]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #104]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #88]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #64]
	ldrsw	x9, [sp, #112]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #80]
	ldrb	w8, [x8]
	str	w8, [sp, #116]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #108]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #80]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #116]
	ldrsw	x9, [sp, #104]
	ldr	x10, [sp, #32]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	ldr	x9, [sp, #80]
	strb	w8, [x9, #2]
.LBB230_4:                              // %if.end
	add	sp, sp, #160                    // =160
	ret
.Lfunc_end230:
	.size	h2v2_merged_upsample, .Lfunc_end230-h2v2_merged_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function merged_1v_upsample
	.type	merged_1v_upsample,@function
merged_1v_upsample:                     // @merged_1v_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stp	x5, x4, [sp, #16]
	str	w6, [sp, #12]
	ldr	x8, [x0, #592]
	str	x8, [sp]
	ldr	w9, [x5]
	ldr	x8, [x8, #24]
	ldr	w2, [x2]
	add	x3, x4, x9, lsl #3
	blr	x8
	ldr	x8, [sp, #16]
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	ldur	x8, [x29, #-24]
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end231:
	.size	merged_1v_upsample, .Lfunc_end231-merged_1v_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v1_merged_upsample
	.type	h2v1_merged_upsample,@function
h2v1_merged_upsample:                   // @h2v1_merged_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	.cfi_def_cfa_offset 144
	stp	x1, x0, [sp, #128]
	str	w2, [sp, #124]
	ldr	x8, [x0, #592]
	mov	x9, x0
	mov	x10, x0
	stp	x8, x3, [sp, #104]
	ldr	x12, [x9, #408]
	ldr	x8, [x8, #32]
	ldr	x9, [sp, #104]
	ldr	x11, [sp, #104]
	stp	x8, x12, [sp, #24]
	ldr	x12, [x9, #40]
	ldr	x8, [x11, #48]
	ldr	x9, [sp, #104]
	mov	x11, x1
	stp	x8, x12, [sp, #8]
	ldr	x8, [x9, #56]
	mov	x9, x1
	mov	w12, w2
	str	x8, [sp]
	ldr	x8, [x9]
	mov	w9, w2
	ldr	x13, [x8, x9, lsl #3]
	ldr	x8, [x11, #8]
	ldr	x9, [sp, #128]
	ldr	x8, [x8, x12, lsl #3]
	stp	x8, x13, [sp, #56]
	ldr	x8, [x9, #16]
	ldr	w9, [sp, #124]
	ldr	x8, [x8, x9, lsl #3]
	ldr	x9, [sp, #112]
	str	x8, [sp, #48]
	ldr	x8, [x9]
	str	x8, [sp, #72]
	ldr	w8, [x10, #128]
	lsr	w8, w8, #1
	str	w8, [sp, #44]
	mov	w8, w8
	cbz	w8, .LBB232_2
.LBB232_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x9, x8, [sp, #48]
	add	x11, x8, #1                     // =1
	add	x10, x9, #1                     // =1
	ldrb	w8, [x8]
	stp	x10, x11, [sp, #48]
	ldrb	w9, [x9]
	ldr	x10, [sp, #24]
	ldp	x11, x12, [sp]
	stp	w9, w8, [sp, #80]
	ldrsw	x10, [x10, x9, lsl #2]
	ldr	x11, [x11, x8, lsl #3]
	ldr	x9, [x12, x9, lsl #3]
	ldr	x12, [sp, #16]
	add	x9, x11, x9
	lsr	x9, x9, #16
	ldr	x11, [sp, #64]
	stp	w9, w10, [sp, #92]
	ldr	w8, [x12, x8, lsl #2]
	add	x9, x11, #1                     // =1
	str	x9, [sp, #64]
	str	w8, [sp, #88]
	ldrb	w8, [x11]
	ldr	x9, [sp, #32]
	ldr	x11, [sp, #72]
	str	w8, [sp, #100]
	add	x8, x8, x10
	ldrb	w8, [x9, x8]
	strb	w8, [x11]
	ldrsw	x8, [sp, #100]
	ldrsw	x9, [sp, #92]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #72]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #100]
	ldrsw	x9, [sp, #88]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #72]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldp	x9, x8, [sp, #64]
	add	x10, x8, #3                     // =3
	add	x11, x9, #1                     // =1
	stp	x11, x10, [sp, #64]
	ldrb	w9, [x9]
	ldrsw	x10, [sp, #96]
	ldr	x11, [sp, #32]
	str	w9, [sp, #100]
	add	x9, x9, x10
	ldrb	w9, [x11, x9]
	strb	w9, [x8, #3]
	ldrsw	x8, [sp, #100]
	ldrsw	x9, [sp, #92]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #72]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #100]
	ldrsw	x9, [sp, #88]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #72]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #2]
	ldr	x8, [sp, #72]
	ldr	w9, [sp, #44]
	add	x8, x8, #3                      // =3
	sub	w9, w9, #1                      // =1
	str	x8, [sp, #72]
	str	w9, [sp, #44]
	mov	w8, w9
	cbnz	w8, .LBB232_1
.LBB232_2:                              // %for.end
	ldr	x8, [sp, #136]
	ldrb	w8, [x8, #128]
	tbz	w8, #0, .LBB232_4
// %bb.3:                               // %if.then
	ldp	x9, x8, [sp, #48]
	ldr	x10, [sp, #24]
	ldp	x11, x12, [sp]
	ldrb	w8, [x8]
	ldrb	w9, [x9]
	stp	w9, w8, [sp, #80]
	ldrsw	x10, [x10, x9, lsl #2]
	ldr	x11, [x11, x8, lsl #3]
	ldr	x9, [x12, x9, lsl #3]
	ldr	x12, [sp, #16]
	add	x9, x11, x9
	lsr	x9, x9, #16
	stp	w9, w10, [sp, #92]
	ldr	w8, [x12, x8, lsl #2]
	ldp	x9, x11, [sp, #64]
	str	w8, [sp, #88]
	ldrb	w8, [x9]
	ldr	x9, [sp, #32]
	str	w8, [sp, #100]
	add	x8, x8, x10
	ldrb	w8, [x9, x8]
	strb	w8, [x11]
	ldrsw	x8, [sp, #100]
	ldrsw	x9, [sp, #92]
	ldr	x10, [sp, #32]
	ldr	x11, [sp, #72]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	strb	w8, [x11, #1]
	ldrsw	x8, [sp, #100]
	ldrsw	x9, [sp, #88]
	ldr	x10, [sp, #32]
	add	x8, x8, x9
	ldrb	w8, [x10, x8]
	ldr	x9, [sp, #72]
	strb	w8, [x9, #2]
.LBB232_4:                              // %if.end
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end232:
	.size	h2v1_merged_upsample, .Lfunc_end232-h2v1_merged_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function build_ycc_rgb_table.70
	.type	build_ycc_rgb_table.70,@function
build_ycc_rgb_table.70:                 // @build_ycc_rgb_table.70
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #592]
	mov	w1, #1
	mov	w2, #1024
	str	x8, [sp, #16]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w1, #1
	mov	w2, #1024
	str	x0, [x8, #32]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w1, #1
	mov	w2, #2048
	str	x0, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	mov	w1, #1
	mov	w2, #2048
	str	x0, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x12, [sp, #16]
	mov	w8, #26345
	mov	w10, #50594
	mov	x13, #-128
	movk	w8, #1, lsl #16
	orr	x9, xzr, #0x8000
	movk	w10, #1, lsl #16
	mov	x11, #-46802
	str	x0, [x12, #56]
	mov	x12, #-22554
	str	wzr, [sp, #12]
	str	x13, [sp]
	mov	w13, wzr
	cmp	w13, #255                       // =255
	b.gt	.LBB233_2
.LBB233_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #32]
	madd	x14, x14, x8, x9
	lsr	x14, x14, #16
	str	w14, [x13, x15, lsl #2]
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #40]
	madd	x14, x14, x10, x9
	lsr	x14, x14, #16
	str	w14, [x13, x15, lsl #2]
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #48]
	mul	x14, x14, x11
	str	x14, [x13, x15, lsl #3]
	ldr	x13, [sp, #16]
	ldr	x14, [sp]
	ldrsw	x15, [sp, #12]
	ldr	x13, [x13, #56]
	madd	x14, x14, x12, x9
	str	x14, [x13, x15, lsl #3]
	ldr	w13, [sp, #12]
	ldr	x14, [sp]
	add	w13, w13, #1                    // =1
	add	x14, x14, #1                    // =1
	str	w13, [sp, #12]
	str	x14, [sp]
	mov	w13, w13
	cmp	w13, #255                       // =255
	b.le	.LBB233_1
.LBB233_2:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end233:
	.size	build_ycc_rgb_table.70, .Lfunc_end233-build_ycc_rgb_table.70
	.cfi_endproc
                                        // -- End function
	.globl	jinit_phuff_decoder             // -- Begin function jinit_phuff_decoder
	.p2align	2
	.type	jinit_phuff_decoder,@function
jinit_phuff_decoder:                    // @jinit_phuff_decoder
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #96
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_phuff_decoder
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_phuff_decoder
	str	x0, [x8, #576]
	mov	x8, x0
	str	x9, [x8]
	str	wzr, [sp]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB234_2
.LBB234_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #56]
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB234_1
.LBB234_2:                              // %for.end
	ldur	x0, [x29, #-8]
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldrsw	x9, [x0, #48]
	ldr	x8, [x8]
	lsl	x2, x9, #8
	blr	x8
	ldur	x8, [x29, #-8]
	str	x0, [x8, #184]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #184]
	str	wzr, [sp, #4]
	str	x8, [sp, #8]
	mov	w8, #-1
	b	.LBB234_4
.LBB234_3:                              // %for.inc22
                                        //   in Loop: Header=BB234_4 Depth=1
	ldr	w9, [sp, #4]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #4]
.LBB234_4:                              // %for.cond10
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB234_6 Depth 2
	ldur	x9, [x29, #-8]
	ldr	w10, [sp, #4]
	ldr	w9, [x9, #48]
	cmp	w10, w9
	b.ge	.LBB234_7
// %bb.5:                               // %for.body14
                                        //   in Loop: Header=BB234_4 Depth=1
	str	wzr, [sp]
	mov	w9, wzr
	cmp	w9, #63                         // =63
	b.gt	.LBB234_3
.LBB234_6:                              // %for.body18
                                        //   Parent Loop BB234_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #8]
	add	x10, x9, #4                     // =4
	str	x10, [sp, #8]
	str	w8, [x9]
	ldr	w9, [sp]
	add	w9, w9, #1                      // =1
	str	w9, [sp]
	mov	w9, w9
	cmp	w9, #63                         // =63
	b.le	.LBB234_6
	b	.LBB234_3
.LBB234_7:                              // %for.end24
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end234:
	.size	jinit_phuff_decoder, .Lfunc_end234-jinit_phuff_decoder
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_phuff_decoder
	.type	start_pass_phuff_decoder,@function
start_pass_phuff_decoder:               // @start_pass_phuff_decoder
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #576]
	stur	x8, [x29, #-8]
	ldr	w8, [x0, #508]
	cmp	w8, #0                          // =0
	cset	w9, eq
	stp	wzr, w9, [x29, #-16]
	cbnz	w8, .LBB235_40
// %bb.1:                               // %if.then
	ldr	w8, [x0, #512]
	cbz	w8, .LBB235_3
.LBB235_2:                              // %if.then16
	mov	w8, #1
	stur	w8, [x29, #-16]
.LBB235_3:                              // %if.end18
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #516]
	cbz	w8, .LBB235_6
// %bb.4:                               // %if.then21
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #516]
	ldr	w8, [x8, #520]
	sub	w9, w9, #1                      // =1
	cmp	w8, w9
	b.eq	.LBB235_6
// %bb.5:                               // %if.then25
	mov	w8, #1
	stur	w8, [x29, #-16]
.LBB235_6:                              // %if.end27
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #520]
	cmp	w8, #14                         // =14
	b.lt	.LBB235_8
// %bb.7:                               // %if.then31
	mov	w8, #1
	stur	w8, [x29, #-16]
.LBB235_8:                              // %if.end32
	ldur	w8, [x29, #-16]
	cbz	w8, .LBB235_10
// %bb.9:                               // %if.then34
	ldr	x8, [x29, #24]
	mov	w9, #14
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #508]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #512]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #516]
	ldr	x8, [x8]
	str	w9, [x8, #52]
	ldr	x8, [x29, #24]
	ldr	w9, [x8, #520]
	ldr	x8, [x8]
	str	w9, [x8, #56]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB235_10:                             // %if.end53
	mov	w19, #111
	stur	wzr, [x29, #-20]
	b	.LBB235_12
.LBB235_11:                             // %for.end
                                        //   in Loop: Header=BB235_12 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-20]
.LBB235_12:                             // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB235_18 Depth 2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB235_24
// %bb.13:                              // %for.body
                                        //   in Loop: Header=BB235_12 Depth=1
	ldursw	x8, [x29, #-20]
	ldr	x9, [x29, #24]
	ldur	w10, [x29, #-12]
	add	x8, x9, x8, lsl #3
	ldr	x8, [x8, #424]
	ldrsw	x8, [x8, #4]
	str	w8, [sp]
	ldr	x9, [x9, #184]
	add	x8, x9, x8, lsl #8
	str	x8, [sp, #8]
	cbnz	w10, .LBB235_16
// %bb.14:                              // %land.lhs.true
                                        //   in Loop: Header=BB235_12 Depth=1
	ldr	x8, [sp, #8]
	ldr	w8, [x8]
	tbz	w8, #31, .LBB235_16
// %bb.15:                              // %if.then65
                                        //   in Loop: Header=BB235_12 Depth=1
	ldr	x8, [x29, #24]
	mov	w1, #-1
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	wzr, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB235_16:                             // %if.end77
                                        //   in Loop: Header=BB235_12 Depth=1
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #508]
	b	.LBB235_18
.LBB235_17:                             // %if.end106
                                        //   in Loop: Header=BB235_18 Depth=2
	ldr	x8, [x29, #24]
	ldr	x9, [sp, #8]
	ldrsw	x10, [sp, #24]
	ldr	w8, [x8, #520]
	str	w8, [x9, x10, lsl #2]
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
.LBB235_18:                             // %for.cond79
                                        //   Parent Loop BB235_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	w8, [sp, #24]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #512]
	cmp	w9, w8
	b.gt	.LBB235_11
// %bb.19:                              // %for.body83
                                        //   in Loop: Header=BB235_18 Depth=2
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #24]
	ldr	w8, [x8, x9, lsl #2]
	tbnz	w8, #31, .LBB235_21
// %bb.20:                              // %cond.false
                                        //   in Loop: Header=BB235_18 Depth=2
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #24]
	ldr	w8, [x8, x9, lsl #2]
	b	.LBB235_22
.LBB235_21:                             //   in Loop: Header=BB235_18 Depth=2
	mov	w8, wzr
.LBB235_22:                             // %cond.end
                                        //   in Loop: Header=BB235_18 Depth=2
	ldr	x9, [x29, #24]
	str	w8, [sp, #20]
	ldr	w9, [x9, #516]
	cmp	w9, w8
	b.eq	.LBB235_17
// %bb.23:                              // %if.then93
                                        //   in Loop: Header=BB235_18 Depth=2
	ldr	x8, [x29, #24]
	mov	w1, #-1
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #24]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	b	.LBB235_17
.LBB235_24:                             // %for.end112
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-12]
	adrp	x11, decode_mcu_AC_refine
	adrp	x12, decode_mcu_DC_refine
	ldr	w8, [x8, #516]
	add	x11, x11, :lo12:decode_mcu_AC_refine
	add	x12, x12, :lo12:decode_mcu_DC_refine
	cmp	w9, #0                          // =0
	ldur	x10, [x29, #-8]
	adrp	x9, decode_mcu_AC_first
	csel	x11, x12, x11, ne
	adrp	x12, decode_mcu_DC_first
	add	x9, x9, :lo12:decode_mcu_AC_first
	add	x12, x12, :lo12:decode_mcu_DC_first
	csel	x9, x12, x9, ne
	cmp	w8, #0                          // =0
	csel	x8, x9, x11, eq
	mov	w19, #49
	str	x8, [x10, #8]
	stur	wzr, [x29, #-20]
	b	.LBB235_28
.LBB235_25:                             // %if.then184
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB235_26:                             // %if.end193
                                        //   in Loop: Header=BB235_28 Depth=1
	ldrsw	x8, [sp, #20]
	ldr	x0, [x29, #24]
	ldur	x9, [x29, #-8]
	lsl	x8, x8, #3
	add	x10, x0, x8
	ldr	x1, [x10, #256]
	add	x8, x9, x8
	add	x2, x8, #56                     // =56
	bl	jpeg_make_d_derived_tbl
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #20]
	add	x9, x8, x9, lsl #3
	ldr	x9, [x9, #56]
	str	x9, [x8, #88]
.LBB235_27:                             // %if.end203
                                        //   in Loop: Header=BB235_28 Depth=1
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #36]
	ldur	w8, [x29, #-20]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-20]
.LBB235_28:                             // %for.cond133
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	b.ge	.LBB235_39
// %bb.29:                              // %for.body137
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [x29, #24]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #424]
	ldur	w9, [x29, #-12]
	str	x8, [sp]
	cbz	w9, .LBB235_36
// %bb.30:                              // %if.then142
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #516]
	cbnz	w8, .LBB235_27
// %bb.31:                              // %if.then146
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [sp]
	ldr	w8, [x8, #20]
	str	w8, [sp, #20]
	tbnz	w8, #31, .LBB235_34
// %bb.32:                              // %if.then146
                                        //   in Loop: Header=BB235_28 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB235_34
// %bb.33:                              // %lor.lhs.false152
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #224]
	cbnz	x8, .LBB235_35
.LBB235_34:                             // %if.then157
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #20]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB235_35:                             // %if.end166
                                        //   in Loop: Header=BB235_28 Depth=1
	ldrsw	x8, [sp, #20]
	ldr	x0, [x29, #24]
	ldur	x9, [x29, #-8]
	lsl	x8, x8, #3
	add	x10, x0, x8
	ldr	x1, [x10, #224]
	add	x8, x9, x8
	add	x2, x8, #56                     // =56
	bl	jpeg_make_d_derived_tbl
	b	.LBB235_27
.LBB235_36:                             // %if.else173
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [sp]
	ldr	w8, [x8, #24]
	str	w8, [sp, #20]
	tbnz	w8, #31, .LBB235_25
// %bb.37:                              // %if.else173
                                        //   in Loop: Header=BB235_28 Depth=1
	cmp	w8, #3                          // =3
	b.gt	.LBB235_25
// %bb.38:                              // %lor.lhs.false179
                                        //   in Loop: Header=BB235_28 Depth=1
	ldr	x8, [x29, #24]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #256]
	cbnz	x8, .LBB235_26
	b	.LBB235_25
.LBB235_39:                             // %for.end208
	ldur	x8, [x29, #-8]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	str	wzr, [x8, #24]
	ldur	x8, [x29, #-8]
	str	xzr, [x8, #16]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #28]
	ldur	x8, [x29, #-8]
	str	wzr, [x8, #32]
	ldr	x8, [x29, #24]
	ldur	x9, [x29, #-8]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	ldr	w8, [x8, #360]
	str	w8, [x9, #52]
	add	sp, sp, #80                     // =80
	ret
.LBB235_40:                             // %if.else
	ldr	x8, [x29, #24]
	ldr	w9, [x0, #508]
	ldr	w8, [x8, #512]
	cmp	w9, w8
	b.gt	.LBB235_42
// %bb.41:                              // %lor.lhs.false
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #512]
	cmp	w8, #64                         // =64
	b.lt	.LBB235_43
.LBB235_42:                             // %if.then12
	mov	w8, #1
	stur	w8, [x29, #-16]
.LBB235_43:                             // %if.end13
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #416]
	cmp	w8, #1                          // =1
	b.ne	.LBB235_2
	b	.LBB235_3
.Lfunc_end235:
	.size	start_pass_phuff_decoder, .Lfunc_end235-start_pass_phuff_decoder
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decode_mcu_DC_first
	.type	decode_mcu_DC_first,@function
decode_mcu_DC_first:                    // @decode_mcu_DC_first
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #256                    // =256
	stp	x29, x30, [sp, #192]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #208]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #224]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #240]            // 16-byte Folded Spill
	add	x29, sp, #192                   // =192
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	sub	x19, x29, #32                   // =32
	stp	x1, x0, [x19, #8]
	ldr	x8, [x0, #576]
	mov	x9, x0
	str	x8, [x19]
	ldr	w8, [x0, #520]
	stur	w8, [x29, #-36]
	ldr	w8, [x9, #360]
	cbz	w8, .LBB236_3
// %bb.1:                               // %if.then
	ldr	x8, [x19]
	ldr	w8, [x8, #52]
	cbnz	w8, .LBB236_3
// %bb.2:                               // %if.then3
	ldr	x0, [x19, #16]
	bl	process_restart.73
	cbz	w0, .LBB236_24
.LBB236_3:                              // %if.end7
	ldr	x8, [x19, #16]
	adrp	x21, extend_test.74
	adrp	x22, extend_offset.75
	mov	w20, #1
	str	x8, [sp, #96]
	ldr	x9, [x8, #32]
	add	x21, x21, :lo12:extend_test.74
	add	x22, x22, :lo12:extend_offset.75
	mov	w24, #9
	ldr	x10, [x9]
	ldr	x9, [x8, #32]
	ldr	x9, [x9, #8]
	stp	x10, x9, [sp, #56]
	ldr	w8, [x8, #524]
	ldr	x9, [x19]
	ldr	x10, [x19]
	str	w8, [sp, #72]
	ldr	x8, [x9, #16]
	stur	x8, [x29, #-72]
	ldr	w8, [x9, #24]
	add	x9, x9, #28                     // =28
	str	x9, [sp, #104]
	stur	w8, [x29, #-76]
	ldr	q0, [x10, #32]
	ldr	w9, [x10, #48]
	add	x8, sp, #32                     // =32
	orr	x23, x8, #0x4
	stur	wzr, [x29, #-48]
	str	q0, [sp, #32]
	str	w9, [sp, #48]
	b	.LBB236_6
.LBB236_4:                              // %cond.end
                                        //   in Loop: Header=BB236_6 Depth=1
	stur	w8, [x29, #-40]
.LBB236_5:                              // %if.end78
                                        //   in Loop: Header=BB236_6 Depth=1
	ldursw	x8, [x29, #-52]
	ldp	w9, w11, [x29, #-40]
	ldur	x12, [x29, #-64]
	lsl	x8, x8, #2
	ldr	w10, [x23, x8]
	add	w9, w9, w10
	mov	w10, w9
	str	w9, [x23, x8]
	lsl	w8, w10, w11
	stur	w9, [x29, #-40]
	strh	w8, [x12]
	ldur	w8, [x29, #-48]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-48]
.LBB236_6:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x19, #16]
	ldur	w9, [x29, #-48]
	ldr	w8, [x8, #464]
	cmp	w9, w8
	b.ge	.LBB236_23
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB236_6 Depth=1
	ldursw	x8, [x29, #-48]
	ldp	x10, x9, [x19]
	ldr	x11, [x19, #16]
	ldr	x9, [x9, x8, lsl #3]
	add	x8, x11, x8, lsl #2
	stur	x9, [x29, #-64]
	ldrsw	x8, [x8, #468]
	ldur	w9, [x29, #-76]
	stur	w8, [x29, #-52]
	add	x8, x11, x8, lsl #3
	ldr	x8, [x8, #424]
	cmp	w9, #7                          // =7
	str	x8, [sp, #16]
	ldrsw	x8, [x8, #20]
	add	x8, x10, x8, lsl #3
	ldr	x8, [x8, #56]
	str	x8, [sp, #24]
	b.gt	.LBB236_11
// %bb.8:                               // %if.then25
                                        //   in Loop: Header=BB236_6 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	add	x0, sp, #56                     // =56
	mov	w3, wzr
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB236_16
// %bb.9:                               // %if.end29
                                        //   in Loop: Header=BB236_6 Depth=1
	ldr	w9, [sp, #88]
	ldr	x8, [sp, #80]
	cmp	w9, #7                          // =7
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b.gt	.LBB236_11
// %bb.10:                              // %if.then33
                                        //   in Loop: Header=BB236_6 Depth=1
	str	w20, [sp, #8]
	b	.LBB236_14
.LBB236_11:                             // %if.end35
                                        //   in Loop: Header=BB236_6 Depth=1
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	ldr	x10, [sp, #24]
	sub	w8, w8, #8                      // =8
	asr	x8, x9, x8
	and	w8, w8, #0xff
	str	w8, [sp, #4]
	add	x8, x10, w8, uxtw #2
	ldr	w8, [x8, #360]
	str	w8, [sp, #8]
	cbz	w8, .LBB236_13
// %bb.12:                              // %if.then40
                                        //   in Loop: Header=BB236_6 Depth=1
	ldp	w11, w8, [sp, #4]
	ldur	w9, [x29, #-76]
	ldr	x10, [sp, #24]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
	add	x8, x10, x11
	ldrb	w8, [x8, #1384]
	stur	w8, [x29, #-40]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cbz	w8, .LBB236_17
	b	.LBB236_25
.LBB236_13:                             // %if.else
                                        //   in Loop: Header=BB236_6 Depth=1
	str	w24, [sp, #8]
.LBB236_14:                             // %label1
                                        //   in Loop: Header=BB236_6 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldr	x3, [sp, #24]
	ldr	w4, [sp, #8]
	add	x0, sp, #56                     // =56
	bl	jpeg_huff_decode
	stur	w0, [x29, #-40]
	tbnz	w0, #31, .LBB236_16
// %bb.15:                              // %if.end49
                                        //   in Loop: Header=BB236_6 Depth=1
	ldr	x8, [sp, #80]
	ldr	w9, [sp, #88]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cbz	w8, .LBB236_17
	b	.LBB236_25
.LBB236_16:                             // %if.then28
                                        //   in Loop: Header=BB236_6 Depth=1
	stur	wzr, [x29, #-4]
	str	w20, [sp, #12]
	mov	w8, w20
	cbnz	w8, .LBB236_25
.LBB236_17:                             // %cleanup.cont
                                        //   in Loop: Header=BB236_6 Depth=1
	ldur	w8, [x29, #-40]
	cbz	w8, .LBB236_5
// %bb.18:                              // %if.then55
                                        //   in Loop: Header=BB236_6 Depth=1
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-40]
	cmp	w8, w9
	b.ge	.LBB236_21
// %bb.19:                              // %if.then58
                                        //   in Loop: Header=BB236_6 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-40]
	add	x0, sp, #56                     // =56
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB236_24
// %bb.20:                              // %if.end62
                                        //   in Loop: Header=BB236_6 Depth=1
	ldr	x8, [sp, #80]
	ldr	w9, [sp, #88]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB236_21:                             // %if.end65
                                        //   in Loop: Header=BB236_6 Depth=1
	ldursw	x10, [x29, #-40]
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-40]
	ldur	x11, [x29, #-72]
	ldr	w10, [x21, x10, lsl #2]
	sub	w8, w8, w9
	lsl	w9, w20, w9
	stur	w8, [x29, #-76]
	asr	x8, x11, x8
	sub	w9, w9, #1                      // =1
	and	w8, w8, w9
	cmp	w8, w10
	stur	w8, [x29, #-44]
	b.ge	.LBB236_4
// %bb.22:                              // %cond.true
                                        //   in Loop: Header=BB236_6 Depth=1
	ldursw	x9, [x29, #-40]
	ldr	w9, [x22, x9, lsl #2]
	add	w8, w8, w9
	b	.LBB236_4
.LBB236_23:                             // %for.end
	ldr	x8, [x19, #16]
	ldr	x9, [sp, #56]
	mov	w10, #1
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldr	x8, [x19, #16]
	ldr	x9, [sp, #64]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldr	w8, [sp, #72]
	ldr	x9, [x19, #16]
	str	w8, [x9, #524]
	ldur	x8, [x29, #-72]
	ldr	x9, [x19]
	str	x8, [x9, #16]
	ldur	w8, [x29, #-76]
	ldr	x9, [x19]
	str	w8, [x9, #24]
	ldr	x8, [x19]
	ldr	w9, [sp, #48]
	ldr	q0, [sp, #32]
	str	w9, [x8, #48]
	str	q0, [x8, #32]
	ldr	x8, [x19]
	ldr	w9, [x8, #52]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #52]
	stur	w10, [x29, #-4]
	str	w10, [sp, #12]
	b	.LBB236_25
.LBB236_24:                             // %if.then5
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
.LBB236_25:                             // %cleanup102
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #240]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #224]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #208]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #192]            // 16-byte Folded Reload
	add	sp, sp, #256                    // =256
	ret
.Lfunc_end236:
	.size	decode_mcu_DC_first, .Lfunc_end236-decode_mcu_DC_first
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decode_mcu_AC_first
	.type	decode_mcu_AC_first,@function
decode_mcu_AC_first:                    // @decode_mcu_AC_first
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #224                    // =224
	stp	x29, x30, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #160                   // =160
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	sub	x19, x29, #24                   // =24
	stp	x1, x0, [x19]
	ldr	x8, [x0, #576]
	mov	x9, x0
	stur	x8, [x29, #-32]
	ldr	w10, [x0, #512]
	ldr	w8, [x0, #520]
	stp	w8, w10, [x29, #-40]
	ldr	w8, [x9, #360]
	cbz	w8, .LBB237_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #52]
	cbnz	w8, .LBB237_3
// %bb.2:                               // %if.then4
	ldr	x0, [x19, #8]
	bl	process_restart.73
	cbz	w0, .LBB237_36
.LBB237_3:                              // %if.end8
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #32]
	stur	w8, [x29, #-56]
	cbz	w8, .LBB237_5
// %bb.4:                               // %if.then11
	ldur	w8, [x29, #-56]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-56]
	b	.LBB237_34
.LBB237_5:                              // %if.else
	ldp	x9, x8, [x19]
	adrp	x21, extend_test.74
	adrp	x22, extend_offset.75
	adrp	x23, jpeg_natural_order
	str	x8, [sp, #64]
	ldr	x10, [x8, #32]
	mov	w20, #1
	add	x21, x21, :lo12:extend_test.74
	add	x22, x22, :lo12:extend_offset.75
	ldr	x11, [x10]
	ldr	x10, [x8, #32]
	add	x23, x23, :lo12:jpeg_natural_order
	mov	w24, #9
	ldr	x10, [x10, #8]
	stp	x11, x10, [sp, #24]
	ldr	w8, [x8, #524]
	ldur	x10, [x29, #-32]
	ldur	x11, [x29, #-32]
	str	w8, [sp, #40]
	ldr	w8, [x10, #24]
	ldr	x12, [x10, #16]
	add	x10, x10, #28                   // =28
	str	x10, [sp, #72]
	stur	w8, [x29, #-76]
	ldr	x8, [x9]
	ldr	x9, [x19, #8]
	stp	x12, x8, [x29, #-72]
	ldr	x8, [x11, #88]
	str	x8, [sp, #16]
	ldr	w8, [x9, #508]
	stur	w8, [x29, #-48]
	b	.LBB237_8
.LBB237_6:                              // %cond.end
                                        //   in Loop: Header=BB237_8 Depth=1
	ldursw	x9, [x29, #-48]
	ldur	w10, [x29, #-40]
	ldur	x11, [x29, #-64]
	stur	w8, [x29, #-44]
	ldrsw	x9, [x23, x9, lsl #2]
	lsl	w8, w8, w10
	strh	w8, [x11, x9, lsl #1]
.LBB237_7:                              // %for.inc
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	w8, [x29, #-48]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-48]
.LBB237_8:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-48]
	ldur	w9, [x29, #-36]
	cmp	w8, w9
	b.gt	.LBB237_33
// %bb.9:                               // %for.body
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	w8, [x29, #-76]
	cmp	w8, #7                          // =7
	b.gt	.LBB237_13
// %bb.10:                              // %if.then23
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	add	x0, sp, #24                     // =24
	mov	w3, wzr
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB237_18
// %bb.11:                              // %if.end27
                                        //   in Loop: Header=BB237_8 Depth=1
	ldr	w9, [sp, #56]
	ldr	x8, [sp, #48]
	cmp	w9, #7                          // =7
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b.gt	.LBB237_13
// %bb.12:                              // %if.then31
                                        //   in Loop: Header=BB237_8 Depth=1
	str	w20, [sp, #8]
	b	.LBB237_16
.LBB237_13:                             // %if.end33
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	ldr	x10, [sp, #16]
	sub	w8, w8, #8                      // =8
	asr	x8, x9, x8
	and	w8, w8, #0xff
	str	w8, [sp, #4]
	add	x8, x10, w8, uxtw #2
	ldr	w8, [x8, #360]
	str	w8, [sp, #8]
	cbz	w8, .LBB237_15
// %bb.14:                              // %if.then37
                                        //   in Loop: Header=BB237_8 Depth=1
	ldp	w11, w8, [sp, #4]
	ldur	w9, [x29, #-76]
	ldr	x10, [sp, #16]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
	add	x8, x10, x11
	ldrb	w8, [x8, #1384]
	stur	w8, [x29, #-44]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cbz	w8, .LBB237_19
	b	.LBB237_35
.LBB237_15:                             // %if.else42
                                        //   in Loop: Header=BB237_8 Depth=1
	str	w24, [sp, #8]
.LBB237_16:                             // %label2
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldr	x3, [sp, #16]
	ldr	w4, [sp, #8]
	add	x0, sp, #24                     // =24
	bl	jpeg_huff_decode
	stur	w0, [x29, #-44]
	tbnz	w0, #31, .LBB237_18
// %bb.17:                              // %if.end47
                                        //   in Loop: Header=BB237_8 Depth=1
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #56]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cbz	w8, .LBB237_19
	b	.LBB237_35
.LBB237_18:                             // %if.then26
                                        //   in Loop: Header=BB237_8 Depth=1
	stur	wzr, [x29, #-4]
	str	w20, [sp, #12]
	mov	w8, w20
	cbnz	w8, .LBB237_35
.LBB237_19:                             // %cleanup.cont
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	w9, [x29, #-44]
	asr	w8, w9, #4
	ands	w9, w9, #0xf
	stur	w8, [x29, #-52]
	stur	w9, [x29, #-44]
	b.eq	.LBB237_25
// %bb.20:                              // %if.then55
                                        //   in Loop: Header=BB237_8 Depth=1
	ldp	w9, w11, [x29, #-48]
	ldur	w10, [x29, #-76]
	add	w8, w9, w8
	cmp	w10, w11
	stur	w8, [x29, #-48]
	b.ge	.LBB237_23
// %bb.21:                              // %if.then58
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-44]
	add	x0, sp, #24                     // =24
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB237_36
// %bb.22:                              // %if.end62
                                        //   in Loop: Header=BB237_8 Depth=1
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #56]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB237_23:                             // %if.end65
                                        //   in Loop: Header=BB237_8 Depth=1
	ldursw	x10, [x29, #-44]
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-44]
	ldur	x11, [x29, #-72]
	ldr	w10, [x21, x10, lsl #2]
	sub	w8, w8, w9
	lsl	w9, w20, w9
	stur	w8, [x29, #-76]
	asr	x8, x11, x8
	sub	w9, w9, #1                      // =1
	and	w8, w8, w9
	cmp	w8, w10
	stur	w8, [x29, #-52]
	b.ge	.LBB237_6
// %bb.24:                              // %cond.true
                                        //   in Loop: Header=BB237_8 Depth=1
	ldursw	x9, [x29, #-44]
	ldr	w9, [x22, x9, lsl #2]
	add	w8, w8, w9
	b	.LBB237_6
.LBB237_25:                             // %if.else85
                                        //   in Loop: Header=BB237_8 Depth=1
	cmp	w8, #15                         // =15
	b.ne	.LBB237_27
// %bb.26:                              // %if.then88
                                        //   in Loop: Header=BB237_8 Depth=1
	ldur	w8, [x29, #-48]
	add	w8, w8, #15                     // =15
	stur	w8, [x29, #-48]
	b	.LBB237_7
.LBB237_27:                             // %if.else90
	ldur	w8, [x29, #-52]
	mov	w9, #1
	lsl	w9, w9, w8
	stur	w9, [x29, #-56]
	cbz	w8, .LBB237_32
// %bb.28:                              // %if.then93
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-52]
	cmp	w8, w9
	b.ge	.LBB237_31
// %bb.29:                              // %if.then96
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-52]
	add	x0, sp, #24                     // =24
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB237_36
// %bb.30:                              // %if.end100
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #56]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB237_31:                             // %if.end103
	ldp	w12, w8, [x29, #-56]
	ldur	w9, [x29, #-76]
	ldur	x10, [x29, #-72]
	mov	w11, #1
	sub	w9, w9, w8
	lsl	w8, w11, w8
	stur	w9, [x29, #-76]
	asr	x9, x10, x9
	sub	w8, w8, #1                      // =1
	and	w8, w9, w8
	stur	w8, [x29, #-52]
	add	w8, w12, w8
	stur	w8, [x29, #-56]
.LBB237_32:                             // %if.end112
	ldur	w8, [x29, #-56]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-56]
.LBB237_33:                             // %for.end
	ldr	x8, [x19, #8]
	ldr	x9, [sp, #24]
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldr	x8, [x19, #8]
	ldr	x9, [sp, #32]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldr	w8, [sp, #40]
	ldr	x9, [x19, #8]
	str	w8, [x9, #524]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-32]
	str	x8, [x9, #16]
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-32]
	str	w8, [x9, #24]
.LBB237_34:                             // %if.end128
	ldur	w8, [x29, #-56]
	ldur	x9, [x29, #-32]
	mov	w10, #1
	str	w8, [x9, #32]
	ldur	x8, [x29, #-32]
	ldr	w9, [x8, #52]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #52]
	stur	w10, [x29, #-4]
	str	w10, [sp, #12]
.LBB237_35:                             // %cleanup133
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #160]            // 16-byte Folded Reload
	add	sp, sp, #224                    // =224
	ret
.LBB237_36:                             // %if.then6
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #12]
	b	.LBB237_35
.Lfunc_end237:
	.size	decode_mcu_AC_first, .Lfunc_end237-decode_mcu_AC_first
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decode_mcu_DC_refine
	.type	decode_mcu_DC_refine,@function
decode_mcu_DC_refine:                   // @decode_mcu_DC_refine
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #128                   // =128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-24]
	ldr	x8, [x0, #576]
	mov	w9, #1
	stur	x8, [x29, #-32]
	ldr	w8, [x0, #520]
	lsl	w8, w9, w8
	stur	w8, [x29, #-36]
	ldr	w8, [x0, #360]
	cbz	w8, .LBB238_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-32]
	ldr	w8, [x8, #52]
	cbnz	w8, .LBB238_3
// %bb.2:                               // %if.then2
	ldur	x0, [x29, #-16]
	bl	process_restart.73
	cbz	w0, .LBB238_12
.LBB238_3:                              // %if.end6
	ldur	x8, [x29, #-16]
	str	x8, [sp, #48]
	ldr	x9, [x8, #32]
	ldr	x10, [x9]
	ldr	x9, [x8, #32]
	ldr	x9, [x9, #8]
	stp	x10, x9, [sp, #8]
	ldr	w8, [x8, #524]
	ldur	x9, [x29, #-32]
	str	w8, [sp, #24]
	ldr	x8, [x9, #16]
	stur	x8, [x29, #-56]
	ldr	w8, [x9, #24]
	add	x9, x9, #28                     // =28
	str	x9, [sp, #56]
	stur	wzr, [x29, #-40]
	stur	w8, [x29, #-60]
	b	.LBB238_5
.LBB238_4:                              // %for.inc
                                        //   in Loop: Header=BB238_5 Depth=1
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
.LBB238_5:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-40]
	ldr	w8, [x8, #464]
	cmp	w9, w8
	b.ge	.LBB238_11
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB238_5 Depth=1
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-40]
	ldur	w10, [x29, #-60]
	ldr	x8, [x8, x9, lsl #3]
	cmp	w10, #0                         // =0
	stur	x8, [x29, #-48]
	b.gt	.LBB238_9
// %bb.7:                               // %if.then18
                                        //   in Loop: Header=BB238_5 Depth=1
	ldur	x1, [x29, #-56]
	ldur	w2, [x29, #-60]
	add	x0, sp, #8                      // =8
	mov	w3, #1
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB238_12
// %bb.8:                               // %if.end22
                                        //   in Loop: Header=BB238_5 Depth=1
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #40]
	stur	x8, [x29, #-56]
	stur	w9, [x29, #-60]
.LBB238_9:                              // %if.end25
                                        //   in Loop: Header=BB238_5 Depth=1
	ldur	w8, [x29, #-60]
	ldur	x9, [x29, #-56]
	sub	w8, w8, #1                      // =1
	lsr	x9, x9, x8
	stur	w8, [x29, #-60]
	tbz	w9, #0, .LBB238_4
// %bb.10:                              // %if.then27
                                        //   in Loop: Header=BB238_5 Depth=1
	ldur	x8, [x29, #-48]
	ldur	w9, [x29, #-36]
	ldrh	w10, [x8]
	orr	w9, w10, w9
	strh	w9, [x8]
	b	.LBB238_4
.LBB238_11:                             // %for.end
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #8]
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #16]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldr	w8, [sp, #24]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #524]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-32]
	str	x8, [x9, #16]
	ldur	w8, [x29, #-60]
	ldur	x9, [x29, #-32]
	str	w8, [x9, #24]
	ldur	x8, [x29, #-32]
	ldr	w9, [x8, #52]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #52]
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB238_13
.LBB238_12:                             // %if.then4
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB238_13:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	str	w8, [sp, #4]
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end238:
	.size	decode_mcu_DC_refine, .Lfunc_end238-decode_mcu_DC_refine
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function decode_mcu_AC_refine
	.type	decode_mcu_AC_refine,@function
decode_mcu_AC_refine:                   // @decode_mcu_AC_refine
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x28, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #416                    // =416
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0, #576]
	mov	w9, #1
	mov	w10, #-1
	stur	x8, [x29, #-24]
	ldr	w8, [x0, #512]
	str	w8, [x29, #24]
	ldr	w8, [x0, #520]
	lsl	w11, w9, w8
	ldr	w8, [x0, #520]
	mov	x9, x0
	lsl	w8, w10, w8
	stp	w8, w11, [x29, #-32]
	ldr	w8, [x9, #360]
	cbz	w8, .LBB239_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #52]
	cbnz	w8, .LBB239_3
// %bb.2:                               // %if.then5
	ldur	x0, [x29, #-8]
	bl	process_restart.73
	cbz	w0, .LBB239_60
.LBB239_3:                              // %if.end9
	ldur	x8, [x29, #-8]
	stur	x8, [x29, #-96]
	ldr	x10, [x8, #32]
	ldr	x11, [x10]
	ldr	x10, [x8, #32]
	ldr	x10, [x10, #8]
	stp	x11, x10, [x29, #-136]
	ldr	w8, [x8, #524]
	ldur	x10, [x29, #-24]
	ldur	x11, [x29, #-24]
	stur	w8, [x29, #-120]
	ldr	x8, [x10, #16]
	stur	x8, [x29, #-72]
	ldr	w8, [x10, #24]
	add	x10, x10, #28                   // =28
	stur	x10, [x29, #-88]
	ldp	x10, x9, [x29, #-16]
	stur	w8, [x29, #-76]
	ldr	w8, [x11, #32]
	ldur	x11, [x29, #-24]
	stur	w8, [x29, #-48]
	ldr	x10, [x10]
	stur	x10, [x29, #-56]
	ldr	x10, [x11, #88]
	stur	wzr, [x29, #-148]
	stur	x10, [x29, #-144]
	ldr	w9, [x9, #508]
	stur	w9, [x29, #-40]
	cbz	w8, .LBB239_15
.LBB239_4:                              // %if.end169
	ldur	w8, [x29, #-48]
	cbz	w8, .LBB239_51
// %bb.5:                               // %for.cond173.preheader
	adrp	x19, jpeg_natural_order
	add	x19, x19, :lo12:jpeg_natural_order
	sub	x20, x29, #32                   // =32
	sub	x21, x29, #28                   // =28
	b	.LBB239_7
.LBB239_6:                              // %for.inc223
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
.LBB239_7:                              // %for.cond173
                                        // =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-40]
	ldr	w9, [x29, #24]
	cmp	w8, w9
	b.gt	.LBB239_50
// %bb.8:                               // %for.body176
                                        //   in Loop: Header=BB239_7 Depth=1
	ldursw	x8, [x29, #-40]
	ldur	x9, [x29, #-56]
	ldrsw	x8, [x19, x8, lsl #2]
	lsl	x8, x8, #1
	add	x10, x9, x8
	stur	x10, [x29, #-64]
	ldrsh	w8, [x9, x8]
	cbz	w8, .LBB239_6
// %bb.9:                               // %if.then185
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	w8, [x29, #-76]
	cmp	w8, #0                          // =0
	b.gt	.LBB239_12
// %bb.10:                              // %if.then188
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	sub	x0, x29, #136                   // =136
	mov	w3, #1
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB239_59
// %bb.11:                              // %if.end192
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	x8, [x29, #-112]
	ldur	w9, [x29, #-104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB239_12:                             // %if.end195
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	sub	w8, w8, #1                      // =1
	lsr	x9, x9, x8
	stur	w8, [x29, #-76]
	tbz	w9, #0, .LBB239_6
// %bb.13:                              // %if.then202
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	x8, [x29, #-64]
	ldur	w9, [x29, #-28]
	ldrsh	w8, [x8]
	tst	w8, w9
	b.ne	.LBB239_6
// %bb.14:                              // %if.then207
                                        //   in Loop: Header=BB239_7 Depth=1
	ldur	x8, [x29, #-64]
	ldrsh	w9, [x8]
	cmp	w9, #0                          // =0
	csel	x10, x21, x20, ge
	ldr	w10, [x10]
	add	w9, w9, w10
	strh	w9, [x8]
	b	.LBB239_6
.LBB239_15:                             // %for.cond.preheader
	adrp	x22, jpeg_natural_order
	mov	w19, #1
	mov	w20, #5
	mov	w21, #114
	add	x22, x22, :lo12:jpeg_natural_order
	sub	x23, x29, #32                   // =32
	sub	x24, x29, #28                   // =28
	add	x25, sp, #12                    // =12
	mov	w26, #9
	b	.LBB239_17
.LBB239_16:                             // %for.inc
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
.LBB239_17:                             // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB239_41 Depth 2
	ldur	w8, [x29, #-40]
	ldr	w9, [x29, #24]
	cmp	w8, w9
	b.gt	.LBB239_4
// %bb.18:                              // %for.body
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-76]
	cmp	w8, #7                          // =7
	b.gt	.LBB239_22
// %bb.19:                              // %if.then24
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	sub	x0, x29, #136                   // =136
	mov	w3, wzr
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB239_27
// %bb.20:                              // %if.end28
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w9, [x29, #-104]
	ldur	x8, [x29, #-112]
	cmp	w9, #7                          // =7
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	b.gt	.LBB239_22
// %bb.21:                              // %if.then32
                                        //   in Loop: Header=BB239_17 Depth=1
	str	w19, [sp, #4]
	b	.LBB239_25
.LBB239_22:                             // %if.end34
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	ldur	x10, [x29, #-144]
	sub	w8, w8, #8                      // =8
	asr	x8, x9, x8
	and	w8, w8, #0xff
	str	w8, [sp]
	add	x8, x10, w8, uxtw #2
	ldr	w8, [x8, #360]
	str	w8, [sp, #4]
	cbz	w8, .LBB239_24
// %bb.23:                              // %if.then38
                                        //   in Loop: Header=BB239_17 Depth=1
	ldp	w11, w8, [sp]
	ldur	w9, [x29, #-76]
	ldur	x10, [x29, #-144]
                                        // kill: def $w11 killed $w11 def $x11
	sxtw	x11, w11
	sub	w8, w9, w8
	stur	w8, [x29, #-76]
	add	x8, x10, x11
	ldrb	w8, [x8, #1384]
	stur	w8, [x29, #-36]
	str	wzr, [sp, #8]
	mov	w8, wzr
	cbz	w8, .LBB239_28
	b	.LBB239_52
.LBB239_24:                             // %if.else
                                        //   in Loop: Header=BB239_17 Depth=1
	str	w26, [sp, #4]
.LBB239_25:                             // %label3
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	x3, [x29, #-144]
	ldr	w4, [sp, #4]
	sub	x0, x29, #136                   // =136
	bl	jpeg_huff_decode
	stur	w0, [x29, #-36]
	tbnz	w0, #31, .LBB239_27
// %bb.26:                              // %if.end47
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	x8, [x29, #-112]
	ldur	w9, [x29, #-104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
	str	wzr, [sp, #8]
	mov	w8, wzr
	cbz	w8, .LBB239_28
	b	.LBB239_52
.LBB239_27:                             // %if.then46
                                        //   in Loop: Header=BB239_17 Depth=1
	str	w20, [sp, #8]
	mov	w8, w20
	cbnz	w8, .LBB239_52
.LBB239_28:                             // %cleanup.cont
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-36]
	asr	w9, w8, #4
	ands	w8, w8, #0xf
	stur	w9, [x29, #-44]
	stur	w8, [x29, #-36]
	b.eq	.LBB239_36
// %bb.29:                              // %if.then55
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-36]
	cmp	w8, #1                          // =1
	b.eq	.LBB239_31
// %bb.30:                              // %if.then58
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	x8, [x29, #-8]
	mov	w1, #-1
	ldr	x8, [x8]
	str	w21, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB239_31:                             // %if.end60
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-76]
	cmp	w8, #0                          // =0
	b.gt	.LBB239_34
// %bb.32:                              // %if.then63
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	sub	x0, x29, #136                   // =136
	mov	w3, #1
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB239_59
// %bb.33:                              // %if.end67
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	x8, [x29, #-112]
	ldur	w9, [x29, #-104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB239_34:                             // %if.end70
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	sub	w8, w8, #1                      // =1
	lsr	x9, x9, x8
	stur	w8, [x29, #-76]
	tbz	w9, #0, .LBB239_37
// %bb.35:                              // %if.then77
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-28]
	b	.LBB239_38
.LBB239_36:                             // %if.else80
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-44]
	cmp	w8, #15                         // =15
	b.eq	.LBB239_41
	b	.LBB239_53
.LBB239_37:                             // %if.else78
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-32]
.LBB239_38:                             // %do.body
                                        //   in Loop: Header=BB239_17 Depth=1
	stur	w8, [x29, #-36]
	b	.LBB239_41
.LBB239_39:                             // %if.else149
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	w8, [x29, #-44]
	subs	w8, w8, #1                      // =1
	stur	w8, [x29, #-44]
	b.mi	.LBB239_48
.LBB239_40:                             // %if.end154
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	w8, [x29, #-40]
	ldr	w9, [x29, #24]
	add	w8, w8, #1                      // =1
	cmp	w8, w9
	stur	w8, [x29, #-40]
	b.gt	.LBB239_48
.LBB239_41:                             // %do.body
                                        //   Parent Loop BB239_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursw	x8, [x29, #-40]
	ldur	x9, [x29, #-56]
	ldrsw	x8, [x22, x8, lsl #2]
	lsl	x8, x8, #1
	add	x10, x9, x8
	stur	x10, [x29, #-64]
	ldrsh	w8, [x9, x8]
	cbz	w8, .LBB239_39
// %bb.42:                              // %if.then112
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	w8, [x29, #-76]
	cmp	w8, #0                          // =0
	b.gt	.LBB239_45
// %bb.43:                              // %if.then115
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	sub	x0, x29, #136                   // =136
	mov	w3, #1
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB239_59
// %bb.44:                              // %if.end119
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	x8, [x29, #-112]
	ldur	w9, [x29, #-104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB239_45:                             // %if.end122
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-72]
	sub	w8, w8, #1                      // =1
	lsr	x9, x9, x8
	stur	w8, [x29, #-76]
	tbz	w9, #0, .LBB239_40
// %bb.46:                              // %if.then129
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	x8, [x29, #-64]
	ldur	w9, [x29, #-28]
	ldrsh	w8, [x8]
	tst	w8, w9
	b.ne	.LBB239_40
// %bb.47:                              // %if.then134
                                        //   in Loop: Header=BB239_41 Depth=2
	ldur	x8, [x29, #-64]
	ldrsh	w9, [x8]
	cmp	w9, #0                          // =0
	csel	x10, x24, x23, ge
	ldr	w10, [x10]
	add	w9, w9, w10
	strh	w9, [x8]
	b	.LBB239_40
.LBB239_48:                             // %do.end
                                        //   in Loop: Header=BB239_17 Depth=1
	ldur	w8, [x29, #-36]
	cbz	w8, .LBB239_16
// %bb.49:                              // %if.then158
                                        //   in Loop: Header=BB239_17 Depth=1
	ldp	w8, w9, [x29, #-40]
                                        // kill: def $w8 killed $w8 def $x8
	ldur	x10, [x29, #-56]
	sxtw	x8, w8
	ldrsw	x8, [x22, x8, lsl #2]
	str	w8, [sp, #4]
	strh	w9, [x10, x8, lsl #1]
	ldursw	x8, [x29, #-148]
	ldr	w9, [sp, #4]
	add	w10, w8, #1                     // =1
	stur	w10, [x29, #-148]
	str	w9, [x25, x8, lsl #2]
	b	.LBB239_16
.LBB239_50:                             // %for.end225
	ldur	w8, [x29, #-48]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-48]
.LBB239_51:                             // %if.end227
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-136]
	ldr	x8, [x8, #32]
	str	x9, [x8]
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-128]
	ldr	x8, [x8, #32]
	str	x9, [x8, #8]
	ldur	w8, [x29, #-120]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #524]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-24]
	str	x8, [x9, #16]
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-24]
	str	w8, [x9, #24]
	ldur	w8, [x29, #-48]
	ldur	x9, [x29, #-24]
	str	w8, [x9, #32]
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #52]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, #52]
	mov	w8, #1
	str	w8, [x29, #28]
	b	.LBB239_61
.LBB239_52:                             // %cleanup
	cmp	w8, #5                          // =5
	b.eq	.LBB239_59
	b	.LBB239_62
.LBB239_53:                             // %if.then83
	ldur	w8, [x29, #-44]
	mov	w9, #1
	lsl	w9, w9, w8
	stur	w9, [x29, #-48]
	cbz	w8, .LBB239_4
// %bb.54:                              // %if.then86
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-44]
	cmp	w8, w9
	b.ge	.LBB239_57
// %bb.55:                              // %if.then89
	ldur	x1, [x29, #-72]
	ldur	w2, [x29, #-76]
	ldur	w3, [x29, #-44]
	sub	x0, x29, #136                   // =136
	bl	jpeg_fill_bit_buffer
	cbz	w0, .LBB239_59
// %bb.56:                              // %if.end93
	ldur	x8, [x29, #-112]
	ldur	w9, [x29, #-104]
	stur	x8, [x29, #-72]
	stur	w9, [x29, #-76]
.LBB239_57:                             // %if.end96
	ldp	w12, w8, [x29, #-48]
	ldur	w9, [x29, #-76]
	ldur	x10, [x29, #-72]
	mov	w11, #1
	sub	w9, w9, w8
	lsl	w8, w11, w8
	stur	w9, [x29, #-76]
	asr	x9, x10, x9
	sub	w8, w8, #1                      // =1
	and	w8, w9, w8
	stur	w8, [x29, #-44]
	add	w8, w12, w8
	stur	w8, [x29, #-48]
	b	.LBB239_4
.LBB239_58:                             // %while.body
                                        //   in Loop: Header=BB239_59 Depth=1
	ldursw	x8, [x29, #-148]
	add	x10, sp, #12                    // =12
	ldur	x9, [x29, #-56]
	sub	x8, x8, #1                      // =1
	ldrsw	x10, [x10, x8, lsl #2]
	stur	w8, [x29, #-148]
	strh	wzr, [x9, x10, lsl #1]
.LBB239_59:                             // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-148]
	cmp	w8, #1                          // =1
	b.ge	.LBB239_58
.LBB239_60:                             // %while.end
	mov	w8, #1
	str	wzr, [x29, #28]
.LBB239_61:                             // %cleanup251
	str	w8, [sp, #8]
.LBB239_62:                             // %cleanup251
	ldr	w0, [x29, #28]
	add	sp, sp, #416                    // =416
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x28, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end239:
	.size	decode_mcu_AC_refine, .Lfunc_end239-decode_mcu_AC_refine
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function process_restart.73
	.type	process_restart.73,@function
process_restart.73:                     // @process_restart.73
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #576]
	stp	x8, x0, [sp, #8]
	ldr	x9, [x0, #568]
	ldr	w8, [x8, #24]
	ldr	w10, [x9, #172]
	add	w11, w8, #7                     // =7
	cmp	w8, #0                          // =0
	csel	w8, w11, w8, lt
	add	w8, w10, w8, asr #3
	str	w8, [x9, #172]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #24]
	ldr	x8, [x0, #568]
	ldr	x8, [x8, #16]
	blr	x8
	cbz	w0, .LBB240_5
// %bb.1:                               // %if.end
	str	wzr, [sp, #4]
.LBB240_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldp	x10, x8, [sp, #8]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #416]
	cmp	w9, w8
	add	x8, x10, #32                    // =32
	b.ge	.LBB240_4
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB240_2 Depth=1
	ldrsw	x9, [sp, #4]
	add	x8, x8, x9, lsl #2
	str	wzr, [x8, #4]
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b	.LBB240_2
.LBB240_4:                              // %for.end
	str	wzr, [x8]
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8, #360]
	str	w8, [x9, #52]
	ldr	x8, [sp, #8]
	mov	w9, #1
	str	wzr, [x8, #28]
	stur	w9, [x29, #-4]
	str	w9, [sp]
	mov	w0, w9
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB240_5:                              // %if.then
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp]
	mov	w0, wzr
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end240:
	.size	process_restart.73, .Lfunc_end240-process_restart.73
	.cfi_endproc
                                        // -- End function
	.globl	jinit_d_post_controller         // -- Begin function jinit_d_post_controller
	.p2align	2
	.type	jinit_d_post_controller,@function
jinit_d_post_controller:                // @jinit_d_post_controller
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x21, [sp, #32]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #48
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [x29, #24]
	adrp	x9, start_pass_dpost
	str	x0, [sp]
	add	x9, x9, :lo12:start_pass_dpost
	str	x0, [x8, #552]
	mov	x8, x0
	str	x9, [x8]
	mov	x8, x0
	str	xzr, [x8, #16]
	mov	x8, x0
	str	xzr, [x8, #24]
	ldr	x8, [x29, #24]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB241_4
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	ldr	x9, [sp]
	ldr	w8, [x8, #392]
	str	w8, [x9, #32]
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	x8, [x8, #8]
	cbz	w9, .LBB241_3
// %bb.2:                               // %if.then3
	ldr	x19, [x29, #24]
	ldr	x21, [x8, #32]
	ldr	x8, [sp]
	ldp	w0, w9, [x19, #132]
	ldr	w10, [x19, #128]
	ldr	w1, [x8, #32]
	mul	w20, w10, w9
	bl	jround_up
	ldr	x8, [sp]
	mov	x4, x0
	mov	w1, #1
	mov	x0, x19
	ldr	w5, [x8, #32]
	mov	w2, wzr
	mov	w3, w20
                                        // kill: def $w4 killed $w4 killed $x4
	blr	x21
	ldr	x8, [sp]
	str	x0, [x8, #16]
	b	.LBB241_4
.LBB241_3:                              // %if.else
	ldr	x0, [x29, #24]
	ldr	x9, [sp]
	ldr	x8, [x8, #16]
	mov	w1, #1
	ldr	w10, [x0, #128]
	ldr	w11, [x0, #136]
	ldr	w3, [x9, #32]
	mul	w2, w10, w11
	blr	x8
	ldr	x8, [sp]
	str	x0, [x8, #24]
.LBB241_4:                              // %if.end19
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldr	x21, [sp, #32]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end241:
	.size	jinit_d_post_controller, .Lfunc_end241-jinit_d_post_controller
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_dpost
	.type	start_pass_dpost,@function
start_pass_dpost:                       // @start_pass_dpost
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #552]
	cmp	w1, #3                          // =3
	str	x8, [sp, #8]
	b.eq	.LBB242_6
// %bb.1:                               // %entry
	cmp	w1, #2                          // =2
	b.eq	.LBB242_9
// %bb.2:                               // %entry
	cbnz	w1, .LBB242_12
// %bb.3:                               // %sw.bb
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #100]
	cbz	w8, .LBB242_13
// %bb.4:                               // %if.then
	ldr	x8, [sp, #8]
	adrp	x9, post_process_1pass
	add	x9, x9, :lo12:post_process_1pass
	str	x9, [x8, #8]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #24]
	cbnz	x8, .LBB242_14
// %bb.5:                               // %if.then2
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #8]
	mov	w4, #1
	mov	w2, wzr
	ldr	x9, [x0, #8]
	ldr	x1, [x8, #16]
	ldr	w3, [x8, #32]
	ldr	x9, [x9, #56]
	blr	x9
	ldr	x8, [sp, #8]
	str	x0, [x8, #24]
	b	.LBB242_14
.LBB242_6:                              // %sw.bb8
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	cbnz	x8, .LBB242_8
// %bb.7:                               // %if.then11
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB242_8:                              // %if.end13
	ldr	x8, [sp, #8]
	adrp	x9, post_process_prepass
	add	x9, x9, :lo12:post_process_prepass
	str	x9, [x8, #8]
	b	.LBB242_14
.LBB242_9:                              // %sw.bb16
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	cbnz	x8, .LBB242_11
// %bb.10:                              // %if.then19
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB242_11:                             // %if.end24
	ldr	x8, [sp, #8]
	adrp	x9, post_process_2pass
	add	x9, x9, :lo12:post_process_2pass
	str	x9, [x8, #8]
	b	.LBB242_14
.LBB242_12:                             // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB242_14
.LBB242_13:                             // %if.else
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x8, #592]
	ldr	x8, [x8, #8]
	str	x8, [x9, #8]
.LBB242_14:                             // %sw.epilog
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	wzr, [x8, #40]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #36]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end242:
	.size	start_pass_dpost, .Lfunc_end242-start_pass_dpost
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function post_process_1pass
	.type	post_process_1pass,@function
post_process_1pass:                     // @post_process_1pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stp	x5, x4, [sp, #32]
	str	w6, [sp, #28]
	ldr	x8, [x0, #552]
	str	x8, [sp, #16]
	ldr	w9, [x5]
	sub	w9, w6, w9
	str	w9, [sp, #8]
	ldr	w8, [x8, #32]
	cmp	w9, w8
	b.ls	.LBB243_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #32]
	str	w8, [sp, #8]
.LBB243_2:                              // %if.end
	ldp	x1, x0, [x29, #-16]
	str	wzr, [sp, #12]
	ldr	x8, [sp, #16]
	ldur	x2, [x29, #-24]
	ldr	x9, [x0, #592]
	ldur	w3, [x29, #-28]
	ldr	x4, [x8, #24]
	ldr	w6, [sp, #8]
	ldr	x8, [x9, #8]
	add	x5, sp, #12                     // =12
	blr	x8
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #16]
	ldp	x9, x11, [sp, #32]
	ldr	w3, [sp, #12]
	ldr	x10, [x0, #608]
	ldr	x1, [x8, #24]
	ldr	w8, [x9]
	ldr	x9, [x10, #8]
	add	x2, x11, x8, lsl #3
	blr	x9
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #12]
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end243:
	.size	post_process_1pass, .Lfunc_end243-post_process_1pass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function post_process_prepass
	.type	post_process_prepass,@function
post_process_prepass:                   // @post_process_prepass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stp	x5, x4, [sp, #32]
	str	w6, [sp, #28]
	ldr	x8, [x0, #552]
	str	x8, [sp, #16]
	ldr	w8, [x8, #40]
	cbnz	w8, .LBB244_2
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #16]
	mov	w4, #1
	ldr	x9, [x0, #8]
	ldr	x1, [x8, #16]
	ldp	w3, w2, [x8, #32]
	ldr	x9, [x9, #56]
	blr	x9
	ldr	x8, [sp, #16]
	str	x0, [x8, #24]
.LBB244_2:                              // %if.end
	ldr	x5, [sp, #16]
	ldr	w8, [x5, #40]!
	ldp	x1, x0, [x29, #-16]
	ldur	x2, [x29, #-24]
	ldur	w3, [x29, #-28]
	str	w8, [sp, #12]
	ldr	x8, [x0, #592]
	ldur	x4, [x5, #-16]
	ldur	w6, [x5, #-8]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #40]
	cmp	w8, w9
	b.ls	.LBB244_4
// %bb.3:                               // %if.then9
	ldr	x8, [sp, #16]
	ldr	w10, [sp, #12]
	ldur	x0, [x29, #-8]
	mov	x2, xzr
	ldr	w9, [x8, #40]
	sub	w3, w9, w10
	str	w3, [sp, #8]
	ldr	x9, [x0, #608]
	ldr	x8, [x8, #24]
	ldr	x9, [x9, #8]
	add	x1, x8, x10, lsl #3
	blr	x9
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #8]
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
.LBB244_4:                              // %if.end12
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #40]
	ldr	w8, [x8, #32]
	cmp	w9, w8
	b.lo	.LBB244_6
// %bb.5:                               // %if.then16
	ldr	x8, [sp, #16]
	ldp	w9, w10, [x8, #32]
	add	w9, w10, w9
	str	w9, [x8, #36]
	ldr	x8, [sp, #16]
	str	wzr, [x8, #40]
.LBB244_6:                              // %if.end21
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end244:
	.size	post_process_prepass, .Lfunc_end244-post_process_prepass
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function post_process_2pass
	.type	post_process_2pass,@function
post_process_2pass:                     // @post_process_2pass
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stp	x5, x4, [sp, #32]
	str	w6, [sp, #28]
	ldr	x8, [x0, #552]
	str	x8, [sp, #16]
	ldr	w8, [x8, #40]
	cbnz	w8, .LBB245_2
// %bb.1:                               // %if.then
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #16]
	mov	w4, wzr
	ldr	x9, [x0, #8]
	ldr	x1, [x8, #16]
	ldp	w3, w2, [x8, #32]
	ldr	x9, [x9, #56]
	blr	x9
	ldr	x8, [sp, #16]
	str	x0, [x8, #24]
.LBB245_2:                              // %if.end
	ldr	x8, [sp, #16]
	ldr	x10, [sp, #32]
	ldr	w9, [x8, #32]
	ldr	w8, [x8, #40]
	ldr	w10, [x10]
	sub	w8, w9, w8
	ldr	w9, [sp, #28]
	sub	w9, w9, w10
	cmp	w8, w9
	stp	w9, w8, [sp, #8]
	b.ls	.LBB245_4
// %bb.3:                               // %if.then6
	ldr	w8, [sp, #8]
	str	w8, [sp, #12]
.LBB245_4:                              // %if.end7
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #16]
	ldr	w10, [sp, #12]
	ldr	w8, [x8, #132]
	ldr	w9, [x9, #36]
	sub	w8, w8, w9
	cmp	w10, w8
	str	w8, [sp, #8]
	b.ls	.LBB245_6
// %bb.5:                               // %if.then11
	ldr	w8, [sp, #8]
	str	w8, [sp, #12]
.LBB245_6:                              // %if.end12
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #16]
	ldp	x10, x9, [sp, #32]
	ldr	w3, [sp, #12]
	ldr	x11, [x0, #608]
	ldr	x12, [x8, #24]
	ldr	w8, [x8, #40]
	ldr	w10, [x10]
	ldr	x11, [x11, #8]
	add	x1, x12, x8, lsl #3
	add	x2, x9, x10, lsl #3
	blr	x11
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #12]
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w10, [x8, #40]
	add	w9, w10, w9
	str	w9, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #40]
	ldr	w8, [x8, #32]
	cmp	w9, w8
	b.lo	.LBB245_8
// %bb.7:                               // %if.then22
	ldr	x8, [sp, #16]
	ldp	w9, w10, [x8, #32]
	add	w9, w10, w9
	str	w9, [x8, #36]
	ldr	x8, [sp, #16]
	str	wzr, [x8, #40]
.LBB245_8:                              // %if.end27
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end245:
	.size	post_process_2pass, .Lfunc_end245-post_process_2pass
	.cfi_endproc
                                        // -- End function
	.globl	jinit_upsampler                 // -- Begin function jinit_upsampler
	.p2align	2
	.type	jinit_upsampler,@function
jinit_upsampler:                        // @jinit_upsampler
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #160                    // =160
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #256
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_upsample
	stur	x0, [x29, #-16]
	add	x9, x9, :lo12:start_pass_upsample
	str	x0, [x8, #592]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, sep_upsample
	mov	x8, x0
	add	x9, x9, :lo12:sep_upsample
	str	x9, [x8, #8]
	mov	x8, x0
	str	wzr, [x8, #16]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #384]
	cbz	w8, .LBB246_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #23
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB246_2:                              // %if.end
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #92]
	cbz	w8, .LBB246_4
// %bb.3:                               // %land.rhs
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #396]
	cmp	w8, #1                          // =1
	cset	w8, gt
.LBB246_4:                              // %land.end
	str	w8, [sp, #24]
	ldur	x8, [x29, #-8]
	stur	wzr, [x29, #-20]
	adrp	x21, fullsize_upsample
	adrp	x22, h2v1_fancy_upsample
	ldr	x8, [x8, #296]
	adrp	x23, h2v1_upsample
	adrp	x25, h2v2_upsample
	adrp	x26, int_upsample
	adrp	x28, noop_upsample
	mov	w20, #1
	add	x21, x21, :lo12:fullsize_upsample
	add	x22, x22, :lo12:h2v1_fancy_upsample
	add	x23, x23, :lo12:h2v1_upsample
	add	x25, x25, :lo12:h2v2_upsample
	add	x26, x26, :lo12:int_upsample
	mov	w27, #37
	add	x28, x28, :lo12:noop_upsample
	str	x8, [sp, #32]
	b	.LBB246_6
.LBB246_5:                              // %for.inc
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	w8, [x29, #-20]
	ldr	x9, [sp, #32]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	stur	w8, [x29, #-20]
	str	x9, [sp, #32]
.LBB246_6:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #48]
	cmp	w9, w8
	b.ge	.LBB246_29
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	x8, [sp, #32]
	ldur	x9, [x29, #-8]
	ldr	w10, [x8, #8]
	ldr	w11, [x8, #36]
	ldr	w12, [x9, #396]
	mul	w10, w10, w11
	sdiv	w13, w10, w12
	ldr	w10, [x8, #12]
	ldr	w8, [x8, #36]
	ldr	w11, [x9, #396]
	mul	w8, w10, w8
	sdiv	w8, w8, w11
	stp	w8, w13, [sp, #16]
	ldur	x11, [x29, #-16]
	ldursw	x10, [x29, #-20]
	ldr	w12, [x9, #388]
	ldr	w9, [x9, #392]
	add	x10, x11, x10, lsl #2
	stp	w9, w12, [sp, #8]
	str	w8, [x10, #192]
	ldr	x8, [sp, #32]
	str	w20, [sp, #28]
	ldr	w8, [x8, #48]
	cbz	w8, .LBB246_16
// %bb.8:                               // %if.else
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #12]
	cmp	w8, w9
	b.ne	.LBB246_11
// %bb.9:                               // %land.lhs.true
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #16]
	ldr	w9, [sp, #8]
	cmp	w8, w9
	b.ne	.LBB246_11
// %bb.10:                              // %if.then20
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	str	x21, [x8, #104]
	str	wzr, [sp, #28]
	mov	w8, wzr
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_11:                             // %if.else24
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #12]
	cmp	w9, w8, lsl #1
	b.ne	.LBB246_17
// %bb.12:                              // %land.lhs.true27
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #16]
	ldr	w9, [sp, #8]
	cmp	w8, w9
	b.ne	.LBB246_17
// %bb.13:                              // %if.then29
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #24]
	cbz	w8, .LBB246_25
// %bb.14:                              // %land.lhs.true31
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #40]
	cmp	w8, #3                          // =3
	b.lo	.LBB246_25
// %bb.15:                              // %if.then33
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	add	x8, x8, #104                    // =104
	str	x22, [x8, w9, sxtw #3]
	ldr	w8, [sp, #28]
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_16:                             // %if.then15
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	str	x28, [x8, #104]
	str	wzr, [sp, #28]
	mov	w8, wzr
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_17:                             // %if.else42
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #12]
	cmp	w9, w8, lsl #1
	b.ne	.LBB246_22
// %bb.18:                              // %land.lhs.true45
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #16]
	ldr	w9, [sp, #8]
	cmp	w9, w8, lsl #1
	b.ne	.LBB246_22
// %bb.19:                              // %if.then48
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #24]
	cbz	w8, .LBB246_26
// %bb.20:                              // %land.lhs.true50
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #40]
	cmp	w8, #3                          // =3
	b.lo	.LBB246_26
// %bb.21:                              // %if.then53
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	adrp	x9, h2v2_fancy_upsample
	add	x9, x9, :lo12:h2v2_fancy_upsample
	str	x9, [x8, #104]
	ldur	x8, [x29, #-16]
	str	w20, [x8, #16]
	ldr	w8, [sp, #28]
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_22:                             // %if.else64
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #20]
	sdiv	w10, w8, w9
	msub	w8, w10, w9, w8
	cbnz	w8, .LBB246_24
// %bb.23:                              // %land.lhs.true66
                                        //   in Loop: Header=BB246_6 Depth=1
	ldr	w8, [sp, #8]
	ldr	w9, [sp, #16]
	sdiv	w10, w8, w9
	msub	w8, w10, w9, w8
	cbz	w8, .LBB246_27
.LBB246_24:                             // %if.else80
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w27, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #28]
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_25:                             // %if.else37
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	add	x8, x8, #104                    // =104
	str	x23, [x8, w9, sxtw #3]
	ldr	w8, [sp, #28]
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_26:                             // %if.else59
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	str	x25, [x8, #104]
	ldr	w8, [sp, #28]
	cbnz	w8, .LBB246_28
	b	.LBB246_5
.LBB246_27:                             // %if.then69
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	str	x26, [x8, #104]
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #20]
	ldur	x10, [x29, #-16]
	ldursw	x11, [x29, #-20]
	sdiv	w8, w8, w9
	add	x9, x10, x11
	strb	w8, [x9, #232]
	ldr	w8, [sp, #8]
	ldr	w9, [sp, #16]
	ldur	x10, [x29, #-16]
	ldursw	x11, [x29, #-20]
	sdiv	w8, w8, w9
	add	x9, x10, x11
	strb	w8, [x9, #242]
	ldr	w8, [sp, #28]
	cbz	w8, .LBB246_5
.LBB246_28:                             // %if.then91
                                        //   in Loop: Header=BB246_6 Depth=1
	ldur	x19, [x29, #-8]
	ldr	x8, [x19, #8]
	ldr	w0, [x19, #128]
	ldrsw	x1, [x19, #388]
	ldr	x24, [x8, #16]
	bl	jround_up
	ldur	x8, [x29, #-8]
	mov	x2, x0
	mov	w1, #1
	mov	x0, x19
	ldr	w3, [x8, #392]
                                        // kill: def $w2 killed $w2 killed $x2
	blr	x24
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-20]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #24]
	b	.LBB246_5
.LBB246_29:                             // %for.end
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #160                    // =160
	ret
.Lfunc_end246:
	.size	jinit_upsampler, .Lfunc_end246-jinit_upsampler
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_upsample
	.type	start_pass_upsample,@function
start_pass_upsample:                    // @start_pass_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #592]
	stp	x8, x0, [sp, #-16]!
	ldr	w9, [x0, #392]
	str	w9, [x8, #184]
	mov	x8, x0
	ldr	w8, [x8, #132]
	ldr	x9, [sp]
	str	w8, [x9, #188]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end247:
	.size	start_pass_upsample, .Lfunc_end247-start_pass_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function sep_upsample
	.type	sep_upsample,@function
sep_upsample:                           // @sep_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stur	x4, [x29, #-40]
	str	x5, [sp, #48]
	str	w6, [sp, #44]
	ldr	x8, [x0, #592]
	str	x8, [sp, #32]
	ldr	w8, [x8, #184]
	ldr	w9, [x0, #392]
	cmp	w8, w9
	b.lt	.LBB248_5
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	str	wzr, [sp, #28]
	ldr	x8, [x8, #296]
	str	x8, [sp, #16]
.LBB248_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #28]
	ldr	w10, [x8, #48]
	ldr	x8, [sp, #32]
	cmp	w9, w10
	b.ge	.LBB248_4
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB248_2 Depth=1
	ldrsw	x9, [sp, #28]
	ldr	x11, [sp, #32]
	ldur	x10, [x29, #-24]
	ldp	x12, x0, [x29, #-16]
	lsl	x13, x9, #3
	add	x9, x11, x9, lsl #2
	ldr	w10, [x10]
	ldr	w9, [x9, #192]
	add	x8, x8, x13
	ldr	x12, [x12, x13]
	ldr	x1, [sp, #16]
	ldr	x8, [x8, #104]
	add	x11, x11, x13
	mul	w9, w10, w9
	add	x2, x12, w9, uxtw #3
	add	x3, x11, #24                    // =24
	blr	x8
	ldr	w8, [sp, #28]
	ldr	x9, [sp, #16]
	add	w8, w8, #1                      // =1
	add	x9, x9, #96                     // =96
	str	w8, [sp, #28]
	str	x9, [sp, #16]
	b	.LBB248_2
.LBB248_4:                              // %for.end
	str	wzr, [x8, #184]
.LBB248_5:                              // %if.end
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #32]
	ldr	w8, [x8, #392]
	ldp	w10, w9, [x9, #184]
	sub	w8, w8, w10
	cmp	w8, w9
	str	w8, [sp, #12]
	b.ls	.LBB248_7
// %bb.6:                               // %if.then13
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #188]
	str	w8, [sp, #12]
.LBB248_7:                              // %if.end15
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #44]
	ldr	w10, [sp, #12]
	ldr	w8, [x8]
	sub	w8, w9, w8
	cmp	w10, w8
	str	w8, [sp, #44]
	b.ls	.LBB248_9
// %bb.8:                               // %if.then18
	ldr	w8, [sp, #44]
	str	w8, [sp, #12]
.LBB248_9:                              // %if.end19
	ldur	x0, [x29, #-8]
	ldr	x9, [sp, #48]
	ldr	x8, [sp, #32]
	ldur	x11, [x29, #-40]
	ldr	x10, [x0, #600]
	ldr	w9, [x9]
	ldr	w2, [x8, #184]
	ldr	w4, [sp, #12]
	ldr	x10, [x10, #8]
	add	x1, x8, #24                     // =24
	add	x3, x11, x9, lsl #3
	blr	x10
	ldr	x8, [sp, #48]
	ldr	w9, [sp, #12]
	ldr	w10, [x8]
	add	w9, w10, w9
	str	w9, [x8]
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #12]
	ldr	w10, [x8, #188]
	sub	w9, w10, w9
	str	w9, [x8, #188]
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #12]
	ldr	w10, [x8, #184]
	add	w9, w10, w9
	str	w9, [x8, #184]
	ldr	x8, [sp, #32]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #184]
	ldr	w9, [x9, #392]
	cmp	w8, w9
	b.lt	.LBB248_11
// %bb.10:                              // %if.then32
	ldur	x8, [x29, #-24]
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
.LBB248_11:                             // %if.end34
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end248:
	.size	sep_upsample, .Lfunc_end248-sep_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function noop_upsample
	.type	noop_upsample,@function
noop_upsample:                          // @noop_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
	stp	x1, x0, [sp, #16]
	stp	x3, x2, [sp]
	str	xzr, [x3]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end249:
	.size	noop_upsample, .Lfunc_end249-noop_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fullsize_upsample
	.type	fullsize_upsample,@function
fullsize_upsample:                      // @fullsize_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
	stp	x1, x0, [sp, #16]
	stp	x3, x2, [sp]
	str	x2, [x3]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end250:
	.size	fullsize_upsample, .Lfunc_end250-fullsize_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v1_fancy_upsample
	.type	h2v1_fancy_upsample,@function
h2v1_fancy_upsample:                    // @h2v1_fancy_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	.cfi_def_cfa_offset 80
	stp	x1, x0, [sp, #64]
	stp	x3, x2, [sp, #48]
	ldr	x8, [x3]
	str	wzr, [sp, #12]
	str	x8, [sp, #40]
	b	.LBB251_2
.LBB251_1:                              // %for.end
                                        //   in Loop: Header=BB251_2 Depth=1
	ldrb	w8, [x8]
	ldp	x10, x9, [sp, #24]
	str	w8, [sp, #20]
	ldurb	w9, [x9, #-1]
	add	w8, w8, w8, lsl #1
	add	x11, x10, #1                    // =1
	str	x11, [sp, #24]
	add	w8, w8, w9
	add	w8, w8, #1                      // =1
	lsr	w8, w8, #2
	strb	w8, [x10]
	ldr	w9, [sp, #20]
	mov	x8, x11
	add	x10, x8, #1                     // =1
	str	x10, [sp, #24]
	strb	w9, [x8]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB251_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB251_4 Depth 2
	ldr	x8, [sp, #72]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #392]
	cmp	w9, w8
	b.ge	.LBB251_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB251_2 Depth=1
	ldrsw	x8, [sp, #12]
	ldr	x9, [sp, #56]
	ldr	x10, [sp, #40]
	lsl	x8, x8, #3
	ldr	x9, [x9, x8]
	str	x9, [sp, #32]
	ldr	x8, [x10, x8]
	add	x10, x9, #1                     // =1
	stp	x8, x10, [sp, #24]
	ldrb	w9, [x9]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #24]
	str	w9, [sp, #20]
	strb	w9, [x8]
	ldr	x8, [sp, #32]
	mov	w9, w9
	add	w9, w9, w9, lsl #1
	ldrb	w8, [x8]
	add	w8, w9, w8
	add	w8, w8, #2                      // =2
	add	x9, x10, #1                     // =1
	lsr	w8, w8, #2
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	x8, [sp, #64]
	ldr	w8, [x8, #40]
	sub	w8, w8, #2                      // =2
	str	w8, [sp, #16]
	mov	w9, w8
	ldr	x8, [sp, #32]
	cbz	w9, .LBB251_1
.LBB251_4:                              // %for.body12
                                        //   Parent Loop BB251_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w9, [x8]
	add	x12, x8, #1                     // =1
	ldr	x10, [sp, #24]
	add	w9, w9, w9, lsl #1
	str	w9, [sp, #20]
	ldurb	w8, [x8, #-1]
	add	x11, x10, #1                    // =1
	stp	x11, x12, [sp, #24]
	add	w8, w9, w8
	add	w8, w8, #1                      // =1
	lsr	w8, w8, #2
	strb	w8, [x10]
	ldr	x8, [sp, #32]
	mov	w9, w9
	mov	x10, x11
	ldrb	w8, [x8]
	add	w8, w9, w8
	add	w8, w8, #2                      // =2
	add	x9, x10, #1                     // =1
	lsr	w8, w8, #2
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	w8, [sp, #16]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	mov	w9, w8
	ldr	x8, [sp, #32]
	cbnz	w9, .LBB251_4
	b	.LBB251_1
.LBB251_5:                              // %for.end41
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end251:
	.size	h2v1_fancy_upsample, .Lfunc_end251-h2v1_fancy_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v1_upsample
	.type	h2v1_upsample,@function
h2v1_upsample:                          // @h2v1_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	.cfi_def_cfa_offset 80
	stp	x1, x0, [sp, #64]
	stp	x3, x2, [sp, #48]
	ldr	x8, [x3]
	str	wzr, [sp, #4]
	str	x8, [sp, #40]
	b	.LBB252_2
.LBB252_1:                              // %for.inc
                                        //   in Loop: Header=BB252_2 Depth=1
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB252_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB252_4 Depth 2
	ldr	x8, [sp, #72]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #392]
	cmp	w9, w8
	b.ge	.LBB252_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB252_2 Depth=1
	ldrsw	x8, [sp, #4]
	ldr	x9, [sp, #56]
	ldr	x10, [sp, #40]
	lsl	x8, x8, #3
	ldr	x11, [x9, x8]
	ldr	x8, [x10, x8]
	ldr	x9, [sp, #72]
	stp	x8, x11, [sp, #24]
	ldr	w9, [x9, #128]
	add	x8, x8, x9
	str	x8, [sp, #8]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #8]
	cmp	x8, x9
	b.hs	.LBB252_1
.LBB252_4:                              // %while.body
                                        //   Parent Loop BB252_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x9, x8, [sp, #24]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	add	x10, x9, #1                     // =1
	stp	x10, x11, [sp, #24]
	strb	w8, [sp, #20]
	strb	w8, [x9]
	and	w9, w8, #0xff
	mov	x8, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #24]
	strb	w9, [x8]
	mov	x8, x10
	ldr	x9, [sp, #8]
	cmp	x8, x9
	b.lo	.LBB252_4
	b	.LBB252_1
.LBB252_5:                              // %for.end
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end252:
	.size	h2v1_upsample, .Lfunc_end252-h2v1_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v2_fancy_upsample
	.type	h2v2_fancy_upsample,@function
h2v2_fancy_upsample:                    // @h2v2_fancy_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	.cfi_def_cfa_offset 96
	stp	x1, x0, [sp, #80]
	stp	x3, x2, [sp, #64]
	ldr	x8, [x3]
	str	xzr, [sp, #8]
	str	x8, [sp, #56]
	b	.LBB253_2
.LBB253_1:                              // %for.end64
                                        //   in Loop: Header=BB253_2 Depth=1
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB253_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB253_5 Depth 2
                                        //       Child Loop BB253_10 Depth 3
	ldr	x8, [sp, #88]
	ldr	w9, [sp, #8]
	ldr	w8, [x8, #392]
	cmp	w9, w8
	b.ge	.LBB253_11
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB253_2 Depth=1
	str	wzr, [sp, #4]
	b	.LBB253_5
.LBB253_4:                              // %for.end
                                        //   in Loop: Header=BB253_5 Depth=2
	ldp	w9, w8, [sp, #24]
	ldr	x10, [sp, #32]
	add	w8, w8, w8, lsl #1
	add	w8, w8, w9
	add	w8, w8, #8                      // =8
	add	x9, x10, #1                     // =1
	lsr	w8, w8, #4
	str	x9, [sp, #32]
	strb	w8, [x10]
	ldr	w8, [sp, #28]
	add	x10, x9, #1                     // =1
	str	x10, [sp, #32]
	lsl	w8, w8, #2
	add	w8, w8, #7                      // =7
	lsr	w8, w8, #4
	strb	w8, [x9]
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB253_5:                              // %for.cond
                                        //   Parent Loop BB253_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB253_10 Depth 3
	ldr	w8, [sp, #4]
	cmp	w8, #1                          // =1
	b.gt	.LBB253_1
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB253_5 Depth=2
	ldr	x8, [sp, #72]
	ldrsw	x9, [sp, #12]
	ldr	w11, [sp, #4]
	ldr	x10, [x8, x9, lsl #3]
	str	x10, [sp, #48]
	cbz	w11, .LBB253_8
// %bb.7:                               // %if.else
                                        //   in Loop: Header=BB253_5 Depth=2
	add	w9, w9, #1                      // =1
	b	.LBB253_9
.LBB253_8:                              // %if.then
                                        //   in Loop: Header=BB253_5 Depth=2
	sub	w9, w9, #1                      // =1
.LBB253_9:                              // %if.end
                                        //   in Loop: Header=BB253_5 Depth=2
	ldr	x8, [x8, w9, sxtw #3]
	ldp	x10, x9, [sp, #48]
	str	x8, [sp, #40]
	ldrsw	x8, [sp, #8]
	ldr	x11, [sp, #40]
	add	x13, x10, #2                    // =2
	add	w12, w8, #1                     // =1
	str	w12, [sp, #8]
	ldr	x8, [x9, x8, lsl #3]
	add	x9, x10, #1                     // =1
	add	x12, x11, #1                    // =1
	stp	x12, x9, [sp, #40]
	ldrb	w9, [x10]
	ldrb	w12, [x11]
	str	x13, [sp, #48]
	add	w9, w9, w9, lsl #1
	add	w9, w9, w12
	add	x12, x11, #2                    // =2
	str	w9, [sp, #28]
	ldrb	w10, [x10, #1]
	stp	x8, x12, [sp, #32]
	ldrb	w11, [x11, #1]
	lsl	w9, w9, #2
	add	w9, w9, #8                      // =8
	add	w10, w10, w10, lsl #1
	add	x12, x8, #1                     // =1
	lsr	w9, w9, #4
	add	w10, w10, w11
	str	x12, [sp, #32]
	str	w10, [sp, #20]
	strb	w9, [x8]
	ldr	w8, [sp, #28]
	mov	w10, w10
	mov	x9, x12
	add	x11, x9, #1                     // =1
	add	w8, w8, w8, lsl #1
	add	w8, w8, w10
	add	w8, w8, #7                      // =7
	lsr	w8, w8, #4
	str	x11, [sp, #32]
	strb	w8, [x9]
	ldr	w8, [sp, #28]
	ldr	w9, [sp, #20]
	ldr	x10, [sp, #80]
	stp	w8, w9, [sp, #24]
	ldr	w8, [x10, #40]
	sub	w8, w8, #2                      // =2
	str	w8, [sp, #16]
	mov	w8, w8
	cbz	w8, .LBB253_4
.LBB253_10:                             // %for.body32
                                        //   Parent Loop BB253_2 Depth=1
                                        //     Parent Loop BB253_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w11, w10, [sp, #24]
	ldp	x9, x8, [sp, #40]
	ldr	x12, [sp, #32]
	add	w10, w10, w10, lsl #1
	add	x13, x8, #1                     // =1
	add	w10, w10, w11
	add	x11, x9, #1                     // =1
	ldrb	w8, [x8]
	stp	x11, x13, [sp, #40]
	ldrb	w9, [x9]
	add	x11, x12, #1                    // =1
	add	w8, w8, w8, lsl #1
	str	x11, [sp, #32]
	add	w8, w8, w9
	add	w9, w10, #8                     // =8
	lsr	w9, w9, #4
	str	w8, [sp, #20]
	strb	w9, [x12]
	ldr	w8, [sp, #28]
	ldr	w9, [sp, #20]
	mov	x10, x11
	add	w8, w8, w8, lsl #1
	add	w8, w8, w9
	add	w8, w8, #7                      // =7
	add	x9, x10, #1                     // =1
	lsr	w8, w8, #4
	str	x9, [sp, #32]
	strb	w8, [x10]
	ldr	w8, [sp, #28]
	ldp	w10, w9, [sp, #16]
	stp	w8, w9, [sp, #24]
	sub	w8, w10, #1                     // =1
	str	w8, [sp, #16]
	mov	w8, w8
	cbnz	w8, .LBB253_10
	b	.LBB253_4
.LBB253_11:                             // %while.end
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end253:
	.size	h2v2_fancy_upsample, .Lfunc_end253-h2v2_fancy_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function h2v2_upsample
	.type	h2v2_upsample,@function
h2v2_upsample:                          // @h2v2_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	x8, [x3]
	str	xzr, [sp]
	str	x8, [sp, #40]
	b	.LBB254_2
.LBB254_1:                              // %while.end
                                        //   in Loop: Header=BB254_2 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x0, [sp, #40]
	ldr	w1, [sp]
	mov	w4, #1
	ldr	w5, [x8, #128]
	mov	x2, x0
	add	w3, w1, #1                      // =1
	bl	jcopy_sample_rows
	ldp	w9, w8, [sp]
	add	w8, w8, #1                      // =1
	add	w9, w9, #2                      // =2
	stp	w9, w8, [sp]
.LBB254_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB254_4 Depth 2
	ldur	x8, [x29, #-8]
	ldr	w9, [sp]
	ldr	w8, [x8, #392]
	cmp	w9, w8
	b.ge	.LBB254_5
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB254_2 Depth=1
	ldur	x8, [x29, #-24]
	ldpsw	x10, x9, [sp]
	ldr	x11, [x8, x9, lsl #3]
	ldr	x9, [sp, #40]
	ldr	x8, [x9, x10, lsl #3]
	ldur	x9, [x29, #-8]
	stp	x8, x11, [sp, #24]
	ldr	w9, [x9, #128]
	add	x8, x8, x9
	str	x8, [sp, #8]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #8]
	cmp	x8, x9
	b.hs	.LBB254_1
.LBB254_4:                              // %while.body5
                                        //   Parent Loop BB254_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x9, x8, [sp, #24]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	add	x10, x9, #1                     // =1
	stp	x10, x11, [sp, #24]
	strb	w8, [sp, #20]
	strb	w8, [x9]
	and	w9, w8, #0xff
	mov	x8, x10
	add	x10, x8, #1                     // =1
	str	x10, [sp, #24]
	strb	w9, [x8]
	mov	x8, x10
	ldr	x9, [sp, #8]
	cmp	x8, x9
	b.lo	.LBB254_4
	b	.LBB254_1
.LBB254_5:                              // %while.end10
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end254:
	.size	h2v2_upsample, .Lfunc_end254-h2v2_upsample
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function int_upsample
	.type	int_upsample,@function
int_upsample:                           // @int_upsample
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [x29, #-32]
	ldr	x8, [x0, #592]
	mov	x10, x1
	mov	x11, x1
	stur	x8, [x29, #-40]
	ldr	x9, [x3]
	str	x9, [sp, #48]
	ldrsw	x9, [x10, #4]
	add	x9, x8, x9
	ldrb	w10, [x9, #232]
	ldrsw	x9, [x11, #4]
	add	x8, x8, x9
	ldrb	w8, [x8, #242]
	str	xzr, [sp]
	stp	w8, w10, [sp, #8]
	b	.LBB255_2
.LBB255_1:                              // %if.end
                                        //   in Loop: Header=BB255_2 Depth=1
	ldp	w8, w9, [sp, #4]
	ldr	w10, [sp]
	add	w8, w8, #1                      // =1
	add	w9, w10, w9
	stp	w9, w8, [sp]
.LBB255_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB255_4 Depth 2
                                        //       Child Loop BB255_6 Depth 3
	ldur	x8, [x29, #-8]
	ldr	w9, [sp]
	ldr	w8, [x8, #392]
	cmp	w9, w8
	b.ge	.LBB255_9
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB255_2 Depth=1
	ldur	x8, [x29, #-24]
	ldpsw	x10, x9, [sp]
	ldr	x11, [x8, x9, lsl #3]
	ldr	x9, [sp, #48]
	ldr	x8, [x9, x10, lsl #3]
	ldur	x9, [x29, #-8]
	stp	x8, x11, [sp, #32]
	ldr	w9, [x9, #128]
	add	x8, x8, x9
	str	x8, [sp, #16]
.LBB255_4:                              // %while.cond13
                                        //   Parent Loop BB255_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB255_6 Depth 3
	ldr	x8, [sp, #32]
	ldr	x9, [sp, #16]
	cmp	x8, x9
	b.hs	.LBB255_7
// %bb.5:                               // %while.body16
                                        //   in Loop: Header=BB255_4 Depth=2
	ldr	x8, [sp, #40]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #40]
	ldrb	w8, [x8]
	ldr	w9, [sp, #12]
	strb	w8, [sp, #28]
	str	w9, [sp, #24]
	mov	w8, w9
	cmp	w8, #1                          // =1
	b.lt	.LBB255_4
.LBB255_6:                              // %for.body
                                        //   Parent Loop BB255_2 Depth=1
                                        //     Parent Loop BB255_4 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #32]
	ldrb	w9, [sp, #28]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #32]
	strb	w9, [x8]
	ldr	w8, [sp, #24]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #24]
	mov	w8, w8
	cmp	w8, #1                          // =1
	b.ge	.LBB255_6
	b	.LBB255_4
.LBB255_7:                              // %while.end
                                        //   in Loop: Header=BB255_2 Depth=1
	ldr	w8, [sp, #8]
	cmp	w8, #2                          // =2
	b.lt	.LBB255_1
// %bb.8:                               // %if.then
                                        //   in Loop: Header=BB255_2 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x0, [sp, #48]
	ldr	w1, [sp]
	ldr	w9, [sp, #8]
	ldr	w5, [x8, #128]
	mov	x2, x0
	add	w3, w1, #1                      // =1
	sub	w4, w9, #1                      // =1
	bl	jcopy_sample_rows
	b	.LBB255_1
.LBB255_9:                              // %while.end24
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end255:
	.size	int_upsample, .Lfunc_end255-int_upsample
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_read_coefficients          // -- Begin function jpeg_read_coefficients
	.p2align	2
	.type	jpeg_read_coefficients,@function
jpeg_read_coefficients:                 // @jpeg_read_coefficients
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [sp, #16]
	ldr	w8, [x0, #28]
	cmp	w8, #202                        // =202
	b.ne	.LBB256_2
// %bb.1:                               // %if.then
	bl	transdecode_master_selection
	ldr	x8, [sp, #16]
	mov	w9, #209
	str	w9, [x8, #28]
	b	.LBB256_4
.LBB256_2:                              // %if.else
	ldr	w8, [x0, #28]
	cmp	w8, #209                        // =209
	b.eq	.LBB256_4
// %bb.3:                               // %if.then4
	ldr	x8, [sp, #16]
	mov	w9, #18
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #16]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB256_4:                              // %for.cond.preheader
	mov	w19, #1
	mov	w20, #2
	b	.LBB256_7
.LBB256_5:                              // %if.then15
                                        //   in Loop: Header=BB256_7 Depth=1
	stur	xzr, [x29, #-8]
	str	w19, [sp, #8]
.LBB256_6:                              // %cleanup
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	w8, [sp, #8]
	cbnz	w8, .LBB256_18
.LBB256_7:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB256_9
// %bb.8:                               // %if.then10
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	x0, [sp, #16]
	ldr	x8, [x0, #16]
	ldr	x8, [x8]
	blr	x8
.LBB256_9:                              // %if.end13
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	x0, [sp, #16]
	ldr	x8, [x0, #560]
	ldr	x8, [x8]
	blr	x8
	str	w0, [sp, #12]
	cbz	w0, .LBB256_5
// %bb.10:                              // %if.end16
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #2                          // =2
	b.ne	.LBB256_12
// %bb.11:                              // %if.then18
                                        //   in Loop: Header=BB256_7 Depth=1
	str	w20, [sp, #8]
	b	.LBB256_6
.LBB256_12:                             // %if.end19
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB256_17
// %bb.13:                              // %land.lhs.true
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #3                          // =3
	b.eq	.LBB256_15
// %bb.14:                              // %land.lhs.true
                                        //   in Loop: Header=BB256_7 Depth=1
	cmp	w8, #1                          // =1
	b.ne	.LBB256_17
.LBB256_15:                             // %if.then24
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	ldr	x9, [x8, #8]
	add	x9, x9, #1                      // =1
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #16]
	ldr	x8, [x8, #16]
	cmp	x9, x8
	b.lt	.LBB256_17
// %bb.16:                              // %if.then28
                                        //   in Loop: Header=BB256_7 Depth=1
	ldr	x8, [sp, #16]
	ldr	x9, [x8, #16]
	ldr	w8, [x8, #400]
	ldr	x10, [x9, #16]
	add	x8, x10, x8
	str	x8, [x9, #16]
.LBB256_17:                             // %if.end32
                                        //   in Loop: Header=BB256_7 Depth=1
	str	wzr, [sp, #8]
	b	.LBB256_6
.LBB256_18:                             // %cleanup
	cmp	w8, #1                          // =1
	b.eq	.LBB256_20
// %bb.19:                              // %for.end
	ldr	x8, [sp, #16]
	mov	w9, #210
	str	w9, [x8, #28]
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #544]
	ldr	x8, [x8, #32]
	stur	x8, [x29, #-8]
.LBB256_20:                             // %return
	ldur	x0, [x29, #-8]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end256:
	.size	jpeg_read_coefficients, .Lfunc_end256-jpeg_read_coefficients
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function transdecode_master_selection
	.type	transdecode_master_selection,@function
transdecode_master_selection:           // @transdecode_master_selection
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	w8, [x0, #308]
	cbz	w8, .LBB257_2
// %bb.1:                               // %if.then
	ldr	x8, [x0]
	mov	w9, #1
	str	w9, [x8, #40]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB257_5
.LBB257_2:                              // %if.else
	ldr	w8, [x0, #304]
	ldr	x0, [sp, #8]
	cbz	w8, .LBB257_4
// %bb.3:                               // %if.then3
	bl	jinit_phuff_decoder
	b	.LBB257_5
.LBB257_4:                              // %if.else4
	bl	jinit_huff_decoder
.LBB257_5:                              // %if.end5
	ldr	x0, [sp, #8]
	mov	w1, #1
	bl	jinit_d_coef_controller
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #48]
	blr	x8
	ldr	x0, [sp, #8]
	ldr	x8, [x0, #560]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB257_12
// %bb.6:                               // %if.then7
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #304]
	cbz	w9, .LBB257_8
// %bb.7:                               // %if.then10
	ldr	w8, [x8, #48]
	add	w8, w8, w8, lsl #1
	add	w8, w8, #2                      // =2
	b	.LBB257_11
.LBB257_8:                              // %if.else11
	ldr	x8, [x8, #560]
	ldr	w8, [x8, #32]
	cbz	w8, .LBB257_10
// %bb.9:                               // %if.then14
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #48]
	b	.LBB257_11
.LBB257_10:                             // %if.else16
	mov	w8, #1
.LBB257_11:                             // %if.end18
	str	w8, [sp, #4]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	str	xzr, [x8, #8]
	ldr	x8, [sp, #8]
	ldrsw	x10, [sp, #4]
	ldr	w9, [x8, #400]
	ldr	x8, [x8, #16]
	mul	x9, x9, x10
	str	x9, [x8, #16]
	ldr	x8, [sp, #8]
	mov	w9, #1
	ldr	x8, [x8, #16]
	str	wzr, [x8, #24]
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #16]
	str	w9, [x8, #28]
.LBB257_12:                             // %if.end25
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end257:
	.size	transdecode_master_selection, .Lfunc_end257-transdecode_master_selection
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_std_error                  // -- Begin function jpeg_std_error
	.p2align	2
	.type	jpeg_std_error,@function
jpeg_std_error:                         // @jpeg_std_error
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	adrp	x8, error_exit
	add	x8, x8, :lo12:error_exit
	adrp	x9, emit_message
	str	x0, [sp, #8]
	str	x8, [x0]
	mov	x8, x0
	add	x9, x9, :lo12:emit_message
	str	x9, [x8, #8]
	adrp	x9, output_message
	mov	x8, x0
	add	x9, x9, :lo12:output_message
	str	x9, [x8, #16]
	adrp	x9, format_message
	mov	x8, x0
	add	x9, x9, :lo12:format_message
	str	x9, [x8, #24]
	adrp	x9, reset_error_mgr
	mov	x8, x0
	add	x9, x9, :lo12:reset_error_mgr
	str	x9, [x8, #32]
	mov	x8, x0
	str	wzr, [x8, #124]
	mov	x8, x0
	adrp	x9, jpeg_std_message_table
	add	x9, x9, :lo12:jpeg_std_message_table
	str	xzr, [x8, #128]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #40]
	ldr	x8, [sp, #8]
	str	x9, [x8, #136]
	ldr	x8, [sp, #8]
	mov	w9, #119
	str	w9, [x8, #144]
	ldr	x8, [sp, #8]
	str	xzr, [x8, #152]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #160]
	ldr	x8, [sp, #8]
	str	wzr, [x8, #164]
	ldr	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end258:
	.size	jpeg_std_error, .Lfunc_end258-jpeg_std_error
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function error_exit
	.type	error_exit,@function
error_exit:                             // @error_exit
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x0, [sp, #8]
	bl	jpeg_destroy
	mov	w0, #1
	bl	exit
.Lfunc_end259:
	.size	error_exit, .Lfunc_end259-error_exit
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function emit_message
	.type	emit_message,@function
emit_message:                           // @emit_message
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0]
	str	x8, [sp, #8]
	tbnz	w1, #31, .LBB260_4
// %bb.1:                               // %if.else
	ldr	w8, [x8, #124]
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB260_3
// %bb.2:                               // %if.then8
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #16]
	blr	x8
.LBB260_3:                              // %if.end11
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB260_4:                              // %if.then
	ldr	x8, [x8, #128]
	cbz	x8, .LBB260_6
// %bb.5:                               // %lor.lhs.false
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #124]
	cmp	w8, #3                          // =3
	b.lt	.LBB260_7
.LBB260_6:                              // %if.then4
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8, #16]
	blr	x8
.LBB260_7:                              // %if.end
	ldr	x8, [sp, #8]
	ldr	x9, [x8, #128]
	add	x9, x9, #1                      // =1
	str	x9, [x8, #128]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end260:
	.size	emit_message, .Lfunc_end260-emit_message
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function output_message
	.type	output_message,@function
output_message:                         // @output_message
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #224                    // =224
	stp	x29, x30, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #208                   // =208
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0]
	mov	x1, sp
	ldr	x8, [x8, #24]
	blr	x8
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	adrp	x1, .L.str.120
	add	x1, x1, :lo12:.L.str.120
	mov	x2, sp
	bl	fprintf
	ldp	x29, x30, [sp, #208]            // 16-byte Folded Reload
	add	sp, sp, #224                    // =224
	ret
.Lfunc_end261:
	.size	output_message, .Lfunc_end261-output_message
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function format_message
	.type	format_message,@function
format_message:                         // @format_message
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x0]
	stur	x8, [x29, #-24]
	ldr	w8, [x8, #40]
	str	xzr, [sp, #40]
	cmp	w8, #1                          // =1
	stur	w8, [x29, #-28]
	b.lt	.LBB262_3
// %bb.1:                               // %land.lhs.true
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #144]
	cmp	w9, w8
	b.gt	.LBB262_3
// %bb.2:                               // %if.then
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-28]
	ldr	x8, [x8, #136]
	ldr	x8, [x8, x9, lsl #3]
	b	.LBB262_7
.LBB262_3:                              // %if.else
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #152]
	cbz	x8, .LBB262_8
// %bb.4:                               // %land.lhs.true5
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #160]
	cmp	w9, w8
	b.lt	.LBB262_8
// %bb.5:                               // %land.lhs.true7
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldr	w8, [x8, #164]
	cmp	w9, w8
	b.gt	.LBB262_8
// %bb.6:                               // %if.then9
	ldur	x8, [x29, #-24]
	ldur	w9, [x29, #-28]
	ldr	w10, [x8, #160]
	ldr	x8, [x8, #152]
	sub	w9, w9, w10
	ldr	x8, [x8, w9, sxtw #3]
.LBB262_7:                              // %if.end14
	str	x8, [sp, #40]
.LBB262_8:                              // %if.end14
	ldr	x8, [sp, #40]
	cbnz	x8, .LBB262_10
// %bb.9:                               // %if.then16
	ldur	w8, [x29, #-28]
	ldur	x9, [x29, #-24]
	str	w8, [x9, #44]
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #136]
	ldr	x8, [x8]
	str	x8, [sp, #40]
.LBB262_10:                             // %if.end20
	ldr	x8, [sp, #40]
	str	wzr, [sp, #24]
	str	x8, [sp, #32]
.LBB262_11:                             // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #32]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #32]
	ldrb	w8, [x8]
	strb	w8, [sp, #28]
	cbz	w8, .LBB262_15
// %bb.12:                              // %while.body
                                        //   in Loop: Header=BB262_11 Depth=1
	ldrb	w8, [sp, #28]
	cmp	w8, #37                         // =37
	b.ne	.LBB262_11
// %bb.13:                              // %if.then26
	ldr	x8, [sp, #32]
	ldrb	w8, [x8]
	cmp	w8, #115                        // =115
	b.ne	.LBB262_15
// %bb.14:                              // %if.then30
	mov	w8, #1
	str	w8, [sp, #24]
.LBB262_15:                             // %while.end
	ldp	x9, x0, [x29, #-24]
	ldr	w8, [sp, #24]
	ldr	x1, [sp, #40]
	add	x2, x9, #44                     // =44
	cbz	w8, .LBB262_17
// %bb.16:                              // %if.then33
	bl	sprintf
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.LBB262_17:                             // %if.else35
	ldur	x8, [x29, #-24]
	ldr	w2, [x2]
	ldp	w3, w4, [x8, #48]
	ldp	w5, w6, [x8, #56]
	ldp	w7, w9, [x8, #64]
	ldr	w8, [x8, #72]
	str	w9, [sp]
	str	w8, [sp, #8]
	bl	sprintf
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end262:
	.size	format_message, .Lfunc_end262-format_message
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function reset_error_mgr
	.type	reset_error_mgr,@function
reset_error_mgr:                        // @reset_error_mgr
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	ldr	x8, [x0]
	str	xzr, [x8, #128]
	mov	x8, x0
	ldr	x8, [x8]
	str	wzr, [x8, #40]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end263:
	.size	reset_error_mgr, .Lfunc_end263-reset_error_mgr
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_fdct_float                 // -- Begin function jpeg_fdct_float
	.p2align	2
	.type	jpeg_fdct_float,@function
jpeg_fdct_float:                        // @jpeg_fdct_float
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	.cfi_def_cfa_offset 112
	mov	w11, #7
	mov	w8, #1267
	mov	w9, #61205
	mov	w10, #35796
	str	w11, [sp, #12]
	mov	w11, #15733
	movk	w8, #16181, lsl #16
	mov	x12, x0
	movk	w9, #16067, lsl #16
	movk	w10, #16138, lsl #16
	movk	w11, #16295, lsl #16
	str	x0, [sp, #104]
	str	x12, [sp, #16]
	ldr	w12, [sp, #12]
	tbnz	w12, #31, .LBB264_2
.LBB264_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x12, [sp, #16]
	ldr	x13, [sp, #16]
	ldr	s0, [x12]
	ldr	s1, [x12, #28]
	fadd	s2, s0, s1
	ldr	s0, [x12]
	ldr	s1, [x12, #28]
	fsub	s3, s0, s1
	ldr	s0, [x12, #4]
	ldr	s1, [x12, #24]
	fadd	s0, s0, s1
	stp	s0, s2, [sp, #96]
	ldr	s0, [x12, #4]
	ldr	s1, [x12, #24]
	ldr	s6, [sp, #100]
	fsub	s0, s0, s1
	stp	s3, s0, [sp, #72]
	ldr	s0, [x12, #8]
	ldr	s1, [x12, #20]
	ldr	x12, [sp, #16]
	fadd	s0, s0, s1
	str	s0, [sp, #92]
	ldr	s0, [x13, #8]
	ldr	s1, [x13, #20]
	ldp	s2, s3, [sp, #92]
	ldr	x13, [sp, #16]
	ldp	s5, s4, [sp, #92]
	fsub	s7, s0, s1
	ldp	s0, s1, [x12, #12]
	fadd	s2, s3, s2
	ldr	s3, [sp, #100]
	fsub	s4, s4, s5
	fadd	s0, s0, s1
	str	s0, [sp, #88]
	fadd	s1, s3, s0
	ldp	s3, s5, [x13, #12]
	ldr	x12, [sp, #16]
	fsub	s0, s6, s0
	stp	s2, s1, [sp, #64]
	stp	s0, s4, [sp, #56]
	fadd	s0, s1, s2
	fsub	s1, s3, s5
	stp	s7, s1, [sp, #80]
	str	s0, [x12]
	ldp	s1, s0, [sp, #64]
	ldr	x12, [sp, #16]
	fmov	s2, w8
	fmov	s5, w10
	fsub	s0, s0, s1
	str	s0, [x12, #16]
	ldp	s1, s0, [sp, #56]
	ldr	x12, [sp, #16]
	fmov	s6, w11
	fadd	s0, s0, s1
	fmul	s0, s0, s2
	str	s0, [sp, #52]
	fadd	s0, s1, s0
	str	s0, [x12, #8]
	ldp	s1, s0, [sp, #52]
	ldr	x12, [sp, #16]
	fsub	s0, s0, s1
	str	s0, [x12, #24]
	ldp	s1, s0, [sp, #80]
	ldp	s4, s3, [sp, #72]
	ldr	x12, [sp, #16]
	fadd	s0, s0, s1
	fadd	s1, s1, s3
	fadd	s3, s3, s4
	stp	s1, s0, [sp, #64]
	str	s3, [sp, #60]
	fmul	s5, s0, s5
	fsub	s0, s0, s3
	fmul	s3, s3, s6
	fmov	s6, w9
	fmul	s1, s1, s2
	fmul	s0, s0, s6
	fadd	s2, s4, s1
	str	s1, [sp, #44]
	fsub	s1, s4, s1
	stp	s2, s0, [sp, #32]
	fadd	s4, s5, s0
	fadd	s0, s3, s0
	str	s0, [sp, #40]
	fadd	s0, s1, s4
	str	s1, [sp, #28]
	str	s4, [sp, #48]
	str	s0, [x12, #20]
	ldr	s0, [sp, #28]
	ldr	s1, [sp, #48]
	ldr	x12, [sp, #16]
	fsub	s0, s0, s1
	str	s0, [x12, #12]
	ldr	s0, [sp, #32]
	ldr	s1, [sp, #40]
	ldr	x12, [sp, #16]
	fadd	s0, s0, s1
	str	s0, [x12, #4]
	ldr	s0, [sp, #32]
	ldr	s1, [sp, #40]
	ldr	x12, [sp, #16]
	fsub	s0, s0, s1
	str	s0, [x12, #28]
	ldr	x12, [sp, #16]
	ldr	w13, [sp, #12]
	add	x12, x12, #32                   // =32
	str	x12, [sp, #16]
	sub	w12, w13, #1                    // =1
	str	w12, [sp, #12]
	mov	w12, w12
	tbz	w12, #31, .LBB264_1
.LBB264_2:                              // %for.end
	ldr	x11, [sp, #104]
	mov	w8, #1267
	mov	w9, #61205
	mov	w10, #35796
	str	x11, [sp, #16]
	mov	w11, #15733
	mov	w12, #7
	movk	w8, #16181, lsl #16
	movk	w9, #16067, lsl #16
	movk	w10, #16138, lsl #16
	movk	w11, #16295, lsl #16
	str	w12, [sp, #12]
	mov	w12, w12
	tbnz	w12, #31, .LBB264_4
.LBB264_3:                              // %for.body57
                                        // =>This Inner Loop Header: Depth=1
	ldr	x12, [sp, #16]
	ldr	x13, [sp, #16]
	ldr	s0, [x12]
	ldr	s1, [x12, #224]
	fadd	s2, s0, s1
	ldr	s0, [x12]
	ldr	s1, [x12, #224]
	fsub	s3, s0, s1
	ldr	s0, [x12, #32]
	ldr	s1, [x12, #192]
	fadd	s0, s0, s1
	stp	s0, s2, [sp, #96]
	ldr	s0, [x12, #32]
	ldr	s1, [x12, #192]
	ldr	s6, [sp, #100]
	fsub	s0, s0, s1
	stp	s3, s0, [sp, #72]
	ldr	s0, [x12, #64]
	ldr	s1, [x12, #160]
	ldr	x12, [sp, #16]
	fadd	s0, s0, s1
	str	s0, [sp, #92]
	ldr	s0, [x13, #64]
	ldr	s1, [x13, #160]
	ldp	s2, s3, [sp, #92]
	ldr	x13, [sp, #16]
	ldp	s5, s4, [sp, #92]
	fsub	s7, s0, s1
	ldr	s0, [x12, #96]
	ldr	s1, [x12, #128]
	fadd	s2, s3, s2
	ldr	s3, [sp, #100]
	fsub	s4, s4, s5
	fadd	s0, s0, s1
	str	s0, [sp, #88]
	fadd	s1, s3, s0
	ldr	s3, [x13, #96]
	ldr	s5, [x13, #128]
	ldr	x12, [sp, #16]
	fsub	s0, s6, s0
	stp	s2, s1, [sp, #64]
	stp	s0, s4, [sp, #56]
	fadd	s0, s1, s2
	fsub	s1, s3, s5
	stp	s7, s1, [sp, #80]
	str	s0, [x12]
	ldp	s1, s0, [sp, #64]
	ldr	x12, [sp, #16]
	fmov	s2, w8
	fmov	s5, w10
	fsub	s0, s0, s1
	str	s0, [x12, #128]
	ldp	s1, s0, [sp, #56]
	ldr	x12, [sp, #16]
	fmov	s6, w11
	fadd	s0, s0, s1
	fmul	s0, s0, s2
	str	s0, [sp, #52]
	fadd	s0, s1, s0
	str	s0, [x12, #64]
	ldp	s1, s0, [sp, #52]
	ldr	x12, [sp, #16]
	fsub	s0, s0, s1
	str	s0, [x12, #192]
	ldp	s1, s0, [sp, #80]
	ldp	s4, s3, [sp, #72]
	ldr	x12, [sp, #16]
	fadd	s0, s0, s1
	fadd	s1, s1, s3
	fadd	s3, s3, s4
	stp	s1, s0, [sp, #64]
	str	s3, [sp, #60]
	fmul	s5, s0, s5
	fsub	s0, s0, s3
	fmul	s3, s3, s6
	fmov	s6, w9
	fmul	s1, s1, s2
	fmul	s0, s0, s6
	fadd	s2, s4, s1
	str	s1, [sp, #44]
	fsub	s1, s4, s1
	stp	s2, s0, [sp, #32]
	fadd	s4, s5, s0
	fadd	s0, s3, s0
	str	s0, [sp, #40]
	fadd	s0, s1, s4
	str	s1, [sp, #28]
	str	s4, [sp, #48]
	str	s0, [x12, #160]
	ldr	s0, [sp, #28]
	ldr	s1, [sp, #48]
	ldr	x12, [sp, #16]
	fsub	s0, s0, s1
	str	s0, [x12, #96]
	ldr	s0, [sp, #32]
	ldr	s1, [sp, #40]
	ldr	x12, [sp, #16]
	fadd	s0, s0, s1
	str	s0, [x12, #32]
	ldr	s0, [sp, #32]
	ldr	s1, [sp, #40]
	ldr	x12, [sp, #16]
	fsub	s0, s0, s1
	str	s0, [x12, #224]
	ldr	x12, [sp, #16]
	ldr	w13, [sp, #12]
	add	x12, x12, #4                    // =4
	str	x12, [sp, #16]
	sub	w12, w13, #1                    // =1
	str	w12, [sp, #12]
	mov	w12, w12
	tbz	w12, #31, .LBB264_3
.LBB264_4:                              // %for.end118
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end264:
	.size	jpeg_fdct_float, .Lfunc_end264-jpeg_fdct_float
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_fdct_ifast                 // -- Begin function jpeg_fdct_ifast
	.p2align	2
	.type	jpeg_fdct_ifast,@function
jpeg_fdct_ifast:                        // @jpeg_fdct_ifast
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	.cfi_def_cfa_offset 112
	mov	w11, #7
	mov	w8, #181
	mov	x12, x0
	mov	w9, #98
	mov	w10, #139
	str	w11, [sp, #12]
	mov	w11, #334
	str	x0, [sp, #104]
	str	x12, [sp, #16]
	ldr	w12, [sp, #12]
	tbnz	w12, #31, .LBB265_2
.LBB265_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x12, [sp, #16]
	ldr	x13, [sp, #16]
	ldr	x16, [sp, #16]
	ldr	w14, [x12]
	ldr	w15, [x12, #28]
	add	w14, w14, w15
	str	w14, [sp, #100]
	ldr	w14, [x12]
	ldr	w15, [x12, #28]
	sub	w14, w14, w15
	str	w14, [sp, #72]
	ldr	w14, [x12, #4]
	ldr	w15, [x12, #24]
	add	w14, w14, w15
	str	w14, [sp, #96]
	ldr	w14, [x12, #4]
	ldr	w15, [x12, #24]
	sub	w14, w14, w15
	str	w14, [sp, #76]
	ldr	w14, [x12, #8]
	ldr	w12, [x12, #20]
	ldr	x15, [sp, #16]
	add	w12, w14, w12
	str	w12, [sp, #92]
	ldr	w12, [x13, #8]
	ldr	w13, [x13, #20]
	ldp	w14, w17, [sp, #92]
	sub	w12, w12, w13
	ldp	w13, w18, [sp, #92]
	str	w12, [sp, #80]
	ldp	w12, w15, [x15, #12]
	add	w14, w17, w14
	sub	w13, w18, w13
	ldr	w17, [sp, #100]
	ldr	w18, [sp, #100]
	add	w12, w12, w15
	str	w12, [sp, #88]
	add	w15, w17, w12
	sub	w12, w18, w12
	ldp	w17, w16, [x16, #12]
	stp	w12, w13, [sp, #56]
	ldr	x12, [sp, #16]
	stp	w14, w15, [sp, #64]
	add	w13, w15, w14
	sub	w14, w17, w16
	str	w14, [sp, #84]
	str	w13, [x12]
	ldr	w13, [sp, #64]
	ldr	x14, [sp, #16]
	mov	w12, w15
	sub	w12, w12, w13
	str	w12, [x14, #16]
	ldpsw	x13, x12, [sp, #56]
	ldr	x14, [sp, #16]
	add	x12, x12, x13
	mul	x12, x12, x8
	lsr	x12, x12, #8
	str	w12, [sp, #52]
	add	w12, w13, w12
	str	w12, [x14, #8]
	ldp	w13, w12, [sp, #52]
	ldr	x14, [sp, #16]
	sub	w12, w12, w13
	str	w12, [x14, #24]
	ldp	w13, w12, [sp, #80]
	ldp	w15, w14, [sp, #72]
	add	w12, w12, w13
	add	w13, w13, w14
	add	w14, w14, w15
	stp	w13, w12, [sp, #64]
	sxtw	x16, w12
	sxtw	x17, w14
	smull	x13, w13, w8
	sub	x16, x16, x17
	lsr	x13, x13, #8
	str	w13, [sp, #44]
	add	w17, w15, w13
	sub	w13, w15, w13
	ldr	x15, [sp, #16]
	smull	x12, w12, w10
	mul	x16, x16, x9
	str	w14, [sp, #60]
	smull	x14, w14, w11
	lsr	x12, x12, #8
	lsr	x16, x16, #8
	lsr	x14, x14, #8
	add	w12, w12, w16
	add	w14, w14, w16
	str	w12, [sp, #48]
	add	w12, w13, w12
	stp	w13, w17, [sp, #28]
	stp	w16, w14, [sp, #36]
	str	w12, [x15, #20]
	mov	w12, w13
	ldr	w13, [sp, #48]
	ldr	x14, [sp, #16]
	sub	w12, w12, w13
	str	w12, [x14, #12]
	ldr	w13, [sp, #40]
	ldr	x14, [sp, #16]
	mov	w12, w17
	add	w12, w12, w13
	str	w12, [x14, #4]
	ldr	w13, [sp, #40]
	ldr	x14, [sp, #16]
	mov	w12, w17
	sub	w12, w12, w13
	str	w12, [x14, #28]
	ldr	x12, [sp, #16]
	ldr	w13, [sp, #12]
	add	x12, x12, #32                   // =32
	sub	w13, w13, #1                    // =1
	str	x12, [sp, #16]
	str	w13, [sp, #12]
	mov	w12, w13
	tbz	w12, #31, .LBB265_1
.LBB265_2:                              // %for.end
	ldr	x11, [sp, #104]
	mov	w12, #7
	mov	w8, #181
	mov	w9, #98
	mov	w10, #139
	str	x11, [sp, #16]
	mov	w11, #334
	str	w12, [sp, #12]
	mov	w12, w12
	tbnz	w12, #31, .LBB265_4
.LBB265_3:                              // %for.body71
                                        // =>This Inner Loop Header: Depth=1
	ldr	x12, [sp, #16]
	ldr	x13, [sp, #16]
	ldr	x16, [sp, #16]
	ldr	w14, [x12]
	ldr	w15, [x12, #224]
	add	w14, w14, w15
	str	w14, [sp, #100]
	ldr	w14, [x12]
	ldr	w15, [x12, #224]
	sub	w14, w14, w15
	str	w14, [sp, #72]
	ldr	w14, [x12, #32]
	ldr	w15, [x12, #192]
	add	w14, w14, w15
	str	w14, [sp, #96]
	ldr	w14, [x12, #32]
	ldr	w15, [x12, #192]
	sub	w14, w14, w15
	str	w14, [sp, #76]
	ldr	w14, [x12, #64]
	ldr	w12, [x12, #160]
	ldr	x15, [sp, #16]
	add	w12, w14, w12
	str	w12, [sp, #92]
	ldr	w12, [x13, #64]
	ldr	w13, [x13, #160]
	ldp	w14, w17, [sp, #92]
	sub	w12, w12, w13
	ldp	w13, w18, [sp, #92]
	str	w12, [sp, #80]
	ldr	w12, [x15, #96]
	ldr	w15, [x15, #128]
	add	w14, w17, w14
	sub	w13, w18, w13
	ldr	w17, [sp, #100]
	ldr	w18, [sp, #100]
	add	w12, w12, w15
	str	w12, [sp, #88]
	add	w15, w17, w12
	sub	w12, w18, w12
	ldr	w17, [x16, #96]
	ldr	w16, [x16, #128]
	stp	w12, w13, [sp, #56]
	ldr	x12, [sp, #16]
	stp	w14, w15, [sp, #64]
	add	w13, w15, w14
	sub	w14, w17, w16
	str	w14, [sp, #84]
	str	w13, [x12]
	ldr	w13, [sp, #64]
	ldr	x14, [sp, #16]
	mov	w12, w15
	sub	w12, w12, w13
	str	w12, [x14, #128]
	ldpsw	x13, x12, [sp, #56]
	ldr	x14, [sp, #16]
	add	x12, x12, x13
	mul	x12, x12, x8
	lsr	x12, x12, #8
	str	w12, [sp, #52]
	add	w12, w13, w12
	str	w12, [x14, #64]
	ldp	w13, w12, [sp, #52]
	ldr	x14, [sp, #16]
	sub	w12, w12, w13
	str	w12, [x14, #192]
	ldp	w13, w12, [sp, #80]
	ldp	w15, w14, [sp, #72]
	add	w12, w12, w13
	add	w13, w13, w14
	add	w14, w14, w15
	stp	w13, w12, [sp, #64]
	sxtw	x16, w12
	sxtw	x17, w14
	smull	x13, w13, w8
	sub	x16, x16, x17
	lsr	x13, x13, #8
	str	w13, [sp, #44]
	add	w17, w15, w13
	sub	w13, w15, w13
	ldr	x15, [sp, #16]
	smull	x12, w12, w10
	mul	x16, x16, x9
	str	w14, [sp, #60]
	smull	x14, w14, w11
	lsr	x12, x12, #8
	lsr	x16, x16, #8
	lsr	x14, x14, #8
	add	w12, w12, w16
	add	w14, w14, w16
	str	w12, [sp, #48]
	add	w12, w13, w12
	stp	w13, w17, [sp, #28]
	stp	w16, w14, [sp, #36]
	str	w12, [x15, #160]
	mov	w12, w13
	ldr	w13, [sp, #48]
	ldr	x14, [sp, #16]
	sub	w12, w12, w13
	str	w12, [x14, #96]
	ldr	w13, [sp, #40]
	ldr	x14, [sp, #16]
	mov	w12, w17
	add	w12, w12, w13
	str	w12, [x14, #32]
	ldr	w13, [sp, #40]
	ldr	x14, [sp, #16]
	mov	w12, w17
	sub	w12, w12, w13
	str	w12, [x14, #224]
	ldr	x12, [sp, #16]
	ldr	w13, [sp, #12]
	add	x12, x12, #4                    // =4
	sub	w13, w13, #1                    // =1
	str	x12, [sp, #16]
	str	w13, [sp, #12]
	mov	w12, w13
	tbz	w12, #31, .LBB265_3
.LBB265_4:                              // %for.end147
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end265:
	.size	jpeg_fdct_ifast, .Lfunc_end265-jpeg_fdct_ifast
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_fdct_islow                 // -- Begin function jpeg_fdct_islow
	.p2align	2
	.type	jpeg_fdct_islow,@function
jpeg_fdct_islow:                        // @jpeg_fdct_islow
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #192                    // =192
	str	x21, [sp, #160]                 // 8-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 192
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	add	x8, sp, #136                    // =136
	mov	w1, #7
	mov	w9, #4433
	mov	w10, #6270
	mov	x11, #-15137
	mov	w12, #9633
	mov	w13, #2446
	mov	w14, #16819
	mov	w15, #25172
	mov	w16, #12299
	mov	x17, #-7373
	str	x0, [x8, #16]
	mov	x2, x0
	mov	x18, #-20995
	str	w1, [sp, #4]
	mov	x0, #-16069
	mov	x1, #-3196
	str	x2, [sp, #8]
	ldr	w2, [sp, #4]
	tbnz	w2, #31, .LBB266_2
.LBB266_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x2, [sp, #8]
	ldr	x3, [sp, #8]
	ldr	x6, [sp, #8]
	ldr	x7, [sp, #8]
	ldrsw	x4, [x2]
	ldrsw	x5, [x2, #28]
	add	x4, x4, x5
	str	x4, [x8, #8]
	ldrsw	x4, [x2]
	ldrsw	x5, [x2, #28]
	sub	x4, x4, x5
	str	x4, [sp, #88]
	ldrsw	x4, [x2, #4]
	ldrsw	x5, [x2, #24]
	add	x4, x4, x5
	str	x4, [x8]
	ldrsw	x4, [x2, #4]
	ldrsw	x5, [x2, #24]
	sub	x4, x4, x5
	str	x4, [sp, #96]
	ldrsw	x4, [x2, #8]
	ldrsw	x2, [x2, #20]
	ldr	x5, [sp, #8]
	add	x2, x4, x2
	str	x2, [sp, #128]
	ldrsw	x2, [x3, #8]
	ldrsw	x3, [x3, #20]
	ldp	x4, x19, [x8]
	ldr	x21, [sp, #128]
	sub	x2, x2, x3
	ldr	x3, [sp, #128]
	str	x2, [sp, #104]
	ldpsw	x2, x5, [x5, #12]
	add	x3, x4, x3
	ldp	x20, x4, [x8]
	add	x2, x2, x5
	str	x2, [sp, #120]
	add	x5, x19, x2
	sub	x2, x4, x2
	ldpsw	x4, x6, [x6, #12]
	sub	x20, x20, x21
	stp	x2, x20, [sp, #56]
	add	w2, w5, w3
	stp	x3, x5, [sp, #72]
	lsl	w2, w2, #2
	sub	x3, x4, x6
	str	x3, [sp, #112]
	str	w2, [x7]
	ldr	w3, [sp, #72]
	ldr	x4, [sp, #8]
	and	x2, x5, #0xffffffff
	sub	w2, w2, w3
	lsl	w2, w2, #2
	str	w2, [x4, #16]
	ldr	x3, [sp, #56]
	mov	x2, x20
	ldr	x4, [sp, #8]
	add	x2, x2, x3
	mul	x2, x2, x9
	str	x2, [sp, #48]
	madd	x2, x3, x10, x2
	add	x2, x2, #1024                   // =1024
	lsr	x2, x2, #11
	str	w2, [x4, #8]
	ldr	x2, [sp, #48]
	ldr	x3, [sp, #64]
	ldr	x4, [sp, #8]
	madd	x2, x3, x11, x2
	add	x2, x2, #1024                   // =1024
	lsr	x2, x2, #11
	str	w2, [x4, #24]
	ldp	x4, x2, [sp, #104]
	ldp	x3, x5, [sp, #88]
	ldr	x6, [sp, #8]
	add	x7, x2, x3
	add	x19, x4, x5
	add	x20, x2, x5
	add	x21, x4, x3
	mul	x2, x2, x13
	mul	x4, x4, x14
	mul	x5, x5, x15
	mul	x3, x3, x16
	stp	x4, x2, [sp, #104]
	add	x4, x20, x21
	stp	x3, x5, [sp, #88]
	mul	x3, x7, x17
	mul	x5, x19, x18
	mul	x4, x4, x12
	stp	x5, x3, [sp, #40]
	add	x2, x2, x3
	madd	x3, x20, x0, x4
	add	x2, x2, x3
	add	x2, x2, #1024                   // =1024
	str	x4, [sp, #16]
	madd	x4, x21, x1, x4
	lsr	x2, x2, #11
	stp	x4, x3, [sp, #24]
	str	w2, [x6, #28]
	ldr	x2, [sp, #104]
	mov	x3, x5
	ldr	x5, [sp, #8]
	add	x2, x2, x3
	add	x2, x2, x4
	add	x2, x2, #1024                   // =1024
	lsr	x2, x2, #11
	str	w2, [x5, #20]
	ldr	x2, [sp, #96]
	ldp	x4, x3, [sp, #32]
	ldr	x5, [sp, #8]
	add	x2, x2, x3
	add	x2, x2, x4
	add	x2, x2, #1024                   // =1024
	lsr	x2, x2, #11
	str	w2, [x5, #12]
	ldr	x2, [sp, #88]
	ldr	x3, [sp, #48]
	ldr	x4, [sp, #24]
	ldr	x5, [sp, #8]
	add	x2, x2, x3
	add	x2, x2, x4
	add	x2, x2, #1024                   // =1024
	lsr	x2, x2, #11
	str	w2, [x5, #4]
	ldr	x2, [sp, #8]
	ldr	w3, [sp, #4]
	add	x2, x2, #32                     // =32
	sub	w3, w3, #1                      // =1
	str	x2, [sp, #8]
	str	w3, [sp, #4]
	mov	w2, w3
	tbz	w2, #31, .LBB266_1
.LBB266_2:                              // %for.end
	ldr	x1, [x8, #16]
	mov	w0, #7
	mov	w9, #4433
	mov	w10, #6270
	mov	x11, #-15137
	mov	w12, #9633
	mov	w13, #2446
	mov	w14, #16819
	mov	w15, #25172
	mov	w16, #12299
	mov	x17, #-7373
	mov	x18, #-20995
	str	w0, [sp, #4]
	mov	x0, #-16069
	str	x1, [sp, #8]
	mov	x1, #-3196
	ldr	w2, [sp, #4]
	tbnz	w2, #31, .LBB266_4
.LBB266_3:                              // %for.body95
                                        // =>This Inner Loop Header: Depth=1
	ldr	x2, [sp, #8]
	ldr	x3, [sp, #8]
	ldr	x6, [sp, #8]
	ldr	x7, [sp, #8]
	ldrsw	x4, [x2]
	ldrsw	x5, [x2, #224]
	add	x4, x4, x5
	str	x4, [x8, #8]
	ldrsw	x4, [x2]
	ldrsw	x5, [x2, #224]
	sub	x4, x4, x5
	str	x4, [sp, #88]
	ldrsw	x4, [x2, #32]
	ldrsw	x5, [x2, #192]
	add	x4, x4, x5
	str	x4, [x8]
	ldrsw	x4, [x2, #32]
	ldrsw	x5, [x2, #192]
	sub	x4, x4, x5
	str	x4, [sp, #96]
	ldrsw	x4, [x2, #64]
	ldrsw	x2, [x2, #160]
	ldr	x5, [sp, #8]
	add	x2, x4, x2
	str	x2, [sp, #128]
	ldrsw	x2, [x3, #64]
	ldrsw	x3, [x3, #160]
	ldp	x4, x19, [x8]
	ldr	x21, [sp, #128]
	sub	x2, x2, x3
	ldr	x3, [sp, #128]
	str	x2, [sp, #104]
	ldrsw	x2, [x5, #96]
	ldrsw	x5, [x5, #128]
	add	x3, x4, x3
	ldp	x20, x4, [x8]
	add	x2, x2, x5
	str	x2, [sp, #120]
	add	x5, x19, x2
	sub	x2, x4, x2
	ldrsw	x4, [x6, #96]
	ldrsw	x6, [x6, #128]
	sub	x20, x20, x21
	stp	x2, x20, [sp, #56]
	add	x2, x5, x3
	add	x2, x2, #2                      // =2
	stp	x3, x5, [sp, #72]
	lsr	x2, x2, #2
	sub	x3, x4, x6
	str	x3, [sp, #112]
	str	w2, [x7]
	ldr	x3, [sp, #72]
	mov	x2, x5
	ldr	x4, [sp, #8]
	sub	x2, x2, x3
	add	x2, x2, #2                      // =2
	lsr	x2, x2, #2
	str	w2, [x4, #128]
	ldr	x3, [sp, #56]
	mov	x2, x20
	ldr	x4, [sp, #8]
	add	x2, x2, x3
	mul	x2, x2, x9
	str	x2, [sp, #48]
	madd	x2, x3, x10, x2
	add	x2, x2, #4, lsl #12             // =16384
	lsr	x2, x2, #15
	str	w2, [x4, #64]
	ldr	x2, [sp, #48]
	ldr	x3, [sp, #64]
	ldr	x4, [sp, #8]
	madd	x2, x3, x11, x2
	add	x2, x2, #4, lsl #12             // =16384
	lsr	x2, x2, #15
	str	w2, [x4, #192]
	ldp	x4, x2, [sp, #104]
	ldp	x3, x5, [sp, #88]
	ldr	x6, [sp, #8]
	add	x7, x2, x3
	add	x19, x4, x5
	add	x20, x2, x5
	add	x21, x4, x3
	mul	x2, x2, x13
	mul	x4, x4, x14
	mul	x5, x5, x15
	mul	x3, x3, x16
	stp	x4, x2, [sp, #104]
	add	x4, x20, x21
	stp	x3, x5, [sp, #88]
	mul	x3, x7, x17
	mul	x5, x19, x18
	mul	x4, x4, x12
	stp	x5, x3, [sp, #40]
	add	x2, x2, x3
	madd	x3, x20, x0, x4
	add	x2, x2, x3
	add	x2, x2, #4, lsl #12             // =16384
	str	x4, [sp, #16]
	madd	x4, x21, x1, x4
	lsr	x2, x2, #15
	stp	x4, x3, [sp, #24]
	str	w2, [x6, #224]
	ldr	x2, [sp, #104]
	mov	x3, x5
	ldr	x5, [sp, #8]
	add	x2, x2, x3
	add	x2, x2, x4
	add	x2, x2, #4, lsl #12             // =16384
	lsr	x2, x2, #15
	str	w2, [x5, #160]
	ldr	x2, [sp, #96]
	ldp	x4, x3, [sp, #32]
	ldr	x5, [sp, #8]
	add	x2, x2, x3
	add	x2, x2, x4
	add	x2, x2, #4, lsl #12             // =16384
	lsr	x2, x2, #15
	str	w2, [x5, #96]
	ldr	x2, [sp, #88]
	ldr	x3, [sp, #48]
	ldr	x4, [sp, #24]
	ldr	x5, [sp, #8]
	add	x2, x2, x3
	add	x2, x2, x4
	add	x2, x2, #4, lsl #12             // =16384
	lsr	x2, x2, #15
	str	w2, [x5, #32]
	ldr	x2, [sp, #8]
	ldr	w3, [sp, #4]
	add	x2, x2, #4                      // =4
	sub	w3, w3, #1                      // =1
	str	x2, [sp, #8]
	str	w3, [sp, #4]
	mov	w2, w3
	tbz	w2, #31, .LBB266_3
.LBB266_4:                              // %for.end198
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldr	x21, [sp, #160]                 // 8-byte Folded Reload
	add	sp, sp, #192                    // =192
	ret
.Lfunc_end266:
	.size	jpeg_fdct_islow, .Lfunc_end266-jpeg_fdct_islow
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_idct_float                 // -- Begin function jpeg_idct_float
	.p2align	2
	.type	jpeg_idct_float,@function
jpeg_idct_float:                        // @jpeg_idct_float
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #432                    // =432
	str	x29, [sp, #416]                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 432
	.cfi_offset w29, -16
	add	x8, sp, #272                    // =272
	str	w4, [sp, #380]
	stp	x1, x0, [x8, #128]
	mov	x9, x0
	stp	x3, x2, [x8, #112]
	ldr	x13, [x9, #408]
	mov	x10, x2
	str	x10, [x8, #32]
	mov	x14, x1
	add	x10, x13, #128                  // =128
	str	x10, [x8]
	ldr	x13, [x14, #88]
	add	x12, sp, #12                    // =12
	mov	w11, #8
	mov	w9, #1267
	mov	w10, #33630
	str	w11, [sp, #268]
	mov	w11, #35796
	stp	x12, x13, [x8, #16]
	mov	w12, #15733
	movk	w9, #16309, lsl #16
	movk	w10, #16364, lsl #16
	movk	w11, #16266, lsl #16
	movk	w12, #49191, lsl #16
	b	.LBB267_3
.LBB267_1:                              // %if.end
                                        //   in Loop: Header=BB267_3 Depth=1
	ldp	x14, x13, [x8, #24]
	fmov	s4, w9
	ldp	x16, x15, [x8, #16]
	ldr	h0, [x13]
	ldr	s1, [x14]
	sshll	v0.4s, v0.4h, #0
	scvtf	s0, s0
	fmul	s0, s0, s1
	str	s0, [sp, #376]
	ldr	h1, [x13, #32]
	ldr	s2, [x14, #64]
	sshll	v1.4s, v1.4h, #0
	scvtf	s1, s1
	fmul	s1, s1, s2
	str	s1, [sp, #372]
	ldr	h2, [x13, #64]
	ldr	s3, [x14, #128]
	sshll	v2.4s, v2.4h, #0
	scvtf	s2, s2
	fmul	s2, s2, s3
	str	s2, [sp, #368]
	ldr	h3, [x13, #96]
	ldr	s5, [x14, #192]
	fadd	s6, s0, s2
	fsub	s0, s0, s2
	sshll	v3.4s, v3.4h, #0
	str	s0, [sp, #340]
	scvtf	s3, s3
	ldr	s2, [sp, #340]
	fmul	s3, s3, s5
	fadd	s5, s1, s3
	fsub	s1, s1, s3
	ldp	x14, x13, [x8, #24]
	fmul	s1, s1, s4
	fsub	s1, s1, s5
	str	s6, [sp, #344]
	fadd	s3, s6, s5
	fsub	s6, s6, s5
	str	s1, [sp, #336]
	fadd	s0, s0, s1
	fsub	s1, s2, s1
	str	s5, [sp, #332]
	str	s3, [sp, #376]
	str	s6, [sp, #364]
	str	s0, [sp, #372]
	str	s1, [sp, #368]
	ldr	h0, [x13, #16]
	ldr	s1, [x14, #32]
	ldp	x14, x13, [x8, #24]
	sshll	v0.4s, v0.4h, #0
	scvtf	s0, s0
	fmul	s0, s0, s1
	str	s0, [sp, #360]
	ldr	h0, [x13, #48]
	ldr	s1, [x14, #96]
	ldp	x14, x13, [x8, #24]
	sshll	v0.4s, v0.4h, #0
	scvtf	s0, s0
	fmul	s0, s0, s1
	str	s0, [sp, #356]
	ldr	h1, [x13, #80]
	ldr	s2, [x14, #160]
	ldr	x13, [x8, #32]
	sshll	v1.4s, v1.4h, #0
	scvtf	s1, s1
	fmul	s1, s1, s2
	str	s1, [sp, #352]
	ldr	h3, [x13, #112]
	fsub	s2, s1, s0
	ldr	s5, [x15, #224]
	str	s2, [sp, #324]
	ldr	s6, [sp, #324]
	sshll	v3.4s, v3.4h, #0
	scvtf	s3, s3
	fadd	s0, s1, s0
	fmov	s1, w12
	fmul	s3, s3, s5
	ldr	s5, [sp, #360]
	fmul	s1, s6, s1
	ldr	s6, [sp, #360]
	str	s0, [sp, #312]
	fadd	s5, s5, s3
	str	s3, [sp, #348]
	fsub	s3, s6, s3
	fadd	s6, s5, s0
	fsub	s0, s5, s0
	str	s5, [sp, #320]
	fmov	s5, w11
	fadd	s2, s2, s3
	fmul	s0, s0, s4
	fmov	s4, w10
	str	s3, [sp, #316]
	fmul	s3, s3, s5
	ldr	s5, [sp, #376]
	fmul	s2, s2, s4
	fadd	s1, s1, s2
	str	s1, [sp, #336]
	fsub	s1, s1, s6
	str	s0, [sp, #340]
	fsub	s3, s3, s2
	fsub	s0, s0, s1
	fadd	s4, s5, s6
	str	s0, [sp, #356]
	fadd	s0, s3, s0
	str	s6, [sp, #348]
	str	s2, [sp, #328]
	str	s3, [sp, #344]
	str	s1, [sp, #352]
	str	s0, [sp, #360]
	str	s4, [x16]
	ldr	s0, [sp, #376]
	ldr	s1, [sp, #348]
	ldr	x13, [x8, #16]
	fsub	s0, s0, s1
	str	s0, [x13, #224]
	ldr	s0, [sp, #372]
	ldr	s1, [sp, #352]
	ldr	x13, [x8, #16]
	fadd	s0, s0, s1
	str	s0, [x13, #32]
	ldr	s0, [sp, #372]
	ldr	s1, [sp, #352]
	ldr	x13, [x8, #16]
	fsub	s0, s0, s1
	str	s0, [x13, #192]
	ldr	s0, [sp, #368]
	ldr	s1, [sp, #356]
	ldr	x13, [x8, #16]
	fadd	s0, s0, s1
	str	s0, [x13, #64]
	ldr	s0, [sp, #368]
	ldr	s1, [sp, #356]
	ldr	x13, [x8, #16]
	fsub	s0, s0, s1
	str	s0, [x13, #160]
	ldr	s0, [sp, #364]
	ldr	s1, [sp, #360]
	ldr	x13, [x8, #16]
	fadd	s0, s0, s1
	str	s0, [x13, #128]
	ldr	s0, [sp, #364]
	ldr	s1, [sp, #360]
	ldr	x13, [x8, #16]
	fsub	s0, s0, s1
	str	s0, [x13, #96]
.LBB267_2:                              // %for.inc
                                        //   in Loop: Header=BB267_3 Depth=1
	ldp	x14, x13, [x8, #24]
	ldr	x15, [x8, #16]
	add	x18, x13, #2                    // =2
	add	x13, x14, #4                    // =4
	stp	x13, x18, [x8, #24]
	ldr	w13, [sp, #268]
	add	x14, x15, #4                    // =4
	str	x14, [x8, #16]
	sub	w13, w13, #1                    // =1
	str	w13, [sp, #268]
.LBB267_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w13, [sp, #268]
	cmp	w13, #1                         // =1
	b.lt	.LBB267_6
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB267_3 Depth=1
	ldr	x13, [x8, #32]
	ldrh	w14, [x13, #16]
	ldrh	w15, [x13, #32]
	ldrsh	w16, [x13, #48]
	ldrsh	w17, [x13, #64]
	ldrsh	w18, [x13, #80]
	orr	w14, w14, w15
	ldrsh	w0, [x13, #96]
	sxth	w14, w14
	orr	w14, w14, w16
	ldrsh	w13, [x13, #112]
	orr	w14, w14, w17
	orr	w14, w14, w18
	orr	w14, w14, w0
	orr	w13, w14, w13
	cbnz	w13, .LBB267_1
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB267_3 Depth=1
	ldp	x14, x13, [x8, #24]
	ldr	h0, [x13]
	ldr	s1, [x14]
	ldr	x13, [x8, #16]
	sshll	v0.4s, v0.4h, #0
	scvtf	s0, s0
	fmul	s0, s0, s1
	str	s0, [sp, #280]
	str	s0, [x13]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #32]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #64]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #96]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #128]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #160]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #192]
	ldr	s0, [sp, #280]
	ldr	x13, [x8, #16]
	str	s0, [x13, #224]
	b	.LBB267_2
.LBB267_6:                              // %for.end
	add	x12, sp, #12                    // =12
	mov	w9, #1267
	mov	w10, #33630
	mov	w11, #35796
	str	x12, [x8, #16]
	mov	w12, #15733
	movk	w9, #16309, lsl #16
	movk	w10, #16364, lsl #16
	movk	w11, #16266, lsl #16
	movk	w12, #49191, lsl #16
	str	wzr, [sp, #268]
	mov	w13, wzr
	cmp	w13, #7                         // =7
	b.gt	.LBB267_8
.LBB267_7:                              // %for.body112
                                        // =>This Inner Loop Header: Depth=1
	ldr	x13, [x8, #112]
	ldrsw	x14, [sp, #268]
	ldr	w15, [sp, #380]
	fmov	s4, w9
	ldr	x13, [x13, x14, lsl #3]
	ldr	x14, [x8, #16]
	add	x13, x13, x15
	str	x13, [x8, #8]
	ldr	s0, [x14]
	ldr	s1, [x14, #16]
	ldr	x13, [x8, #16]
	fadd	s0, s0, s1
	str	s0, [sp, #344]
	ldr	s1, [x14]
	ldr	s2, [x14, #16]
	fsub	s1, s1, s2
	str	s1, [sp, #340]
	ldr	s2, [x14, #8]
	ldr	s3, [x14, #24]
	ldr	x14, [x8, #16]
	fadd	s2, s2, s3
	str	s2, [sp, #332]
	ldr	s5, [x13, #8]
	ldr	s6, [x13, #24]
	fadd	s3, s0, s2
	fsub	s0, s0, s2
	str	s0, [sp, #364]
	fsub	s0, s5, s6
	fmul	s0, s0, s4
	fsub	s0, s0, s2
	str	s0, [sp, #336]
	fadd	s2, s1, s0
	fsub	s0, s1, s0
	str	s3, [sp, #376]
	str	s2, [sp, #372]
	str	s0, [sp, #368]
	ldr	s0, [x14, #20]
	ldr	s1, [x14, #12]
	ldr	x13, [x8, #16]
	ldr	s5, [sp, #376]
	ldr	x14, [x8]
	fadd	s0, s0, s1
	str	s0, [sp, #312]
	ldr	s1, [x13, #20]
	ldr	s2, [x13, #12]
	ldr	x13, [x8, #16]
	fsub	s1, s1, s2
	str	s1, [sp, #324]
	ldr	s2, [x13, #4]
	ldr	s3, [x13, #28]
	ldp	x15, x13, [x8, #8]
	fadd	s2, s2, s3
	str	s2, [sp, #320]
	fadd	s3, s2, s0
	fsub	s0, s2, s0
	ldr	s2, [x13, #4]
	ldr	s6, [x13, #28]
	fmul	s0, s0, s4
	fadd	s4, s5, s3
	fcvtzs	x13, s4
	fmov	s4, w11
	fsub	s2, s2, s6
	fmov	s5, w12
	fmul	s5, s1, s5
	str	s2, [sp, #316]
	fadd	s1, s1, s2
	fmul	s2, s2, s4
	fmov	s4, w10
	fmul	s1, s1, s4
	str	s1, [sp, #328]
	fsub	s2, s2, s1
	fadd	s1, s5, s1
	str	s1, [sp, #336]
	fsub	s1, s1, s3
	str	s0, [sp, #340]
	fsub	s0, s0, s1
	add	w13, w13, #4                    // =4
	str	s0, [sp, #356]
	fadd	s0, s2, s0
	str	s3, [sp, #348]
	ubfx	x13, x13, #3, #10
	str	s2, [sp, #344]
	str	s1, [sp, #352]
	str	s0, [sp, #360]
	ldrb	w13, [x14, x13]
	strb	w13, [x15]
	ldr	s0, [sp, #376]
	ldr	s1, [sp, #348]
	ldp	x13, x14, [x8]
	fsub	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #7]
	ldr	s0, [sp, #372]
	ldr	s1, [sp, #352]
	ldp	x13, x14, [x8]
	fadd	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #1]
	ldr	s0, [sp, #372]
	ldr	s1, [sp, #352]
	ldp	x13, x14, [x8]
	fsub	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #6]
	ldr	s0, [sp, #368]
	ldr	s1, [sp, #356]
	ldp	x13, x14, [x8]
	fadd	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #2]
	ldr	s0, [sp, #368]
	ldr	s1, [sp, #356]
	ldp	x13, x14, [x8]
	fsub	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #5]
	ldr	s0, [sp, #364]
	ldr	s1, [sp, #360]
	ldp	x13, x14, [x8]
	fadd	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #4]
	ldr	s0, [sp, #364]
	ldr	s1, [sp, #360]
	ldp	x13, x14, [x8]
	fsub	s0, s0, s1
	fcvtzs	x15, s0
	add	w15, w15, #4                    // =4
	ubfx	x15, x15, #3, #10
	ldrb	w13, [x13, x15]
	strb	w13, [x14, #3]
	ldr	x13, [x8, #16]
	ldr	w14, [sp, #268]
	add	x13, x13, #32                   // =32
	add	w14, w14, #1                    // =1
	str	x13, [x8, #16]
	str	w14, [sp, #268]
	mov	w13, w14
	cmp	w13, #7                         // =7
	b.le	.LBB267_7
.LBB267_8:                              // %for.end229
	ldr	x29, [sp, #416]                 // 8-byte Folded Reload
	add	sp, sp, #432                    // =432
	ret
.Lfunc_end267:
	.size	jpeg_idct_float, .Lfunc_end267-jpeg_idct_float
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_idct_ifast                 // -- Begin function jpeg_idct_ifast
	.p2align	2
	.type	jpeg_idct_ifast,@function
jpeg_idct_ifast:                        // @jpeg_idct_ifast
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #416                    // =416
	stp	x29, x0, [sp, #400]             // 8-byte Folded Spill
	.cfi_def_cfa_offset 416
	.cfi_offset w29, -16
	stp	x2, x1, [sp, #384]
	str	x3, [sp, #376]
	str	w4, [sp, #372]
	mov	x8, x0
	ldr	x12, [x8, #408]
	mov	x9, x2
	str	x9, [sp, #296]
	mov	x13, x1
	add	x9, x12, #128                   // =128
	str	x9, [sp, #264]
	ldr	x12, [x13, #88]
	add	x10, sp, #4                     // =4
	mov	w11, #8
	mov	w8, #362
	mov	w9, #473
	stp	x10, x12, [sp, #280]
	mov	w10, #277
	str	w11, [sp, #260]
	mov	x11, #-669
	b	.LBB268_3
.LBB268_1:                              // %if.end
                                        //   in Loop: Header=BB268_3 Depth=1
	ldp	x13, x12, [sp, #288]
	ldp	x15, x14, [sp, #288]
	ldrsh	w16, [x12]
	ldr	w17, [x13]
	mul	w16, w16, w17
	str	w16, [sp, #368]
	ldrsh	w17, [x12, #32]
	ldr	w18, [x13, #64]
	mul	w17, w17, w18
	str	w17, [sp, #364]
	ldrsh	w18, [x12, #64]
	ldr	w0, [x13, #128]
	mul	w18, w18, w0
	str	w18, [sp, #360]
	ldrsh	w12, [x12, #96]
	ldr	w13, [x13, #192]
	add	w0, w16, w18
	sub	w16, w16, w18
	str	w16, [sp, #332]
	mul	w12, w12, w13
	sxtw	x13, w17
	add	w17, w17, w12
	sub	x12, x13, w12, sxtw
	add	w13, w0, w17
	mul	x12, x12, x8
	str	w13, [sp, #368]
	sub	w13, w0, w17
	lsr	x12, x12, #8
	str	w13, [sp, #356]
	mov	w13, w16
	sub	w12, w12, w17
	str	w12, [sp, #328]
	add	w16, w16, w12
	sub	w12, w13, w12
	str	w0, [sp, #336]
	str	w17, [sp, #324]
	str	w16, [sp, #364]
	str	w12, [sp, #360]
	ldrsh	w12, [x14, #16]
	ldr	w13, [x15, #32]
	ldp	x16, x14, [sp, #288]
	ldp	x17, x15, [sp, #288]
	mul	w12, w12, w13
	str	w12, [sp, #352]
	ldrsh	w12, [x14, #48]
	ldr	w13, [x16, #96]
	mul	w12, w12, w13
	str	w12, [sp, #348]
	ldrsh	w13, [x15, #80]
	ldr	w14, [x17, #160]
	ldp	x16, x15, [sp, #288]
	ldr	w17, [sp, #352]
	mul	w13, w13, w14
	str	w13, [sp, #344]
	add	w14, w13, w12
	sub	w12, w13, w12
	ldrsh	w13, [x15, #112]
	ldr	w15, [x16, #224]
	ldr	w16, [sp, #352]
	str	w12, [sp, #316]
	sxtw	x12, w12
	mul	w13, w13, w15
	ldrsw	x15, [sp, #316]
	str	w13, [sp, #340]
	add	w16, w16, w13
	sub	w13, w17, w13
	add	x12, x12, w13, sxtw
	str	w16, [sp, #312]
	add	w17, w16, w14
	sxtw	x16, w16
	mul	x15, x15, x11
	str	w13, [sp, #308]
	smull	x13, w13, w10
	mul	x12, x12, x9
	str	w14, [sp, #304]
	sub	x14, x16, w14, sxtw
	ldr	w16, [sp, #368]
	lsr	x15, x15, #8
	lsr	x13, x13, #8
	lsr	x12, x12, #8
	str	w12, [sp, #320]
	sub	w13, w13, w12
	add	w12, w15, w12
	ldr	x15, [sp, #280]
	mul	x14, x14, x8
	lsr	x14, x14, #8
	str	w12, [sp, #328]
	sub	w12, w12, w17
	str	w12, [sp, #344]
	sub	w12, w14, w12
	add	w16, w16, w17
	str	w12, [sp, #348]
	add	w12, w13, w12
	str	w17, [sp, #340]
	str	w14, [sp, #332]
	str	w13, [sp, #336]
	str	w12, [sp, #352]
	str	w16, [x15]
	ldr	w12, [sp, #368]
	ldr	x14, [sp, #280]
	mov	w13, w17
	sub	w12, w12, w13
	str	w12, [x14, #224]
	ldr	w12, [sp, #364]
	ldr	w13, [sp, #344]
	ldr	x14, [sp, #280]
	add	w12, w12, w13
	str	w12, [x14, #32]
	ldr	w12, [sp, #364]
	ldr	w13, [sp, #344]
	ldr	x14, [sp, #280]
	sub	w12, w12, w13
	str	w12, [x14, #192]
	ldr	w12, [sp, #360]
	ldr	w13, [sp, #348]
	ldr	x14, [sp, #280]
	add	w12, w12, w13
	str	w12, [x14, #64]
	ldr	w12, [sp, #360]
	ldr	w13, [sp, #348]
	ldr	x14, [sp, #280]
	sub	w12, w12, w13
	str	w12, [x14, #160]
	ldr	w12, [sp, #356]
	ldr	w13, [sp, #352]
	ldr	x14, [sp, #280]
	add	w12, w12, w13
	str	w12, [x14, #128]
	ldr	w12, [sp, #356]
	ldr	w13, [sp, #352]
	ldr	x14, [sp, #280]
	sub	w12, w12, w13
	str	w12, [x14, #96]
	ldp	x13, x12, [sp, #288]
	ldr	x14, [sp, #280]
	add	x12, x12, #2                    // =2
	add	x13, x13, #4                    // =4
	add	x14, x14, #4                    // =4
	stp	x13, x12, [sp, #288]
	str	x14, [sp, #280]
.LBB268_2:                              // %for.inc
                                        //   in Loop: Header=BB268_3 Depth=1
	ldr	w12, [sp, #260]
	sub	w12, w12, #1                    // =1
	str	w12, [sp, #260]
.LBB268_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w12, [sp, #260]
	cmp	w12, #1                         // =1
	b.lt	.LBB268_6
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB268_3 Depth=1
	ldr	x12, [sp, #296]
	ldrh	w13, [x12, #16]
	ldrh	w14, [x12, #32]
	ldrsh	w15, [x12, #48]
	ldrsh	w16, [x12, #64]
	ldrsh	w17, [x12, #80]
	orr	w13, w13, w14
	ldrsh	w18, [x12, #96]
	sxth	w13, w13
	orr	w13, w13, w15
	ldrsh	w12, [x12, #112]
	orr	w13, w13, w16
	orr	w13, w13, w17
	orr	w13, w13, w18
	orr	w12, w13, w12
	cbnz	w12, .LBB268_1
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB268_3 Depth=1
	ldp	x13, x12, [sp, #288]
	ldr	x14, [sp, #280]
	ldrsh	w12, [x12]
	ldr	w13, [x13]
	mul	w12, w12, w13
	str	w12, [sp, #272]
	str	w12, [x14]
	ldr	x13, [sp, #280]
	mov	w12, w12
	str	w12, [x13, #32]
	ldr	w12, [sp, #272]
	ldr	x13, [sp, #280]
	str	w12, [x13, #64]
	ldr	w12, [sp, #272]
	ldr	x13, [sp, #280]
	str	w12, [x13, #96]
	ldr	w12, [sp, #272]
	ldr	x13, [sp, #280]
	str	w12, [x13, #128]
	ldr	w12, [sp, #272]
	ldr	x13, [sp, #280]
	str	w12, [x13, #160]
	ldr	w12, [sp, #272]
	ldr	x13, [sp, #280]
	str	w12, [x13, #192]
	ldr	w12, [sp, #272]
	ldr	x13, [sp, #280]
	str	w12, [x13, #224]
	ldp	x13, x12, [sp, #288]
	ldr	x14, [sp, #280]
	add	x15, x12, #2                    // =2
	add	x12, x13, #4                    // =4
	add	x13, x14, #4                    // =4
	stp	x12, x15, [sp, #288]
	str	x13, [sp, #280]
	b	.LBB268_2
.LBB268_6:                              // %for.end
	add	x11, sp, #4                     // =4
	mov	w8, #362
	mov	w9, #473
	mov	w10, #277
	str	x11, [sp, #280]
	mov	x11, #-669
	str	wzr, [sp, #260]
	b	.LBB268_9
.LBB268_7:                              // %if.end159
                                        //   in Loop: Header=BB268_9 Depth=1
	ldr	x12, [sp, #280]
	ldr	x13, [sp, #280]
	ldr	w14, [x12]
	ldr	w15, [x12, #16]
	add	w14, w14, w15
	str	w14, [sp, #336]
	ldr	w15, [x12]
	ldr	w16, [x12, #16]
	sub	w15, w15, w16
	str	w15, [sp, #332]
	ldr	w16, [x12, #8]
	ldr	w17, [x12, #24]
	add	w16, w16, w17
	str	w16, [sp, #324]
	ldrsw	x18, [x12, #8]
	ldrsw	x12, [x12, #24]
	add	w17, w14, w16
	sub	w14, w14, w16
	str	w14, [sp, #356]
	sub	x12, x18, x12
	mul	x12, x12, x8
	lsr	x12, x12, #8
	sub	w12, w12, w16
	str	w12, [sp, #328]
	add	w14, w15, w12
	sub	w12, w15, w12
	str	w17, [sp, #368]
	str	w14, [sp, #364]
	str	w12, [sp, #360]
	ldr	w12, [x13, #20]
	ldr	w13, [x13, #12]
	ldr	x14, [sp, #280]
	ldr	x15, [sp, #280]
	ldr	x16, [sp, #280]
	add	w12, w12, w13
	str	w12, [sp, #304]
	ldr	w13, [x14, #20]
	ldr	w14, [x14, #12]
	sub	w13, w13, w14
	str	w13, [sp, #316]
	ldr	w14, [x15, #4]
	ldr	w15, [x15, #28]
	sxtw	x13, w13
	add	w14, w14, w15
	str	w14, [sp, #312]
	ldr	w17, [x16, #4]
	ldr	w16, [x16, #28]
	add	w15, w14, w12
	sxtw	x14, w14
	sub	x12, x14, w12, sxtw
	ldrsw	x14, [sp, #316]
	sub	w16, w17, w16
	add	x13, x13, w16, sxtw
	ldr	w17, [sp, #368]
	mul	x14, x14, x11
	str	w16, [sp, #308]
	smull	x16, w16, w10
	mul	x13, x13, x9
	lsr	x14, x14, #8
	lsr	x16, x16, #8
	lsr	x13, x13, #8
	str	w13, [sp, #320]
	sub	w16, w16, w13
	add	w13, w14, w13
	mul	x12, x12, x8
	str	w13, [sp, #328]
	sub	w13, w13, w15
	lsr	x12, x12, #8
	str	w15, [sp, #340]
	add	w14, w17, w15
	str	w12, [sp, #332]
	str	w13, [sp, #344]
	sub	w12, w12, w13
	ldp	x15, x13, [sp, #264]
	str	w12, [sp, #348]
	add	w12, w16, w12
	ubfx	x14, x14, #5, #10
	str	w16, [sp, #336]
	str	w12, [sp, #352]
	ldrb	w12, [x15, x14]
	strb	w12, [x13]
	ldr	w12, [sp, #368]
	ldr	w13, [sp, #340]
	ldp	x14, x15, [sp, #264]
	sub	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	strb	w12, [x15, #7]
	ldr	w12, [sp, #364]
	ldr	w13, [sp, #344]
	ldp	x14, x15, [sp, #264]
	add	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	strb	w12, [x15, #1]
	ldr	w12, [sp, #364]
	ldr	w13, [sp, #344]
	ldp	x14, x15, [sp, #264]
	sub	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	strb	w12, [x15, #6]
	ldr	w12, [sp, #360]
	ldr	w13, [sp, #348]
	ldp	x14, x15, [sp, #264]
	add	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	strb	w12, [x15, #2]
	ldr	w12, [sp, #360]
	ldr	w13, [sp, #348]
	ldp	x14, x15, [sp, #264]
	sub	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	strb	w12, [x15, #5]
	ldr	w12, [sp, #356]
	ldr	w13, [sp, #352]
	ldp	x14, x15, [sp, #264]
	add	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	strb	w12, [x15, #4]
	ldr	w12, [sp, #356]
	ldr	w13, [sp, #352]
	ldr	x14, [sp, #264]
	sub	w12, w12, w13
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x14, x12]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #3]
.LBB268_8:                              // %for.inc266
                                        //   in Loop: Header=BB268_9 Depth=1
	ldr	x12, [sp, #280]
	add	x12, x12, #32                   // =32
	str	x12, [sp, #280]
	ldr	w12, [sp, #260]
	add	w12, w12, #1                    // =1
	str	w12, [sp, #260]
.LBB268_9:                              // %for.cond123
                                        // =>This Inner Loop Header: Depth=1
	ldr	w12, [sp, #260]
	cmp	w12, #7                         // =7
	b.gt	.LBB268_12
// %bb.10:                              // %for.body126
                                        //   in Loop: Header=BB268_9 Depth=1
	ldr	x12, [sp, #376]
	ldrsw	x13, [sp, #260]
	ldr	w14, [sp, #372]
	ldr	x12, [x12, x13, lsl #3]
	ldr	x13, [sp, #280]
	add	x12, x12, x14
	str	x12, [sp, #272]
	ldp	w12, w14, [x13, #4]
	ldp	w15, w16, [x13, #12]
	orr	w12, w12, w14
	orr	w12, w12, w15
	ldp	w14, w15, [x13, #20]
	ldr	w13, [x13, #28]
	orr	w12, w12, w16
	orr	w12, w12, w14
	orr	w12, w12, w15
	orr	w12, w12, w13
	cbnz	w12, .LBB268_7
// %bb.11:                              // %if.then144
                                        //   in Loop: Header=BB268_9 Depth=1
	ldr	x12, [sp, #280]
	ldr	x13, [sp, #264]
	ldr	w12, [x12]
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x13, x12]
	ldr	x13, [sp, #272]
	strb	w12, [sp]
	strb	w12, [x13]
	ldr	x13, [sp, #272]
	and	w12, w12, #0xff
	strb	w12, [x13, #1]
	ldrb	w12, [sp]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #2]
	ldrb	w12, [sp]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #3]
	ldrb	w12, [sp]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #4]
	ldrb	w12, [sp]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #5]
	ldrb	w12, [sp]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #6]
	ldrb	w12, [sp]
	ldr	x13, [sp, #272]
	strb	w12, [x13, #7]
	b	.LBB268_8
.LBB268_12:                             // %for.end267
	ldr	x29, [sp, #400]                 // 8-byte Folded Reload
	add	sp, sp, #416                    // =416
	ret
.Lfunc_end268:
	.size	jpeg_idct_ifast, .Lfunc_end268-jpeg_idct_ifast
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_idct_islow                 // -- Begin function jpeg_idct_islow
	.p2align	2
	.type	jpeg_idct_islow,@function
jpeg_idct_islow:                        // @jpeg_idct_islow
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #480                    // =480
	stp	x29, x0, [sp, #448]             // 8-byte Folded Spill
	stp	x20, x19, [sp, #464]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 480
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w29, -32
	stp	x2, x1, [sp, #432]
	str	x3, [sp, #424]
	str	w4, [sp, #420]
	mov	x15, x0
	ldr	x0, [x15, #408]
	mov	x16, x2
	str	x16, [sp, #304]
	add	x17, sp, #12                    // =12
	add	x16, x0, #128                   // =128
	str	x16, [sp, #272]
	ldr	x0, [x1, #88]
	mov	w18, #8
	mov	w8, #4433
	mov	x9, #-15137
	mov	w10, #6270
	mov	w11, #9633
	mov	w12, #2446
	mov	w13, #16819
	mov	w14, #25172
	mov	w15, #12299
	mov	x16, #-7373
	stp	x17, x0, [sp, #288]
	mov	x17, #-20995
	str	w18, [sp, #268]
	mov	x18, #-16069
	mov	x0, #-3196
	b	.LBB269_3
.LBB269_1:                              // %if.end
                                        //   in Loop: Header=BB269_3 Depth=1
	ldp	x2, x1, [sp, #296]
	ldp	x4, x3, [sp, #296]
	ldrsh	x5, [x1, #32]
	ldrsw	x6, [x2, #64]
	ldrsw	x7, [x2, #192]
	mul	x5, x5, x6
	ldrsh	x6, [x1, #96]
	mul	x6, x6, x7
	add	x7, x5, x6
	mul	x7, x7, x8
	stp	x6, x5, [sp, #328]
	madd	x6, x6, x9, x7
	madd	x5, x5, x10, x7
	stp	x5, x6, [sp, #384]
	ldrsh	x5, [x1]
	ldrsw	x6, [x2]
	mul	x5, x5, x6
	stp	x5, x7, [sp, #336]
	ldrsh	x1, [x1, #64]
	ldrsw	x2, [x2, #128]
	ldp	x6, x19, [sp, #384]
	ldp	x7, x20, [sp, #384]
	mul	x1, x1, x2
	str	x1, [sp, #328]
	add	x2, x5, x1
	sub	x1, x5, x1
	lsl	x2, x2, #13
	lsl	x1, x1, #13
	stp	x1, x2, [sp, #400]
	add	x5, x2, x6
	sub	x2, x2, x7
	add	x6, x1, x19
	sub	x1, x1, x20
	stp	x6, x5, [sp, #368]
	stp	x2, x1, [sp, #352]
	ldrsh	x1, [x3, #112]
	ldrsw	x2, [x4, #224]
	ldp	x5, x3, [sp, #296]
	ldp	x6, x4, [sp, #296]
	ldr	x7, [sp, #288]
	mul	x1, x1, x2
	ldrsh	x2, [x3, #80]
	ldrsw	x3, [x5, #160]
	mov	x20, x1
	mul	x20, x20, x12
	mul	x2, x2, x3
	stp	x2, x1, [sp, #400]
	ldrsh	x3, [x4, #48]
	ldrsw	x4, [x6, #96]
	ldp	x6, x5, [sp, #296]
	mov	x19, x2
	mul	x19, x19, x13
	mul	x3, x3, x4
	stp	x3, x19, [sp, #392]
	ldrsh	x5, [x5, #16]
	ldrsw	x6, [x6, #32]
	mov	x4, x1
	mul	x19, x3, x14
	add	x4, x4, x3
	mul	x5, x5, x6
	add	x3, x2, x3
	stp	x5, x19, [sp, #384]
	add	x1, x1, x5
	add	x2, x2, x5
	mul	x5, x5, x15
	str	x5, [sp, #384]
	add	x5, x4, x2
	stp	x4, x3, [sp, #328]
	mul	x3, x3, x17
	mul	x5, x5, x11
	stp	x3, x1, [sp, #336]
	mul	x1, x1, x16
	madd	x4, x4, x18, x5
	stp	x5, x2, [sp, #312]
	madd	x2, x2, x0, x5
	add	x5, x1, x4
	str	x20, [sp, #408]
	str	x1, [sp, #344]
	stp	x2, x4, [sp, #320]
	add	x4, x3, x4
	add	x3, x3, x2
	add	x1, x1, x2
	add	x5, x20, x5
	ldp	x20, x2, [sp, #384]
	ldr	x19, [sp, #376]
	ldr	x6, [sp, #400]
	add	x2, x2, x4
	add	x1, x20, x1
	stp	x1, x2, [sp, #384]
	add	x1, x19, x1
	add	x1, x1, #1024                   // =1024
	add	x3, x6, x3
	lsr	x1, x1, #11
	stp	x3, x5, [sp, #400]
	str	w1, [x7]
	ldp	x1, x2, [sp, #376]
	ldr	x3, [sp, #288]
	sub	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #224]
	ldr	x1, [sp, #368]
	ldr	x2, [sp, #392]
	ldr	x3, [sp, #288]
	add	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #32]
	ldr	x1, [sp, #368]
	ldr	x2, [sp, #392]
	ldr	x3, [sp, #288]
	sub	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #192]
	ldr	x1, [sp, #360]
	ldr	x2, [sp, #400]
	ldr	x3, [sp, #288]
	add	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #64]
	ldr	x1, [sp, #360]
	ldr	x2, [sp, #400]
	ldr	x3, [sp, #288]
	sub	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #160]
	ldr	x1, [sp, #352]
	ldr	x2, [sp, #408]
	ldr	x3, [sp, #288]
	add	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #96]
	ldr	x1, [sp, #352]
	ldr	x2, [sp, #408]
	ldr	x3, [sp, #288]
	sub	x1, x1, x2
	add	x1, x1, #1024                   // =1024
	lsr	x1, x1, #11
	str	w1, [x3, #128]
	ldp	x2, x1, [sp, #296]
	ldr	x3, [sp, #288]
	add	x1, x1, #2                      // =2
	add	x2, x2, #4                      // =4
	add	x3, x3, #4                      // =4
	stp	x2, x1, [sp, #296]
	str	x3, [sp, #288]
.LBB269_2:                              // %for.inc
                                        //   in Loop: Header=BB269_3 Depth=1
	ldr	w1, [sp, #268]
	sub	w1, w1, #1                      // =1
	str	w1, [sp, #268]
.LBB269_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w1, [sp, #268]
	cmp	w1, #1                          // =1
	b.lt	.LBB269_6
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB269_3 Depth=1
	ldr	x1, [sp, #304]
	ldrh	w2, [x1, #16]
	ldrh	w3, [x1, #32]
	ldrsh	w4, [x1, #48]
	ldrsh	w5, [x1, #64]
	ldrsh	w6, [x1, #80]
	orr	w2, w2, w3
	ldrsh	w7, [x1, #96]
	sxth	w2, w2
	orr	w2, w2, w4
	ldrsh	w1, [x1, #112]
	orr	w2, w2, w5
	orr	w2, w2, w6
	orr	w2, w2, w7
	orr	w1, w2, w1
	cbnz	w1, .LBB269_1
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB269_3 Depth=1
	ldp	x2, x1, [sp, #296]
	ldr	x3, [sp, #288]
	ldrsh	w1, [x1]
	ldr	w2, [x2]
	mul	w1, w1, w2
	lsl	w1, w1, #2
	str	w1, [sp, #280]
	str	w1, [x3]
	ldr	x2, [sp, #288]
	mov	w1, w1
	str	w1, [x2, #32]
	ldr	w1, [sp, #280]
	ldr	x2, [sp, #288]
	str	w1, [x2, #64]
	ldr	w1, [sp, #280]
	ldr	x2, [sp, #288]
	str	w1, [x2, #96]
	ldr	w1, [sp, #280]
	ldr	x2, [sp, #288]
	str	w1, [x2, #128]
	ldr	w1, [sp, #280]
	ldr	x2, [sp, #288]
	str	w1, [x2, #160]
	ldr	w1, [sp, #280]
	ldr	x2, [sp, #288]
	str	w1, [x2, #192]
	ldr	w1, [sp, #280]
	ldr	x2, [sp, #288]
	str	w1, [x2, #224]
	ldp	x2, x1, [sp, #296]
	ldr	x3, [sp, #288]
	add	x4, x1, #2                      // =2
	add	x1, x2, #4                      // =4
	add	x2, x3, #4                      // =4
	stp	x1, x4, [sp, #296]
	str	x2, [sp, #288]
	b	.LBB269_2
.LBB269_6:                              // %for.end
	add	x0, sp, #12                     // =12
	mov	w8, #4433
	mov	x9, #-15137
	mov	w10, #6270
	mov	w11, #9633
	mov	w12, #2446
	mov	w13, #16819
	mov	w14, #25172
	mov	w15, #12299
	mov	x16, #-7373
	mov	x17, #-20995
	mov	x18, #-16069
	str	x0, [sp, #288]
	mov	x0, #-3196
	str	wzr, [sp, #268]
	b	.LBB269_9
.LBB269_7:                              // %if.end191
                                        //   in Loop: Header=BB269_9 Depth=1
	ldr	x1, [sp, #288]
	ldr	x2, [sp, #288]
	ldrsw	x3, [x1, #8]
	ldrsw	x4, [x1, #24]
	add	x5, x3, x4
	mul	x5, x5, x8
	stp	x4, x3, [sp, #328]
	madd	x4, x4, x9, x5
	madd	x3, x3, x10, x5
	str	x5, [sp, #344]
	stp	x3, x4, [sp, #384]
	ldrsw	x4, [x1]
	ldrsw	x5, [x1, #16]
	ldr	x6, [sp, #392]
	ldr	x7, [sp, #392]
	add	x4, x4, x5
	lsl	x4, x4, #13
	str	x4, [sp, #408]
	ldrsw	x19, [x1]
	ldrsw	x1, [x1, #16]
	add	x5, x4, x3
	sub	x3, x4, x3
	str	x3, [sp, #352]
	sub	x1, x19, x1
	lsl	x1, x1, #13
	str	x1, [sp, #400]
	add	x3, x1, x6
	sub	x1, x1, x7
	stp	x3, x5, [sp, #368]
	str	x1, [sp, #360]
	ldrsw	x1, [x2, #28]
	ldp	x6, x2, [sp, #280]
	ldr	x3, [sp, #288]
	ldr	x4, [sp, #288]
	ldr	x5, [sp, #272]
	ldrsw	x2, [x2, #20]
	stp	x2, x1, [sp, #400]
	ldrsw	x3, [x3, #12]
	mul	x7, x2, x13
	str	x3, [sp, #392]
	ldrsw	x4, [x4, #4]
	add	x19, x2, x3
	add	x20, x1, x3
	mul	x3, x3, x14
	stp	x20, x19, [sp, #328]
	stp	x3, x7, [sp, #392]
	mul	x3, x19, x17
	str	x4, [sp, #384]
	add	x19, x1, x4
	add	x2, x2, x4
	mul	x4, x4, x15
	str	x4, [sp, #384]
	add	x4, x20, x2
	mul	x4, x4, x11
	stp	x3, x19, [sp, #336]
	mul	x19, x19, x16
	stp	x4, x2, [sp, #312]
	madd	x20, x20, x18, x4
	madd	x2, x2, x0, x4
	stp	x2, x20, [sp, #320]
	add	x4, x19, x20
	add	x20, x3, x20
	add	x3, x3, x2
	str	x19, [sp, #344]
	add	x2, x19, x2
	add	x3, x7, x3
	ldp	x7, x19, [sp, #384]
	madd	x1, x1, x12, x4
	ldr	w4, [sp, #376]
	stp	x3, x1, [sp, #400]
	add	x19, x19, x20
	add	x1, x7, x2
	stp	x1, x19, [sp, #384]
	add	w1, w4, w1
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x5, x1]
	strb	w1, [x6]
	ldr	w1, [sp, #376]
	ldr	w2, [sp, #384]
	ldp	x3, x4, [sp, #272]
	sub	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	strb	w1, [x4, #7]
	ldr	w1, [sp, #368]
	ldr	w2, [sp, #392]
	ldp	x3, x4, [sp, #272]
	add	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	strb	w1, [x4, #1]
	ldr	w1, [sp, #368]
	ldr	w2, [sp, #392]
	ldp	x3, x4, [sp, #272]
	sub	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	strb	w1, [x4, #6]
	ldr	w1, [sp, #360]
	ldr	w2, [sp, #400]
	ldp	x3, x4, [sp, #272]
	add	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	strb	w1, [x4, #2]
	ldr	w1, [sp, #360]
	ldr	w2, [sp, #400]
	ldp	x3, x4, [sp, #272]
	sub	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	strb	w1, [x4, #5]
	ldr	w1, [sp, #352]
	ldr	w2, [sp, #408]
	ldp	x3, x4, [sp, #272]
	add	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	strb	w1, [x4, #3]
	ldr	w1, [sp, #352]
	ldr	w2, [sp, #408]
	ldr	x3, [sp, #272]
	sub	w1, w1, w2
	add	w1, w1, #32, lsl #12            // =131072
	ubfx	x1, x1, #18, #10
	ldrb	w1, [x3, x1]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #4]
.LBB269_8:                              // %for.inc315
                                        //   in Loop: Header=BB269_9 Depth=1
	ldr	x1, [sp, #288]
	add	x1, x1, #32                     // =32
	str	x1, [sp, #288]
	ldr	w1, [sp, #268]
	add	w1, w1, #1                      // =1
	str	w1, [sp, #268]
.LBB269_9:                              // %for.cond152
                                        // =>This Inner Loop Header: Depth=1
	ldr	w1, [sp, #268]
	cmp	w1, #7                          // =7
	b.gt	.LBB269_12
// %bb.10:                              // %for.body155
                                        //   in Loop: Header=BB269_9 Depth=1
	ldr	x1, [sp, #424]
	ldrsw	x2, [sp, #268]
	ldr	w3, [sp, #420]
	ldr	x1, [x1, x2, lsl #3]
	ldr	x2, [sp, #288]
	add	x1, x1, x3
	str	x1, [sp, #280]
	ldp	w1, w3, [x2, #4]
	ldp	w4, w5, [x2, #12]
	orr	w1, w1, w3
	orr	w1, w1, w4
	ldp	w3, w4, [x2, #20]
	ldr	w2, [x2, #28]
	orr	w1, w1, w5
	orr	w1, w1, w3
	orr	w1, w1, w4
	orr	w1, w1, w2
	cbnz	w1, .LBB269_7
// %bb.11:                              // %if.then173
                                        //   in Loop: Header=BB269_9 Depth=1
	ldr	x1, [sp, #288]
	ldr	x2, [sp, #272]
	ldr	w1, [x1]
	add	w1, w1, #16                     // =16
	ubfx	x1, x1, #5, #10
	ldrb	w1, [x2, x1]
	ldr	x2, [sp, #280]
	strb	w1, [sp, #8]
	strb	w1, [x2]
	ldr	x2, [sp, #280]
	and	w1, w1, #0xff
	strb	w1, [x2, #1]
	ldrb	w1, [sp, #8]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #2]
	ldrb	w1, [sp, #8]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #3]
	ldrb	w1, [sp, #8]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #4]
	ldrb	w1, [sp, #8]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #5]
	ldrb	w1, [sp, #8]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #6]
	ldrb	w1, [sp, #8]
	ldr	x2, [sp, #280]
	strb	w1, [x2, #7]
	b	.LBB269_8
.LBB269_12:                             // %for.end316
	ldp	x20, x19, [sp, #464]            // 16-byte Folded Reload
	ldr	x29, [sp, #448]                 // 8-byte Folded Reload
	add	sp, sp, #480                    // =480
	ret
.Lfunc_end269:
	.size	jpeg_idct_islow, .Lfunc_end269-jpeg_idct_islow
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_idct_4x4                   // -- Begin function jpeg_idct_4x4
	.p2align	2
	.type	jpeg_idct_4x4,@function
jpeg_idct_4x4:                          // @jpeg_idct_4x4
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #288                    // =288
	stp	x29, x0, [sp, #272]             // 8-byte Folded Spill
	.cfi_def_cfa_offset 288
	.cfi_offset w29, -16
	stp	x2, x1, [sp, #256]
	str	x3, [sp, #248]
	str	w4, [sp, #244]
	ldr	x17, [x0, #408]
	mov	x14, x2
	str	x14, [sp, #168]
	mov	x18, x1
	add	x14, x17, #128                  // =128
	str	x14, [sp, #136]
	ldr	x17, [x18, #88]
	add	x15, sp, #4                     // =4
	mov	w16, #8
	mov	w8, #15137
	mov	x9, #-6270
	mov	x10, #-1730
	mov	w11, #11893
	mov	x12, #-17799
	mov	w13, #8697
	mov	x14, #-4176
	stp	x15, x17, [sp, #152]
	mov	x15, #-4926
	str	w16, [sp, #132]
	mov	w16, #7373
	mov	w17, #20995
	b	.LBB270_3
.LBB270_1:                              // %if.end26
                                        //   in Loop: Header=BB270_3 Depth=1
	ldp	x0, x18, [sp, #160]
	ldp	x2, x1, [sp, #160]
	ldrsh	x3, [x18]
	ldrsw	x4, [x0]
	ldrsw	x5, [x0, #64]
	ldrsw	x6, [x0, #192]
	mul	x3, x3, x4
	ldrsh	x4, [x18, #32]
	lsl	x3, x3, #14
	mul	x4, x4, x5
	ldrsh	x5, [x18, #96]
	mul	x5, x5, x6
	stp	x5, x4, [sp, #184]
	mul	x5, x5, x9
	madd	x4, x4, x8, x5
	stp	x4, x3, [sp, #224]
	add	x5, x3, x4
	sub	x3, x3, x4
	stp	x3, x5, [sp, #208]
	ldrsh	x18, [x18, #112]
	ldrsw	x0, [x0, #224]
	ldp	x5, x4, [sp, #160]
	mul	x18, x18, x0
	ldrsh	x0, [x1, #80]
	ldrsw	x1, [x2, #160]
	ldp	x2, x3, [sp, #160]
	mov	x6, x18
	mul	x0, x0, x1
	stp	x0, x18, [sp, #192]
	ldrsh	x3, [x3, #48]
	ldrsw	x2, [x2, #96]
	mul	x1, x0, x11
	madd	x18, x18, x10, x1
	mul	x0, x0, x15
	mul	x1, x3, x2
	str	x1, [sp, #184]
	ldrsh	x3, [x4, #16]
	ldrsw	x4, [x5, #32]
	madd	x0, x6, x14, x0
	madd	x18, x1, x12, x18
	madd	x0, x1, x16, x0
	ldr	x1, [sp, #216]
	mul	x3, x3, x4
	ldr	x2, [sp, #152]
	madd	x18, x3, x13, x18
	madd	x0, x3, x17, x0
	stp	x0, x18, [sp, #224]
	add	x18, x1, x0
	add	x18, x18, #2048                 // =2048
	lsr	x18, x18, #12
	str	x3, [sp, #176]
	str	w18, [x2]
	ldr	x18, [sp, #216]
	ldr	x1, [sp, #152]
	sub	x18, x18, x0
	add	x18, x18, #2048                 // =2048
	lsr	x18, x18, #12
	str	w18, [x1, #96]
	ldr	x18, [sp, #208]
	ldr	x0, [sp, #232]
	ldr	x1, [sp, #152]
	add	x18, x18, x0
	add	x18, x18, #2048                 // =2048
	lsr	x18, x18, #12
	str	w18, [x1, #32]
	ldr	x18, [sp, #208]
	ldr	x0, [sp, #232]
	ldr	x1, [sp, #152]
	sub	x18, x18, x0
	add	x18, x18, #2048                 // =2048
	lsr	x18, x18, #12
	str	w18, [x1, #64]
.LBB270_2:                              // %for.inc
                                        //   in Loop: Header=BB270_3 Depth=1
	ldp	x0, x18, [sp, #160]
	ldr	x1, [sp, #152]
	ldr	w2, [sp, #132]
	add	x18, x18, #2                    // =2
	add	x0, x0, #4                      // =4
	add	x1, x1, #4                      // =4
	sub	w2, w2, #1                      // =1
	stp	x0, x18, [sp, #160]
	str	x1, [sp, #152]
	str	w2, [sp, #132]
.LBB270_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w18, [sp, #132]
	cmp	w18, #1                         // =1
	b.lt	.LBB270_7
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB270_3 Depth=1
	ldr	w18, [sp, #132]
	cmp	w18, #4                         // =4
	b.eq	.LBB270_2
// %bb.5:                               // %if.end
                                        //   in Loop: Header=BB270_3 Depth=1
	ldr	x18, [sp, #168]
	ldrh	w0, [x18, #16]
	ldrh	w1, [x18, #32]
	ldrsh	w2, [x18, #48]
	ldrsh	w3, [x18, #80]
	ldrsh	w4, [x18, #96]
	orr	w0, w0, w1
	sxth	w0, w0
	ldrsh	w18, [x18, #112]
	orr	w0, w0, w2
	orr	w0, w0, w3
	orr	w0, w0, w4
	orr	w18, w0, w18
	cbnz	w18, .LBB270_1
// %bb.6:                               // %if.then18
                                        //   in Loop: Header=BB270_3 Depth=1
	ldp	x0, x18, [sp, #160]
	ldr	x1, [sp, #152]
	ldrsh	w18, [x18]
	ldr	w0, [x0]
	mul	w18, w18, w0
	lsl	w18, w18, #2
	str	w18, [sp, #144]
	str	w18, [x1]
	ldr	x0, [sp, #152]
	mov	w18, w18
	str	w18, [x0, #32]
	ldr	w18, [sp, #144]
	ldr	x0, [sp, #152]
	str	w18, [x0, #64]
	ldr	w18, [sp, #144]
	ldr	x0, [sp, #152]
	str	w18, [x0, #96]
	b	.LBB270_2
.LBB270_7:                              // %for.end
	add	x17, sp, #4                     // =4
	mov	w8, #15137
	mov	x9, #-6270
	mov	x10, #-1730
	mov	w11, #11893
	mov	x12, #-17799
	mov	w13, #8697
	mov	x14, #-4176
	mov	x15, #-4926
	mov	w16, #7373
	str	x17, [sp, #152]
	mov	w17, #20995
	str	wzr, [sp, #132]
	b	.LBB270_10
.LBB270_8:                              // %if.end135
                                        //   in Loop: Header=BB270_10 Depth=1
	ldr	x18, [sp, #152]
	ldrsw	x1, [x18, #24]
	ldrsw	x0, [x18]
	ldpsw	x2, x3, [x18, #8]
	mul	x1, x1, x9
	lsl	x0, x0, #14
	madd	x1, x2, x8, x1
	stp	x1, x0, [sp, #224]
	add	x2, x0, x1
	sub	x0, x0, x1
	stp	x0, x2, [sp, #208]
	ldrsw	x0, [x18, #28]
	ldrsw	x1, [x18, #20]
	str	x3, [sp, #184]
	stp	x1, x0, [sp, #192]
	mul	x2, x1, x11
	mul	x1, x1, x15
	madd	x2, x0, x10, x2
	madd	x0, x0, x14, x1
	ldrsw	x18, [x18, #4]
	madd	x2, x3, x12, x2
	madd	x0, x3, x16, x0
	ldr	w3, [sp, #216]
	str	x18, [sp, #176]
	madd	x2, x18, x13, x2
	madd	x18, x18, x17, x0
	ldp	x1, x0, [sp, #136]
	stp	x18, x2, [sp, #224]
	add	w18, w3, w18
	add	w18, w18, #64, lsl #12          // =262144
	ubfx	x18, x18, #19, #10
	ldrb	w18, [x1, x18]
	strb	w18, [x0]
	ldr	w18, [sp, #216]
	ldr	w0, [sp, #224]
	ldp	x1, x2, [sp, #136]
	sub	w18, w18, w0
	add	w18, w18, #64, lsl #12          // =262144
	ubfx	x18, x18, #19, #10
	ldrb	w18, [x1, x18]
	strb	w18, [x2, #3]
	ldr	w18, [sp, #208]
	ldr	w0, [sp, #232]
	ldp	x1, x2, [sp, #136]
	add	w18, w18, w0
	add	w18, w18, #64, lsl #12          // =262144
	ubfx	x18, x18, #19, #10
	ldrb	w18, [x1, x18]
	strb	w18, [x2, #1]
	ldr	w18, [sp, #208]
	ldr	w0, [sp, #232]
	ldr	x1, [sp, #136]
	sub	w18, w18, w0
	add	w18, w18, #64, lsl #12          // =262144
	ubfx	x18, x18, #19, #10
	ldrb	w18, [x1, x18]
	ldr	x0, [sp, #144]
	strb	w18, [x0, #2]
.LBB270_9:                              // %for.inc203
                                        //   in Loop: Header=BB270_10 Depth=1
	ldr	x18, [sp, #152]
	add	x18, x18, #32                   // =32
	str	x18, [sp, #152]
	ldr	w18, [sp, #132]
	add	w18, w18, #1                    // =1
	str	w18, [sp, #132]
.LBB270_10:                             // %for.cond102
                                        // =>This Inner Loop Header: Depth=1
	ldr	w18, [sp, #132]
	cmp	w18, #3                         // =3
	b.gt	.LBB270_13
// %bb.11:                              // %for.body105
                                        //   in Loop: Header=BB270_10 Depth=1
	ldr	x18, [sp, #248]
	ldrsw	x0, [sp, #132]
	ldr	w1, [sp, #244]
	ldr	x18, [x18, x0, lsl #3]
	ldr	x0, [sp, #152]
	add	x18, x18, x1
	str	x18, [sp, #144]
	ldp	w18, w1, [x0, #4]
	ldr	w2, [x0, #12]
	orr	w18, w18, w1
	ldp	w1, w3, [x0, #20]
	ldr	w0, [x0, #28]
	orr	w18, w18, w2
	orr	w18, w18, w1
	orr	w18, w18, w3
	orr	w18, w18, w0
	cbnz	w18, .LBB270_8
// %bb.12:                              // %if.then121
                                        //   in Loop: Header=BB270_10 Depth=1
	ldr	x18, [sp, #152]
	ldr	x0, [sp, #136]
	ldr	w18, [x18]
	add	w18, w18, #16                   // =16
	ubfx	x18, x18, #5, #10
	ldrb	w18, [x0, x18]
	ldr	x0, [sp, #144]
	strb	w18, [sp]
	strb	w18, [x0]
	ldr	x0, [sp, #144]
	and	w18, w18, #0xff
	strb	w18, [x0, #1]
	ldrb	w18, [sp]
	ldr	x0, [sp, #144]
	strb	w18, [x0, #2]
	ldrb	w18, [sp]
	ldr	x0, [sp, #144]
	strb	w18, [x0, #3]
	b	.LBB270_9
.LBB270_13:                             // %for.end204
	ldr	x29, [sp, #272]                 // 8-byte Folded Reload
	add	sp, sp, #288                    // =288
	ret
.Lfunc_end270:
	.size	jpeg_idct_4x4, .Lfunc_end270-jpeg_idct_4x4
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_idct_2x2                   // -- Begin function jpeg_idct_2x2
	.p2align	2
	.type	jpeg_idct_2x2,@function
jpeg_idct_2x2:                          // @jpeg_idct_2x2
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #176                    // =176
	.cfi_def_cfa_offset 176
	stp	x1, x0, [sp, #160]
	stp	x3, x2, [sp, #144]
	str	w4, [sp, #140]
	ldr	x9, [x0, #408]
	add	x10, sp, #4                     // =4
	mov	w11, #8
	mov	x8, #-5906
	add	x9, x9, #128                    // =128
	str	x9, [sp, #72]
	ldr	x12, [x1, #88]
	mov	w9, #6967
	str	x10, [sp, #88]
	mov	x10, #-10426
	str	w11, [sp, #68]
	mov	w11, #29692
	stp	x12, x2, [sp, #96]
	b	.LBB271_3
.LBB271_1:                              // %if.end21
                                        //   in Loop: Header=BB271_3 Depth=1
	ldp	x13, x12, [sp, #96]
	ldp	x15, x14, [sp, #96]
	ldrsh	x16, [x12]
	ldrsw	x17, [x13]
	mul	x16, x16, x17
	str	x16, [sp, #112]
	lsl	x16, x16, #15
	str	x16, [sp, #120]
	ldrsh	x16, [x12, #112]
	ldrsw	x17, [x13, #224]
	mul	x16, x16, x17
	str	x16, [sp, #112]
	mul	x16, x16, x8
	str	x16, [sp, #128]
	ldrsh	x12, [x12, #80]
	ldrsw	x13, [x13, #160]
	mul	x12, x12, x13
	str	x12, [sp, #112]
	madd	x12, x12, x9, x16
	str	x12, [sp, #128]
	ldrsh	x13, [x14, #48]
	ldrsw	x14, [x15, #96]
	mul	x13, x13, x14
	ldp	x14, x15, [sp, #96]
	madd	x12, x13, x10, x12
	str	x13, [sp, #112]
	str	x12, [sp, #128]
	ldrsh	x13, [x15, #16]
	ldrsw	x14, [x14, #32]
	ldr	x15, [sp, #88]
	mul	x13, x13, x14
	ldr	x14, [sp, #120]
	madd	x12, x13, x11, x12
	str	x12, [sp, #128]
	str	x13, [sp, #112]
	add	x12, x14, x12
	add	x12, x12, #1, lsl #12           // =4096
	lsr	x12, x12, #13
	str	w12, [x15]
	ldp	x12, x13, [sp, #120]
	ldr	x14, [sp, #88]
	sub	x12, x12, x13
	add	x12, x12, #1, lsl #12           // =4096
	lsr	x12, x12, #13
	str	w12, [x14, #32]
.LBB271_2:                              // %for.inc
                                        //   in Loop: Header=BB271_3 Depth=1
	ldp	x13, x12, [sp, #96]
	ldr	x14, [sp, #88]
	ldr	w15, [sp, #68]
	add	x12, x12, #2                    // =2
	add	x13, x13, #4                    // =4
	add	x14, x14, #4                    // =4
	sub	w15, w15, #1                    // =1
	stp	x13, x12, [sp, #96]
	str	x14, [sp, #88]
	str	w15, [sp, #68]
.LBB271_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w12, [sp, #68]
	cmp	w12, #1                         // =1
	b.lt	.LBB271_9
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB271_3 Depth=1
	ldr	w12, [sp, #68]
	cmp	w12, #6                         // =6
	b.eq	.LBB271_2
// %bb.5:                               // %for.body
                                        //   in Loop: Header=BB271_3 Depth=1
	cmp	w12, #4                         // =4
	b.eq	.LBB271_2
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB271_3 Depth=1
	cmp	w12, #2                         // =2
	b.eq	.LBB271_2
// %bb.7:                               // %if.end
                                        //   in Loop: Header=BB271_3 Depth=1
	ldr	x12, [sp, #104]
	ldrh	w13, [x12, #16]
	ldrh	w14, [x12, #48]
	ldrsh	w15, [x12, #80]
	ldrsh	w12, [x12, #112]
	orr	w13, w13, w14
	sxth	w13, w13
	orr	w13, w13, w15
	orr	w12, w13, w12
	cbnz	w12, .LBB271_1
// %bb.8:                               // %if.then15
                                        //   in Loop: Header=BB271_3 Depth=1
	ldp	x13, x12, [sp, #96]
	ldr	x14, [sp, #88]
	ldrsh	w12, [x12]
	ldr	w13, [x13]
	mul	w12, w12, w13
	lsl	w12, w12, #2
	str	w12, [sp, #80]
	str	w12, [x14]
	ldr	x13, [sp, #88]
	mov	w12, w12
	str	w12, [x13, #32]
	b	.LBB271_2
.LBB271_9:                              // %for.end
	add	x11, sp, #4                     // =4
	mov	x8, #-5906
	mov	w9, #6967
	mov	x10, #-10426
	str	x11, [sp, #88]
	mov	w11, #29692
	str	wzr, [sp, #68]
	b	.LBB271_12
.LBB271_10:                             // %if.end92
                                        //   in Loop: Header=BB271_12 Depth=1
	ldr	x12, [sp, #88]
	ldrsw	x14, [x12, #20]
	ldrsw	x15, [x12, #28]
	ldrsw	x16, [x12, #12]
	ldpsw	x13, x12, [x12]
	mul	x14, x14, x9
	madd	x14, x15, x8, x14
	madd	x14, x16, x10, x14
	lsl	x13, x13, #15
	madd	x12, x12, x11, x14
	ldp	x15, x14, [sp, #72]
	stp	x13, x12, [sp, #120]
	add	w12, w13, w12
	add	w12, w12, #128, lsl #12         // =524288
	ubfx	x12, x12, #20, #10
	ldrb	w12, [x15, x12]
	strb	w12, [x14]
	and	x12, x13, #0xffffffff
	ldr	w13, [sp, #128]
	ldr	x14, [sp, #72]
	sub	w12, w12, w13
	add	w12, w12, #128, lsl #12         // =524288
	ubfx	x12, x12, #20, #10
	ldrb	w12, [x14, x12]
.LBB271_11:                             // %for.inc128
                                        //   in Loop: Header=BB271_12 Depth=1
	ldr	x13, [sp, #80]
	strb	w12, [x13, #1]
	ldr	x12, [sp, #88]
	add	x12, x12, #32                   // =32
	str	x12, [sp, #88]
	ldr	w12, [sp, #68]
	add	w12, w12, #1                    // =1
	str	w12, [sp, #68]
.LBB271_12:                             // %for.cond65
                                        // =>This Inner Loop Header: Depth=1
	ldr	w12, [sp, #68]
	cmp	w12, #1                         // =1
	b.gt	.LBB271_15
// %bb.13:                              // %for.body68
                                        //   in Loop: Header=BB271_12 Depth=1
	ldr	x12, [sp, #144]
	ldrsw	x13, [sp, #68]
	ldr	w14, [sp, #140]
	ldr	x12, [x12, x13, lsl #3]
	ldr	x13, [sp, #88]
	add	x12, x12, x14
	str	x12, [sp, #80]
	ldr	w12, [x13, #4]
	ldr	w14, [x13, #12]
	ldr	w15, [x13, #20]
	ldr	w13, [x13, #28]
	orr	w12, w12, w14
	orr	w12, w12, w15
	orr	w12, w12, w13
	cbnz	w12, .LBB271_10
// %bb.14:                              // %if.then80
                                        //   in Loop: Header=BB271_12 Depth=1
	ldr	x12, [sp, #88]
	ldr	x13, [sp, #72]
	ldr	w12, [x12]
	add	w12, w12, #16                   // =16
	ubfx	x12, x12, #5, #10
	ldrb	w12, [x13, x12]
	ldr	x13, [sp, #80]
	strb	w12, [sp]
	strb	w12, [x13]
	and	w12, w12, #0xff
	b	.LBB271_11
.LBB271_15:                             // %for.end129
	add	sp, sp, #176                    // =176
	ret
.Lfunc_end271:
	.size	jpeg_idct_2x2, .Lfunc_end271-jpeg_idct_2x2
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_idct_1x1                   // -- Begin function jpeg_idct_1x1
	.p2align	2
	.type	jpeg_idct_1x1,@function
jpeg_idct_1x1:                          // @jpeg_idct_1x1
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa_offset 64
	stp	x1, x0, [sp, #48]
	stp	x3, x2, [sp, #32]
	ldr	x8, [x0, #408]
	ldr	x9, [x1, #88]
	add	x8, x8, #128                    // =128
	stp	x8, x9, [sp, #8]
	ldrsh	w10, [x2]
	ldr	w9, [x9]
	mul	w9, w10, w9
	sxtw	x9, w9
	add	x9, x9, #4                      // =4
	asr	x9, x9, #3
	stp	w9, w4, [sp, #24]
	and	x9, x9, #0x3ff
	ldrb	w8, [x8, x9]
	ldr	x9, [x3]
	strb	w8, [x9, w4, uxtw]
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end272:
	.size	jpeg_idct_1x1, .Lfunc_end272-jpeg_idct_1x1
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_get_small                  // -- Begin function jpeg_get_small
	.p2align	2
	.type	jpeg_get_small,@function
jpeg_get_small:                         // @jpeg_get_small
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [sp]
	mov	x0, x1
	bl	malloc
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end273:
	.size	jpeg_get_small, .Lfunc_end273-jpeg_get_small
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_free_small                 // -- Begin function jpeg_free_small
	.p2align	2
	.type	jpeg_free_small,@function
jpeg_free_small:                        // @jpeg_free_small
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	mov	x0, x1
	stp	x2, x1, [sp, #8]
	bl	free
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end274:
	.size	jpeg_free_small, .Lfunc_end274-jpeg_free_small
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_get_large                  // -- Begin function jpeg_get_large
	.p2align	2
	.type	jpeg_get_large,@function
jpeg_get_large:                         // @jpeg_get_large
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [sp]
	mov	x0, x1
	bl	malloc
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end275:
	.size	jpeg_get_large, .Lfunc_end275-jpeg_get_large
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_free_large                 // -- Begin function jpeg_free_large
	.p2align	2
	.type	jpeg_free_large,@function
jpeg_free_large:                        // @jpeg_free_large
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	mov	x0, x1
	stp	x2, x1, [sp, #8]
	bl	free
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end276:
	.size	jpeg_free_large, .Lfunc_end276-jpeg_free_large
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_mem_available              // -- Begin function jpeg_mem_available
	.p2align	2
	.type	jpeg_mem_available,@function
jpeg_mem_available:                     // @jpeg_mem_available
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
	stp	x1, x0, [sp, #16]
	stp	x3, x2, [sp]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #88]
	sub	x0, x8, x3
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end277:
	.size	jpeg_mem_available, .Lfunc_end277-jpeg_mem_available
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_open_backing_store         // -- Begin function jpeg_open_backing_store
	.p2align	2
	.type	jpeg_open_backing_store,@function
jpeg_open_backing_store:                // @jpeg_open_backing_store
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	x2, x1, [sp, #8]
	bl	tmpfile
	ldr	x8, [sp, #16]
	str	x0, [x8, #24]
	cbnz	x0, .LBB278_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #62
	adrp	x1, .L.str.223
	add	x1, x1, :lo12:.L.str.223
	ldr	x8, [x8]
	mov	w2, #80
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	add	x0, x8, #44                     // =44
	bl	strncpy
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB278_2:                              // %if.end
	ldr	x8, [sp, #16]
	adrp	x9, read_backing_store
	add	x9, x9, :lo12:read_backing_store
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	x9, [x8]
	ldr	x8, [sp, #16]
	adrp	x9, write_backing_store
	add	x9, x9, :lo12:write_backing_store
	str	x9, [x8, #8]
	ldr	x8, [sp, #16]
	adrp	x9, close_backing_store
	add	x9, x9, :lo12:close_backing_store
	str	x9, [x8, #16]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end278:
	.size	jpeg_open_backing_store, .Lfunc_end278-jpeg_open_backing_store
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_backing_store
	.type	read_backing_store,@function
read_backing_store:                     // @read_backing_store
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [sp, #16]
	str	x4, [sp, #8]
	ldr	x0, [x1, #24]
	mov	x1, x3
	mov	w2, wzr
	bl	fseek
	cbz	w0, .LBB279_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #64
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB279_2:                              // %if.end
	ldur	x8, [x29, #-16]
	ldr	x0, [sp, #24]
	ldr	x2, [sp, #8]
	mov	w1, #1
	ldr	x3, [x8, #24]
	bl	fread
	ldr	x8, [sp, #8]
	cmp	x0, x8
	b.eq	.LBB279_4
// %bb.3:                               // %if.then4
	ldur	x8, [x29, #-8]
	mov	w9, #63
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB279_4:                              // %if.end9
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end279:
	.size	read_backing_store, .Lfunc_end279-read_backing_store
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function write_backing_store
	.type	write_backing_store,@function
write_backing_store:                    // @write_backing_store
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stp	x3, x2, [sp, #16]
	str	x4, [sp, #8]
	ldr	x0, [x1, #24]
	mov	x1, x3
	mov	w2, wzr
	bl	fseek
	cbz	w0, .LBB280_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #64
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB280_2:                              // %if.end
	ldur	x8, [x29, #-16]
	ldr	x0, [sp, #24]
	ldr	x2, [sp, #8]
	mov	w1, #1
	ldr	x3, [x8, #24]
	bl	fwrite
	ldr	x8, [sp, #8]
	cmp	x0, x8
	b.eq	.LBB280_4
// %bb.3:                               // %if.then4
	ldur	x8, [x29, #-8]
	mov	w9, #65
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB280_4:                              // %if.end9
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end280:
	.size	write_backing_store, .Lfunc_end280-write_backing_store
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function close_backing_store
	.type	close_backing_store,@function
close_backing_store:                    // @close_backing_store
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [sp]
	ldr	x0, [x1, #24]
	bl	fclose
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end281:
	.size	close_backing_store, .Lfunc_end281-close_backing_store
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_mem_init                   // -- Begin function jpeg_mem_init
	.p2align	2
	.type	jpeg_mem_init,@function
jpeg_mem_init:                          // @jpeg_mem_init
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	mov	x8, x0
	mov	w0, #16960
	movk	w0, #15, lsl #16
	str	x8, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end282:
	.size	jpeg_mem_init, .Lfunc_end282-jpeg_mem_init
	.cfi_endproc
                                        // -- End function
	.globl	jpeg_mem_term                   // -- Begin function jpeg_mem_term
	.p2align	2
	.type	jpeg_mem_term,@function
jpeg_mem_term:                          // @jpeg_mem_term
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end283:
	.size	jpeg_mem_term, .Lfunc_end283-jpeg_mem_term
	.cfi_endproc
                                        // -- End function
	.globl	jinit_memory_mgr                // -- Begin function jinit_memory_mgr
	.p2align	2
	.type	jinit_memory_mgr,@function
jinit_memory_mgr:                       // @jinit_memory_mgr
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, #51712
	movk	w8, #15258, lsl #16
	cmp	x8, x8
	stur	x0, [x29, #-8]
	str	xzr, [x0, #8]
	str	x8, [sp, #24]
	b.eq	.LBB284_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #3
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB284_2:                              // %if.end
	ldur	x0, [x29, #-8]
	bl	jpeg_mem_init
	ldur	x8, [x29, #-8]
	stur	x0, [x29, #-24]
	mov	w1, #160
	mov	x0, x8
	bl	jpeg_get_small
	stur	x0, [x29, #-16]
	cbnz	x0, .LBB284_4
// %bb.3:                               // %if.then6
	ldur	x0, [x29, #-8]
	bl	jpeg_mem_term
	ldur	x8, [x29, #-8]
	mov	w9, #53
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	wzr, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB284_4:                              // %if.end13
	ldur	x8, [x29, #-16]
	adrp	x9, alloc_small
	add	x9, x9, :lo12:alloc_small
	str	x9, [x8]
	ldur	x8, [x29, #-16]
	adrp	x9, alloc_large
	add	x9, x9, :lo12:alloc_large
	str	x9, [x8, #8]
	ldur	x8, [x29, #-16]
	adrp	x9, alloc_sarray
	add	x9, x9, :lo12:alloc_sarray
	str	x9, [x8, #16]
	ldur	x8, [x29, #-16]
	adrp	x9, alloc_barray
	add	x9, x9, :lo12:alloc_barray
	str	x9, [x8, #24]
	ldur	x8, [x29, #-16]
	adrp	x9, request_virt_sarray
	add	x9, x9, :lo12:request_virt_sarray
	str	x9, [x8, #32]
	ldur	x8, [x29, #-16]
	adrp	x9, request_virt_barray
	add	x9, x9, :lo12:request_virt_barray
	str	x9, [x8, #40]
	ldur	x8, [x29, #-16]
	adrp	x9, realize_virt_arrays
	add	x9, x9, :lo12:realize_virt_arrays
	str	x9, [x8, #48]
	ldur	x8, [x29, #-16]
	adrp	x9, access_virt_sarray
	add	x9, x9, :lo12:access_virt_sarray
	str	x9, [x8, #56]
	ldur	x8, [x29, #-16]
	adrp	x9, access_virt_barray
	add	x9, x9, :lo12:access_virt_barray
	str	x9, [x8, #64]
	ldur	x8, [x29, #-16]
	adrp	x9, free_pool
	add	x9, x9, :lo12:free_pool
	str	x9, [x8, #72]
	ldur	x8, [x29, #-16]
	adrp	x9, self_destruct
	add	x9, x9, :lo12:self_destruct
	str	x9, [x8, #80]
	ldp	x8, x9, [x29, #-24]
	str	x8, [x9, #88]
	mov	w8, #1
	stur	w8, [x29, #-28]
	mov	w9, w8
	ldur	x8, [x29, #-16]
	tbnz	w9, #31, .LBB284_6
.LBB284_5:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #96]
	ldur	x8, [x29, #-16]
	ldursw	x9, [x29, #-28]
	add	x8, x8, x9, lsl #3
	str	xzr, [x8, #112]
	ldur	w8, [x29, #-28]
	sub	w8, w8, #1                      // =1
	stur	w8, [x29, #-28]
	mov	w9, w8
	ldur	x8, [x29, #-16]
	tbz	w9, #31, .LBB284_5
.LBB284_6:                              // %for.end
	str	xzr, [x8, #128]
	ldur	x8, [x29, #-16]
	mov	w9, #160
	adrp	x0, .L.str.226
	add	x0, x0, :lo12:.L.str.226
	str	xzr, [x8, #136]
	ldur	x8, [x29, #-16]
	str	x9, [x8, #144]
	ldp	x8, x9, [x29, #-16]
	str	x8, [x9, #8]
	bl	getenv
	str	x0, [sp, #16]
	cbz	x0, .LBB284_12
// %bb.7:                               // %if.then35
	ldr	x0, [sp, #16]
	adrp	x1, .L.str.1.227
	mov	w8, #120
	add	x1, x1, :lo12:.L.str.1.227
	sub	x2, x29, #24                    // =24
	add	x3, sp, #12                     // =12
	strb	w8, [sp, #12]
	bl	__isoc99_sscanf
	cmp	w0, #1                          // =1
	b.lt	.LBB284_12
// %bb.8:                               // %if.then38
	ldrb	w8, [sp, #12]
	cmp	w8, #109                        // =109
	b.eq	.LBB284_10
// %bb.9:                               // %lor.lhs.false
	ldrb	w8, [sp, #12]
	cmp	w8, #77                         // =77
	b.ne	.LBB284_11
.LBB284_10:                             // %if.then44
	ldur	x8, [x29, #-24]
	mov	w9, #1000
	mul	x8, x8, x9
	stur	x8, [x29, #-24]
.LBB284_11:                             // %if.end45
	ldp	x8, x9, [x29, #-24]
	mov	w10, #1000
	mul	x8, x8, x10
	str	x8, [x9, #88]
.LBB284_12:                             // %if.end50
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end284:
	.size	jinit_memory_mgr, .Lfunc_end284-jinit_memory_mgr
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function alloc_small
	.type	alloc_small,@function
alloc_small:                            // @alloc_small
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x19, [sp, #96]                  // 8-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stur	w1, [x29, #-4]
	ldr	x8, [x0, #8]
	mov	w19, #51712
	movk	w19, #15258, lsl #16
	sub	x9, x19, #24                    // =24
	cmp	x2, x9
	stp	x8, x2, [x29, #-24]
	b.hi	.LBB285_3
// %bb.1:                               // %if.end
	ldur	x8, [x29, #-16]
	ands	x8, x8, #0x7
	str	x8, [sp, #24]
	b.ne	.LBB285_4
.LBB285_2:                              // %if.end4
	ldur	w8, [x29, #-4]
	tbz	w8, #31, .LBB285_5
	b	.LBB285_6
.LBB285_3:                              // %if.then
	ldr	x0, [x29, #24]
	mov	w1, #1
	bl	out_of_memory
	ldur	x8, [x29, #-16]
	ands	x8, x8, #0x7
	str	x8, [sp, #24]
	b.eq	.LBB285_2
.LBB285_4:                              // %if.then3
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-16]
	sub	x8, x9, x8
	add	x8, x8, #8                      // =8
	stur	x8, [x29, #-16]
	ldur	w8, [x29, #-4]
	tbnz	w8, #31, .LBB285_6
.LBB285_5:                              // %if.end4
	cmp	w8, #2                          // =2
	b.lt	.LBB285_7
.LBB285_6:                              // %if.then7
	ldr	x8, [x29, #24]
	mov	w9, #12
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-4]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB285_7:                              // %if.end11
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-4]
	str	xzr, [sp, #40]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #96]
	stur	x8, [x29, #-32]
	cbz	x8, .LBB285_10
.LBB285_8:                              // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-16]
	ldr	x8, [x8, #16]
	cmp	x8, x9
	b.hs	.LBB285_10
// %bb.9:                               // %if.end16
                                        //   in Loop: Header=BB285_8 Depth=1
	ldur	x8, [x29, #-32]
	str	x8, [sp, #40]
	ldr	x8, [x8]
	stur	x8, [x29, #-32]
	cbnz	x8, .LBB285_8
.LBB285_10:                             // %while.end
	ldur	x8, [x29, #-32]
	cbnz	x8, .LBB285_20
// %bb.11:                              // %if.then19
	ldur	x9, [x29, #-16]
	ldr	x10, [sp, #40]
	ldursw	x8, [x29, #-4]
	add	x9, x9, #24                     // =24
	str	x9, [sp, #16]
	cbz	x10, .LBB285_13
// %bb.12:                              // %if.else
	adrp	x9, extra_pool_slop
	add	x9, x9, :lo12:extra_pool_slop
	b	.LBB285_14
.LBB285_13:                             // %if.then22
	adrp	x9, first_pool_slop
	add	x9, x9, :lo12:first_pool_slop
.LBB285_14:                             // %if.end27
	ldr	x8, [x9, x8, lsl #3]
	str	x8, [sp, #8]
	ldp	x9, x8, [sp, #8]
	sub	x8, x19, x8
	cmp	x9, x8
	b.ls	.LBB285_18
// %bb.15:                              // %if.then30
	ldr	x8, [sp, #16]
	sub	x8, x19, x8
	str	x8, [sp, #8]
	b	.LBB285_18
.LBB285_16:                             // %if.end36
                                        //   in Loop: Header=BB285_18 Depth=1
	ldr	x8, [sp, #8]
	lsr	x8, x8, #1
	cmp	x8, #49                         // =49
	str	x8, [sp, #8]
	b.hi	.LBB285_18
// %bb.17:                              // %if.then38
                                        //   in Loop: Header=BB285_18 Depth=1
	ldr	x0, [x29, #24]
	mov	w1, #2
	bl	out_of_memory
.LBB285_18:                             // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldp	x9, x8, [sp, #8]
	ldr	x0, [x29, #24]
	add	x1, x8, x9
	bl	jpeg_get_small
	stur	x0, [x29, #-32]
	cbz	x0, .LBB285_16
// %bb.19:                              // %for.end
	ldur	x8, [x29, #-24]
	ldp	x10, x9, [sp, #8]
	ldr	x11, [x8, #144]
	add	x9, x9, x10
	add	x9, x11, x9
	str	x9, [x8, #144]
	ldur	x8, [x29, #-32]
	str	xzr, [x8]
	ldur	x8, [x29, #-32]
	str	xzr, [x8, #8]
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #8]
	ldur	x10, [x29, #-32]
	add	x8, x8, x9
	str	x8, [x10, #16]
	ldp	x11, x8, [x29, #-32]
	ldursw	x9, [x29, #-4]
	ldr	x10, [sp, #40]
	add	x8, x8, x9, lsl #3
	add	x8, x8, #96                     // =96
	cmp	x10, #0                         // =0
	csel	x8, x8, x10, eq
	str	x11, [x8]
.LBB285_20:                             // %if.end57
	ldur	x8, [x29, #-32]
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	add	x9, x8, #24                     // =24
	str	x9, [sp, #32]
	ldr	x10, [x8, #8]
	add	x9, x9, x10
	str	x9, [sp, #32]
	ldur	x9, [x29, #-16]
	ldr	x10, [x8, #8]
	add	x9, x10, x9
	str	x9, [x8, #8]
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-16]
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	ldr	x10, [x8, #16]
	sub	x9, x10, x9
	str	x9, [x8, #16]
	ldr	x0, [sp, #32]
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end285:
	.size	alloc_small, .Lfunc_end285-alloc_small
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function alloc_large
	.type	alloc_large,@function
alloc_large:                            // @alloc_large
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #8]
	mov	w9, #51689
	movk	w9, #15258, lsl #16
	cmp	x2, x9
	stp	x8, x2, [sp, #16]
	b.hs	.LBB286_3
// %bb.1:                               // %if.end
	ldr	x8, [sp, #24]
	ands	x8, x8, #0x7
	str	x8, [sp]
	b.ne	.LBB286_4
.LBB286_2:                              // %if.end4
	ldur	w8, [x29, #-12]
	tbz	w8, #31, .LBB286_5
	b	.LBB286_6
.LBB286_3:                              // %if.then
	ldur	x0, [x29, #-8]
	mov	w1, #3
	bl	out_of_memory
	ldr	x8, [sp, #24]
	ands	x8, x8, #0x7
	str	x8, [sp]
	b.eq	.LBB286_2
.LBB286_4:                              // %if.then3
	ldr	x8, [sp]
	ldr	x9, [sp, #24]
	sub	x8, x9, x8
	add	x8, x8, #8                      // =8
	str	x8, [sp, #24]
	ldur	w8, [x29, #-12]
	tbnz	w8, #31, .LBB286_6
.LBB286_5:                              // %if.end4
	cmp	w8, #2                          // =2
	b.lt	.LBB286_7
.LBB286_6:                              // %if.then7
	ldur	x8, [x29, #-8]
	mov	w9, #12
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB286_7:                              // %if.end11
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	add	x1, x8, #24                     // =24
	bl	jpeg_get_large
	str	x0, [sp, #8]
	cbnz	x0, .LBB286_9
// %bb.8:                               // %if.then14
	ldur	x0, [x29, #-8]
	mov	w1, #4
	bl	out_of_memory
.LBB286_9:                              // %if.end15
	ldp	x8, x9, [sp, #16]
	ldr	x10, [x8, #144]
	add	x9, x9, x10
	add	x9, x9, #24                     // =24
	str	x9, [x8, #144]
	ldp	x10, x8, [sp, #8]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #112]
	str	x8, [x10]
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #8]
	str	x8, [x9, #8]
	ldr	x8, [sp, #8]
	str	xzr, [x8, #16]
	ldp	x10, x8, [sp, #8]
	ldursw	x9, [x29, #-12]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	x8, x8, x9, lsl #3
	str	x10, [x8, #112]
	ldr	x8, [sp, #8]
	add	x0, x8, #24                     // =24
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end286:
	.size	alloc_large, .Lfunc_end286-alloc_large
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function alloc_sarray
	.type	alloc_sarray,@function
alloc_sarray:                           // @alloc_sarray
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	w2, w1, [x29, #-16]
	stur	w3, [x29, #-20]
	ldr	x9, [x0, #8]
	mov	w10, #51688
	mov	w8, w2
	movk	w10, #15258, lsl #16
	udiv	x8, x10, x8
	cmp	x8, #0                          // =0
	stur	x9, [x29, #-32]
	str	x8, [sp, #8]
	b.gt	.LBB287_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #69
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB287_2:                              // %if.end
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-20]
	cmp	x8, x9
	b.ge	.LBB287_4
// %bb.3:                               // %if.then8
	ldr	x8, [sp, #8]
	str	w8, [sp, #28]
	b	.LBB287_5
.LBB287_4:                              // %if.else
	ldur	w8, [x29, #-20]
	str	w8, [sp, #28]
.LBB287_5:                              // %if.end10
	ldr	w8, [sp, #28]
	ldur	x9, [x29, #-32]
	str	w8, [x9, #152]
	ldur	w8, [x29, #-20]
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	lsl	x2, x8, #3
	bl	alloc_small
	str	x0, [sp, #40]
	str	wzr, [sp, #24]
.LBB287_6:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB287_8 Depth 2
	ldr	w8, [sp, #24]
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.hs	.LBB287_9
// %bb.7:                               // %while.body
                                        //   in Loop: Header=BB287_6 Depth=1
	ldp	w10, w8, [sp, #24]
	ldp	w9, w11, [x29, #-20]
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	sub	w9, w9, w10
	cmp	w8, w9
	csel	w8, w8, w9, lo
	mul	x2, x8, x11
	str	w8, [sp, #28]
	bl	alloc_large
	ldr	w8, [sp, #28]
	str	x0, [sp, #32]
	str	w8, [sp, #20]
	mov	w8, w8
	cbz	w8, .LBB287_6
.LBB287_8:                              // %for.body
                                        //   Parent Loop BB287_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #24]
	ldp	x9, x10, [sp, #32]
	add	w11, w8, #1                     // =1
	str	x9, [x10, x8, lsl #3]
	ldur	w8, [x29, #-16]
	ldr	x9, [sp, #32]
	ldr	w10, [sp, #20]
	add	x8, x9, x8
	sub	w9, w10, #1                     // =1
	str	x8, [sp, #32]
	stp	w9, w11, [sp, #20]
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB287_8
	b	.LBB287_6
.LBB287_9:                              // %while.end
	ldr	x0, [sp, #40]
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end287:
	.size	alloc_sarray, .Lfunc_end287-alloc_sarray
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function alloc_barray
	.type	alloc_barray,@function
alloc_barray:                           // @alloc_barray
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	w2, w1, [x29, #-16]
	stur	w3, [x29, #-20]
	mov	w8, w2
	mov	w9, #51688
	ldr	x10, [x0, #8]
	movk	w9, #15258, lsl #16
	lsl	x8, x8, #7
	udiv	x8, x9, x8
	cmp	x8, #0                          // =0
	stur	x10, [x29, #-32]
	str	x8, [sp, #8]
	b.gt	.LBB288_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #69
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB288_2:                              // %if.end
	ldr	x8, [sp, #8]
	ldur	w9, [x29, #-20]
	cmp	x8, x9
	b.ge	.LBB288_4
// %bb.3:                               // %if.then8
	ldr	x8, [sp, #8]
	str	w8, [sp, #28]
	b	.LBB288_5
.LBB288_4:                              // %if.else
	ldur	w8, [x29, #-20]
	str	w8, [sp, #28]
.LBB288_5:                              // %if.end10
	ldr	w8, [sp, #28]
	ldur	x9, [x29, #-32]
	str	w8, [x9, #152]
	ldur	w8, [x29, #-20]
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	lsl	x2, x8, #3
	bl	alloc_small
	str	x0, [sp, #40]
	str	wzr, [sp, #24]
.LBB288_6:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB288_8 Depth 2
	ldr	w8, [sp, #24]
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.hs	.LBB288_9
// %bb.7:                               // %while.body
                                        //   in Loop: Header=BB288_6 Depth=1
	ldp	w10, w8, [sp, #24]
	ldp	w9, w11, [x29, #-20]
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	sub	w9, w9, w10
	cmp	w8, w9
	csel	w8, w8, w9, lo
	str	w8, [sp, #28]
	mul	x8, x8, x11
	lsl	x2, x8, #7
	bl	alloc_large
	ldr	w8, [sp, #28]
	str	x0, [sp, #32]
	str	w8, [sp, #20]
	mov	w8, w8
	cbz	w8, .LBB288_6
.LBB288_8:                              // %for.body
                                        //   Parent Loop BB288_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #24]
	ldp	x9, x10, [sp, #32]
	add	w11, w8, #1                     // =1
	str	x9, [x10, x8, lsl #3]
	ldur	w8, [x29, #-16]
	ldr	x9, [sp, #32]
	ldr	w10, [sp, #20]
	add	x8, x9, x8, lsl #7
	sub	w9, w10, #1                     // =1
	str	x8, [sp, #32]
	stp	w9, w11, [sp, #20]
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB288_8
	b	.LBB288_6
.LBB288_9:                              // %while.end
	ldr	x0, [sp, #40]
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end288:
	.size	alloc_barray, .Lfunc_end288-alloc_barray
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function request_virt_sarray
	.type	request_virt_sarray,@function
request_virt_sarray:                    // @request_virt_sarray
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	w2, w1, [x29, #-16]
	stur	w3, [x29, #-20]
	stp	w5, w4, [sp, #20]
	ldr	x8, [x0, #8]
	cmp	w1, #1                          // =1
	str	x8, [sp, #8]
	b.eq	.LBB289_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #12
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB289_2:                              // %if.end
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	mov	w2, #152
	bl	alloc_small
	str	x0, [sp]
	str	xzr, [x0]
	ldr	w8, [sp, #24]
	mov	x9, x0
	str	w8, [x9, #8]
	ldur	w8, [x29, #-20]
	mov	x9, x0
	str	w8, [x9, #12]
	ldr	w8, [sp, #20]
	mov	x9, x0
	str	w8, [x9, #16]
	ldur	w8, [x29, #-16]
	mov	x9, x0
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	w8, [x9, #36]
	mov	x8, x0
	str	wzr, [x8, #44]
	ldr	x8, [sp, #8]
	mov	x9, x0
	ldr	x8, [x8, #128]
	str	x8, [x9, #48]
	mov	x8, x0
	ldp	x0, x9, [sp]
	str	x8, [x9, #128]
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end289:
	.size	request_virt_sarray, .Lfunc_end289-request_virt_sarray
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function request_virt_barray
	.type	request_virt_barray,@function
request_virt_barray:                    // @request_virt_barray
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	w2, w1, [x29, #-16]
	stur	w3, [x29, #-20]
	stp	w5, w4, [sp, #20]
	ldr	x8, [x0, #8]
	cmp	w1, #1                          // =1
	str	x8, [sp, #8]
	b.eq	.LBB290_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #12
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB290_2:                              // %if.end
	ldur	x0, [x29, #-8]
	ldur	w1, [x29, #-12]
	mov	w2, #152
	bl	alloc_small
	str	x0, [sp]
	str	xzr, [x0]
	ldr	w8, [sp, #24]
	mov	x9, x0
	str	w8, [x9, #8]
	ldur	w8, [x29, #-20]
	mov	x9, x0
	str	w8, [x9, #12]
	ldr	w8, [sp, #20]
	mov	x9, x0
	str	w8, [x9, #16]
	ldur	w8, [x29, #-16]
	mov	x9, x0
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	w8, [x9, #36]
	mov	x8, x0
	str	wzr, [x8, #44]
	ldr	x8, [sp, #8]
	mov	x9, x0
	ldr	x8, [x8, #136]
	str	x8, [x9, #48]
	mov	x8, x0
	ldp	x0, x9, [sp]
	str	x8, [x9, #136]
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end290:
	.size	request_virt_barray, .Lfunc_end290-request_virt_barray
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function realize_virt_arrays
	.type	realize_virt_arrays,@function
realize_virt_arrays:                    // @realize_virt_arrays
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	str	x19, [sp, #96]                  // 8-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #8]
	stur	xzr, [x29, #-24]
	stp	xzr, x8, [x29, #-16]
	ldr	x8, [x8, #128]
	b	.LBB291_2
.LBB291_1:                              // %for.inc
                                        //   in Loop: Header=BB291_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #48]
.LBB291_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	str	x8, [sp, #24]
	cbz	x8, .LBB291_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB291_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x8, [x8]
	cbnz	x8, .LBB291_1
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB291_2 Depth=1
	ldr	x8, [sp, #24]
	ldur	x9, [x29, #-16]
	ldp	w11, w10, [x8, #12]
	madd	x12, x10, x11, x9
	ldp	w9, w8, [x8, #8]
	ldur	x10, [x29, #-24]
	madd	x8, x9, x8, x10
	stp	x8, x12, [x29, #-24]
	b	.LBB291_1
.LBB291_5:                              // %for.end
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #136]
	b	.LBB291_7
.LBB291_6:                              // %for.inc33
                                        //   in Loop: Header=BB291_7 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #48]
.LBB291_7:                              // %for.cond11
                                        // =>This Inner Loop Header: Depth=1
	str	x8, [sp, #16]
	cbz	x8, .LBB291_10
// %bb.8:                               // %for.body14
                                        //   in Loop: Header=BB291_7 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8]
	cbnz	x8, .LBB291_6
// %bb.9:                               // %if.then18
                                        //   in Loop: Header=BB291_7 Depth=1
	ldr	x8, [sp, #16]
	ldur	x11, [x29, #-16]
	ldp	w10, w9, [x8, #12]
	mul	x9, x9, x10
	add	x12, x11, x9, lsl #7
	ldp	w9, w8, [x8, #8]
	ldur	x10, [x29, #-24]
	mul	x8, x9, x8
	add	x8, x10, x8, lsl #7
	stp	x8, x12, [x29, #-24]
	b	.LBB291_6
.LBB291_10:                             // %for.end35
	ldur	x8, [x29, #-16]
	cmp	x8, #0                          // =0
	b.gt	.LBB291_12
// %bb.11:                              // %if.then38
	mov	w8, #1
	str	w8, [sp, #12]
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.LBB291_12:                             // %if.end39
	ldp	x1, x8, [x29, #-16]
	ldr	x0, [x29, #24]
	ldur	x2, [x29, #-24]
	ldr	x3, [x8, #144]
	bl	jpeg_mem_available
	ldur	x8, [x29, #-24]
	stur	x0, [x29, #-32]
	cmp	x0, x8
	b.lt	.LBB291_14
// %bb.13:                              // %if.then42
	mov	w8, #51712
	movk	w8, #15258, lsl #16
	b	.LBB291_15
.LBB291_14:                             // %if.else
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-16]
	sdiv	x8, x8, x9
	cmp	x8, #1                          // =1
	csinc	x8, x8, xzr, ge
.LBB291_15:                             // %if.end47
	str	x8, [sp, #32]
	ldur	x8, [x29, #-8]
	mov	w19, #1
	ldr	x8, [x8, #128]
	str	x8, [sp, #24]
	b	.LBB291_19
.LBB291_16:                             // %if.else67
                                        //   in Loop: Header=BB291_19 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #32]
	ldr	w10, [x8, #16]
	mul	w9, w9, w10
	str	w9, [x8, #20]
	ldr	x8, [sp, #24]
	ldr	x0, [x29, #24]
	ldp	w9, w10, [x8, #8]
	add	x1, x8, #56                     // =56
	mul	x2, x9, x10
	bl	jpeg_open_backing_store
	ldr	x8, [sp, #24]
	str	w19, [x8, #44]
.LBB291_17:                             // %if.end79
                                        //   in Loop: Header=BB291_19 Depth=1
	ldr	x8, [sp, #24]
	ldr	x0, [x29, #24]
	mov	w1, #1
	ldr	w2, [x8, #12]
	ldr	w3, [x8, #20]
	bl	alloc_sarray
	ldr	x8, [sp, #24]
	str	x0, [x8]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	ldr	w8, [x8, #152]
	str	w8, [x9, #24]
	ldr	x8, [sp, #24]
	str	wzr, [x8, #28]
	ldr	x8, [sp, #24]
	str	wzr, [x8, #32]
	ldr	x8, [sp, #24]
	str	wzr, [x8, #40]
.LBB291_18:                             // %for.inc85
                                        //   in Loop: Header=BB291_19 Depth=1
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #48]
	str	x8, [sp, #24]
.LBB291_19:                             // %for.cond49
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #24]
	cbz	x8, .LBB291_23
// %bb.20:                              // %for.body52
                                        //   in Loop: Header=BB291_19 Depth=1
	ldr	x8, [sp, #24]
	ldr	x8, [x8]
	cbnz	x8, .LBB291_18
// %bb.21:                              // %if.then56
                                        //   in Loop: Header=BB291_19 Depth=1
	ldp	x8, x10, [sp, #24]
	ldr	w9, [x8, #8]
	ldr	w8, [x8, #16]
	sub	x9, x9, #1                      // =1
	sdiv	x8, x9, x8
	add	x8, x8, #1                      // =1
	cmp	x8, x10
	str	x8, [sp, #40]
	b.gt	.LBB291_16
// %bb.22:                              // %if.then65
                                        //   in Loop: Header=BB291_19 Depth=1
	ldr	x8, [sp, #24]
	ldr	w9, [x8, #8]
	str	w9, [x8, #20]
	b	.LBB291_17
.LBB291_23:                             // %for.end87
	ldur	x8, [x29, #-8]
	mov	w19, #1
	ldr	x8, [x8, #136]
	str	x8, [sp, #16]
	b	.LBB291_27
.LBB291_24:                             // %if.else109
                                        //   in Loop: Header=BB291_27 Depth=1
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #32]
	ldr	w10, [x8, #16]
	mul	w9, w9, w10
	str	w9, [x8, #20]
	ldr	x8, [sp, #16]
	ldr	x0, [x29, #24]
	ldp	w9, w10, [x8, #8]
	add	x1, x8, #56                     // =56
	mul	x8, x9, x10
	lsl	x2, x8, #7
	bl	jpeg_open_backing_store
	ldr	x8, [sp, #16]
	str	w19, [x8, #44]
.LBB291_25:                             // %if.end123
                                        //   in Loop: Header=BB291_27 Depth=1
	ldr	x8, [sp, #16]
	ldr	x0, [x29, #24]
	mov	w1, #1
	ldr	w2, [x8, #12]
	ldr	w3, [x8, #20]
	bl	alloc_barray
	ldr	x8, [sp, #16]
	str	x0, [x8]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #152]
	str	w8, [x9, #24]
	ldr	x8, [sp, #16]
	str	wzr, [x8, #28]
	ldr	x8, [sp, #16]
	str	wzr, [x8, #32]
	ldr	x8, [sp, #16]
	str	wzr, [x8, #40]
.LBB291_26:                             // %for.inc134
                                        //   in Loop: Header=BB291_27 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8, #48]
	str	x8, [sp, #16]
.LBB291_27:                             // %for.cond89
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	cbz	x8, .LBB291_31
// %bb.28:                              // %for.body92
                                        //   in Loop: Header=BB291_27 Depth=1
	ldr	x8, [sp, #16]
	ldr	x8, [x8]
	cbnz	x8, .LBB291_26
// %bb.29:                              // %if.then96
                                        //   in Loop: Header=BB291_27 Depth=1
	ldr	x8, [sp, #16]
	ldr	x10, [sp, #32]
	ldr	w9, [x8, #8]
	ldr	w8, [x8, #16]
	sub	x9, x9, #1                      // =1
	sdiv	x8, x9, x8
	add	x8, x8, #1                      // =1
	cmp	x8, x10
	str	x8, [sp, #40]
	b.gt	.LBB291_24
// %bb.30:                              // %if.then106
                                        //   in Loop: Header=BB291_27 Depth=1
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #8]
	str	w9, [x8, #20]
	b	.LBB291_25
.LBB291_31:                             // %for.end136
	str	wzr, [sp, #12]
	ldr	x19, [sp, #96]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end291:
	.size	realize_virt_arrays, .Lfunc_end291-realize_virt_arrays
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function access_virt_sarray
	.type	access_virt_sarray,@function
access_virt_sarray:                     // @access_virt_sarray
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	add	w8, w2, w3
	stp	x1, x0, [x29, #-16]
	stur	w2, [x29, #-20]
	stp	w4, w3, [sp, #20]
	str	w8, [sp, #16]
	ldr	w9, [x1, #8]
	cmp	w8, w9
	b.hi	.LBB292_3
// %bb.1:                               // %lor.lhs.false
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #16]
	cmp	w9, w8
	b.hi	.LBB292_3
// %bb.2:                               // %lor.lhs.false2
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	cbnz	x8, .LBB292_4
.LBB292_3:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #20
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB292_4:                              // %if.end
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #28]
	cmp	w9, w8
	b.lo	.LBB292_6
// %bb.5:                               // %lor.lhs.false7
	ldur	x8, [x29, #-16]
	ldr	w10, [sp, #16]
	ldr	w9, [x8, #28]
	ldr	w8, [x8, #20]
	add	w8, w9, w8
	cmp	w10, w8
	b.ls	.LBB292_14
.LBB292_6:                              // %if.then11
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #44]
	cbnz	w8, .LBB292_8
// %bb.7:                               // %if.then12
	ldur	x8, [x29, #-8]
	mov	w9, #68
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB292_8:                              // %if.end18
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #40]
	cbz	w8, .LBB292_10
// %bb.9:                               // %if.then20
	ldp	x1, x0, [x29, #-16]
	mov	w2, #1
	bl	do_sarray_io
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #40]
.LBB292_10:                             // %if.end22
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #28]
	cmp	w9, w8
	b.ls	.LBB292_12
// %bb.11:                              // %if.then25
	ldur	w8, [x29, #-20]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #28]
	b	.LBB292_13
.LBB292_12:                             // %if.else
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #20]
	sub	x9, x9, x10
	cmp	x9, #0                          // =0
	csel	x9, xzr, x9, lt
	str	x9, [sp]
	str	w9, [x8, #28]
.LBB292_13:                             // %if.end35
	ldp	x1, x0, [x29, #-16]
	mov	w2, wzr
	bl	do_sarray_io
.LBB292_14:                             // %if.end36
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #32]
	cmp	w8, w9
	b.hs	.LBB292_26
// %bb.15:                              // %if.then39
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #32]
	cmp	w8, w9
	b.hs	.LBB292_19
// %bb.16:                              // %if.then43
	ldr	w8, [sp, #20]
	cbz	w8, .LBB292_18
// %bb.17:                              // %if.then45
	ldur	x8, [x29, #-8]
	mov	w9, #20
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB292_18:                             // %if.end51
	ldur	w8, [x29, #-20]
	str	w8, [sp, #12]
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB292_20
	b	.LBB292_21
.LBB292_19:                             // %if.else52
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #32]
	str	w8, [sp, #12]
	ldr	w8, [sp, #20]
	cbz	w8, .LBB292_21
.LBB292_20:                             // %if.then56
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #32]
.LBB292_21:                             // %if.end58
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #36]
	cbz	w8, .LBB292_24
// %bb.22:                              // %if.then60
	ldur	x8, [x29, #-16]
	ldr	w10, [sp, #12]
	ldr	w9, [x8, #12]
	str	x9, [sp]
	ldr	w9, [x8, #28]
	sub	w9, w10, w9
	str	w9, [sp, #12]
	ldr	w8, [x8, #28]
	ldr	w9, [sp, #16]
	sub	w8, w9, w8
	str	w8, [sp, #16]
	ldp	w8, w9, [sp, #12]
	cmp	w8, w9
	b.hs	.LBB292_26
.LBB292_23:                             // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #12]
	ldr	x1, [sp]
	ldr	x8, [x8]
	ldr	x0, [x8, x9, lsl #3]
	bl	jzero_far
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	ldp	w8, w9, [sp, #12]
	cmp	w8, w9
	b.lo	.LBB292_23
	b	.LBB292_26
.LBB292_24:                             // %if.else69
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB292_26
// %bb.25:                              // %if.then71
	ldur	x8, [x29, #-8]
	mov	w9, #20
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB292_26:                             // %if.end79
	ldr	w8, [sp, #20]
	cbz	w8, .LBB292_28
// %bb.27:                              // %if.then81
	ldur	x8, [x29, #-16]
	mov	w9, #1
	str	w9, [x8, #40]
.LBB292_28:                             // %if.end83
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	ldr	w10, [x8, #28]
	ldr	x8, [x8]
	sub	w9, w9, w10
	add	x0, x8, w9, uxtw #3
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end292:
	.size	access_virt_sarray, .Lfunc_end292-access_virt_sarray
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function access_virt_barray
	.type	access_virt_barray,@function
access_virt_barray:                     // @access_virt_barray
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	add	w8, w2, w3
	stp	x1, x0, [x29, #-16]
	stur	w2, [x29, #-20]
	stp	w4, w3, [sp, #20]
	str	w8, [sp, #16]
	ldr	w9, [x1, #8]
	cmp	w8, w9
	b.hi	.LBB293_3
// %bb.1:                               // %lor.lhs.false
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #24]
	ldr	w8, [x8, #16]
	cmp	w9, w8
	b.hi	.LBB293_3
// %bb.2:                               // %lor.lhs.false2
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	cbnz	x8, .LBB293_4
.LBB293_3:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #20
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB293_4:                              // %if.end
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #28]
	cmp	w9, w8
	b.lo	.LBB293_6
// %bb.5:                               // %lor.lhs.false7
	ldur	x8, [x29, #-16]
	ldr	w10, [sp, #16]
	ldr	w9, [x8, #28]
	ldr	w8, [x8, #20]
	add	w8, w9, w8
	cmp	w10, w8
	b.ls	.LBB293_14
.LBB293_6:                              // %if.then11
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #44]
	cbnz	w8, .LBB293_8
// %bb.7:                               // %if.then12
	ldur	x8, [x29, #-8]
	mov	w9, #68
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB293_8:                              // %if.end18
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #40]
	cbz	w8, .LBB293_10
// %bb.9:                               // %if.then20
	ldp	x1, x0, [x29, #-16]
	mov	w2, #1
	bl	do_barray_io
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #40]
.LBB293_10:                             // %if.end22
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #28]
	cmp	w9, w8
	b.ls	.LBB293_12
// %bb.11:                              // %if.then25
	ldur	w8, [x29, #-20]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #28]
	b	.LBB293_13
.LBB293_12:                             // %if.else
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #20]
	sub	x9, x9, x10
	cmp	x9, #0                          // =0
	csel	x9, xzr, x9, lt
	str	x9, [sp]
	str	w9, [x8, #28]
.LBB293_13:                             // %if.end35
	ldp	x1, x0, [x29, #-16]
	mov	w2, wzr
	bl	do_barray_io
.LBB293_14:                             // %if.end36
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #16]
	ldr	w8, [x8, #32]
	cmp	w8, w9
	b.hs	.LBB293_26
// %bb.15:                              // %if.then39
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #32]
	cmp	w8, w9
	b.hs	.LBB293_19
// %bb.16:                              // %if.then43
	ldr	w8, [sp, #20]
	cbz	w8, .LBB293_18
// %bb.17:                              // %if.then45
	ldur	x8, [x29, #-8]
	mov	w9, #20
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB293_18:                             // %if.end51
	ldur	w8, [x29, #-20]
	str	w8, [sp, #12]
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB293_20
	b	.LBB293_21
.LBB293_19:                             // %if.else52
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #32]
	str	w8, [sp, #12]
	ldr	w8, [sp, #20]
	cbz	w8, .LBB293_21
.LBB293_20:                             // %if.then56
	ldr	w8, [sp, #16]
	ldur	x9, [x29, #-16]
	str	w8, [x9, #32]
.LBB293_21:                             // %if.end58
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #36]
	cbz	w8, .LBB293_24
// %bb.22:                              // %if.then60
	ldur	x8, [x29, #-16]
	ldr	w10, [sp, #12]
	ldr	w9, [x8, #12]
	lsl	x9, x9, #7
	str	x9, [sp]
	ldr	w9, [x8, #28]
	sub	w9, w10, w9
	str	w9, [sp, #12]
	ldr	w8, [x8, #28]
	ldr	w9, [sp, #16]
	sub	w8, w9, w8
	str	w8, [sp, #16]
	ldp	w8, w9, [sp, #12]
	cmp	w8, w9
	b.hs	.LBB293_26
.LBB293_23:                             // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	ldr	w9, [sp, #12]
	ldr	x1, [sp]
	ldr	x8, [x8]
	ldr	x0, [x8, x9, lsl #3]
	bl	jzero_far
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	ldp	w8, w9, [sp, #12]
	cmp	w8, w9
	b.lo	.LBB293_23
	b	.LBB293_26
.LBB293_24:                             // %if.else69
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB293_26
// %bb.25:                              // %if.then71
	ldur	x8, [x29, #-8]
	mov	w9, #20
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB293_26:                             // %if.end79
	ldr	w8, [sp, #20]
	cbz	w8, .LBB293_28
// %bb.27:                              // %if.then81
	ldur	x8, [x29, #-16]
	mov	w9, #1
	str	w9, [x8, #40]
.LBB293_28:                             // %if.end83
	ldur	x8, [x29, #-16]
	ldur	w9, [x29, #-20]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	ldr	w10, [x8, #28]
	ldr	x8, [x8]
	sub	w9, w9, w10
	add	x0, x8, w9, uxtw #3
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end293:
	.size	access_virt_barray, .Lfunc_end293-access_virt_barray
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function free_pool
	.type	free_pool,@function
free_pool:                              // @free_pool
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #8]
	stur	x8, [x29, #-24]
	tbnz	w1, #31, .LBB294_2
// %bb.1:                               // %entry
	cmp	w1, #2                          // =2
	b.lt	.LBB294_3
.LBB294_2:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #12
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-12]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB294_3:                              // %if.end
	ldur	w8, [x29, #-12]
	cmp	w8, #1                          // =1
	b.ne	.LBB294_15
// %bb.4:                               // %if.then7
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #128]
	b	.LBB294_6
.LBB294_5:                              // %for.inc
                                        //   in Loop: Header=BB294_6 Depth=1
	ldr	x8, [sp, #32]
	ldr	x8, [x8, #48]
.LBB294_6:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	str	x8, [sp, #32]
	cbz	x8, .LBB294_9
// %bb.7:                               // %for.body
                                        //   in Loop: Header=BB294_6 Depth=1
	ldr	x8, [sp, #32]
	ldr	w8, [x8, #44]
	cbz	w8, .LBB294_5
// %bb.8:                               // %if.then9
                                        //   in Loop: Header=BB294_6 Depth=1
	ldr	x8, [sp, #32]
	str	wzr, [x8, #44]
	ldr	x8, [sp, #32]
	ldur	x0, [x29, #-8]
	ldr	x9, [x8, #72]
	add	x1, x8, #56                     // =56
	blr	x9
	b	.LBB294_5
.LBB294_9:                              // %for.end
	ldur	x8, [x29, #-24]
	str	xzr, [x8, #128]
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #136]
	b	.LBB294_11
.LBB294_10:                             // %for.inc25
                                        //   in Loop: Header=BB294_11 Depth=1
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #48]
.LBB294_11:                             // %for.cond14
                                        // =>This Inner Loop Header: Depth=1
	str	x8, [sp, #24]
	cbz	x8, .LBB294_14
// %bb.12:                              // %for.body16
                                        //   in Loop: Header=BB294_11 Depth=1
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #44]
	cbz	w8, .LBB294_10
// %bb.13:                              // %if.then19
                                        //   in Loop: Header=BB294_11 Depth=1
	ldr	x8, [sp, #24]
	str	wzr, [x8, #44]
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x9, [x8, #72]
	add	x1, x8, #56                     // =56
	blr	x9
	b	.LBB294_10
.LBB294_14:                             // %for.end27
	ldur	x8, [x29, #-24]
	str	xzr, [x8, #136]
.LBB294_15:                             // %if.end29
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #3
	ldr	x9, [x8, #112]
	str	x9, [sp, #24]
	str	xzr, [x8, #112]
	mov	x8, x9
	cbz	x8, .LBB294_17
.LBB294_16:                             // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x1, [sp, #24]
	ldur	x0, [x29, #-8]
	ldr	x8, [x1]
	str	x8, [sp, #32]
	ldp	x8, x9, [x1, #8]
	add	x8, x8, x9
	add	x2, x8, #24                     // =24
	str	x2, [sp, #16]
	bl	jpeg_free_large
	ldur	x8, [x29, #-24]
	ldr	x9, [sp, #16]
	ldr	x10, [x8, #144]
	sub	x9, x10, x9
	str	x9, [x8, #144]
	ldr	x8, [sp, #32]
	str	x8, [sp, #24]
	cbnz	x8, .LBB294_16
.LBB294_17:                             // %while.end
	ldur	x8, [x29, #-24]
	ldursw	x9, [x29, #-12]
	add	x8, x8, x9, lsl #3
	ldr	x9, [x8, #96]
	str	x9, [sp, #32]
	str	xzr, [x8, #96]
	mov	x8, x9
	cbz	x8, .LBB294_19
.LBB294_18:                             // %while.body46
                                        // =>This Inner Loop Header: Depth=1
	ldr	x1, [sp, #32]
	ldur	x0, [x29, #-8]
	ldp	x8, x9, [x1, #8]
	ldr	x10, [x1]
	add	x8, x8, x9
	add	x2, x8, #24                     // =24
	stp	x10, x2, [sp, #8]
	bl	jpeg_free_small
	ldur	x8, [x29, #-24]
	ldr	x9, [sp, #16]
	ldr	x10, [x8, #144]
	sub	x9, x10, x9
	str	x9, [x8, #144]
	ldr	x8, [sp, #8]
	str	x8, [sp, #32]
	cbnz	x8, .LBB294_18
.LBB294_19:                             // %while.end57
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end294:
	.size	free_pool, .Lfunc_end294-free_pool
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function self_destruct
	.type	self_destruct,@function
self_destruct:                          // @self_destruct
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, #1
	str	x0, [sp, #8]
	str	w8, [sp, #4]
	mov	w8, w8
	tbnz	w8, #31, .LBB295_2
.LBB295_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	w1, [sp, #4]
	bl	free_pool
	ldr	w8, [sp, #4]
	sub	w8, w8, #1                      // =1
	ldr	x0, [sp, #8]
	str	w8, [sp, #4]
	mov	w8, w8
	tbz	w8, #31, .LBB295_1
.LBB295_2:                              // %for.end
	ldr	x8, [sp, #8]
	mov	w2, #160
	ldr	x1, [x8, #8]
	bl	jpeg_free_small
	ldr	x8, [sp, #8]
	str	xzr, [x8, #8]
	ldr	x0, [sp, #8]
	bl	jpeg_mem_term
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end295:
	.size	self_destruct, .Lfunc_end295-self_destruct
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function do_barray_io
	.type	do_barray_io,@function
do_barray_io:                           // @do_barray_io
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	w2, [x29, #-20]
	ldr	w8, [x1, #12]
	lsl	x8, x8, #7
	stur	x8, [x29, #-32]
	ldr	w9, [x1, #28]
	str	xzr, [sp, #8]
	mul	x8, x9, x8
	str	x8, [sp, #40]
	b	.LBB296_3
.LBB296_1:                              // %if.else
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x1, [x29, #-16]
	ldr	x8, [x8, #56]
.LBB296_2:                              // %if.end48
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x9, [x1], #56
	ldr	x10, [sp, #8]
	ldp	x4, x3, [sp, #32]
	ldr	x2, [x9, x10, lsl #3]
	blr	x8
	ldp	x8, x9, [sp, #32]
	ldur	x10, [x29, #-16]
	add	x8, x9, x8
	str	x8, [sp, #40]
	ldr	w8, [x10, #24]
	ldr	x9, [sp, #8]
	add	x8, x9, x8
	str	x8, [sp, #8]
.LBB296_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #20]
	cmp	x9, x8
	b.ge	.LBB296_15
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x10, [sp, #8]
	ldp	w9, w11, [x8, #20]
	sub	x9, x9, x10
	cmp	x11, x9
	b.ge	.LBB296_6
// %bb.5:                               // %cond.true
                                        //   in Loop: Header=BB296_3 Depth=1
	ldr	w8, [x8, #24]
	b	.LBB296_7
.LBB296_6:                              // %cond.false
                                        //   in Loop: Header=BB296_3 Depth=1
	ldr	w8, [x8, #20]
	ldr	x9, [sp, #8]
	sub	x8, x8, x9
.LBB296_7:                              // %cond.end
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x9, [x29, #-16]
	ldr	x11, [sp, #8]
	ldp	w10, w9, [x9, #28]
	add	x10, x10, x11
	sub	x9, x9, x10
	cmp	x8, x9
	stp	x10, x8, [sp, #16]
	b.ge	.LBB296_9
// %bb.8:                               // %cond.true21
                                        //   in Loop: Header=BB296_3 Depth=1
	ldr	x8, [sp, #24]
	b	.LBB296_10
.LBB296_9:                              // %cond.false22
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #32]
	sub	x8, x8, x9
.LBB296_10:                             // %cond.end26
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x9, [x29, #-16]
	str	x8, [sp, #24]
	ldr	x10, [sp, #16]
	ldr	w9, [x9, #8]
	sub	x9, x9, x10
	cmp	x8, x9
	b.ge	.LBB296_12
// %bb.11:                              // %cond.true32
                                        //   in Loop: Header=BB296_3 Depth=1
	ldr	x8, [sp, #24]
	cmp	x8, #1                          // =1
	str	x8, [sp, #24]
	b.ge	.LBB296_13
	b	.LBB296_15
.LBB296_12:                             // %cond.false33
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #8]
	sub	x8, x8, x9
	cmp	x8, #1                          // =1
	str	x8, [sp, #24]
	b.lt	.LBB296_15
.LBB296_13:                             // %if.end
                                        //   in Loop: Header=BB296_3 Depth=1
	ldr	x9, [sp, #24]
	ldur	x10, [x29, #-32]
	ldur	w11, [x29, #-20]
	ldur	x8, [x29, #-16]
	mul	x9, x9, x10
	str	x9, [sp, #32]
	cbz	w11, .LBB296_1
// %bb.14:                              // %if.then42
                                        //   in Loop: Header=BB296_3 Depth=1
	ldur	x1, [x29, #-16]
	ldr	x8, [x8, #64]
	b	.LBB296_2
.LBB296_15:                             // %for.end
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end296:
	.size	do_barray_io, .Lfunc_end296-do_barray_io
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function do_sarray_io
	.type	do_sarray_io,@function
do_sarray_io:                           // @do_sarray_io
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	w2, [x29, #-20]
	ldr	w8, [x1, #12]
	stur	x8, [x29, #-32]
	ldr	w9, [x1, #28]
	str	xzr, [sp, #8]
	mul	x8, x9, x8
	str	x8, [sp, #40]
	b	.LBB297_3
.LBB297_1:                              // %if.else
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x1, [x29, #-16]
	ldr	x8, [x8, #56]
.LBB297_2:                              // %if.end48
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x9, [x1], #56
	ldr	x10, [sp, #8]
	ldp	x4, x3, [sp, #32]
	ldr	x2, [x9, x10, lsl #3]
	blr	x8
	ldp	x8, x9, [sp, #32]
	ldur	x10, [x29, #-16]
	add	x8, x9, x8
	str	x8, [sp, #40]
	ldr	w8, [x10, #24]
	ldr	x9, [sp, #8]
	add	x8, x9, x8
	str	x8, [sp, #8]
.LBB297_3:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #20]
	cmp	x9, x8
	b.ge	.LBB297_15
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x10, [sp, #8]
	ldp	w9, w11, [x8, #20]
	sub	x9, x9, x10
	cmp	x11, x9
	b.ge	.LBB297_6
// %bb.5:                               // %cond.true
                                        //   in Loop: Header=BB297_3 Depth=1
	ldr	w8, [x8, #24]
	b	.LBB297_7
.LBB297_6:                              // %cond.false
                                        //   in Loop: Header=BB297_3 Depth=1
	ldr	w8, [x8, #20]
	ldr	x9, [sp, #8]
	sub	x8, x8, x9
.LBB297_7:                              // %cond.end
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x9, [x29, #-16]
	ldr	x11, [sp, #8]
	ldp	w10, w9, [x9, #28]
	add	x10, x10, x11
	sub	x9, x9, x10
	cmp	x8, x9
	stp	x10, x8, [sp, #16]
	b.ge	.LBB297_9
// %bb.8:                               // %cond.true21
                                        //   in Loop: Header=BB297_3 Depth=1
	ldr	x8, [sp, #24]
	b	.LBB297_10
.LBB297_9:                              // %cond.false22
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #32]
	sub	x8, x8, x9
.LBB297_10:                             // %cond.end26
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x9, [x29, #-16]
	str	x8, [sp, #24]
	ldr	x10, [sp, #16]
	ldr	w9, [x9, #8]
	sub	x9, x9, x10
	cmp	x8, x9
	b.ge	.LBB297_12
// %bb.11:                              // %cond.true32
                                        //   in Loop: Header=BB297_3 Depth=1
	ldr	x8, [sp, #24]
	cmp	x8, #1                          // =1
	str	x8, [sp, #24]
	b.ge	.LBB297_13
	b	.LBB297_15
.LBB297_12:                             // %cond.false33
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #16]
	ldr	w8, [x8, #8]
	sub	x8, x8, x9
	cmp	x8, #1                          // =1
	str	x8, [sp, #24]
	b.lt	.LBB297_15
.LBB297_13:                             // %if.end
                                        //   in Loop: Header=BB297_3 Depth=1
	ldr	x9, [sp, #24]
	ldur	x10, [x29, #-32]
	ldur	w11, [x29, #-20]
	ldur	x8, [x29, #-16]
	mul	x9, x9, x10
	str	x9, [sp, #32]
	cbz	w11, .LBB297_1
// %bb.14:                              // %if.then42
                                        //   in Loop: Header=BB297_3 Depth=1
	ldur	x1, [x29, #-16]
	ldr	x8, [x8, #64]
	b	.LBB297_2
.LBB297_15:                             // %for.end
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end297:
	.size	do_sarray_io, .Lfunc_end297-do_sarray_io
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function out_of_memory
	.type	out_of_memory,@function
out_of_memory:                          // @out_of_memory
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	ldr	x8, [x0]
	mov	w9, #53
	str	w9, [x8, #40]
	mov	x8, x0
	ldr	x8, [x8]
	mov	w9, w1
	str	w9, [x8, #44]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end298:
	.size	out_of_memory, .Lfunc_end298-out_of_memory
	.cfi_endproc
                                        // -- End function
	.globl	jinit_1pass_quantizer           // -- Begin function jinit_1pass_quantizer
	.p2align	2
	.type	jinit_1pass_quantizer,@function
jinit_1pass_quantizer:                  // @jinit_1pass_quantizer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #152
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, start_pass_1_quant
	str	x0, [sp]
	add	x9, x9, :lo12:start_pass_1_quant
	str	x0, [x8, #608]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, finish_pass_1_quant
	mov	x8, x0
	add	x9, x9, :lo12:finish_pass_1_quant
	str	x9, [x8, #16]
	adrp	x9, new_color_map_1_quant
	mov	x8, x0
	add	x9, x9, :lo12:new_color_map_1_quant
	str	x9, [x8, #24]
	mov	x8, x0
	str	xzr, [x8, #112]
	mov	x8, x0
	str	xzr, [x8, #80]
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #136]
	cmp	w8, #5                          // =5
	b.lt	.LBB299_2
// %bb.1:                               // %if.then
	ldr	x8, [sp, #8]
	mov	w9, #54
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	mov	w9, #4
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB299_2:                              // %if.end
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #112]
	cmp	w8, #257                        // =257
	b.lt	.LBB299_4
// %bb.3:                               // %if.then11
	ldr	x8, [sp, #8]
	mov	w9, #56
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	mov	w9, #256
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x0, [sp, #8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB299_4:                              // %if.end20
	ldr	x0, [sp, #8]
	bl	create_colormap
	ldr	x0, [sp, #8]
	bl	create_colorindex
	ldr	x8, [sp, #8]
	ldr	w8, [x8, #104]
	cmp	w8, #2                          // =2
	b.ne	.LBB299_6
// %bb.5:                               // %if.then22
	ldr	x0, [sp, #8]
	bl	alloc_fs_workspace
.LBB299_6:                              // %if.end23
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end299:
	.size	jinit_1pass_quantizer, .Lfunc_end299-jinit_1pass_quantizer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_1_quant
	.type	start_pass_1_quant,@function
start_pass_1_quant:                     // @start_pass_1_quant
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #608]
	mov	x9, x0
	str	x8, [sp, #24]
	ldr	x8, [x8, #32]
	str	x8, [x0, #152]
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #40]
	str	w8, [x9, #148]
	mov	x8, x0
	ldr	w8, [x8, #104]
	cmp	w8, #2                          // =2
	b.eq	.LBB300_5
// %bb.1:                               // %entry
	cmp	w8, #1                          // =1
	b.eq	.LBB300_10
// %bb.2:                               // %entry
	cbnz	w8, .LBB300_12
// %bb.3:                               // %sw.bb
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	adrp	x10, color_quantize
	adrp	x11, color_quantize3
	ldr	w8, [x8, #136]
	add	x10, x10, :lo12:color_quantize
	add	x11, x11, :lo12:color_quantize3
	cmp	w8, #3                          // =3
	csel	x8, x11, x10, eq
	str	x8, [x9, #8]
.LBB300_4:                              // %sw.epilog
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB300_5:                              // %sw.bb19
	ldr	x8, [sp, #24]
	adrp	x9, quantize_fs_dither
	add	x9, x9, :lo12:quantize_fs_dither
	str	x9, [x8, #8]
	ldr	x8, [sp, #24]
	str	wzr, [x8, #144]
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #112]
	cbnz	x8, .LBB300_7
// %bb.6:                               // %if.then24
	ldur	x0, [x29, #-8]
	bl	alloc_fs_workspace
.LBB300_7:                              // %if.end25
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #128]
	str	wzr, [sp, #12]
	add	w8, w8, #2                      // =2
	lsl	x8, x8, #1
	str	x8, [sp, #16]
.LBB300_8:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #136]
	cmp	w9, w8
	b.ge	.LBB300_4
// %bb.9:                               // %for.body
                                        //   in Loop: Header=BB300_8 Depth=1
	ldp	x1, x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	ldr	x0, [x8, #112]
	bl	jzero_far
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	b	.LBB300_8
.LBB300_10:                             // %sw.bb4
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	adrp	x10, quantize_ord_dither
	adrp	x11, quantize3_ord_dither
	ldr	w8, [x8, #136]
	add	x10, x10, :lo12:quantize_ord_dither
	add	x11, x11, :lo12:quantize3_ord_dither
	cmp	w8, #3                          // =3
	csel	x8, x11, x10, eq
	str	x8, [x9, #8]
	ldr	x8, [sp, #24]
	str	wzr, [x8, #76]
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #56]
	cbz	w8, .LBB300_13
// %bb.11:                              // %if.end15
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #80]
	cbnz	x8, .LBB300_4
	b	.LBB300_14
.LBB300_12:                             // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #47
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB300_13:                             // %if.then14
	ldur	x0, [x29, #-8]
	bl	create_colorindex
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #80]
	cbnz	x8, .LBB300_4
.LBB300_14:                             // %if.then17
	ldur	x0, [x29, #-8]
	bl	create_odither_tables
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end300:
	.size	start_pass_1_quant, .Lfunc_end300-start_pass_1_quant
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass_1_quant
	.type	finish_pass_1_quant,@function
finish_pass_1_quant:                    // @finish_pass_1_quant
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end301:
	.size	finish_pass_1_quant, .Lfunc_end301-finish_pass_1_quant
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function new_color_map_1_quant
	.type	new_color_map_1_quant,@function
new_color_map_1_quant:                  // @new_color_map_1_quant
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0]
	mov	w9, #45
	str	w9, [x8, #40]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end302:
	.size	new_color_map_1_quant, .Lfunc_end302-new_color_map_1_quant
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function create_colormap
	.type	create_colormap,@function
create_colormap:                        // @create_colormap
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #608]
	add	x1, x8, #60                     // =60
	stp	x8, x0, [x29, #-16]
	bl	select_ncolors
	ldur	x8, [x29, #-8]
	stur	w0, [x29, #-28]
	ldr	w8, [x8, #136]
	cmp	w8, #3                          // =3
	b.ne	.LBB303_2
// %bb.1:                               // %do.body
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-28]
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	stur	x10, [x29, #-24]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-16]
	mov	x9, x10
	ldr	w8, [x8, #60]
	str	w8, [x9, #4]
	ldur	x8, [x29, #-16]
	mov	x9, x10
	ldr	w8, [x8, #64]
	str	w8, [x9, #8]
	ldur	x8, [x29, #-16]
	mov	x9, x10
	ldr	w8, [x8, #68]
	str	w8, [x9, #12]
	ldur	x8, [x29, #-8]
	mov	w9, #93
	ldr	x8, [x8]
	str	w9, [x8, #40]
	b	.LBB303_3
.LBB303_2:                              // %if.else
	ldur	x8, [x29, #-8]
	mov	w9, #94
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-28]
	ldr	x8, [x8]
	str	w9, [x8, #44]
.LBB303_3:                              // %if.end
	ldur	x0, [x29, #-8]
	mov	w1, #1
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x0, [x29, #-8]
	ldur	w2, [x29, #-28]
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldr	w3, [x0, #136]
	ldr	x8, [x8, #16]
	blr	x8
	ldur	w8, [x29, #-28]
	stur	x0, [x29, #-24]
	str	wzr, [sp, #32]
	str	w8, [sp, #12]
	b	.LBB303_5
.LBB303_4:                              // %for.end48
                                        //   in Loop: Header=BB303_5 Depth=1
	ldr	w8, [sp, #16]
	ldr	w9, [sp, #32]
	str	w8, [sp, #12]
	add	w8, w9, #1                      // =1
	str	w8, [sp, #32]
.LBB303_5:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB303_8 Depth 2
                                        //       Child Loop BB303_11 Depth 3
                                        //         Child Loop BB303_13 Depth 4
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #32]
	ldr	w8, [x8, #136]
	cmp	w9, w8
	b.ge	.LBB303_14
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB303_5 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #32]
	add	x8, x8, x9, lsl #2
	ldr	w8, [x8, #60]
	ldr	w9, [sp, #12]
	str	wzr, [sp, #28]
	str	w8, [sp, #20]
	sdiv	w8, w9, w8
	str	w8, [sp, #16]
	b	.LBB303_8
.LBB303_7:                              // %for.inc46
                                        //   in Loop: Header=BB303_8 Depth=2
	ldr	w8, [sp, #28]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #28]
.LBB303_8:                              // %for.cond29
                                        //   Parent Loop BB303_5 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB303_11 Depth 3
                                        //         Child Loop BB303_13 Depth 4
	ldr	w8, [sp, #28]
	ldr	w9, [sp, #20]
	cmp	w8, w9
	b.ge	.LBB303_4
// %bb.9:                               // %for.body31
                                        //   in Loop: Header=BB303_8 Depth=2
	ldr	w8, [sp, #20]
	ldur	x0, [x29, #-8]
	ldp	w2, w1, [sp, #28]
	sub	w3, w8, #1                      // =1
	bl	output_value
	ldr	w8, [sp, #28]
	ldr	w9, [sp, #16]
	str	w0, [sp, #4]
	mul	w8, w8, w9
	b	.LBB303_11
.LBB303_10:                             // %for.inc43
                                        //   in Loop: Header=BB303_11 Depth=3
	ldp	w9, w8, [sp, #8]
	add	w8, w9, w8
.LBB303_11:                             // %for.cond33
                                        //   Parent Loop BB303_5 Depth=1
                                        //     Parent Loop BB303_8 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB303_13 Depth 4
	ldur	w9, [x29, #-28]
	str	w8, [sp, #8]
	mov	w8, w8
	cmp	w8, w9
	b.ge	.LBB303_7
// %bb.12:                              // %for.body35
                                        //   in Loop: Header=BB303_11 Depth=3
	str	wzr, [sp, #24]
	mov	w8, wzr
	ldr	w9, [sp, #16]
	cmp	w8, w9
	b.ge	.LBB303_10
.LBB303_13:                             // %for.body38
                                        //   Parent Loop BB303_5 Depth=1
                                        //     Parent Loop BB303_8 Depth=2
                                        //       Parent Loop BB303_11 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldur	x8, [x29, #-24]
	ldrsw	x9, [sp, #32]
	ldrsw	x12, [sp, #24]
	ldp	w10, w11, [sp, #4]
                                        // kill: def $w11 killed $w11 def $x11
	ldr	x8, [x8, x9, lsl #3]
	sxtw	x11, w11
	add	x9, x11, x12
	strb	w10, [x8, x9]
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
	mov	w8, w8
	ldr	w9, [sp, #16]
	cmp	w8, w9
	b.lt	.LBB303_13
	b	.LBB303_10
.LBB303_14:                             // %for.end51
	ldp	x8, x9, [x29, #-24]
	str	x8, [x9, #32]
	ldur	w8, [x29, #-28]
	ldur	x9, [x29, #-16]
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	str	w8, [x9, #40]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end303:
	.size	create_colormap, .Lfunc_end303-create_colormap
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function create_colorindex
	.type	create_colorindex,@function
create_colorindex:                      // @create_colorindex
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	ldr	x8, [x0, #608]
	stur	x8, [x29, #-8]
	ldr	w8, [x0, #104]
	cmp	w8, #1                          // =1
	b.ne	.LBB304_2
// %bb.1:                               // %if.then
	ldur	x9, [x29, #-8]
	mov	w8, #510
	str	w8, [sp, #4]
	mov	w8, #1
	b	.LBB304_3
.LBB304_2:                              // %if.else
	ldur	x9, [x29, #-8]
	mov	w8, wzr
	str	wzr, [sp, #4]
.LBB304_3:                              // %if.end
	str	w8, [x9, #56]
	ldr	x0, [x29, #24]
	ldr	w9, [sp, #4]
	mov	w1, #1
	mov	w19, #1
	ldr	x8, [x0, #8]
	ldr	w3, [x0, #136]
	add	w2, w9, #256                    // =256
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-8]
	str	x0, [x8, #48]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #40]
	stur	wzr, [x29, #-20]
	str	w8, [sp, #12]
	b	.LBB304_5
.LBB304_4:                              // %for.inc41
                                        //   in Loop: Header=BB304_5 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-20]
.LBB304_5:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB304_10 Depth 2
                                        //       Child Loop BB304_12 Depth 3
                                        //     Child Loop BB304_15 Depth 2
	ldr	x8, [x29, #24]
	ldur	w9, [x29, #-20]
	ldr	w8, [x8, #136]
	cmp	w9, w8
	b.ge	.LBB304_16
// %bb.6:                               // %for.body
                                        //   in Loop: Header=BB304_5 Depth=1
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-20]
	ldr	w10, [sp, #4]
	add	x8, x8, x9, lsl #2
	ldr	w8, [x8, #60]
	ldr	w9, [sp, #12]
	str	w8, [sp, #16]
	sdiv	w8, w9, w8
	str	w8, [sp, #12]
	cbz	w10, .LBB304_8
// %bb.7:                               // %if.then5
                                        //   in Loop: Header=BB304_5 Depth=1
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-20]
	ldr	x8, [x8, #48]
	lsl	x9, x9, #3
	ldr	x10, [x8, x9]
	add	x10, x10, #255                  // =255
	str	x10, [x8, x9]
.LBB304_8:                              // %if.end9
                                        //   in Loop: Header=BB304_5 Depth=1
	ldur	x8, [x29, #-8]
	ldursw	x1, [x29, #-20]
	ldr	w9, [sp, #16]
	ldr	x0, [x29, #24]
	ldr	x8, [x8, #48]
	mov	w2, wzr
	sub	w3, w9, #1                      // =1
	ldr	x8, [x8, x1, lsl #3]
	str	wzr, [sp, #8]
                                        // kill: def $w1 killed $w1 killed $x1
	stur	x8, [x29, #-16]
	bl	largest_input_value
	stp	w0, wzr, [sp, #20]
	b	.LBB304_10
.LBB304_9:                              // %while.end
                                        //   in Loop: Header=BB304_10 Depth=2
	ldp	w8, w9, [sp, #8]
	ldur	x10, [x29, #-16]
	ldrsw	x11, [sp, #24]
	mul	w8, w8, w9
	strb	w8, [x10, x11]
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
.LBB304_10:                             // %for.cond14
                                        //   Parent Loop BB304_5 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB304_12 Depth 3
	ldr	w8, [sp, #24]
	cmp	w8, #255                        // =255
	b.gt	.LBB304_13
// %bb.11:                              // %while.cond
                                        //   in Loop: Header=BB304_10 Depth=2
	ldp	w9, w8, [sp, #20]
	cmp	w8, w9
	b.le	.LBB304_9
.LBB304_12:                             // %while.body
                                        //   Parent Loop BB304_5 Depth=1
                                        //     Parent Loop BB304_10 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w8, [sp, #8]
	ldr	w9, [sp, #16]
	ldr	x0, [x29, #24]
	ldur	w1, [x29, #-20]
	add	w2, w8, #1                      // =1
	sub	w3, w9, #1                      // =1
	str	w2, [sp, #8]
	bl	largest_input_value
	str	w0, [sp, #20]
	ldp	w9, w8, [sp, #20]
	cmp	w8, w9
	b.gt	.LBB304_12
	b	.LBB304_9
.LBB304_13:                             // %for.end
                                        //   in Loop: Header=BB304_5 Depth=1
	ldr	w8, [sp, #4]
	cbz	w8, .LBB304_4
// %bb.14:                              // %if.then24
                                        //   in Loop: Header=BB304_5 Depth=1
	str	w19, [sp, #24]
	mov	w8, w19
	cmp	w8, #255                        // =255
	b.gt	.LBB304_4
.LBB304_15:                             // %for.body28
                                        //   Parent Loop BB304_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #24]
	ldrb	w10, [x8]
	sub	x8, x8, x9
	strb	w10, [x8]
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #24]
	ldrb	w10, [x8, #255]
	add	x8, x9, x8
	strb	w10, [x8, #255]
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
	mov	w8, w8
	cmp	w8, #255                        // =255
	b.le	.LBB304_15
	b	.LBB304_4
.LBB304_16:                             // %for.end43
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end304:
	.size	create_colorindex, .Lfunc_end304-create_colorindex
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function alloc_fs_workspace
	.type	alloc_fs_workspace,@function
alloc_fs_workspace:                     // @alloc_fs_workspace
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	w8, [x0, #128]
	ldr	x9, [x0, #608]
	str	wzr, [sp, #4]
	add	w8, w8, #2                      // =2
	lsl	x8, x8, #1
	stp	x8, x9, [sp, #8]
.LBB305_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #4]
	ldr	w8, [x8, #136]
	cmp	w9, w8
	b.ge	.LBB305_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB305_1 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x2, [sp, #8]
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #4]
	add	x8, x8, x9, lsl #3
	str	x0, [x8, #112]
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	b	.LBB305_1
.LBB305_3:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end305:
	.size	alloc_fs_workspace, .Lfunc_end305-alloc_fs_workspace
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function largest_input_value
	.type	largest_input_value,@function
largest_input_value:                    // @largest_input_value
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
                                        // kill: def $w3 killed $w3 def $x3
	mov	w8, #510
	sxtw	x9, w3
	smaddl	x8, w2, w8, x9
	add	x8, x8, #255                    // =255
	sbfiz	x9, x3, #1, #32
	str	x0, [sp, #24]
	sdiv	x0, x8, x9
	stp	w2, w1, [sp, #16]
	str	w3, [sp, #12]
                                        // kill: def $w0 killed $w0 killed $x0
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end306:
	.size	largest_input_value, .Lfunc_end306-largest_input_value
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function select_ncolors
	.type	select_ncolors,@function
select_ncolors:                         // @select_ncolors
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	w10, [x0, #136]
	ldr	w9, [x0, #112]
	mov	w8, #1
	str	w8, [sp, #32]
	stp	w9, w10, [x29, #-24]
	b	.LBB307_2
.LBB307_1:                              // %do.cond
                                        //   in Loop: Header=BB307_2 Depth=1
	ldr	x9, [sp, #8]
	ldursw	x10, [x29, #-24]
	cmp	x9, x10
	b.gt	.LBB307_4
.LBB307_2:                              // %do.body
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB307_3 Depth 2
	ldr	w9, [sp, #32]
	add	w9, w9, #1                      // =1
	stp	w8, w9, [sp, #28]
	sxtw	x9, w9
	str	x9, [sp, #8]
	ldr	w9, [sp, #28]
	ldur	w10, [x29, #-20]
	cmp	w9, w10
	b.ge	.LBB307_1
.LBB307_3:                              // %for.body
                                        //   Parent Loop BB307_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w11, w9, [sp, #28]
	ldr	x10, [sp, #8]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	mul	x9, x10, x9
	add	w10, w11, #1                    // =1
	str	x9, [sp, #8]
	str	w10, [sp, #28]
	mov	w9, w10
	ldur	w10, [x29, #-20]
	cmp	w9, w10
	b.lt	.LBB307_3
	b	.LBB307_1
.LBB307_4:                              // %do.end
	ldr	w8, [sp, #32]
	sub	w8, w8, #1                      // =1
	cmp	w8, #1                          // =1
	str	w8, [sp, #32]
	b.gt	.LBB307_6
// %bb.5:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #55
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB307_6:                              // %if.end
	mov	w8, #1
	stur	w8, [x29, #-28]
	str	wzr, [sp, #28]
	mov	w8, wzr
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.ge	.LBB307_8
.LBB307_7:                              // %for.body16
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w8, [sp, #28]
	ldur	x9, [x29, #-16]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	str	w8, [x9, x10, lsl #2]
	ldp	w10, w8, [sp, #28]
	ldur	w9, [x29, #-28]
	mul	w8, w9, w8
	add	w9, w10, #1                     // =1
	stur	w8, [x29, #-28]
	str	w9, [sp, #28]
	mov	w8, w9
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.lt	.LBB307_7
.LBB307_8:
	adrp	x8, select_ncolors.RGB_order
	add	x8, x8, :lo12:select_ncolors.RGB_order
	mov	w9, #1
	b	.LBB307_10
.LBB307_9:                              // %do.cond50
                                        //   in Loop: Header=BB307_10 Depth=1
	ldr	w10, [sp, #20]
	cbz	w10, .LBB307_15
.LBB307_10:                             // %do.body22
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB307_11 Depth 2
	str	wzr, [sp, #20]
	str	wzr, [sp, #28]
	mov	w10, wzr
	ldur	w11, [x29, #-20]
	cmp	w10, w11
	b.ge	.LBB307_9
.LBB307_11:                             // %for.body26
                                        //   Parent Loop BB307_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x10, [x29, #-8]
	ldr	w11, [x10, #56]
	ldr	w10, [sp, #28]
	cmp	w11, #2                         // =2
	b.ne	.LBB307_13
// %bb.12:                              // %cond.true
                                        //   in Loop: Header=BB307_11 Depth=2
                                        // kill: def $w10 killed $w10 killed $x10 def $x10
	sxtw	x10, w10
	ldr	w10, [x8, x10, lsl #2]
.LBB307_13:                             // %cond.end
                                        //   in Loop: Header=BB307_11 Depth=2
	ldur	x11, [x29, #-16]
	str	w10, [sp, #24]
	sbfiz	x10, x10, #2, #32
	ldur	w12, [x29, #-28]
	ldr	w13, [x11, x10]
	sdiv	w12, w12, w13
	sxtw	x12, w12
	str	x12, [sp, #8]
	ldrsw	x10, [x11, x10]
	ldursw	x11, [x29, #-24]
	add	x10, x10, #1                    // =1
	mul	x10, x12, x10
	cmp	x10, x11
	str	x10, [sp, #8]
	b.gt	.LBB307_9
// %bb.14:                              // %if.end42
                                        //   in Loop: Header=BB307_11 Depth=2
	ldrsw	x10, [sp, #24]
	ldur	x11, [x29, #-16]
	lsl	x10, x10, #2
	ldr	w12, [x11, x10]
	add	w12, w12, #1                    // =1
	str	w12, [x11, x10]
	ldr	x10, [sp, #8]
	ldr	w11, [sp, #28]
	str	w9, [sp, #20]
	stur	w10, [x29, #-28]
	add	w10, w11, #1                    // =1
	str	w10, [sp, #28]
	mov	w10, w10
	ldur	w11, [x29, #-20]
	cmp	w10, w11
	b.lt	.LBB307_11
	b	.LBB307_9
.LBB307_15:                             // %do.end51
	ldur	w0, [x29, #-28]
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end307:
	.size	select_ncolors, .Lfunc_end307-select_ncolors
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function output_value
	.type	output_value,@function
output_value:                           // @output_value
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa_offset 32
                                        // kill: def $w3 killed $w3 def $x3
                                        // kill: def $w2 killed $w2 def $x2
	sxtw	x8, w2
	sbfiz	x9, x2, #8, #32
	cmp	w3, #0                          // =0
	sub	x8, x9, x8
	cinc	w9, w3, lt
	asr	w9, w9, #1
	sxtw	x10, w3
	add	x8, x8, w9, sxtw
	str	x0, [sp, #24]
	sdiv	x0, x8, x10
	stp	w2, w1, [sp, #16]
	str	w3, [sp, #12]
                                        // kill: def $w0 killed $w0 killed $x0
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end308:
	.size	output_value, .Lfunc_end308-output_value
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function color_quantize3
	.type	color_quantize3,@function
color_quantize3:                        // @color_quantize3
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	.cfi_def_cfa_offset 112
	stp	x1, x0, [sp, #96]
	str	x2, [sp, #88]
	str	w3, [sp, #84]
	ldr	x8, [x0, #608]
	str	x8, [sp, #72]
	ldr	x9, [x8, #48]
	ldr	x10, [x9]
	ldr	x9, [x8, #48]
	ldr	x9, [x9, #8]
	stp	x9, x10, [sp, #32]
	ldr	x8, [x8, #48]
	mov	x9, x0
	ldr	x8, [x8, #16]
	str	x8, [sp, #24]
	ldr	w8, [x9, #128]
	str	wzr, [sp, #20]
	str	w8, [sp, #12]
	b	.LBB309_2
.LBB309_1:                              // %for.inc29
                                        //   in Loop: Header=BB309_2 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB309_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB309_4 Depth 2
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #84]
	cmp	w8, w9
	b.ge	.LBB309_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB309_2 Depth=1
	ldrsw	x8, [sp, #20]
	ldp	x10, x9, [sp, #88]
	lsl	x8, x8, #3
	ldr	x11, [x9, x8]
	ldr	x8, [x10, x8]
	ldr	w9, [sp, #12]
	stp	x8, x11, [sp, #48]
	str	w9, [sp, #16]
	mov	w8, w9
	cbz	w8, .LBB309_1
.LBB309_4:                              // %for.body12
                                        //   Parent Loop BB309_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #56]
	ldr	x9, [sp, #40]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #56]
	ldrb	w10, [x8]
	add	x11, x8, #2                     // =2
	add	x12, x8, #3                     // =3
	ldrb	w9, [x9, x10]
	str	x11, [sp, #56]
	ldr	x10, [sp, #32]
	str	w9, [sp, #68]
	ldrb	w11, [x8, #1]
	ldrb	w10, [x10, x11]
	ldr	x11, [sp, #24]
	add	w9, w9, w10
	str	w9, [sp, #68]
	ldrb	w8, [x8, #2]
	ldr	x10, [sp, #48]
	ldrb	w8, [x11, x8]
	add	x11, x10, #1                    // =1
	stp	x11, x12, [sp, #48]
	add	w8, w9, w8
	str	w8, [sp, #68]
	strb	w8, [x10]
	ldr	w8, [sp, #16]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	mov	w8, w8
	cbnz	w8, .LBB309_4
	b	.LBB309_1
.LBB309_5:                              // %for.end30
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end309:
	.size	color_quantize3, .Lfunc_end309-color_quantize3
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function color_quantize
	.type	color_quantize,@function
color_quantize:                         // @color_quantize
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	.cfi_def_cfa_offset 96
	stp	x1, x0, [sp, #80]
	str	x2, [sp, #72]
	str	w3, [sp, #68]
	ldr	x8, [x0, #608]
	mov	x9, x0
	str	x8, [sp, #56]
	ldr	x8, [x8, #48]
	str	x8, [sp, #48]
	ldr	w10, [x0, #128]
	ldr	w8, [x9, #136]
	str	wzr, [sp, #20]
	stp	w8, w10, [sp, #8]
	b	.LBB310_2
.LBB310_1:                              // %for.inc20
                                        //   in Loop: Header=BB310_2 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB310_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB310_5 Depth 2
                                        //       Child Loop BB310_7 Depth 3
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #68]
	cmp	w8, w9
	b.ge	.LBB310_8
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB310_2 Depth=1
	ldrsw	x8, [sp, #20]
	ldp	x10, x9, [sp, #72]
	lsl	x8, x8, #3
	ldr	x11, [x9, x8]
	ldr	x8, [x10, x8]
	ldr	w9, [sp, #12]
	stp	x8, x11, [sp, #24]
	str	w9, [sp, #16]
	b	.LBB310_5
.LBB310_4:                              // %for.end
                                        //   in Loop: Header=BB310_5 Depth=2
	ldr	x8, [sp, #24]
	ldr	w9, [sp, #44]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #24]
	strb	w9, [x8]
	ldr	w8, [sp, #16]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #16]
.LBB310_5:                              // %for.cond5
                                        //   Parent Loop BB310_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB310_7 Depth 3
	ldr	w8, [sp, #16]
	cbz	w8, .LBB310_1
// %bb.6:                               // %for.body7
                                        //   in Loop: Header=BB310_5 Depth=2
	str	xzr, [sp, #40]
	and	x8, xzr, #0xffffffff
	ldr	w9, [sp, #8]
	cmp	w8, w9
	b.ge	.LBB310_4
.LBB310_7:                              // %for.body10
                                        //   Parent Loop BB310_2 Depth=1
                                        //     Parent Loop BB310_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x10, [sp, #32]
	ldr	x8, [sp, #48]
	ldrsw	x9, [sp, #40]
	add	x11, x10, #1                    // =1
	ldr	x8, [x8, x9, lsl #3]
	str	x11, [sp, #32]
	ldrb	w10, [x10]
	ldr	w11, [sp, #44]
	add	w9, w9, #1                      // =1
	ldrb	w8, [x8, x10]
	add	w8, w11, w8
	stp	w9, w8, [sp, #40]
	ldr	w8, [sp, #40]
	ldr	w9, [sp, #8]
	cmp	w8, w9
	b.lt	.LBB310_7
	b	.LBB310_4
.LBB310_8:                              // %for.end22
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end310:
	.size	color_quantize, .Lfunc_end310-color_quantize
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function quantize3_ord_dither
	.type	quantize3_ord_dither,@function
quantize3_ord_dither:                   // @quantize3_ord_dither
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #144                    // =144
	.cfi_def_cfa_offset 144
	stp	x1, x0, [sp, #128]
	str	x2, [sp, #120]
	str	w3, [sp, #116]
	ldr	x8, [x0, #608]
	str	x8, [sp, #104]
	ldr	x9, [x8, #48]
	ldr	x10, [x9]
	ldr	x9, [x8, #48]
	ldr	x9, [x9, #8]
	stp	x9, x10, [sp, #64]
	ldr	x8, [x8, #48]
	mov	x9, x0
	ldr	x8, [x8, #16]
	str	x8, [sp, #56]
	ldr	w8, [x9, #128]
	str	wzr, [sp, #20]
	str	w8, [sp, #12]
	b	.LBB311_2
.LBB311_1:                              // %for.end
                                        //   in Loop: Header=BB311_2 Depth=1
	ldr	w8, [sp, #28]
	ldr	x9, [sp, #104]
	add	w8, w8, #1                      // =1
	and	w8, w8, #0xf
	str	w8, [sp, #28]
	str	w8, [x9, #76]
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB311_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB311_4 Depth 2
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #116]
	cmp	w8, w9
	b.ge	.LBB311_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB311_2 Depth=1
	ldr	x8, [sp, #104]
	ldrsw	x9, [sp, #20]
	ldp	x12, x11, [sp, #120]
	ldrsw	x10, [x8, #76]
	lsl	x9, x9, #3
	stp	wzr, w10, [sp, #24]
	ldr	x11, [x11, x9]
	ldr	x9, [x12, x9]
	lsl	x10, x10, #6
	stp	x9, x11, [sp, #80]
	ldr	x9, [x8, #80]
	add	x9, x9, x10
	str	x9, [sp, #48]
	ldp	x9, x8, [x8, #88]
	add	x9, x9, x10
	str	x9, [sp, #40]
	ldr	w9, [sp, #12]
	add	x8, x8, x10
	str	x8, [sp, #32]
	mov	w8, w9
	str	w9, [sp, #16]
	cbz	w8, .LBB311_1
.LBB311_4:                              // %for.body26
                                        //   Parent Loop BB311_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #88]
	ldrsw	x9, [sp, #24]
	ldr	x10, [sp, #48]
	ldr	x13, [sp, #72]
	add	x12, x8, #1                     // =1
	lsl	x9, x9, #2
	str	x12, [sp, #88]
	ldrb	w12, [x8]
	ldrsw	x10, [x10, x9]
	ldrsw	x11, [sp, #24]
	add	x10, x12, x10
	ldrb	w10, [x13, x10]
	ldr	x12, [sp, #40]
	add	x13, x8, #2                     // =2
	str	x13, [sp, #88]
	str	w10, [sp, #100]
	ldrb	w13, [x8, #1]
	ldrsw	x9, [x12, x9]
	ldr	x12, [sp, #64]
	add	x9, x13, x9
	ldrb	w9, [x12, x9]
	ldr	x12, [sp, #32]
	add	x13, x8, #3                     // =3
	add	w9, w10, w9
	str	w9, [sp, #100]
	ldrb	w8, [x8, #2]
	ldrsw	x10, [x12, x11, lsl #2]
	ldr	x11, [sp, #56]
	ldr	x12, [sp, #80]
	add	x8, x8, x10
	ldrb	w8, [x11, x8]
	add	x10, x12, #1                    // =1
	stp	x10, x13, [sp, #80]
	add	w8, w9, w8
	str	w8, [sp, #100]
	strb	w8, [x12]
	ldr	w8, [sp, #24]
	ldr	w9, [sp, #16]
	add	w8, w8, #1                      // =1
	and	w8, w8, #0xf
	sub	w9, w9, #1                      // =1
	str	w8, [sp, #24]
	mov	w8, w9
	str	w9, [sp, #16]
	cbnz	w8, .LBB311_4
	b	.LBB311_1
.LBB311_5:                              // %for.end57
	add	sp, sp, #144                    // =144
	ret
.Lfunc_end311:
	.size	quantize3_ord_dither, .Lfunc_end311-quantize3_ord_dither
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function quantize_ord_dither
	.type	quantize_ord_dither,@function
quantize_ord_dither:                    // @quantize_ord_dither
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #112                   // =112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	ldr	x8, [x0, #608]
	mov	x9, x0
	stur	x8, [x29, #-40]
	ldr	w8, [x0, #136]
	str	w8, [sp, #28]
	ldr	w8, [x9, #128]
	str	wzr, [sp, #20]
	str	w8, [sp, #12]
	b	.LBB312_2
.LBB312_1:                              // %for.end34
                                        //   in Loop: Header=BB312_2 Depth=1
	ldr	w8, [sp, #36]
	ldur	x9, [x29, #-40]
	add	w8, w8, #1                      // =1
	and	w8, w8, #0xf
	str	w8, [sp, #36]
	str	w8, [x9, #76]
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB312_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB312_5 Depth 2
                                        //       Child Loop BB312_7 Depth 3
	ldr	w8, [sp, #20]
	ldur	w9, [x29, #-28]
	cmp	w8, w9
	b.ge	.LBB312_8
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB312_2 Depth=1
	ldur	x8, [x29, #-24]
	ldrsw	x9, [sp, #20]
	ldr	w1, [sp, #12]
	ldr	x0, [x8, x9, lsl #3]
	bl	jzero_far
	ldur	x8, [x29, #-40]
	ldr	w8, [x8, #76]
	str	wzr, [sp, #24]
	str	w8, [sp, #36]
	b	.LBB312_5
.LBB312_4:                              // %for.inc33
                                        //   in Loop: Header=BB312_5 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #24]
.LBB312_5:                              // %for.cond3
                                        //   Parent Loop BB312_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB312_7 Depth 3
	ldp	w8, w9, [sp, #24]
	cmp	w8, w9
	b.ge	.LBB312_1
// %bb.6:                               // %for.body6
                                        //   in Loop: Header=BB312_5 Depth=2
	ldpsw	x8, x10, [sp, #20]
	ldp	x11, x9, [x29, #-24]
	lsl	x8, x8, #3
	ldr	x9, [x9, x8]
	add	x9, x9, x10
	stur	x9, [x29, #-48]
	ldur	x9, [x29, #-40]
	ldr	x12, [x11, x8]
	lsl	x10, x10, #3
	ldr	x8, [x9, #48]
	add	x9, x9, x10
	ldr	x8, [x8, x10]
	ldrsw	x10, [sp, #36]
	stp	x8, x12, [sp, #48]
	ldr	x8, [x9, #80]
	ldr	w9, [sp, #12]
	str	wzr, [sp, #32]
	add	x8, x8, x10, lsl #6
	str	x8, [sp, #40]
	str	w9, [sp, #16]
	mov	w8, w9
	cbz	w8, .LBB312_4
.LBB312_7:                              // %for.body20
                                        //   Parent Loop BB312_2 Depth=1
                                        //     Parent Loop BB312_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldur	x8, [x29, #-48]
	ldr	x9, [sp, #40]
	ldrsw	x10, [sp, #32]
	ldrb	w8, [x8]
	ldrsw	x9, [x9, x10, lsl #2]
	ldp	x10, x11, [sp, #48]
	add	x8, x8, x9
	ldrb	w12, [x11]
	ldrb	w8, [x10, x8]
	add	w8, w12, w8
	strb	w8, [x11]
	ldp	w8, w11, [sp, #28]
	ldur	x9, [x29, #-48]
	ldr	x10, [sp, #56]
	ldr	w12, [sp, #16]
                                        // kill: def $w8 killed $w8 def $x8
	sxtw	x8, w8
	add	x8, x9, x8
	add	x9, x10, #1                     // =1
	add	w10, w11, #1                    // =1
	sub	w11, w12, #1                    // =1
	stur	x8, [x29, #-48]
	and	w8, w10, #0xf
	str	x9, [sp, #56]
	str	w8, [sp, #32]
	str	w11, [sp, #16]
	mov	w8, w11
	cbnz	w8, .LBB312_7
	b	.LBB312_4
.LBB312_8:                              // %for.end40
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end312:
	.size	quantize_ord_dither, .Lfunc_end312-quantize_ord_dither
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function create_odither_tables
	.type	create_odither_tables,@function
create_odither_tables:                  // @create_odither_tables
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #608]
	str	wzr, [sp, #20]
	stp	x8, x0, [x29, #-16]
	b	.LBB313_2
.LBB313_1:                              // %if.end14
                                        //   in Loop: Header=BB313_2 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	ldr	x10, [sp, #24]
	add	x8, x8, x9, lsl #3
	str	x10, [x8, #80]
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB313_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB313_4 Depth 2
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #20]
	ldr	w8, [x8, #136]
	cmp	w9, w8
	b.ge	.LBB313_9
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB313_2 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldr	w8, [x8, #60]
	str	xzr, [sp, #24]
	stp	w8, wzr, [sp, #12]
	ldp	w8, w9, [sp, #16]
	cmp	w8, w9
	b.ge	.LBB313_6
.LBB313_4:                              // %for.body4
                                        //   Parent Loop BB313_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-16]
	ldp	w10, w9, [sp, #12]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	add	x8, x8, x9, lsl #2
	ldr	w8, [x8, #60]
	cmp	w10, w8
	b.eq	.LBB313_7
// %bb.5:                               // %for.inc
                                        //   in Loop: Header=BB313_4 Depth=2
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
	ldp	w8, w9, [sp, #16]
	cmp	w8, w9
	b.lt	.LBB313_4
.LBB313_6:                              // %for.end
                                        //   in Loop: Header=BB313_2 Depth=1
	ldr	x8, [sp, #24]
	cbnz	x8, .LBB313_1
	b	.LBB313_8
.LBB313_7:                              // %if.then
                                        //   in Loop: Header=BB313_2 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #3
	ldr	x8, [x8, #80]
	str	x8, [sp, #24]
	cbnz	x8, .LBB313_1
.LBB313_8:                              // %if.then13
                                        //   in Loop: Header=BB313_2 Depth=1
	ldur	x0, [x29, #-8]
	ldr	w1, [sp, #12]
	bl	make_odither_array
	str	x0, [sp, #24]
	b	.LBB313_1
.LBB313_9:                              // %for.end20
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end313:
	.size	create_odither_tables, .Lfunc_end313-create_odither_tables
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function quantize_fs_dither
	.type	quantize_fs_dither,@function
quantize_fs_dither:                     // @quantize_fs_dither
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #176                    // =176
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #144                   // =144
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	ldr	x8, [x0, #608]
	mov	x9, x0
	mov	x10, x0
	mov	w19, #-1
	stur	x8, [x29, #-40]
	ldr	w8, [x9, #136]
	mov	x9, x0
	mov	w20, #1
	str	w8, [sp, #32]
	ldr	w8, [x10, #128]
	str	w8, [sp, #8]
	ldr	x8, [x9, #408]
	str	wzr, [sp, #16]
	str	x8, [sp]
	b	.LBB314_2
.LBB314_1:                              // %for.end71
                                        //   in Loop: Header=BB314_2 Depth=1
	ldur	x8, [x29, #-40]
	ldr	w9, [x8, #144]
	cmp	w9, #0                          // =0
	cset	w9, eq
	str	w9, [x8, #144]
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
.LBB314_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB314_5 Depth 2
                                        //       Child Loop BB314_10 Depth 3
	ldr	w8, [sp, #16]
	ldur	w9, [x29, #-28]
	cmp	w8, w9
	b.ge	.LBB314_11
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB314_2 Depth=1
	ldur	x8, [x29, #-24]
	ldrsw	x9, [sp, #16]
	ldr	w1, [sp, #8]
	ldr	x0, [x8, x9, lsl #3]
	bl	jzero_far
	str	wzr, [sp, #20]
	b	.LBB314_5
.LBB314_4:                              // %for.end
                                        //   in Loop: Header=BB314_5 Depth=2
	ldur	w8, [x29, #-52]
	ldr	x9, [sp, #72]
	strh	w8, [x9]
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB314_5:                              // %for.cond2
                                        //   Parent Loop BB314_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB314_10 Depth 3
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #32]
	cmp	w8, w9
	b.ge	.LBB314_1
// %bb.6:                               // %for.body5
                                        //   in Loop: Header=BB314_5 Depth=2
	ldpsw	x8, x10, [sp, #16]
	ldp	x11, x9, [x29, #-24]
	lsl	x8, x8, #3
	ldr	x9, [x9, x8]
	add	x9, x9, x10
	str	x9, [sp, #64]
	ldr	x8, [x11, x8]
	ldur	x9, [x29, #-40]
	str	x8, [sp, #56]
	ldr	w8, [x9, #144]
	cbz	w8, .LBB314_8
// %bb.7:                               // %if.then
                                        //   in Loop: Header=BB314_5 Depth=2
	ldr	w8, [sp, #8]
	ldp	x9, x11, [sp, #56]
	ldr	w10, [sp, #32]
	sub	w12, w8, #1                     // =1
	add	x9, x9, x12
	mul	w12, w12, w10
	neg	w10, w10
	stp	w10, w19, [sp, #24]
	ldur	x10, [x29, #-40]
	add	x11, x11, x12
	ldrsw	x12, [sp, #20]
	stp	x9, x11, [sp, #56]
	add	w8, w8, #1                      // =1
	add	x9, x10, x12, lsl #3
	ldr	x9, [x9, #112]
	add	x8, x9, w8, uxtw #1
	b	.LBB314_9
.LBB314_8:                              // %if.else
                                        //   in Loop: Header=BB314_5 Depth=2
	ldr	w8, [sp, #32]
	ldur	x9, [x29, #-40]
	ldrsw	x10, [sp, #20]
	stp	w8, w20, [sp, #24]
	add	x8, x9, x10, lsl #3
	ldr	x8, [x8, #112]
.LBB314_9:                              // %if.end
                                        //   in Loop: Header=BB314_5 Depth=2
	str	x8, [sp, #72]
	ldur	x8, [x29, #-40]
	ldrsw	x9, [sp, #20]
	ldr	x10, [x8, #48]
	ldr	x8, [x8, #32]
	lsl	x9, x9, #3
	ldr	x11, [x10, x9]
	ldr	w10, [sp, #8]
	ldr	x8, [x8, x9]
	stur	xzr, [x29, #-48]
	stur	wzr, [x29, #-52]
	stp	x8, x11, [sp, #40]
	mov	w8, w10
	str	w10, [sp, #12]
	cbz	w8, .LBB314_4
.LBB314_10:                             // %for.body31
                                        //   Parent Loop BB314_2 Depth=1
                                        //     Parent Loop BB314_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	ldrsw	x9, [sp, #28]
	ldur	w10, [x29, #-44]
	ldrsh	w8, [x8, x9, lsl #1]
	ldr	x9, [sp, #64]
	add	w8, w10, w8
	add	w8, w8, #8                      // =8
	asr	w8, w8, #4
	stur	w8, [x29, #-44]
	ldrb	w9, [x9]
	ldr	x10, [sp]
	add	w8, w8, w9
	stur	w8, [x29, #-44]
	ldrb	w8, [x10, w8, sxtw]
	ldr	x9, [sp, #48]
	stur	w8, [x29, #-44]
	ldrb	w8, [x9, x8]
	ldr	x9, [sp, #56]
	str	w8, [sp, #36]
	ldrb	w10, [x9]
	add	w8, w10, w8
	strb	w8, [x9]
	ldr	x8, [sp, #40]
	ldrsw	x9, [sp, #36]
	ldur	w10, [x29, #-44]
	ldp	x12, x11, [sp, #64]
	ldrb	w8, [x8, x9]
	ldur	w9, [x29, #-52]
	sub	w8, w10, w8
	lsl	w10, w8, #1
	stp	w10, w8, [x29, #-60]
	add	w8, w8, w10
	stur	w8, [x29, #-44]
	add	w8, w9, w8
	strh	w8, [x11]
	mov	w8, w10
	ldp	w9, w10, [x29, #-48]
	ldpsw	x11, x13, [sp, #24]
	ldr	x14, [sp, #56]
	ldr	x15, [sp, #72]
	add	w10, w10, w8
	ldur	w16, [x29, #-56]
	add	w9, w9, w10
	add	w8, w10, w8
	ldr	w10, [sp, #12]
	add	x11, x12, x11
	add	x12, x14, x13
	add	x13, x15, x13, lsl #1
	stp	x12, x11, [sp, #56]
	str	x13, [sp, #72]
	sub	w10, w10, #1                    // =1
	stp	w9, w16, [x29, #-52]
	stur	w8, [x29, #-44]
	mov	w8, w10
	str	w10, [sp, #12]
	cbnz	w8, .LBB314_10
	b	.LBB314_4
.LBB314_11:                             // %for.end77
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #176                    // =176
	ret
.Lfunc_end314:
	.size	quantize_fs_dither, .Lfunc_end314-quantize_fs_dither
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function make_odither_array
	.type	make_odither_array,@function
make_odither_array:                     // @make_odither_array
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #1024
	ldr	x8, [x8]
	blr	x8
	ldursw	x9, [x29, #-12]
	adrp	x8, base_dither_matrix
	add	x8, x8, :lo12:base_dither_matrix
	str	x0, [sp, #24]
	lsl	x9, x9, #9
	sub	x9, x9, #512                    // =512
	str	x9, [sp]
	mov	w9, #255
	str	wzr, [sp, #20]
	b	.LBB315_2
.LBB315_1:                              // %for.inc23
                                        //   in Loop: Header=BB315_2 Depth=1
	add	w10, w10, #1                    // =1
	str	w10, [sp, #20]
.LBB315_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB315_6 Depth 2
	ldr	w10, [sp, #20]
	cmp	w10, #15                        // =15
	b.gt	.LBB315_9
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB315_2 Depth=1
	str	wzr, [sp, #16]
	b	.LBB315_6
.LBB315_4:                              // %cond.false
                                        //   in Loop: Header=BB315_6 Depth=2
	ldr	x11, [sp]
	sdiv	x10, x10, x11
.LBB315_5:                              // %cond.end
                                        //   in Loop: Header=BB315_6 Depth=2
	ldr	x11, [sp, #24]
	ldpsw	x13, x12, [sp, #16]
	add	x11, x11, x12, lsl #6
	str	w10, [x11, x13, lsl #2]
	ldr	w10, [sp, #16]
	add	w10, w10, #1                    // =1
	str	w10, [sp, #16]
.LBB315_6:                              // %for.cond2
                                        //   Parent Loop BB315_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w11, w10, [sp, #16]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	cmp	w11, #15                        // =15
	b.gt	.LBB315_1
// %bb.7:                               // %for.body5
                                        //   in Loop: Header=BB315_6 Depth=2
	ldrsw	x11, [sp, #16]
	add	x10, x8, x10, lsl #4
	ldrb	w10, [x10, x11]
	sub	x10, x9, x10, lsl #1
	lsl	x11, x10, #8
	subs	x10, x11, x10
	str	x10, [sp, #8]
	b.pl	.LBB315_4
// %bb.8:                               // %cond.true
                                        //   in Loop: Header=BB315_6 Depth=2
	ldr	x11, [sp]
	neg	x10, x10
	sdiv	x10, x10, x11
	neg	x10, x10
	b	.LBB315_5
.LBB315_9:                              // %for.end25
	ldr	x0, [sp, #24]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end315:
	.size	make_odither_array, .Lfunc_end315-make_odither_array
	.cfi_endproc
                                        // -- End function
	.globl	jinit_2pass_quantizer           // -- Begin function jinit_2pass_quantizer
	.p2align	2
	.type	jinit_2pass_quantizer,@function
jinit_2pass_quantizer:                  // @jinit_2pass_quantizer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #88
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	adrp	x9, start_pass_2_quant
	str	x0, [sp, #16]
	add	x9, x9, :lo12:start_pass_2_quant
	str	x0, [x8, #608]
	mov	x8, x0
	str	x9, [x8]
	adrp	x9, new_color_map_2_quant
	mov	x8, x0
	add	x9, x9, :lo12:new_color_map_2_quant
	str	x9, [x8, #24]
	mov	x8, x0
	str	xzr, [x8, #64]
	mov	x8, x0
	str	xzr, [x8, #80]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #136]
	cmp	w8, #3                          // =3
	b.eq	.LBB316_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #46
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB316_2:                              // %if.end
	ldur	x0, [x29, #-8]
	mov	w1, #1
	mov	w2, #256
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	str	x0, [x8, #48]
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #31                         // =31
	b.gt	.LBB316_4
.LBB316_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	mov	w1, #1
	mov	w2, #4096
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #48]
	str	x0, [x8, x9, lsl #3]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #31                         // =31
	b.le	.LBB316_3
.LBB316_4:                              // %for.end
	ldr	x8, [sp, #16]
	mov	w9, #1
	str	w9, [x8, #56]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #124]
	cbz	w8, .LBB316_14
// %bb.5:                               // %if.then12
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #112]
	cmp	w8, #7                          // =7
	str	w8, [sp, #8]
	b.gt	.LBB316_7
// %bb.6:                               // %if.then14
	ldur	x8, [x29, #-8]
	mov	w9, #55
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #8
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB316_7:                              // %if.end22
	ldr	w8, [sp, #8]
	cmp	w8, #257                        // =257
	b.lt	.LBB316_9
// %bb.8:                               // %if.then24
	ldur	x8, [x29, #-8]
	mov	w9, #56
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #256
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB316_9:                              // %if.end33
	ldur	x0, [x29, #-8]
	ldr	w2, [sp, #8]
	mov	w1, #1
	mov	w3, #3
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #16]
	blr	x8
	ldr	x8, [sp, #16]
	str	x0, [x8, #32]
	ldr	w8, [sp, #8]
	ldr	x9, [sp, #16]
	str	w8, [x9, #40]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #104]
	cbz	w8, .LBB316_11
.LBB316_10:                             // %if.then40
	ldur	x8, [x29, #-8]
	mov	w9, #2
	str	w9, [x8, #104]
.LBB316_11:                             // %if.end42
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #104]
	cmp	w8, #2                          // =2
	b.ne	.LBB316_13
// %bb.12:                              // %if.then45
	ldur	x0, [x29, #-8]
	mov	w10, #6
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldr	w9, [x0, #128]
	ldr	x8, [x8, #8]
	add	w9, w9, #2                      // =2
	umull	x2, w9, w10
	blr	x8
	ldr	x8, [sp, #16]
	str	x0, [x8, #64]
	ldur	x0, [x29, #-8]
	bl	init_error_limit
.LBB316_13:                             // %if.end50
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB316_14:                             // %if.else
	ldr	x8, [sp, #16]
	str	xzr, [x8, #32]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #104]
	cbnz	w8, .LBB316_10
	b	.LBB316_11
.Lfunc_end316:
	.size	jinit_2pass_quantizer, .Lfunc_end316-jinit_2pass_quantizer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_pass_2_quant
	.type	start_pass_2_quant,@function
start_pass_2_quant:                     // @start_pass_2_quant
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #608]
	str	x8, [sp, #24]
	ldr	x8, [x8, #48]
	str	x8, [sp, #16]
	ldr	w8, [x0, #104]
	cbz	w8, .LBB317_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #2
	str	w9, [x8, #104]
.LBB317_2:                              // %if.end
	ldur	w8, [x29, #-12]
	cbz	w8, .LBB317_4
// %bb.3:                               // %if.then4
	ldr	x8, [sp, #24]
	adrp	x9, prescan_quantize
	add	x9, x9, :lo12:prescan_quantize
	str	x9, [x8, #8]
	ldr	x8, [sp, #24]
	adrp	x9, finish_pass1
	add	x9, x9, :lo12:finish_pass1
	str	x9, [x8, #16]
	ldr	x8, [sp, #24]
	mov	w9, #1
	str	w9, [x8, #56]
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #56]
	cbnz	w8, .LBB317_8
	b	.LBB317_11
.LBB317_4:                              // %if.else
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	adrp	x10, pass2_no_dither
	adrp	x11, pass2_fs_dither
	ldr	w8, [x8, #104]
	add	x10, x10, :lo12:pass2_no_dither
	add	x11, x11, :lo12:pass2_fs_dither
	cmp	w8, #2                          // =2
	csel	x8, x11, x10, eq
	str	x8, [x9, #8]
	ldr	x8, [sp, #24]
	adrp	x9, finish_pass2
	add	x9, x9, :lo12:finish_pass2
	str	x9, [x8, #16]
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #148]
	cmp	w8, #0                          // =0
	str	w8, [sp, #12]
	b.le	.LBB317_12
// %bb.5:                               // %if.end24
	ldr	w8, [sp, #12]
	cmp	w8, #257                        // =257
	b.ge	.LBB317_13
.LBB317_6:                              // %if.end35
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #104]
	cmp	w8, #2                          // =2
	b.eq	.LBB317_14
.LBB317_7:                              // %if.end50
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #56]
	cbz	w8, .LBB317_11
.LBB317_8:                              // %if.then53
	str	wzr, [sp, #12]
	mov	w8, wzr
	cmp	w8, #31                         // =31
	b.gt	.LBB317_10
.LBB317_9:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	mov	w1, #4096
	ldr	x0, [x8, x9, lsl #3]
	bl	jzero_far
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #31                         // =31
	b.le	.LBB317_9
.LBB317_10:                             // %for.end
	ldr	x8, [sp, #24]
	str	wzr, [x8, #56]
.LBB317_11:                             // %if.end58
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB317_12:                             // %if.then20
	ldur	x8, [x29, #-8]
	mov	w9, #55
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #1
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #12]
	cmp	w8, #257                        // =257
	b.lt	.LBB317_6
.LBB317_13:                             // %if.then26
	ldur	x8, [x29, #-8]
	mov	w9, #56
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	mov	w9, #256
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #104]
	cmp	w8, #2                          // =2
	b.ne	.LBB317_7
.LBB317_14:                             // %if.then38
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #24]
	mov	w10, #6
	ldr	w8, [x8, #128]
	add	w8, w8, #2                      // =2
	umull	x8, w8, w10
	str	x8, [sp]
	ldr	x8, [x9, #64]
	cbnz	x8, .LBB317_16
// %bb.15:                              // %if.then41
	ldur	x0, [x29, #-8]
	ldr	x2, [sp]
	mov	w1, #1
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x8, [sp, #24]
	str	x0, [x8, #64]
.LBB317_16:                             // %if.end43
	ldr	x8, [sp, #24]
	ldr	x1, [sp]
	ldr	x0, [x8, #64]
	bl	jzero_far
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #80]
	cbnz	x8, .LBB317_18
// %bb.17:                              // %if.then47
	ldur	x0, [x29, #-8]
	bl	init_error_limit
.LBB317_18:                             // %if.end48
	ldr	x8, [sp, #24]
	str	wzr, [x8, #72]
	ldr	x8, [sp, #24]
	ldr	w8, [x8, #56]
	cbnz	w8, .LBB317_8
	b	.LBB317_11
.Lfunc_end317:
	.size	start_pass_2_quant, .Lfunc_end317-start_pass_2_quant
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function new_color_map_2_quant
	.type	new_color_map_2_quant,@function
new_color_map_2_quant:                  // @new_color_map_2_quant
	.cfi_startproc
// %bb.0:                               // %entry
	.cfi_def_cfa_offset 16
	ldr	x8, [x0, #608]
	mov	w9, #1
	stp	x8, x0, [sp, #-16]!
	str	w9, [x8, #56]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end318:
	.size	new_color_map_2_quant, .Lfunc_end318-new_color_map_2_quant
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function init_error_limit
	.type	init_error_limit,@function
init_error_limit:                       // @init_error_limit
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #608]
	mov	w1, #1
	mov	w2, #2044
	str	x8, [sp, #16]
	ldr	x8, [x0, #8]
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #16]
	add	x9, x0, #1020                   // =1020
	stp	xzr, x9, [sp]
	str	x9, [x8, #80]
	ldr	w8, [sp, #4]
	cmp	w8, #16                         // =16
	b.ge	.LBB319_3
.LBB319_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [sp]
	ldr	x9, [sp, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	str	w8, [x9, x10, lsl #2]
	ldp	w8, w10, [sp]
	ldr	x9, [sp, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	neg	w8, w8
	sub	x9, x9, x10, lsl #2
	str	w8, [x9]
	ldp	w9, w8, [sp]
	add	w8, w8, #1                      // =1
	add	w9, w9, #1                      // =1
	stp	w9, w8, [sp]
	ldr	w8, [sp, #4]
	cmp	w8, #16                         // =16
	b.lt	.LBB319_1
	b	.LBB319_3
.LBB319_2:                              // %for.body8
                                        //   in Loop: Header=BB319_3 Depth=1
	ldp	w8, w10, [sp]
	ldr	x9, [sp, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	str	w8, [x9, x10, lsl #2]
	ldp	w8, w10, [sp]
	ldr	x9, [sp, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	neg	w8, w8
	sub	x9, x9, x10, lsl #2
	str	w8, [x9]
	ldp	w9, w8, [sp]
	add	w10, w8, #1                     // =1
	tst	w10, #0x1
	cinc	w8, w9, eq
	stp	w8, w10, [sp]
.LBB319_3:                              // %for.cond6
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #4]
	cmp	w8, #48                         // =48
	b.lt	.LBB319_2
	b	.LBB319_5
.LBB319_4:                              // %for.body20
                                        //   in Loop: Header=BB319_5 Depth=1
	ldp	w8, w10, [sp]
	ldr	x9, [sp, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	str	w8, [x9, x10, lsl #2]
	ldp	w8, w10, [sp]
	ldr	x9, [sp, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	neg	w8, w8
	sub	x9, x9, x10, lsl #2
	str	w8, [x9]
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB319_5:                              // %for.cond18
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #4]
	cmp	w8, #255                        // =255
	b.le	.LBB319_4
// %bb.6:                               // %for.end29
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end319:
	.size	init_error_limit, .Lfunc_end319-init_error_limit
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function prescan_quantize
	.type	prescan_quantize,@function
prescan_quantize:                       // @prescan_quantize
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	.cfi_def_cfa_offset 80
	stp	x1, x0, [sp, #64]
	str	x2, [sp, #56]
	str	w3, [sp, #52]
	ldr	x8, [x0, #608]
	str	x8, [sp, #40]
	ldr	x8, [x8, #48]
	str	x8, [sp, #16]
	ldr	w8, [x0, #128]
	str	wzr, [sp, #12]
	str	w8, [sp, #4]
	b	.LBB320_2
.LBB320_1:                              // %for.inc23
                                        //   in Loop: Header=BB320_2 Depth=1
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB320_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB320_5 Depth 2
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #52]
	cmp	w8, w9
	b.ge	.LBB320_8
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB320_2 Depth=1
	ldr	x8, [sp, #64]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, x9, lsl #3]
	ldr	w9, [sp, #4]
	b	.LBB320_5
.LBB320_4:                              // %if.end
                                        //   in Loop: Header=BB320_5 Depth=2
	ldr	x8, [sp, #32]
	ldr	w9, [sp, #8]
	add	x8, x8, #3                      // =3
	sub	w9, w9, #1                      // =1
.LBB320_5:                              // %for.cond3
                                        //   Parent Loop BB320_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	x8, [sp, #32]
	mov	w8, w9
	str	w9, [sp, #8]
	cbz	w8, .LBB320_1
// %bb.6:                               // %for.body5
                                        //   in Loop: Header=BB320_5 Depth=2
	ldr	x8, [sp, #32]
	ldr	x10, [sp, #16]
	ldrb	w9, [x8]
	ldrb	w11, [x8, #1]
	ldrb	w8, [x8, #2]
	and	x9, x9, #0xf8
	ldr	x9, [x10, x9]
	lsl	w10, w11, #4
	lsr	x8, x8, #2
	and	x10, x10, #0xfc0
	add	x9, x9, x10
	and	x8, x8, #0x3e
	add	x10, x9, x8
	str	x10, [sp, #24]
	ldrh	w10, [x9, x8]
	add	w10, w10, #1                    // =1
	tst	w10, #0xffff
	strh	w10, [x9, x8]
	b.gt	.LBB320_4
// %bb.7:                               // %if.then
                                        //   in Loop: Header=BB320_5 Depth=2
	ldr	x8, [sp, #24]
	ldrh	w9, [x8]
	sub	w9, w9, #1                      // =1
	strh	w9, [x8]
	b	.LBB320_4
.LBB320_8:                              // %for.end25
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end320:
	.size	prescan_quantize, .Lfunc_end320-prescan_quantize
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass1
	.type	finish_pass1,@function
finish_pass1:                           // @finish_pass1
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	ldr	x8, [x0, #608]
	stp	x8, x0, [sp]
	ldr	x8, [x8, #32]
	str	x8, [x0, #152]
	ldr	x8, [sp]
	ldr	w1, [x8, #40]
	bl	select_colors
	ldr	x8, [sp]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	mov	w9, #1
	str	w9, [x8, #56]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end321:
	.size	finish_pass1, .Lfunc_end321-finish_pass1
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function pass2_fs_dither
	.type	pass2_fs_dither,@function
pass2_fs_dither:                        // @pass2_fs_dither
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #240                    // =240
	stp	x29, x30, [sp, #192]            // 16-byte Folded Spill
	str	x21, [sp, #208]                 // 8-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #192                   // =192
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	str	x0, [x29, #24]
	stp	x2, x1, [x29, #-16]
	stur	w3, [x29, #-20]
	ldr	x8, [x0, #608]
	mov	x9, x0
	mov	x10, x0
	mov	w19, #-1
	stur	x8, [x29, #-32]
	ldr	x8, [x8, #48]
	mov	w20, #-3
	mov	w21, #3
	stur	x8, [x29, #-40]
	ldr	w8, [x9, #128]
	ldur	x9, [x29, #-32]
	str	w8, [sp, #60]
	ldr	x11, [x10, #408]
	ldr	x8, [x9, #80]
	mov	x9, x0
	mov	x10, x0
	stp	x8, x11, [sp, #40]
	ldr	x8, [x9, #152]
	ldr	x9, [x29, #24]
	ldr	x11, [x8]
	ldr	x8, [x10, #152]
	ldr	x8, [x8, #8]
	stp	x8, x11, [sp, #24]
	ldr	x8, [x9, #152]
	ldr	x8, [x8, #16]
	str	wzr, [sp, #68]
	str	x8, [sp, #16]
	b	.LBB322_2
.LBB322_1:                              // %for.end
                                        //   in Loop: Header=BB322_2 Depth=1
	ldur	w8, [x29, #-68]
	ldur	x9, [x29, #-88]
	strh	w8, [x9]
	ldur	w8, [x29, #-72]
	ldur	x9, [x29, #-88]
	strh	w8, [x9, #2]
	ldur	w8, [x29, #-76]
	ldur	x9, [x29, #-88]
	strh	w8, [x9, #4]
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #68]
.LBB322_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB322_8 Depth 2
	ldr	w8, [sp, #68]
	ldur	w9, [x29, #-20]
	cmp	w8, w9
	b.ge	.LBB322_11
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB322_2 Depth=1
	ldrsw	x8, [sp, #68]
	ldp	x10, x9, [x29, #-16]
	lsl	x8, x8, #3
	ldr	x11, [x9, x8]
	ldr	x8, [x10, x8]
	ldur	x9, [x29, #-32]
	stp	x8, x11, [sp, #88]
	ldr	w8, [x9, #72]
	cbz	w8, .LBB322_5
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB322_2 Depth=1
	ldr	w9, [sp, #60]
	ldp	x10, x11, [sp, #88]
	stp	w20, w19, [sp, #72]
	mov	w8, wzr
	add	w12, w9, w9, lsl #1
	sub	w9, w9, #1                      // =1
	add	x9, x10, x9
	sub	w10, w12, #3                    // =3
	add	x10, x11, x10
	stp	x9, x10, [sp, #88]
	ldur	x9, [x29, #-32]
	add	w11, w12, #3                    // =3
	ldr	x10, [x9, #64]
	add	x10, x10, w11, uxtw #1
	b	.LBB322_6
.LBB322_5:                              // %if.else
                                        //   in Loop: Header=BB322_2 Depth=1
	ldur	x9, [x29, #-32]
	mov	w8, #1
	stp	w21, w8, [sp, #72]
	ldr	x10, [x9, #64]
.LBB322_6:                              // %if.end
                                        //   in Loop: Header=BB322_2 Depth=1
	stur	x10, [x29, #-88]
	str	w8, [x9, #72]
	ldr	w8, [sp, #60]
	stur	xzr, [x29, #-52]
	stur	wzr, [x29, #-44]
	stur	xzr, [x29, #-64]
	stur	wzr, [x29, #-56]
	stur	xzr, [x29, #-76]
	stur	wzr, [x29, #-68]
	str	w8, [sp, #64]
	b	.LBB322_8
.LBB322_7:                              // %if.end81
                                        //   in Loop: Header=BB322_8 Depth=2
	ldp	x8, x9, [sp, #80]
	ldrh	w8, [x8]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	strb	w8, [x9]
	ldp	x11, x8, [sp, #24]
	ldrsw	x9, [sp, #12]
	ldp	w12, w10, [x29, #-48]
	ldur	w13, [x29, #-52]
	ldur	w14, [x29, #-68]
	ldrb	w8, [x8, x9]
	sub	w8, w10, w8
	stur	w8, [x29, #-44]
	ldrb	w10, [x11, x9]
	ldr	x11, [sp, #16]
	sub	w10, w12, w10
	stur	w10, [x29, #-48]
	ldrb	w9, [x11, x9]
	ldur	x12, [x29, #-88]
	lsl	w10, w8, #1
	add	w11, w8, w10
	add	w14, w14, w11
	stp	w10, w8, [sp, #8]
	sub	w8, w13, w9
	stur	w11, [x29, #-44]
	stur	w8, [x29, #-52]
	strh	w14, [x12]
	ldp	w12, w9, [x29, #-48]
	mov	w8, w10
	ldur	w10, [x29, #-56]
	ldur	w13, [x29, #-72]
	ldur	x14, [x29, #-88]
	add	w9, w9, w8
	lsl	w11, w12, #1
	add	w10, w10, w9
	add	w8, w9, w8
	add	w9, w12, w11
	stp	w9, w8, [x29, #-48]
	add	w8, w13, w9
	ldr	w15, [sp, #12]
	stp	w11, w12, [sp, #8]
	stur	w10, [x29, #-68]
	strh	w8, [x14, #2]
	mov	w8, w11
	mov	w11, w12
	ldp	w12, w9, [x29, #-52]
	ldur	w10, [x29, #-60]
	ldur	w13, [x29, #-76]
	ldur	x14, [x29, #-88]
	add	w9, w9, w8
	stp	w11, w15, [x29, #-60]
	lsl	w11, w12, #1
	add	w10, w10, w9
	add	w8, w9, w8
	add	w9, w12, w11
	stp	w9, w8, [x29, #-52]
	add	w8, w13, w9
	stp	w11, w12, [sp, #8]
	stur	w10, [x29, #-72]
	strh	w8, [x14, #4]
	mov	w8, w11
	mov	w10, w12
	ldpsw	x11, x12, [sp, #72]
	ldp	x13, x14, [sp, #88]
	ldur	w9, [x29, #-64]
	stur	w10, [x29, #-64]
	ldur	x10, [x29, #-88]
	add	x12, x13, x12
	ldur	w13, [x29, #-52]
	add	x14, x14, x11
	add	x10, x10, x11, lsl #1
	ldr	w11, [sp, #64]
	add	w13, w13, w8
	add	w9, w9, w13
	add	w8, w13, w8
	sub	w11, w11, #1                    // =1
	stp	x12, x14, [sp, #88]
	stur	x10, [x29, #-88]
	stur	w9, [x29, #-76]
	stur	w8, [x29, #-52]
	str	w11, [sp, #64]
.LBB322_8:                              // %for.cond19
                                        //   Parent Loop BB322_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #64]
	cbz	w8, .LBB322_1
// %bb.9:                               // %for.body21
                                        //   in Loop: Header=BB322_8 Depth=2
	ldur	x8, [x29, #-88]
	ldrsw	x9, [sp, #72]
	ldp	w11, w10, [x29, #-48]
	ldur	w12, [x29, #-52]
	add	x8, x8, x9, lsl #1
	ldrsh	w9, [x8]
	add	w9, w10, w9
	add	w9, w9, #8                      // =8
	asr	w9, w9, #4
	stur	w9, [x29, #-44]
	ldrsh	w10, [x8, #2]
	add	w10, w11, w10
	add	w10, w10, #8                    // =8
	asr	w10, w10, #4
	stur	w10, [x29, #-48]
	ldrsh	w8, [x8, #4]
	ldr	x11, [sp, #40]
	add	w8, w12, w8
	add	w8, w8, #8                      // =8
	asr	w8, w8, #4
	stur	w8, [x29, #-52]
	ldr	w9, [x11, w9, sxtw #2]
	ldr	x12, [sp, #40]
	stur	w9, [x29, #-44]
	ldr	w10, [x11, w10, sxtw #2]
	ldr	x11, [sp, #96]
	stur	w10, [x29, #-48]
	ldr	w8, [x12, w8, sxtw #2]
	ldr	x12, [sp, #96]
	stur	w8, [x29, #-52]
	ldrb	w11, [x11]
	add	w9, w9, w11
	stur	w9, [x29, #-44]
	ldrb	w11, [x12, #1]
	ldr	x12, [sp, #96]
	add	w10, w10, w11
	stur	w10, [x29, #-48]
	ldrb	w11, [x12, #2]
	ldr	x12, [sp, #48]
	add	w8, w8, w11
	stur	w8, [x29, #-52]
	ldrb	w9, [x12, w9, sxtw]
	ldr	x11, [sp, #48]
	stur	w9, [x29, #-44]
	ldrb	w10, [x11, w10, sxtw]
	ldr	x11, [sp, #48]
	and	x9, x9, #0xf8
	stur	w10, [x29, #-48]
	ldrb	w8, [x11, w8, sxtw]
	ldur	x11, [x29, #-40]
	lsl	w10, w10, #4
	and	x10, x10, #0xfc0
	stur	w8, [x29, #-52]
	ldr	x9, [x11, x9]
	lsr	x8, x8, #2
	and	x8, x8, #0x3e
	add	x9, x9, x10
	add	x10, x9, x8
	str	x10, [sp, #80]
	ldrh	w8, [x9, x8]
	cbnz	w8, .LBB322_7
// %bb.10:                              // %if.then77
                                        //   in Loop: Header=BB322_8 Depth=2
	ldp	w9, w8, [x29, #-48]
	ldur	w10, [x29, #-52]
	ldr	x0, [x29, #24]
	asr	w1, w8, #3
	asr	w2, w9, #2
	asr	w3, w10, #3
	bl	fill_inverse_cmap
	b	.LBB322_7
.LBB322_11:                             // %for.end134
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	x21, [sp, #208]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #192]            // 16-byte Folded Reload
	add	sp, sp, #240                    // =240
	ret
.Lfunc_end322:
	.size	pass2_fs_dither, .Lfunc_end322-pass2_fs_dither
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function pass2_no_dither
	.type	pass2_no_dither,@function
pass2_no_dither:                        // @pass2_no_dither
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	ldr	x8, [x0, #608]
	mov	x9, x0
	stur	x8, [x29, #-40]
	ldr	x8, [x8, #48]
	str	x8, [sp, #48]
	ldr	w8, [x9, #128]
	str	wzr, [sp, #8]
	str	w8, [sp]
	b	.LBB323_2
.LBB323_1:                              // %for.inc26
                                        //   in Loop: Header=BB323_2 Depth=1
	ldr	w8, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #8]
.LBB323_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB323_5 Depth 2
	ldr	w8, [sp, #8]
	ldur	w9, [x29, #-28]
	cmp	w8, w9
	b.ge	.LBB323_8
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB323_2 Depth=1
	ldrsw	x8, [sp, #8]
	ldp	x10, x9, [x29, #-24]
	lsl	x8, x8, #3
	ldr	x11, [x9, x8]
	ldr	x8, [x10, x8]
	ldr	w9, [sp]
	stp	x8, x11, [sp, #32]
	str	w9, [sp, #4]
	b	.LBB323_5
.LBB323_4:                              // %if.end
                                        //   in Loop: Header=BB323_5 Depth=2
	ldp	x8, x9, [sp, #24]
	ldrh	w8, [x8]
	add	x10, x9, #1                     // =1
	str	x10, [sp, #32]
	sub	w8, w8, #1                      // =1
	strb	w8, [x9]
	ldr	w8, [sp, #4]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
.LBB323_5:                              // %for.cond5
                                        //   Parent Loop BB323_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #4]
	cbz	w8, .LBB323_1
// %bb.6:                               // %for.body7
                                        //   in Loop: Header=BB323_5 Depth=2
	ldr	x8, [sp, #40]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #40]
	add	x10, x8, #2                     // =2
	ldrb	w9, [x8]
	str	x10, [sp, #40]
	ldrb	w10, [x8, #1]
	add	x11, x8, #3                     // =3
	lsr	w9, w9, #3
	str	x11, [sp, #40]
	lsr	w10, w10, #2
	stp	w10, w9, [sp, #16]
	ldrb	w8, [x8, #2]
	ldr	x11, [sp, #48]
	lsl	w9, w9, #3
	lsr	w8, w8, #3
	str	w8, [sp, #12]
	ldr	x9, [x11, w9, uxtw]
	lsl	x8, x8, #1
	add	x9, x9, x10, lsl #6
	add	x10, x9, x8
	str	x10, [sp, #24]
	ldrh	w8, [x9, x8]
	cbnz	w8, .LBB323_4
// %bb.7:                               // %if.then
                                        //   in Loop: Header=BB323_5 Depth=2
	ldur	x0, [x29, #-8]
	ldp	w2, w1, [sp, #16]
	ldr	w3, [sp, #12]
	bl	fill_inverse_cmap
	b	.LBB323_4
.LBB323_8:                              // %for.end27
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end323:
	.size	pass2_no_dither, .Lfunc_end323-pass2_no_dither
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_pass2
	.type	finish_pass2,@function
finish_pass2:                           // @finish_pass2
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end324:
	.size	finish_pass2, .Lfunc_end324-finish_pass2
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function fill_inverse_cmap
	.type	fill_inverse_cmap,@function
fill_inverse_cmap:                      // @fill_inverse_cmap
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x28, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #480                    // =480
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	sub	x19, x29, #80                   // =80
	stp	w2, w1, [x29, #-16]
	str	x0, [x19, #72]
	ldr	x9, [x0, #608]
	ldp	w10, w8, [x29, #-16]
	mov	w1, #4
	mov	w2, #2
	str	x9, [x19, #48]
	asr	w8, w8, #2
	ldr	x9, [x9, #48]
	bfi	w1, w8, #5, #27
	stur	w8, [x29, #-12]
	mov	w8, w3
	asr	w10, w10, #3
	stp	w3, w10, [x29, #-20]
	mov	w3, #4
	asr	w8, w8, #2
	bfi	w2, w10, #5, #27
	bfi	w3, w8, #5, #27
	add	x4, sp, #144                    // =144
	stur	w8, [x29, #-20]
	stp	w2, w1, [x29, #-48]
	str	x9, [x19, #40]
	stur	w3, [x29, #-52]
	bl	find_nearby_colors
	ldr	x8, [x19, #72]
	ldp	w2, w1, [x29, #-48]
	ldur	w3, [x29, #-52]
	mov	w4, w0
	str	w0, [sp, #140]
	add	x5, sp, #144                    // =144
	add	x6, sp, #12                     // =12
	mov	x0, x8
	add	x20, sp, #12                    // =12
	bl	find_best_colors
	ldp	w9, w8, [x29, #-16]
	ldur	w10, [x29, #-20]
	str	x20, [x19, #8]
	stur	wzr, [x29, #-56]
	lsl	w8, w8, #2
	lsl	w9, w9, #3
	lsl	w10, w10, #2
	stp	w9, w8, [x29, #-16]
	stur	w10, [x29, #-20]
	b	.LBB325_2
.LBB325_1:                              // %for.inc33
                                        //   in Loop: Header=BB325_2 Depth=1
	ldur	w8, [x29, #-56]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-56]
.LBB325_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB325_5 Depth 2
                                        //       Child Loop BB325_7 Depth 3
	ldur	w8, [x29, #-56]
	cmp	w8, #3                          // =3
	b.gt	.LBB325_8
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB325_2 Depth=1
	stur	wzr, [x29, #-60]
	b	.LBB325_5
.LBB325_4:                              // %for.inc30
                                        //   in Loop: Header=BB325_5 Depth=2
	ldur	w8, [x29, #-60]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-60]
.LBB325_5:                              // %for.cond15
                                        //   Parent Loop BB325_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB325_7 Depth 3
	ldur	w8, [x29, #-60]
	cmp	w8, #7                          // =7
	b.gt	.LBB325_1
// %bb.6:                               // %for.body17
                                        //   in Loop: Header=BB325_5 Depth=2
	ldp	w11, w8, [x29, #-16]
	ldp	w12, w9, [x29, #-60]
	ldr	x10, [x19, #40]
                                        // kill: def $w11 killed $w11 def $x11
                                        // kill: def $w12 killed $w12 def $x12
	sxtw	x11, w11
	add	w8, w8, w9
	ldr	x8, [x10, w8, sxtw #3]
	ldursw	x9, [x29, #-20]
	sxtw	x12, w12
	add	x10, x11, x12
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [x19]
	stur	wzr, [x29, #-64]
	mov	w8, wzr
	cmp	w8, #3                          // =3
	b.gt	.LBB325_4
.LBB325_7:                              // %for.body26
                                        //   Parent Loop BB325_2 Depth=1
                                        //     Parent Loop BB325_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	x9, x8, [x19]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	add	x10, x9, #2                     // =2
	stp	x10, x11, [x19]
	add	w8, w8, #1                      // =1
	strh	w8, [x9]
	ldur	w8, [x29, #-64]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-64]
	mov	w8, w8
	cmp	w8, #3                          // =3
	b.le	.LBB325_7
	b	.LBB325_4
.LBB325_8:                              // %for.end35
	add	sp, sp, #480                    // =480
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x28, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end325:
	.size	fill_inverse_cmap, .Lfunc_end325-fill_inverse_cmap
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function find_nearby_colors
	.type	find_nearby_colors,@function
find_nearby_colors:                     // @find_nearby_colors
	.cfi_startproc
// %bb.0:                               // %entry
	str	x29, [sp, #-16]!                // 8-byte Folded Spill
	sub	sp, sp, #2144                   // =2144
	.cfi_def_cfa_offset 2160
	.cfi_offset w29, -16
	str	x0, [sp, #2152]
	str	w1, [sp, #2140]
	str	w2, [sp, #2136]
	str	w3, [sp, #2132]
	str	x4, [sp, #2120]
	ldr	w9, [x0, #148]
	mov	w8, #2147483647
	mov	w10, w1
	str	x8, [sp, #2072]
	mov	w8, w2
	mov	w11, w1
	mov	w12, w2
	str	w9, [sp, #2116]
	add	w9, w10, #24                    // =24
	mov	w10, w3
	add	w8, w8, #28                     // =28
	str	w9, [sp, #2112]
	add	w9, w11, w9
	mov	w11, w3
	add	w10, w10, #24                   // =24
	str	w8, [sp, #2108]
	add	w8, w12, w8
	str	w10, [sp, #2104]
	add	w10, w11, w10
	asr	w8, w8, #1
	asr	w9, w9, #1
	asr	w10, w10, #1
	str	w8, [sp, #2096]
	mov	x8, sp
	str	wzr, [sp, #2088]
	str	w9, [sp, #2100]
	str	w10, [sp, #2092]
	b	.LBB326_2
.LBB326_1:                              // %for.inc
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	w9, [sp, #2088]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #2088]
.LBB326_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [sp, #2088]
	ldr	w10, [sp, #2116]
	cmp	w9, w10
	b.ge	.LBB326_32
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x9, [sp, #2152]
	ldrsw	x10, [sp, #2088]
	ldr	x9, [x9, #152]
	ldr	x9, [x9]
	ldrb	w9, [x9, x10]
	ldr	w10, [sp, #2140]
	str	w9, [sp, #2084]
	cmp	w9, w10
	b.ge	.LBB326_5
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2140]
	ldrsw	x11, [sp, #2084]
	ldrsw	x12, [sp, #2112]
	sub	x9, x9, x10
	sub	x10, x11, x12
	b	.LBB326_7
.LBB326_5:                              // %if.else
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	w10, [sp, #2112]
	cmp	w9, w10
	b.le	.LBB326_8
// %bb.6:                               // %if.then19
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x9, [sp, #2112]
	ldrsw	x10, [sp, #2084]
	ldrsw	x11, [sp, #2140]
	sub	x9, x10, x9
	sub	x10, x10, x11
.LBB326_7:                              // %if.end42
                                        //   in Loop: Header=BB326_2 Depth=1
	lsl	x9, x9, #1
	lsl	x10, x10, #1
	mul	x9, x9, x9
	str	x10, [sp, #2048]
	mul	x10, x10, x10
	str	x9, [sp, #2064]
	str	x10, [sp, #2056]
	b	.LBB326_12
.LBB326_8:                              // %if.else28
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x9, [sp, #2084]
	ldr	w10, [sp, #2100]
	str	xzr, [sp, #2064]
	cmp	w9, w10
	b.gt	.LBB326_10
// %bb.9:                               // %if.then31
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2112]
	b	.LBB326_11
.LBB326_10:                             // %if.else36
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2140]
.LBB326_11:                             // %if.end42
                                        //   in Loop: Header=BB326_2 Depth=1
	sub	x9, x9, x10
	lsl	x9, x9, #1
	str	x9, [sp, #2048]
	mul	x9, x9, x9
	str	x9, [sp, #2056]
.LBB326_12:                             // %if.end42
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x9, [sp, #2152]
	ldrsw	x10, [sp, #2088]
	ldr	x9, [x9, #152]
	ldr	x9, [x9, #8]
	ldrb	w9, [x9, x10]
	ldr	w10, [sp, #2136]
	str	w9, [sp, #2084]
	cmp	w9, w10
	b.ge	.LBB326_14
// %bb.13:                              // %if.then50
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2136]
	ldrsw	x11, [sp, #2084]
	ldrsw	x12, [sp, #2108]
	ldr	x13, [sp, #2064]
	ldr	x14, [sp, #2056]
	sub	x9, x9, x10
	b	.LBB326_16
.LBB326_14:                             // %if.else61
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	w11, [sp, #2108]
	ldrsw	x10, [sp, #2084]
	cmp	w9, w11
	b.le	.LBB326_17
// %bb.15:                              // %if.then64
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x9, [sp, #2108]
	ldrsw	x11, [sp, #2084]
	ldrsw	x12, [sp, #2136]
	ldr	x13, [sp, #2064]
	ldr	x14, [sp, #2056]
	sub	x9, x10, x9
.LBB326_16:                             // %if.end92
                                        //   in Loop: Header=BB326_2 Depth=1
	sub	x10, x11, x12
	add	x9, x9, x9, lsl #1
	add	x10, x10, x10, lsl #1
	madd	x9, x9, x9, x13
	str	x10, [sp, #2048]
	madd	x10, x10, x10, x14
	str	x9, [sp, #2064]
	str	x10, [sp, #2056]
	b	.LBB326_21
.LBB326_17:                             // %if.else75
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	w11, [sp, #2096]
	ldrsw	x9, [sp, #2084]
	cmp	w10, w11
	b.gt	.LBB326_19
// %bb.18:                              // %if.then78
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2108]
	b	.LBB326_20
.LBB326_19:                             // %if.else84
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2136]
.LBB326_20:                             // %if.end92
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x11, [sp, #2056]
	sub	x9, x9, x10
	add	x9, x9, x9, lsl #1
	str	x9, [sp, #2048]
	madd	x9, x9, x9, x11
	str	x9, [sp, #2056]
.LBB326_21:                             // %if.end92
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x9, [sp, #2152]
	ldrsw	x10, [sp, #2088]
	ldr	x9, [x9, #152]
	ldr	x9, [x9, #16]
	ldrb	w9, [x9, x10]
	ldr	w10, [sp, #2132]
	str	w9, [sp, #2084]
	cmp	w9, w10
	b.ge	.LBB326_23
// %bb.22:                              // %if.then100
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2132]
	ldrsw	x11, [sp, #2084]
	ldrsw	x12, [sp, #2104]
	ldr	x13, [sp, #2064]
	ldr	x14, [sp, #2056]
	sub	x9, x9, x10
	b	.LBB326_25
.LBB326_23:                             // %if.else111
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	w11, [sp, #2104]
	ldrsw	x10, [sp, #2084]
	cmp	w9, w11
	b.le	.LBB326_26
// %bb.24:                              // %if.then114
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x9, [sp, #2104]
	ldrsw	x11, [sp, #2084]
	ldrsw	x12, [sp, #2132]
	ldr	x13, [sp, #2064]
	ldr	x14, [sp, #2056]
	sub	x9, x10, x9
.LBB326_25:                             // %if.end142
                                        //   in Loop: Header=BB326_2 Depth=1
	sub	x10, x11, x12
	madd	x9, x9, x9, x13
	str	x10, [sp, #2048]
	madd	x10, x10, x10, x14
	str	x9, [sp, #2064]
	str	x10, [sp, #2056]
	b	.LBB326_30
.LBB326_26:                             // %if.else125
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	w11, [sp, #2092]
	ldrsw	x9, [sp, #2084]
	cmp	w10, w11
	b.gt	.LBB326_28
// %bb.27:                              // %if.then128
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2104]
	b	.LBB326_29
.LBB326_28:                             // %if.else134
                                        //   in Loop: Header=BB326_2 Depth=1
	ldrsw	x10, [sp, #2132]
.LBB326_29:                             // %if.end142
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x11, [sp, #2056]
	sub	x9, x9, x10
	str	x9, [sp, #2048]
	madd	x9, x9, x9, x11
	str	x9, [sp, #2056]
.LBB326_30:                             // %if.end142
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x10, [sp, #2056]
	ldr	x11, [sp, #2072]
	ldr	x9, [sp, #2064]
	ldrsw	x12, [sp, #2088]
	cmp	x10, x11
	str	x9, [x8, x12, lsl #3]
	b.ge	.LBB326_1
// %bb.31:                              // %if.then147
                                        //   in Loop: Header=BB326_2 Depth=1
	ldr	x9, [sp, #2056]
	str	x9, [sp, #2072]
	b	.LBB326_1
.LBB326_32:                             // %for.end
	mov	x8, sp
	str	wzr, [sp, #2080]
	str	wzr, [sp, #2088]
	b	.LBB326_34
.LBB326_33:                             // %for.inc163
                                        //   in Loop: Header=BB326_34 Depth=1
	ldr	w9, [sp, #2088]
	add	w9, w9, #1                      // =1
	str	w9, [sp, #2088]
.LBB326_34:                             // %for.cond149
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [sp, #2088]
	ldr	w10, [sp, #2116]
	cmp	w9, w10
	b.ge	.LBB326_37
// %bb.35:                              // %for.body152
                                        //   in Loop: Header=BB326_34 Depth=1
	ldrsw	x9, [sp, #2088]
	ldr	x10, [sp, #2072]
	ldr	x9, [x8, x9, lsl #3]
	cmp	x9, x10
	b.gt	.LBB326_33
// %bb.36:                              // %if.then157
                                        //   in Loop: Header=BB326_34 Depth=1
	ldrsw	x9, [sp, #2080]
	ldr	w10, [sp, #2088]
	ldr	x11, [sp, #2120]
	add	w12, w9, #1                     // =1
	str	w12, [sp, #2080]
	strb	w10, [x11, x9]
	b	.LBB326_33
.LBB326_37:                             // %for.end165
	ldr	w0, [sp, #2080]
	add	sp, sp, #2144                   // =2144
	ldr	x29, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end326:
	.size	find_nearby_colors, .Lfunc_end326-find_nearby_colors
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function find_best_colors
	.type	find_best_colors,@function
find_best_colors:                       // @find_best_colors
	.cfi_startproc
// %bb.0:                               // %entry
	str	x29, [sp, #-16]!                // 8-byte Folded Spill
	sub	sp, sp, #1168                   // =1168
	.cfi_def_cfa_offset 1184
	.cfi_offset w29, -16
	mov	x8, sp
	mov	w9, #127
	str	x8, [sp, #1104]
	mov	w8, #2147483647
	str	x0, [sp, #1176]
	str	w1, [sp, #1164]
	str	w2, [sp, #1160]
	str	w3, [sp, #1156]
	str	w4, [sp, #1152]
	str	x5, [sp, #1144]
	str	x6, [sp, #1136]
	str	w9, [sp, #1120]
	mov	w9, w9
	tbnz	w9, #31, .LBB327_2
.LBB327_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #1104]
	add	x10, x9, #8                     // =8
	str	x10, [sp, #1104]
	str	x8, [x9]
	ldr	w9, [sp, #1120]
	sub	w9, w9, #1                      // =1
	str	w9, [sp, #1120]
	mov	w9, w9
	tbz	w9, #31, .LBB327_1
.LBB327_2:                              // %for.end
	mov	w8, #72
	mov	x9, sp
	mov	w10, #3
	mov	w11, #7
	str	wzr, [sp, #1120]
	b	.LBB327_4
.LBB327_3:                              // %for.inc68
                                        //   in Loop: Header=BB327_4 Depth=1
	ldr	w12, [sp, #1120]
	add	w12, w12, #1                    // =1
	str	w12, [sp, #1120]
.LBB327_4:                              // %for.cond1
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB327_7 Depth 2
                                        //       Child Loop BB327_10 Depth 3
                                        //         Child Loop BB327_13 Depth 4
	ldr	w12, [sp, #1120]
	ldr	w13, [sp, #1152]
	cmp	w12, w13
	b.ge	.LBB327_16
// %bb.5:                               // %for.body3
                                        //   in Loop: Header=BB327_4 Depth=1
	ldr	x12, [sp, #1144]
	ldrsw	x13, [sp, #1120]
	ldrsw	x16, [sp, #1164]
	ldr	x14, [sp, #1176]
	ldrb	w12, [x12, x13]
	ldr	x13, [sp, #1176]
	str	w12, [sp, #1116]
	ldr	x15, [x13, #152]
	ldr	x15, [x15]
	ldrb	w15, [x15, x12]
	sub	x15, x16, x15
	lsl	x15, x15, #1
	str	x15, [sp, #1040]
	mul	x15, x15, x15
	str	x15, [sp, #1088]
	ldr	x13, [x13, #152]
	ldrsw	x16, [sp, #1160]
	ldr	x13, [x13, #8]
	ldrb	w13, [x13, x12]
	sub	x13, x16, x13
	add	x16, x13, x13, lsl #1
	madd	x15, x16, x16, x15
	str	x16, [sp, #1032]
	str	x15, [sp, #1088]
	ldr	x14, [x14, #152]
	mul	x13, x13, x8
	ldrsw	x16, [sp, #1156]
	add	x13, x13, #144                  // =144
	ldr	x14, [x14, #16]
	ldrb	w12, [x14, x12]
	ldr	x14, [sp, #1040]
	str	x13, [sp, #1032]
	ldr	x13, [sp, #1136]
	sub	x12, x16, x12
	lsl	x14, x14, #5
	str	x12, [sp, #1024]
	str	x13, [sp, #1096]
	madd	x13, x12, x12, x15
	lsl	x12, x12, #4
	add	x14, x14, #256                  // =256
	add	x12, x12, #64                   // =64
	str	x14, [sp, #1040]
	str	x9, [sp, #1104]
	str	x14, [sp, #1064]
	str	x13, [sp, #1088]
	str	x12, [sp, #1024]
	str	w10, [sp, #1132]
	b	.LBB327_7
.LBB327_6:                              // %for.end62
                                        //   in Loop: Header=BB327_7 Depth=2
	ldr	x12, [sp, #1064]
	ldr	x13, [sp, #1088]
	ldr	w14, [sp, #1132]
	add	x13, x13, x12
	add	x12, x12, #512                  // =512
	sub	w14, w14, #1                    // =1
	str	x13, [sp, #1088]
	str	x12, [sp, #1064]
	str	w14, [sp, #1132]
.LBB327_7:                              // %for.cond36
                                        //   Parent Loop BB327_4 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB327_10 Depth 3
                                        //         Child Loop BB327_13 Depth 4
	ldr	w12, [sp, #1132]
	tbnz	w12, #31, .LBB327_3
// %bb.8:                               // %for.body39
                                        //   in Loop: Header=BB327_7 Depth=2
	ldr	x12, [sp, #1088]
	ldr	x13, [sp, #1032]
	str	w11, [sp, #1128]
	str	x12, [sp, #1080]
	str	x13, [sp, #1056]
	b	.LBB327_10
.LBB327_9:                              // %for.end57
                                        //   in Loop: Header=BB327_10 Depth=3
	ldr	x12, [sp, #1056]
	ldr	x13, [sp, #1080]
	ldr	w14, [sp, #1128]
	add	x13, x13, x12
	add	x12, x12, #288                  // =288
	sub	w14, w14, #1                    // =1
	str	x13, [sp, #1080]
	str	x12, [sp, #1056]
	str	w14, [sp, #1128]
.LBB327_10:                             // %for.cond40
                                        //   Parent Loop BB327_4 Depth=1
                                        //     Parent Loop BB327_7 Depth=2
                                        // =>    This Loop Header: Depth=3
                                        //         Child Loop BB327_13 Depth 4
	ldr	w12, [sp, #1128]
	tbnz	w12, #31, .LBB327_6
// %bb.11:                              // %for.body43
                                        //   in Loop: Header=BB327_10 Depth=3
	ldr	x12, [sp, #1080]
	ldr	x13, [sp, #1024]
	str	w10, [sp, #1124]
	str	x12, [sp, #1072]
	str	x13, [sp, #1048]
	b	.LBB327_13
.LBB327_12:                             // %if.end
                                        //   in Loop: Header=BB327_13 Depth=4
	ldr	x12, [sp, #1048]
	ldr	x13, [sp, #1072]
	ldr	x14, [sp, #1104]
	ldr	x15, [sp, #1096]
	ldr	w16, [sp, #1124]
	add	x13, x13, x12
	add	x12, x12, #128                  // =128
	add	x14, x14, #8                    // =8
	add	x15, x15, #1                    // =1
	sub	w16, w16, #1                    // =1
	str	x13, [sp, #1072]
	str	x12, [sp, #1048]
	str	x14, [sp, #1104]
	str	x15, [sp, #1096]
	str	w16, [sp, #1124]
.LBB327_13:                             // %for.cond44
                                        //   Parent Loop BB327_4 Depth=1
                                        //     Parent Loop BB327_7 Depth=2
                                        //       Parent Loop BB327_10 Depth=3
                                        // =>      This Inner Loop Header: Depth=4
	ldr	w12, [sp, #1124]
	tbnz	w12, #31, .LBB327_9
// %bb.14:                              // %for.body47
                                        //   in Loop: Header=BB327_13 Depth=4
	ldr	x12, [sp, #1104]
	ldr	x13, [sp, #1072]
	ldr	x12, [x12]
	cmp	x13, x12
	b.ge	.LBB327_12
// %bb.15:                              // %if.then
                                        //   in Loop: Header=BB327_13 Depth=4
	ldr	x12, [sp, #1072]
	ldr	x13, [sp, #1104]
	str	x12, [x13]
	ldr	w12, [sp, #1116]
	ldr	x13, [sp, #1096]
	strb	w12, [x13]
	b	.LBB327_12
.LBB327_16:                             // %for.end69
	add	sp, sp, #1168                   // =1168
	ldr	x29, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end327:
	.size	find_best_colors, .Lfunc_end327-find_best_colors
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function select_colors
	.type	select_colors,@function
select_colors:                          // @select_colors
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldr	x8, [x0, #8]
	mov	w19, #40
	smull	x2, w1, w19
	mov	w1, #1
	ldr	x8, [x8]
	mov	w20, #1
	blr	x8
	mov	x8, x0
	mov	w9, #31
	str	x0, [sp, #8]
	str	w20, [sp, #4]
	str	wzr, [x0]
	str	w9, [x8, #4]
	mov	x8, x0
	str	wzr, [x8, #8]
	mov	x8, x0
	mov	w10, #63
	str	w10, [x8, #12]
	mov	x8, x0
	str	wzr, [x8, #16]
	mov	x8, x0
	str	w9, [x8, #20]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #8]
	bl	update_box
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #8]
	ldr	w2, [sp, #4]
	ldur	w3, [x29, #-12]
	bl	median_cut
	stp	wzr, w0, [sp]
	ldp	w8, w9, [sp]
	cmp	w8, w9
	b.ge	.LBB328_2
.LBB328_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #8]
	ldrsw	x2, [sp]
	ldur	x0, [x29, #-8]
	madd	x1, x2, x19, x8
                                        // kill: def $w2 killed $w2 killed $x2
	bl	compute_color
	ldr	w8, [sp]
	add	w8, w8, #1                      // =1
	str	w8, [sp]
	ldp	w8, w9, [sp]
	cmp	w8, w9
	b.lt	.LBB328_1
.LBB328_2:                              // %for.end
	ldr	w8, [sp, #4]
	ldur	x9, [x29, #-8]
	mov	w1, #1
	str	w8, [x9, #148]
	ldur	x8, [x29, #-8]
	mov	w9, #95
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #4]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end328:
	.size	select_colors, .Lfunc_end328-select_colors
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function update_box
	.type	update_box,@function
update_box:                             // @update_box
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	.cfi_def_cfa_offset 112
	stp	x1, x0, [sp, #96]
	ldr	x8, [x0, #608]
	mov	x9, x1
	mov	x10, x1
	str	x8, [sp, #88]
	ldr	x8, [x8, #48]
	str	x8, [sp, #80]
	ldr	w11, [x9]
	ldr	w8, [x10, #4]
	mov	x9, x1
	mov	x10, x1
	stp	w8, w11, [sp, #52]
	ldr	w11, [x9, #8]
	ldr	w9, [x10, #12]
	mov	x10, x1
	stp	w9, w11, [sp, #44]
	mov	x9, x1
	ldr	w11, [x10, #16]
	ldr	w10, [sp, #56]
	ldr	w9, [x9, #20]
	cmp	w8, w10
	stp	w9, w11, [sp, #36]
	b.le	.LBB329_11
// %bb.1:                               // %if.then
	ldr	w8, [sp, #56]
.LBB329_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_4 Depth 2
                                        //       Child Loop BB329_6 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_11
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB329_2 Depth=1
	ldr	w8, [sp, #48]
.LBB329_4:                              // %for.cond10
                                        //   Parent Loop BB329_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_6 Depth 3
	ldr	w9, [sp, #44]
	str	w8, [sp, #64]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_9
// %bb.5:                               // %for.body12
                                        //   in Loop: Header=BB329_4 Depth=2
	ldr	x8, [sp, #80]
	ldpsw	x10, x9, [sp, #64]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #40]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	str	w9, [sp, #60]
	mov	w8, w9
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.gt	.LBB329_8
.LBB329_6:                              // %for.body19
                                        //   Parent Loop BB329_2 Depth=1
                                        //     Parent Loop BB329_4 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	add	x9, x8, #2                      // =2
	str	x9, [sp, #72]
	ldrh	w8, [x8]
	cbnz	w8, .LBB329_10
// %bb.7:                               // %for.inc
                                        //   in Loop: Header=BB329_6 Depth=3
	ldr	w8, [sp, #60]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #60]
	mov	w8, w8
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.le	.LBB329_6
.LBB329_8:                              // %for.inc24
                                        //   in Loop: Header=BB329_4 Depth=2
	ldr	w8, [sp, #64]
	add	w8, w8, #1                      // =1
	b	.LBB329_4
.LBB329_9:                              // %for.inc27
                                        //   in Loop: Header=BB329_2 Depth=1
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	b	.LBB329_2
.LBB329_10:                             // %if.then22
	ldr	w8, [sp, #68]
	ldr	x9, [sp, #96]
	str	w8, [sp, #56]
	str	w8, [x9]
.LBB329_11:                             // %have_c0min
	ldp	w8, w9, [sp, #52]
	cmp	w8, w9
	b.le	.LBB329_22
// %bb.12:                              // %if.then33
	ldr	w8, [sp, #52]
.LBB329_13:                             // %for.cond34
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_15 Depth 2
                                        //       Child Loop BB329_17 Depth 3
	ldr	w9, [sp, #56]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.lt	.LBB329_22
// %bb.14:                              // %for.body37
                                        //   in Loop: Header=BB329_13 Depth=1
	ldr	w8, [sp, #48]
.LBB329_15:                             // %for.cond38
                                        //   Parent Loop BB329_13 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_17 Depth 3
	ldr	w9, [sp, #44]
	str	w8, [sp, #64]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_20
// %bb.16:                              // %for.body41
                                        //   in Loop: Header=BB329_15 Depth=2
	ldr	x8, [sp, #80]
	ldpsw	x10, x9, [sp, #64]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #40]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	str	w9, [sp, #60]
	mov	w8, w9
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.gt	.LBB329_19
.LBB329_17:                             // %for.body51
                                        //   Parent Loop BB329_13 Depth=1
                                        //     Parent Loop BB329_15 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	add	x9, x8, #2                      // =2
	str	x9, [sp, #72]
	ldrh	w8, [x8]
	cbnz	w8, .LBB329_21
// %bb.18:                              // %for.inc59
                                        //   in Loop: Header=BB329_17 Depth=3
	ldr	w8, [sp, #60]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #60]
	mov	w8, w8
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.le	.LBB329_17
.LBB329_19:                             // %for.inc62
                                        //   in Loop: Header=BB329_15 Depth=2
	ldr	w8, [sp, #64]
	add	w8, w8, #1                      // =1
	b	.LBB329_15
.LBB329_20:                             // %for.inc65
                                        //   in Loop: Header=BB329_13 Depth=1
	ldr	w8, [sp, #68]
	sub	w8, w8, #1                      // =1
	b	.LBB329_13
.LBB329_21:                             // %if.then56
	ldr	w8, [sp, #68]
	ldr	x9, [sp, #96]
	str	w8, [sp, #52]
	str	w8, [x9, #4]
.LBB329_22:                             // %have_c0max
	ldp	w8, w9, [sp, #44]
	cmp	w8, w9
	b.le	.LBB329_33
// %bb.23:                              // %if.then70
	ldr	w8, [sp, #48]
.LBB329_24:                             // %for.cond71
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_26 Depth 2
                                        //       Child Loop BB329_28 Depth 3
	ldr	w9, [sp, #44]
	str	w8, [sp, #64]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_33
// %bb.25:                              // %for.body74
                                        //   in Loop: Header=BB329_24 Depth=1
	ldr	w8, [sp, #56]
.LBB329_26:                             // %for.cond75
                                        //   Parent Loop BB329_24 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_28 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_31
// %bb.27:                              // %for.body78
                                        //   in Loop: Header=BB329_26 Depth=2
	ldr	x8, [sp, #80]
	ldpsw	x10, x9, [sp, #64]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #40]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	str	w9, [sp, #60]
	mov	w8, w9
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.gt	.LBB329_30
.LBB329_28:                             // %for.body88
                                        //   Parent Loop BB329_24 Depth=1
                                        //     Parent Loop BB329_26 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	add	x9, x8, #2                      // =2
	str	x9, [sp, #72]
	ldrh	w8, [x8]
	cbnz	w8, .LBB329_32
// %bb.29:                              // %for.inc96
                                        //   in Loop: Header=BB329_28 Depth=3
	ldr	w8, [sp, #60]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #60]
	mov	w8, w8
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.le	.LBB329_28
.LBB329_30:                             // %for.inc99
                                        //   in Loop: Header=BB329_26 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	b	.LBB329_26
.LBB329_31:                             // %for.inc102
                                        //   in Loop: Header=BB329_24 Depth=1
	ldr	w8, [sp, #64]
	add	w8, w8, #1                      // =1
	b	.LBB329_24
.LBB329_32:                             // %if.then93
	ldr	w8, [sp, #64]
	ldr	x9, [sp, #96]
	str	w8, [sp, #48]
	str	w8, [x9, #8]
.LBB329_33:                             // %have_c1min
	ldp	w8, w9, [sp, #44]
	cmp	w8, w9
	b.le	.LBB329_44
// %bb.34:                              // %if.then108
	ldr	w8, [sp, #44]
.LBB329_35:                             // %for.cond109
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_37 Depth 2
                                        //       Child Loop BB329_39 Depth 3
	ldr	w9, [sp, #48]
	str	w8, [sp, #64]
	mov	w8, w8
	cmp	w8, w9
	b.lt	.LBB329_44
// %bb.36:                              // %for.body112
                                        //   in Loop: Header=BB329_35 Depth=1
	ldr	w8, [sp, #56]
.LBB329_37:                             // %for.cond113
                                        //   Parent Loop BB329_35 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_39 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_42
// %bb.38:                              // %for.body116
                                        //   in Loop: Header=BB329_37 Depth=2
	ldr	x8, [sp, #80]
	ldpsw	x10, x9, [sp, #64]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #40]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	str	w9, [sp, #60]
	mov	w8, w9
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.gt	.LBB329_41
.LBB329_39:                             // %for.body126
                                        //   Parent Loop BB329_35 Depth=1
                                        //     Parent Loop BB329_37 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	add	x9, x8, #2                      // =2
	str	x9, [sp, #72]
	ldrh	w8, [x8]
	cbnz	w8, .LBB329_43
// %bb.40:                              // %for.inc134
                                        //   in Loop: Header=BB329_39 Depth=3
	ldr	w8, [sp, #60]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #60]
	mov	w8, w8
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.le	.LBB329_39
.LBB329_41:                             // %for.inc137
                                        //   in Loop: Header=BB329_37 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	b	.LBB329_37
.LBB329_42:                             // %for.inc140
                                        //   in Loop: Header=BB329_35 Depth=1
	ldr	w8, [sp, #64]
	sub	w8, w8, #1                      // =1
	b	.LBB329_35
.LBB329_43:                             // %if.then131
	ldr	w8, [sp, #64]
	ldr	x9, [sp, #96]
	str	w8, [sp, #44]
	str	w8, [x9, #12]
.LBB329_44:                             // %have_c1max
	ldp	w8, w9, [sp, #36]
	cmp	w8, w9
	b.le	.LBB329_55
// %bb.45:                              // %if.then146
	ldr	w8, [sp, #40]
.LBB329_46:                             // %for.cond147
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_48 Depth 2
                                        //       Child Loop BB329_50 Depth 3
	ldr	w9, [sp, #36]
	str	w8, [sp, #60]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_55
// %bb.47:                              // %for.body150
                                        //   in Loop: Header=BB329_46 Depth=1
	ldr	w8, [sp, #56]
.LBB329_48:                             // %for.cond151
                                        //   Parent Loop BB329_46 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_50 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_53
// %bb.49:                              // %for.body154
                                        //   in Loop: Header=BB329_48 Depth=2
	ldr	x8, [sp, #80]
	ldrsw	x9, [sp, #68]
	ldrsw	x10, [sp, #48]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #60]
	str	w10, [sp, #64]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	mov	w8, w10
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.gt	.LBB329_52
.LBB329_50:                             // %for.body164
                                        //   Parent Loop BB329_46 Depth=1
                                        //     Parent Loop BB329_48 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	ldrh	w8, [x8]
	cbnz	w8, .LBB329_54
// %bb.51:                              // %for.inc171
                                        //   in Loop: Header=BB329_50 Depth=3
	ldr	w8, [sp, #64]
	ldr	x9, [sp, #72]
	add	w8, w8, #1                      // =1
	add	x9, x9, #64                     // =64
	str	w8, [sp, #64]
	str	x9, [sp, #72]
	mov	w8, w8
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.le	.LBB329_50
.LBB329_52:                             // %for.inc174
                                        //   in Loop: Header=BB329_48 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	b	.LBB329_48
.LBB329_53:                             // %for.inc177
                                        //   in Loop: Header=BB329_46 Depth=1
	ldr	w8, [sp, #60]
	add	w8, w8, #1                      // =1
	b	.LBB329_46
.LBB329_54:                             // %if.then168
	ldr	w8, [sp, #60]
	ldr	x9, [sp, #96]
	str	w8, [sp, #40]
	str	w8, [x9, #16]
.LBB329_55:                             // %have_c2min
	ldp	w8, w9, [sp, #36]
	cmp	w8, w9
	b.le	.LBB329_66
// %bb.56:                              // %if.then183
	ldr	w8, [sp, #36]
.LBB329_57:                             // %for.cond184
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_59 Depth 2
                                        //       Child Loop BB329_61 Depth 3
	ldr	w9, [sp, #40]
	str	w8, [sp, #60]
	mov	w8, w8
	cmp	w8, w9
	b.lt	.LBB329_66
// %bb.58:                              // %for.body187
                                        //   in Loop: Header=BB329_57 Depth=1
	ldr	w8, [sp, #56]
.LBB329_59:                             // %for.cond188
                                        //   Parent Loop BB329_57 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_61 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_64
// %bb.60:                              // %for.body191
                                        //   in Loop: Header=BB329_59 Depth=2
	ldr	x8, [sp, #80]
	ldrsw	x9, [sp, #68]
	ldrsw	x10, [sp, #48]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #60]
	str	w10, [sp, #64]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	mov	w8, w10
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.gt	.LBB329_63
.LBB329_61:                             // %for.body201
                                        //   Parent Loop BB329_57 Depth=1
                                        //     Parent Loop BB329_59 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	x8, [sp, #72]
	ldrh	w8, [x8]
	cbnz	w8, .LBB329_65
// %bb.62:                              // %for.inc208
                                        //   in Loop: Header=BB329_61 Depth=3
	ldr	w8, [sp, #64]
	ldr	x9, [sp, #72]
	add	w8, w8, #1                      // =1
	add	x9, x9, #64                     // =64
	str	w8, [sp, #64]
	str	x9, [sp, #72]
	mov	w8, w8
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.le	.LBB329_61
.LBB329_63:                             // %for.inc212
                                        //   in Loop: Header=BB329_59 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	b	.LBB329_59
.LBB329_64:                             // %for.inc215
                                        //   in Loop: Header=BB329_57 Depth=1
	ldr	w8, [sp, #60]
	sub	w8, w8, #1                      // =1
	b	.LBB329_57
.LBB329_65:                             // %if.then205
	ldr	w8, [sp, #60]
	ldr	x9, [sp, #96]
	str	w8, [sp, #36]
	str	w8, [x9, #20]
.LBB329_66:                             // %have_c2max
	ldp	w8, w9, [sp, #52]
	ldp	w10, w11, [sp, #44]
	ldp	w12, w13, [sp, #36]
	sub	w8, w8, w9
	sub	w9, w10, w11
	sub	w10, w12, w13
	lsl	w10, w10, #3
	sxtw	x11, w10
	lsl	w8, w8, #4
	stp	xzr, x11, [sp]
	ldr	x11, [sp, #96]
	add	w9, w9, w9, lsl #1
	sxtw	x12, w8
	lsl	w9, w9, #2
	smull	x8, w8, w8
	smaddl	x8, w9, w9, x8
	sxtw	x9, w9
	smaddl	x8, w10, w10, x8
	stp	x9, x12, [sp, #16]
	str	x8, [x11, #24]
	ldr	w8, [sp, #56]
	b	.LBB329_68
.LBB329_67:                             // %for.inc263
                                        //   in Loop: Header=BB329_68 Depth=1
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
.LBB329_68:                             // %for.cond232
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_71 Depth 2
                                        //       Child Loop BB329_74 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #68]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_77
// %bb.69:                              // %for.body235
                                        //   in Loop: Header=BB329_68 Depth=1
	ldr	w8, [sp, #48]
	b	.LBB329_71
.LBB329_70:                             // %for.inc260
                                        //   in Loop: Header=BB329_71 Depth=2
	ldr	w8, [sp, #64]
	add	w8, w8, #1                      // =1
.LBB329_71:                             // %for.cond236
                                        //   Parent Loop BB329_68 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_74 Depth 3
	ldr	w9, [sp, #44]
	str	w8, [sp, #64]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB329_67
// %bb.72:                              // %for.body239
                                        //   in Loop: Header=BB329_71 Depth=2
	ldr	x8, [sp, #80]
	ldpsw	x10, x9, [sp, #64]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #40]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #72]
	str	w9, [sp, #60]
	b	.LBB329_74
.LBB329_73:                             // %for.inc256
                                        //   in Loop: Header=BB329_74 Depth=3
	ldr	w8, [sp, #60]
	ldr	x9, [sp, #72]
	add	w8, w8, #1                      // =1
	add	x9, x9, #2                      // =2
	str	w8, [sp, #60]
	str	x9, [sp, #72]
.LBB329_74:                             // %for.cond246
                                        //   Parent Loop BB329_68 Depth=1
                                        //     Parent Loop BB329_71 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.gt	.LBB329_70
// %bb.75:                              // %for.body249
                                        //   in Loop: Header=BB329_74 Depth=3
	ldr	x8, [sp, #72]
	ldrh	w8, [x8]
	cbz	w8, .LBB329_73
// %bb.76:                              // %if.then253
                                        //   in Loop: Header=BB329_74 Depth=3
	ldr	x8, [sp]
	add	x8, x8, #1                      // =1
	str	x8, [sp]
	b	.LBB329_73
.LBB329_77:                             // %for.end265
	ldr	x8, [sp]
	ldr	x9, [sp, #96]
	str	x8, [x9, #32]
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end329:
	.size	update_box, .Lfunc_end329-update_box
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function median_cut
	.type	median_cut,@function
median_cut:                             // @median_cut
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #112                    // =112
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	str	x21, [sp, #80]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	w19, #40
	mov	w20, #1
	mov	w21, #2
	str	x0, [x29, #24]
	stur	x1, [x29, #-8]
	stp	w3, w2, [x29, #-16]
	b	.LBB330_3
.LBB330_1:                              // %sw.bb44
                                        //   in Loop: Header=BB330_3 Depth=1
	ldr	x8, [sp, #16]
	ldp	w10, w9, [x8, #16]
	add	w9, w9, w10
	cmp	w9, #0                          // =0
	cinc	w9, w9, lt
	asr	w9, w9, #1
	stur	w9, [x29, #-24]
	str	w9, [x8, #20]
	mov	w8, w9
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [x9, #16]
.LBB330_2:                              // %sw.epilog
                                        //   in Loop: Header=BB330_3 Depth=1
	ldr	x0, [x29, #24]
	ldr	x1, [sp, #16]
	bl	update_box
	ldr	x0, [x29, #24]
	ldr	x1, [sp, #8]
	bl	update_box
	ldur	w8, [x29, #-12]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-12]
.LBB330_3:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x29, #-16]
	cmp	w8, w9
	b.ge	.LBB330_16
// %bb.4:                               // %while.body
                                        //   in Loop: Header=BB330_3 Depth=1
	ldp	w8, w1, [x29, #-16]
	ldur	x0, [x29, #-8]
	cmp	w8, w1, lsl #1
	b.lt	.LBB330_6
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB330_3 Depth=1
	bl	find_biggest_color_pop
	mov	x8, x0
	str	x0, [sp, #16]
	cbnz	x8, .LBB330_7
	b	.LBB330_16
.LBB330_6:                              // %if.else
                                        //   in Loop: Header=BB330_3 Depth=1
	bl	find_biggest_volume
	mov	x8, x0
	str	x0, [sp, #16]
	cbz	x8, .LBB330_16
.LBB330_7:                              // %if.end5
                                        //   in Loop: Header=BB330_3 Depth=1
	ldur	x8, [x29, #-8]
	ldursw	x9, [x29, #-12]
	ldr	x10, [sp, #16]
	madd	x8, x9, x19, x8
	str	x8, [sp, #8]
	ldr	w9, [x10, #4]
	str	w9, [x8, #4]
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8, #12]
	str	w8, [x9, #12]
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8, #20]
	str	w8, [x9, #20]
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8]
	str	w8, [x9]
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8, #8]
	str	w8, [x9, #8]
	ldp	x9, x8, [sp, #8]
	ldr	w8, [x8, #16]
	str	w8, [x9, #16]
	ldr	x8, [sp, #16]
	ldp	w10, w9, [x8]
	sub	w9, w9, w10
	lsl	w9, w9, #4
	stur	w9, [x29, #-28]
	ldp	w11, w10, [x8, #8]
	sub	w10, w10, w11
	ldp	w8, w11, [x8, #16]
	add	w10, w10, w10, lsl #1
	lsl	w10, w10, #2
	cmp	w9, w10
	sub	w8, w11, w8
	lsl	w8, w8, #3
	str	w10, [sp, #24]
	stp	w8, w10, [sp, #28]
	stur	w20, [x29, #-20]
	b.gt	.LBB330_10
// %bb.8:                               // %if.end27
                                        //   in Loop: Header=BB330_3 Depth=1
	ldp	w9, w8, [sp, #24]
	cmp	w8, w9
	b.gt	.LBB330_11
.LBB330_9:                              // %if.end30
                                        //   in Loop: Header=BB330_3 Depth=1
	ldur	w8, [x29, #-20]
	cmp	w8, #2                          // =2
	b.ne	.LBB330_12
	b	.LBB330_1
.LBB330_10:                             // %if.then26
                                        //   in Loop: Header=BB330_3 Depth=1
	ldur	w8, [x29, #-28]
	stur	wzr, [x29, #-20]
	str	w8, [sp, #24]
	ldp	w9, w8, [sp, #24]
	cmp	w8, w9
	b.le	.LBB330_9
.LBB330_11:                             // %if.then29
                                        //   in Loop: Header=BB330_3 Depth=1
	stur	w21, [x29, #-20]
	mov	w8, w21
	cmp	w8, #2                          // =2
	b.eq	.LBB330_1
.LBB330_12:                             // %if.end30
                                        //   in Loop: Header=BB330_3 Depth=1
	cmp	w8, #1                          // =1
	b.eq	.LBB330_15
// %bb.13:                              // %if.end30
                                        //   in Loop: Header=BB330_3 Depth=1
	cbnz	w8, .LBB330_2
// %bb.14:                              // %sw.bb
                                        //   in Loop: Header=BB330_3 Depth=1
	ldr	x8, [sp, #16]
	ldp	w10, w9, [x8]
	add	w9, w9, w10
	cmp	w9, #0                          // =0
	cinc	w9, w9, lt
	asr	w9, w9, #1
	stur	w9, [x29, #-24]
	str	w9, [x8, #4]
	mov	w8, w9
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [x9]
	b	.LBB330_2
.LBB330_15:                             // %sw.bb36
                                        //   in Loop: Header=BB330_3 Depth=1
	ldr	x8, [sp, #16]
	ldp	w10, w9, [x8, #8]
	add	w9, w9, w10
	cmp	w9, #0                          // =0
	cinc	w9, w9, lt
	asr	w9, w9, #1
	stur	w9, [x29, #-24]
	str	w9, [x8, #12]
	mov	w8, w9
	ldr	x9, [sp, #8]
	add	w8, w8, #1                      // =1
	str	w8, [x9, #8]
	b	.LBB330_2
.LBB330_16:                             // %while.end
	ldur	w0, [x29, #-12]
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x21, [sp, #80]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #112                    // =112
	ret
.Lfunc_end330:
	.size	median_cut, .Lfunc_end330-median_cut
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function compute_color
	.type	compute_color,@function
compute_color:                          // @compute_color
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	.cfi_def_cfa_offset 128
	stp	x1, x0, [sp, #112]
	str	w2, [sp, #108]
	ldr	x8, [x0, #608]
	mov	x9, x1
	mov	x10, x1
	str	x8, [sp, #96]
	ldr	x8, [x8, #48]
	stp	xzr, xzr, [sp, #16]
	stp	xzr, xzr, [sp]
	str	x8, [sp, #88]
	ldr	w11, [x9]
	ldr	w8, [x10, #4]
	mov	x9, x1
	mov	x10, x1
	stp	w8, w11, [sp, #60]
	ldr	w11, [x9, #8]
	ldr	w8, [x10, #12]
	ldr	x9, [sp, #112]
	ldr	x10, [sp, #112]
	stp	w8, w11, [sp, #52]
	ldr	w11, [x9, #16]
	ldr	w8, [x10, #20]
	ldr	w9, [sp, #64]
	stp	w8, w11, [sp, #44]
	str	w9, [sp, #76]
	b	.LBB331_2
.LBB331_1:                              // %for.inc37
                                        //   in Loop: Header=BB331_2 Depth=1
	ldr	w8, [sp, #76]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #76]
.LBB331_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB331_5 Depth 2
                                        //       Child Loop BB331_8 Depth 3
	ldr	w8, [sp, #76]
	ldr	w9, [sp, #60]
	cmp	w8, w9
	b.gt	.LBB331_11
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB331_2 Depth=1
	ldr	w8, [sp, #56]
	b	.LBB331_5
.LBB331_4:                              // %for.inc34
                                        //   in Loop: Header=BB331_5 Depth=2
	ldr	w8, [sp, #72]
	add	w8, w8, #1                      // =1
.LBB331_5:                              // %for.cond9
                                        //   Parent Loop BB331_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB331_8 Depth 3
	ldr	w9, [sp, #52]
	str	w8, [sp, #72]
	mov	w8, w8
	cmp	w8, w9
	b.gt	.LBB331_1
// %bb.6:                               // %for.body11
                                        //   in Loop: Header=BB331_5 Depth=2
	ldr	x8, [sp, #88]
	ldpsw	x10, x9, [sp, #72]
	ldr	x8, [x8, x9, lsl #3]
	ldrsw	x9, [sp, #48]
	add	x8, x8, x10, lsl #6
	add	x8, x8, x9, lsl #1
	str	x8, [sp, #80]
	str	w9, [sp, #68]
	b	.LBB331_8
.LBB331_7:                              // %for.inc
                                        //   in Loop: Header=BB331_8 Depth=3
	ldr	w8, [sp, #68]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #68]
.LBB331_8:                              // %for.cond16
                                        //   Parent Loop BB331_2 Depth=1
                                        //     Parent Loop BB331_5 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldr	w8, [sp, #68]
	ldr	w9, [sp, #44]
	cmp	w8, w9
	b.gt	.LBB331_4
// %bb.9:                               // %for.body18
                                        //   in Loop: Header=BB331_8 Depth=3
	ldr	x8, [sp, #80]
	add	x9, x8, #2                      // =2
	str	x9, [sp, #80]
	ldrh	w8, [x8]
	str	x8, [sp, #32]
	cbz	w8, .LBB331_7
// %bb.10:                              // %if.then
                                        //   in Loop: Header=BB331_8 Depth=3
	ldp	w13, w10, [sp, #72]
	ldr	w14, [sp, #68]
	mov	w11, #4
	ldp	x9, x8, [sp, #24]
	bfi	w11, w10, #3, #29
	mov	w10, #2
	bfi	w10, w13, #2, #30
	mov	w13, #4
	bfi	w13, w14, #3, #29
	ldp	x14, x12, [sp, #8]
	sxtw	x11, w11
	sxtw	x10, w10
	sxtw	x13, w13
	madd	x11, x11, x8, x12
	ldr	x12, [sp]
	madd	x10, x10, x8, x14
	madd	x12, x13, x8, x12
	add	x8, x9, x8
	stp	x11, x8, [sp, #16]
	stp	x12, x10, [sp]
	b	.LBB331_7
.LBB331_11:                             // %for.end39
	ldr	x8, [sp, #120]
	ldp	x9, x10, [sp, #16]
	ldrsw	x11, [sp, #108]
	ldr	x8, [x8, #152]
	add	x9, x9, x10, asr #1
	sdiv	x9, x9, x10
	ldr	x8, [x8]
	strb	w9, [x8, x11]
	ldr	x8, [sp, #120]
	ldr	x9, [sp, #8]
	ldr	x10, [sp, #24]
	ldrsw	x11, [sp, #108]
	ldr	x8, [x8, #152]
	add	x9, x9, x10, asr #1
	sdiv	x9, x9, x10
	ldr	x8, [x8, #8]
	strb	w9, [x8, x11]
	ldr	x8, [sp, #120]
	ldr	x9, [sp]
	ldr	x10, [sp, #24]
	ldrsw	x11, [sp, #108]
	ldr	x8, [x8, #152]
	add	x9, x9, x10, asr #1
	sdiv	x9, x9, x10
	ldr	x8, [x8, #16]
	strb	w9, [x8, x11]
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end331:
	.size	compute_color, .Lfunc_end331-compute_color
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function find_biggest_color_pop
	.type	find_biggest_color_pop,@function
find_biggest_color_pop:                 // @find_biggest_color_pop
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa_offset 48
	str	x0, [sp, #40]
	str	w1, [sp, #36]
	stp	xzr, xzr, [sp]
	str	wzr, [sp, #20]
	str	x0, [sp, #24]
	b	.LBB332_2
.LBB332_1:                              // %for.inc
                                        //   in Loop: Header=BB332_2 Depth=1
	ldr	w8, [sp, #20]
	ldr	x9, [sp, #24]
	add	w8, w8, #1                      // =1
	add	x9, x9, #40                     // =40
	str	w8, [sp, #20]
	str	x9, [sp, #24]
.LBB332_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.ge	.LBB332_6
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB332_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #8]
	ldr	x8, [x8, #32]
	cmp	x8, x9
	b.le	.LBB332_1
// %bb.4:                               // %land.lhs.true
                                        //   in Loop: Header=BB332_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x8, [x8, #24]
	cmp	x8, #1                          // =1
	b.lt	.LBB332_1
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB332_2 Depth=1
	ldr	x8, [sp, #24]
	str	x8, [sp]
	ldr	x8, [x8, #32]
	str	x8, [sp, #8]
	b	.LBB332_1
.LBB332_6:                              // %for.end
	ldr	x0, [sp], #48
	ret
.Lfunc_end332:
	.size	find_biggest_color_pop, .Lfunc_end332-find_biggest_color_pop
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function find_biggest_volume
	.type	find_biggest_volume,@function
find_biggest_volume:                    // @find_biggest_volume
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa_offset 48
	str	x0, [sp, #40]
	str	w1, [sp, #36]
	stp	xzr, xzr, [sp]
	str	wzr, [sp, #20]
	str	x0, [sp, #24]
	b	.LBB333_2
.LBB333_1:                              // %for.inc
                                        //   in Loop: Header=BB333_2 Depth=1
	ldr	w8, [sp, #20]
	ldr	x9, [sp, #24]
	add	w8, w8, #1                      // =1
	add	x9, x9, #40                     // =40
	str	w8, [sp, #20]
	str	x9, [sp, #24]
.LBB333_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #20]
	ldr	w9, [sp, #36]
	cmp	w8, w9
	b.ge	.LBB333_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB333_2 Depth=1
	ldr	x8, [sp, #24]
	ldr	x9, [sp, #8]
	ldr	x8, [x8, #24]
	cmp	x8, x9
	b.le	.LBB333_1
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB333_2 Depth=1
	ldr	x8, [sp, #24]
	str	x8, [sp]
	ldr	x8, [x8, #24]
	str	x8, [sp, #8]
	b	.LBB333_1
.LBB333_5:                              // %for.end
	ldr	x0, [sp], #48
	ret
.Lfunc_end333:
	.size	find_biggest_volume, .Lfunc_end333-find_biggest_volume
	.cfi_endproc
                                        // -- End function
	.globl	jdiv_round_up                   // -- Begin function jdiv_round_up
	.p2align	2
	.type	jdiv_round_up,@function
jdiv_round_up:                          // @jdiv_round_up
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	stp	x1, x0, [sp], #16
	add	x8, x0, x1
	sub	x8, x8, #1                      // =1
	sdiv	x0, x8, x1
	ret
.Lfunc_end334:
	.size	jdiv_round_up, .Lfunc_end334-jdiv_round_up
	.cfi_endproc
                                        // -- End function
	.globl	jround_up                       // -- Begin function jround_up
	.p2align	2
	.type	jround_up,@function
jround_up:                              // @jround_up
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	add	x8, x1, x0
	sub	x8, x8, #1                      // =1
	sdiv	x9, x8, x1
	mul	x0, x9, x1
	stp	x1, x8, [sp], #16
	ret
.Lfunc_end335:
	.size	jround_up, .Lfunc_end335-jround_up
	.cfi_endproc
                                        // -- End function
	.globl	jcopy_sample_rows               // -- Begin function jcopy_sample_rows
	.p2align	2
	.type	jcopy_sample_rows,@function
jcopy_sample_rows:                      // @jcopy_sample_rows
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, w5
	add	x9, x0, w1, sxtw #3
	add	x10, x2, w3, sxtw #3
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stp	w4, w3, [x29, #-32]
	stur	w5, [x29, #-36]
	str	x8, [sp, #16]
	stur	x9, [x29, #-8]
	stur	x10, [x29, #-24]
	str	w4, [sp, #12]
	mov	w8, w4
	cmp	w8, #1                          // =1
	b.lt	.LBB336_2
.LBB336_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	x2, [sp, #16]
	add	x10, x8, #8                     // =8
	stur	x10, [x29, #-8]
	ldr	x1, [x8]
	add	x8, x9, #8                      // =8
	stur	x8, [x29, #-24]
	ldr	x0, [x9]
	stp	x0, x1, [sp, #24]
	bl	memcpy
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cmp	w8, #1                          // =1
	b.ge	.LBB336_1
.LBB336_2:                              // %for.end
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end336:
	.size	jcopy_sample_rows, .Lfunc_end336-jcopy_sample_rows
	.cfi_endproc
                                        // -- End function
	.globl	jcopy_block_row                 // -- Begin function jcopy_block_row
	.p2align	2
	.type	jcopy_block_row,@function
jcopy_block_row:                        // @jcopy_block_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x8, x0
	mov	w9, w2
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	lsl	x2, x9, #7
	mov	x0, x1
	mov	x1, x8
	bl	memcpy
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end337:
	.size	jcopy_block_row, .Lfunc_end337-jcopy_block_row
	.cfi_endproc
                                        // -- End function
	.globl	jzero_far                       // -- Begin function jzero_far
	.p2align	2
	.type	jzero_far,@function
jzero_far:                              // @jzero_far
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x2, x1
	stp	x1, x0, [sp]
	mov	w1, wzr
	bl	memset
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end338:
	.size	jzero_far, .Lfunc_end338-jzero_far
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	2
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	w0, wzr, [x29, #-8]
	stur	x1, [x29, #-16]
	adrp	x0, .L.str.244
	adrp	x1, .L.str.1.245
	add	x0, x0, :lo12:.L.str.244
	add	x1, x1, :lo12:.L.str.1.245
	str	xzr, [sp, #24]
	bl	fopen
	str	x0, [sp, #24]
	cbz	x0, .LBB339_4
// %bb.1:                               // %if.end
	ldr	x0, [sp, #24]
	adrp	x1, .L.str.3.247
	add	x1, x1, :lo12:.L.str.3.247
	add	x2, sp, #8                      // =8
	bl	__isoc99_fscanf
	ldr	x0, [sp, #24]
	bl	fclose
	str	xzr, [sp, #16]
	ldp	x9, x8, [sp, #8]
	cmp	x8, x9
	b.ge	.LBB339_3
.LBB339_2:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	w0, [x29, #-8]
	ldur	x1, [x29, #-16]
	bl	main1
	ldr	x8, [sp, #16]
	add	x8, x8, #1                      // =1
	str	x8, [sp, #16]
	ldp	x9, x8, [sp, #8]
	cmp	x8, x9
	b.lt	.LBB339_2
.LBB339_3:                              // %for.end
	mov	w8, #1
	stur	wzr, [x29, #-4]
	b	.LBB339_5
.LBB339_4:                              // %if.then
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	adrp	x1, .L.str.2.246
	add	x1, x1, :lo12:.L.str.2.246
	bl	fprintf
	mov	w8, #1
	stur	w8, [x29, #-4]
.LBB339_5:                              // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	w8, [sp, #4]
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end339:
	.size	main, .Lfunc_end339-main
	.cfi_endproc
                                        // -- End function
	.globl	jinit_read_bmp                  // -- Begin function jinit_read_bmp
	.p2align	2
	.type	jinit_read_bmp,@function
jinit_read_bmp:                         // @jinit_read_bmp
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #88
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, start_input_bmp
	str	x0, [sp]
	add	x9, x9, :lo12:start_input_bmp
	str	x8, [x0, #48]
	mov	x8, x0
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x9, [x8]
	adrp	x9, finish_input_bmp
	mov	x8, x0
	add	x9, x9, :lo12:finish_input_bmp
	str	x9, [x8, #16]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end340:
	.size	jinit_read_bmp, .Lfunc_end340-jinit_read_bmp
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_input_bmp
	.type	start_input_bmp,@function
start_input_bmp:                        // @start_input_bmp
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #240                    // =240
	stp	x29, x30, [sp, #208]            // 16-byte Folded Spill
	str	x19, [sp, #224]                 // 8-byte Folded Spill
	add	x29, sp, #208                   // =208
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x1, x1, [x29, #-16]
	stp	xzr, xzr, [sp, #80]
	str	xzr, [sp, #40]
	str	wzr, [sp, #36]
	ldr	x3, [x1, #24]
	sub	x0, x29, #32                    // =32
	mov	w1, #1
	mov	w2, #14
	bl	fread
	cmp	x0, #14                         // =14
	b.eq	.LBB341_2
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_2:                              // %if.end
	ldurh	w8, [x29, #-32]
	mov	w9, #19778
	cmp	w8, w9
	b.eq	.LBB341_4
// %bb.3:                               // %if.then6
	ldr	x8, [x29, #24]
	mov	w9, #1007
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_4:                              // %if.end11
	ldur	w8, [x29, #-22]
	ldur	x9, [x29, #-16]
	sub	x0, x29, #96                    // =96
	mov	w1, #1
	str	x8, [sp, #104]
	ldr	x3, [x9, #24]
	mov	w2, #4
	bl	fread
	cmp	x0, #4                          // =4
	b.eq	.LBB341_6
// %bb.5:                               // %if.then36
	ldr	x8, [x29, #24]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_6:                              // %if.end41
	ldur	w8, [x29, #-96]
	cmp	x8, #12                         // =12
	str	x8, [sp, #96]
	b.lt	.LBB341_8
// %bb.7:                               // %if.end41
	cmp	x8, #65                         // =65
	b.lt	.LBB341_9
.LBB341_8:                              // %if.then64
	ldr	x8, [x29, #24]
	mov	w9, #1003
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_9:                              // %if.end69
	ldur	x8, [x29, #-16]
	ldr	x9, [sp, #96]
	mov	w1, #1
	ldr	x3, [x8, #24]
	sub	x8, x29, #96                    // =96
	add	x0, x8, #4                      // =4
	sub	x2, x9, #4                      // =4
	bl	fread
	ldr	x8, [sp, #96]
	sub	x8, x8, #4                      // =4
	cmp	x0, x8
	b.eq	.LBB341_11
// %bb.10:                              // %if.then77
	ldr	x8, [x29, #24]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_11:                             // %if.end82
	ldr	w8, [sp, #96]
	cmp	w8, #64                         // =64
	b.eq	.LBB341_17
// %bb.12:                              // %if.end82
	cmp	w8, #40                         // =40
	b.eq	.LBB341_17
// %bb.13:                              // %if.end82
	cmp	w8, #12                         // =12
	b.ne	.LBB341_20
// %bb.14:                              // %sw.bb
	ldurh	w8, [x29, #-92]
	ldurh	w9, [x29, #-90]
	ldurh	w10, [x29, #-88]
	ldurh	w11, [x29, #-86]
	ldur	x12, [x29, #-16]
	stp	x9, x8, [sp, #80]
	str	w10, [sp, #76]
	str	w11, [x12, #80]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #80]
	cmp	w8, #24                         // =24
	b.eq	.LBB341_30
// %bb.15:                              // %sw.bb
	cmp	w8, #8                          // =8
	b.ne	.LBB341_32
// %bb.16:                              // %sw.bb111
	ldr	x8, [x29, #24]
	mov	w9, #3
	str	w9, [sp, #36]
	mov	w9, #1011
	b	.LBB341_31
.LBB341_17:                             // %sw.bb150
	ldp	w8, w9, [x29, #-92]
	ldurh	w10, [x29, #-84]
	ldurh	w11, [x29, #-82]
	ldur	x12, [x29, #-16]
	stp	x9, x8, [sp, #80]
	str	w10, [sp, #76]
	str	w11, [x12, #80]
	ldur	w8, [x29, #-80]
	ldp	w9, w10, [x29, #-72]
	ldur	w11, [x29, #-64]
	stp	x9, x8, [sp, #56]
	ldur	x8, [x29, #-16]
	stp	x11, x10, [sp, #40]
	ldr	w8, [x8, #80]
	cmp	w8, #24                         // =24
	b.eq	.LBB341_21
// %bb.18:                              // %sw.bb150
	cmp	w8, #8                          // =8
	b.ne	.LBB341_29
// %bb.19:                              // %sw.bb273
	ldr	x8, [x29, #24]
	mov	w9, #4
	str	w9, [sp, #36]
	mov	w9, #1009
	b	.LBB341_22
.LBB341_20:                             // %sw.default334
	ldr	x8, [x29, #24]
	mov	w9, #1003
	b	.LBB341_34
.LBB341_21:                             // %sw.bb288
	ldr	x8, [x29, #24]
	mov	w9, #1008
.LBB341_22:                             // %sw.epilog308
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	x9, [sp, #88]
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	ldr	x9, [sp, #80]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #76]
	cmp	w8, #1                          // =1
	b.eq	.LBB341_24
.LBB341_23:                             // %if.then311
	ldr	x8, [x29, #24]
	mov	w9, #1004
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_24:                             // %if.end316
	ldr	x8, [sp, #64]
	cbz	x8, .LBB341_26
// %bb.25:                              // %if.then319
	ldr	x8, [x29, #24]
	mov	w9, #1006
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_26:                             // %if.end324
	ldr	x8, [sp, #56]
	cmp	x8, #1                          // =1
	b.lt	.LBB341_35
// %bb.27:                              // %if.end324
	ldr	x8, [sp, #48]
	cmp	x8, #1                          // =1
	b.lt	.LBB341_35
// %bb.28:                              // %if.then329
	ldr	x8, [sp, #56]
	mov	x9, #55051
	movk	x9, #28835, lsl #16
	movk	x9, #2621, lsl #32
	movk	x9, #41943, lsl #48
	ldr	x10, [x29, #24]
	smulh	x11, x8, x9
	add	x8, x11, x8
	lsr	x11, x8, #63
	add	w8, w11, w8, lsr #6
	strh	w8, [x10, #286]
	ldr	x8, [sp, #48]
	ldr	x10, [x29, #24]
	smulh	x9, x8, x9
	add	x8, x9, x8
	lsr	x9, x8, #63
	add	w8, w9, w8, lsr #6
	strh	w8, [x10, #288]
	ldr	x8, [x29, #24]
	mov	w9, #2
	strb	w9, [x8, #284]
	b	.LBB341_35
.LBB341_29:                             // %sw.default303
	ldr	x8, [x29, #24]
	mov	w9, #1002
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #76]
	cmp	w8, #1                          // =1
	b.ne	.LBB341_23
	b	.LBB341_24
.LBB341_30:                             // %sw.bb123
	ldr	x8, [x29, #24]
	mov	w9, #1010
.LBB341_31:                             // %sw.epilog
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	x9, [sp, #88]
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	ldr	x9, [sp, #80]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #76]
	cmp	w8, #1                          // =1
	b.ne	.LBB341_33
	b	.LBB341_35
.LBB341_32:                             // %sw.default
	ldr	x8, [x29, #24]
	mov	w9, #1002
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #76]
	cmp	w8, #1                          // =1
	b.eq	.LBB341_35
.LBB341_33:                             // %if.then144
	ldr	x8, [x29, #24]
	mov	w9, #1004
.LBB341_34:                             // %sw.epilog339
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_35:                             // %sw.epilog339
	ldp	x9, x8, [sp, #96]
	ldr	w10, [sp, #36]
	sub	x8, x8, x9
	sub	x8, x8, #14                     // =14
	cmp	w10, #1                         // =1
	str	x8, [sp, #24]
	b.lt	.LBB341_41
// %bb.36:                              // %if.then344
	ldr	x8, [sp, #40]
	cmp	x8, #0                          // =0
	b.gt	.LBB341_38
// %bb.37:                              // %if.then347
	mov	w8, #256
	str	x8, [sp, #40]
	b	.LBB341_40
.LBB341_38:                             // %if.else
	ldr	x8, [sp, #40]
	cmp	x8, #257                        // =257
	b.lt	.LBB341_40
// %bb.39:                              // %if.then350
	ldr	x8, [x29, #24]
	mov	w9, #1001
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB341_40:                             // %if.end356
	ldr	x0, [x29, #24]
	ldr	w2, [sp, #40]
	mov	w1, #1
	mov	w3, #3
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-16]
	str	x0, [x8, #56]
	ldur	x0, [x29, #-16]
	ldp	w2, w1, [sp, #36]
	bl	read_colormap
	ldr	x8, [sp, #40]
	ldrsw	x9, [sp, #36]
	ldr	x10, [sp, #24]
	msub	x8, x8, x9, x10
	str	x8, [sp, #24]
.LBB341_41:                             // %if.end362
	ldr	x8, [sp, #24]
	tbz	x8, #63, .LBB341_44
// %bb.42:                              // %if.then365
	ldr	x8, [x29, #24]
	mov	w9, #1003
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB341_44
.LBB341_43:                             // %while.body
                                        //   in Loop: Header=BB341_44 Depth=1
	bl	read_byte
.LBB341_44:                             // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #24]
	ldur	x0, [x29, #-16]
	subs	x8, x8, #1                      // =1
	str	x8, [sp, #24]
	b.pl	.LBB341_43
// %bb.45:                              // %while.end
	ldr	w9, [x0, #80]
	ldr	x8, [sp, #88]
	cmp	w9, #24                         // =24
	b.ne	.LBB341_47
// %bb.46:                              // %if.then377
	add	w8, w8, w8, lsl #1
.LBB341_47:                             // %if.else380
	str	w8, [sp, #20]
	mov	w8, w8
	tst	w8, #0x3
	b.eq	.LBB341_49
.LBB341_48:                             // %while.body386
                                        // =>This Inner Loop Header: Depth=1
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	mov	w8, w8
	tst	w8, #0x3
	b.ne	.LBB341_48
.LBB341_49:                             // %while.end387
	ldur	x9, [x29, #-16]
	mov	w1, #1
	mov	w5, #1
	mov	w2, wzr
	str	w8, [x9, #76]
	ldr	x0, [x29, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #80]
	mov	w19, #1
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #32]
	blr	x8
	ldur	x8, [x29, #-16]
	adrp	x9, preload_image
	add	x9, x9, :lo12:preload_image
	str	x0, [x8, #64]
	ldur	x8, [x29, #-16]
	str	x9, [x8, #8]
	ldr	x8, [x29, #24]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB341_51
// %bb.50:                              // %if.then395
	ldr	x8, [x29, #24]
	ldr	x8, [x8, #16]
	str	x8, [sp, #8]
	ldr	w9, [x8, #36]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #36]
.LBB341_51:                             // %if.end399
	ldr	x0, [x29, #24]
	ldr	w9, [sp, #88]
	mov	w1, #1
	mov	w3, #1
	ldr	x8, [x0, #8]
	add	w2, w9, w9, lsl #1
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-16]
	mov	w9, #2
	str	x0, [x8, #32]
	ldur	x8, [x29, #-16]
	str	w19, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	x19, [sp, #224]                 // 8-byte Folded Reload
	str	w9, [x8, #52]
	ldr	x8, [x29, #24]
	mov	w9, #3
	str	w9, [x8, #48]
	ldr	x8, [x29, #24]
	mov	w9, #8
	str	w9, [x8, #64]
	ldr	x8, [sp, #88]
	ldr	x9, [x29, #24]
	str	w8, [x9, #40]
	ldr	x8, [sp, #80]
	ldr	x9, [x29, #24]
	ldp	x29, x30, [sp, #208]            // 16-byte Folded Reload
	str	w8, [x9, #44]
	add	sp, sp, #240                    // =240
	ret
.Lfunc_end341:
	.size	start_input_bmp, .Lfunc_end341-start_input_bmp
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_input_bmp
	.type	finish_input_bmp,@function
finish_input_bmp:                       // @finish_input_bmp
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	stp	x1, x0, [sp], #16
	ret
.Lfunc_end342:
	.size	finish_input_bmp, .Lfunc_end342-finish_input_bmp
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_colormap
	.type	read_colormap,@function
read_colormap:                          // @read_colormap
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	cmp	w2, #4                          // =4
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	w2, [sp, #16]
	b.eq	.LBB343_5
// %bb.1:                               // %entry
	cmp	w2, #3                          // =3
	b.ne	.LBB343_7
// %bb.2:                               // %sw.bb
	str	wzr, [sp, #12]
	mov	w8, wzr
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.ge	.LBB343_4
.LBB343_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8, #16]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8, #8]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8]
	strb	w0, [x8, x9]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB343_3
.LBB343_4:                              // %sw.epilog
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB343_5:                              // %sw.bb14
	str	wzr, [sp, #12]
	mov	w8, wzr
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.ge	.LBB343_4
.LBB343_6:                              // %for.body18
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8, #16]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8, #8]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB343_6
	b	.LBB343_4
.LBB343_7:                              // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #1001
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end343:
	.size	read_colormap, .Lfunc_end343-read_colormap
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_byte
	.type	read_byte,@function
read_byte:                              // @read_byte
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x0, [x0, #24]
	str	x0, [sp, #16]
	bl	getc
	cmn	w0, #1                          // =1
	str	w0, [sp, #12]
	b.eq	.LBB344_2
// %bb.1:                               // %if.end
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB344_2:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end344:
	.size	read_byte, .Lfunc_end344-read_byte
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function preload_image
	.type	preload_image,@function
preload_image:                          // @preload_image
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	str	x19, [sp, #80]                  // 8-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x1, x1, [x29, #-16]
	ldr	x8, [x1, #24]
	mov	w19, #42
	stur	x8, [x29, #-24]
	ldr	x8, [x0, #16]
	str	wzr, [sp, #12]
	str	x8, [sp]
	b	.LBB345_2
.LBB345_1:                              // %for.inc20
                                        //   in Loop: Header=BB345_2 Depth=1
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB345_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB345_7 Depth 2
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #12]
	ldr	w10, [x8, #44]
	ldr	x8, [sp]
	cmp	w9, w10
	b.hs	.LBB345_10
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB345_2 Depth=1
	cbz	x8, .LBB345_5
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB345_2 Depth=1
	ldr	w8, [sp, #12]
	ldr	x9, [sp]
	str	x8, [x9, #8]
	ldr	x8, [x29, #24]
	ldr	x9, [sp]
	ldr	w8, [x8, #44]
	str	x8, [x9, #16]
	ldr	x8, [sp]
	ldr	x0, [x29, #24]
	ldr	x8, [x8]
	blr	x8
.LBB345_5:                              // %if.end
                                        //   in Loop: Header=BB345_2 Depth=1
	ldr	x0, [x29, #24]
	ldur	x8, [x29, #-16]
	ldr	w2, [sp, #12]
	mov	w3, #1
	ldr	x9, [x0, #8]
	ldr	x1, [x8, #64]
	mov	w4, #1
	ldr	x8, [x9, #56]
	blr	x8
	ldr	x8, [x0]
	ldur	x9, [x29, #-16]
	stp	x0, x8, [sp, #16]
	ldr	w8, [x9, #76]
	b	.LBB345_7
.LBB345_6:                              // %if.end18
                                        //   in Loop: Header=BB345_7 Depth=2
	ldr	x8, [sp, #24]
	ldur	w9, [x29, #-28]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #24]
	strb	w9, [x8]
	ldr	w8, [sp, #8]
	sub	w8, w8, #1                      // =1
.LBB345_7:                              // %for.cond9
                                        //   Parent Loop BB345_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	str	w8, [sp, #8]
	mov	w8, w8
	cbz	w8, .LBB345_1
// %bb.8:                               // %for.body12
                                        //   in Loop: Header=BB345_7 Depth=2
	ldur	x0, [x29, #-24]
	bl	getc
	cmn	w0, #1                          // =1
	stur	w0, [x29, #-28]
	b.ne	.LBB345_6
// %bb.9:                               // %if.then16
                                        //   in Loop: Header=BB345_7 Depth=2
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	b	.LBB345_6
.LBB345_10:                             // %for.end21
	cbz	x8, .LBB345_12
// %bb.11:                              // %if.then24
	ldr	x8, [sp]
	ldr	w9, [x8, #32]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #32]
.LBB345_12:                             // %if.end26
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #80]
	cmp	w8, #24                         // =24
	b.eq	.LBB345_15
// %bb.13:                              // %if.end26
	cmp	w8, #8                          // =8
	b.ne	.LBB345_16
// %bb.14:                              // %sw.bb
	ldur	x8, [x29, #-16]
	adrp	x9, get_8bit_row
	add	x9, x9, :lo12:get_8bit_row
	str	x9, [x8, #8]
	b	.LBB345_17
.LBB345_15:                             // %sw.bb28
	ldur	x8, [x29, #-16]
	adrp	x9, get_24bit_row
	add	x9, x9, :lo12:get_24bit_row
	str	x9, [x8, #8]
	b	.LBB345_17
.LBB345_16:                             // %sw.default
	ldr	x8, [x29, #24]
	mov	w9, #1002
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB345_17:                             // %sw.epilog
	ldr	x8, [x29, #24]
	ldp	x9, x1, [x29, #-16]
	ldr	w8, [x8, #44]
	str	w8, [x9, #72]
	ldur	x8, [x29, #-16]
	ldr	x0, [x29, #24]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x19, [sp, #80]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end345:
	.size	preload_image, .Lfunc_end345-preload_image
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_8bit_row
	.type	get_8bit_row,@function
get_8bit_row:                           // @get_8bit_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x1, #56]
	mov	w3, #1
	mov	w4, wzr
	stp	x8, x1, [x29, #-32]
	ldr	w8, [x1, #72]
	sub	w8, w8, #1                      // =1
	str	w8, [x1, #72]
	ldr	x9, [x0, #8]
	mov	x8, x1
	ldr	x1, [x8, #64]
	ldr	w2, [x8, #72]
	ldr	x9, [x9, #56]
	blr	x9
	ldur	x9, [x29, #-24]
	str	x0, [sp, #40]
	ldr	x10, [x0]
	ldr	x8, [x9, #32]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8]
	stp	x8, x10, [sp, #16]
	ldr	w8, [x9, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB346_2
.LBB346_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x10, x8, [sp, #16]
	ldur	x9, [x29, #-32]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	str	w8, [sp, #36]
	ldr	x9, [x9]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	stp	x9, x11, [sp, #16]
	strb	w8, [x10]
	ldur	x8, [x29, #-32]
	ldrsw	x9, [sp, #36]
	ldr	x10, [sp, #16]
	ldr	x8, [x8, #8]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #16]
	strb	w8, [x10]
	ldur	x8, [x29, #-32]
	ldrsw	x9, [sp, #36]
	ldr	x10, [sp, #16]
	ldr	x8, [x8, #16]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #16]
	strb	w8, [x10]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB346_1
.LBB346_2:                              // %for.end
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end346:
	.size	get_8bit_row, .Lfunc_end346-get_8bit_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_24bit_row
	.type	get_24bit_row,@function
get_24bit_row:                          // @get_24bit_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	w8, [x1, #72]
	mov	w3, #1
	mov	w4, wzr
	sub	w8, w8, #1                      // =1
	str	w8, [x1, #72]
	ldr	x9, [x0, #8]
	mov	x8, x1
	ldr	x1, [x8, #64]
	ldr	w2, [x8, #72]
	ldr	x9, [x9, #56]
	blr	x9
	ldr	x8, [x0]
	ldur	x9, [x29, #-24]
	stp	x8, x0, [sp, #24]
	ldr	x8, [x9, #32]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8]
	str	x8, [sp, #16]
	ldr	w8, [x9, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB347_2
.LBB347_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #24]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldr	x9, [sp, #16]
	ldrb	w8, [x8]
	strb	w8, [x9, #2]
	ldr	x8, [sp, #24]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldr	x9, [sp, #16]
	ldrb	w8, [x8]
	strb	w8, [x9, #1]
	ldp	x9, x8, [sp, #16]
	add	x10, x8, #1                     // =1
	ldrb	w8, [x8]
	strb	w8, [x9]
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	add	x8, x8, #3                      // =3
	sub	w9, w9, #1                      // =1
	stp	x8, x10, [sp, #16]
	str	w9, [sp, #12]
	mov	w8, w9
	cbnz	w8, .LBB347_1
.LBB347_2:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end347:
	.size	get_24bit_row, .Lfunc_end347-get_24bit_row
	.cfi_endproc
                                        // -- End function
	.globl	jinit_read_gif                  // -- Begin function jinit_read_gif
	.p2align	2
	.type	jinit_read_gif,@function
jinit_read_gif:                         // @jinit_read_gif
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #440
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, start_input_gif
	str	x0, [sp]
	add	x9, x9, :lo12:start_input_gif
	str	x8, [x0, #48]
	mov	x8, x0
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x9, [x8]
	adrp	x9, finish_input_gif
	mov	x8, x0
	add	x9, x9, :lo12:finish_input_gif
	str	x9, [x8, #16]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end348:
	.size	jinit_read_gif, .Lfunc_end348-jinit_read_gif
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_input_gif
	.type	start_input_gif,@function
start_input_gif:                        // @start_input_gif
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #256
	mov	w3, #3
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-24]
	mov	w1, #1
	mov	w2, #6
	str	x0, [x8, #56]
	ldur	x8, [x29, #-24]
	add	x0, sp, #28                     // =28
	ldr	x3, [x8, #24]
	bl	fread
	cmp	x0, #6                          // =6
	b.eq	.LBB349_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #1016
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB349_2:                              // %if.end
	ldrb	w8, [sp, #28]
	cmp	w8, #71                         // =71
	b.ne	.LBB349_5
// %bb.3:                               // %lor.lhs.false
	ldrb	w8, [sp, #29]
	cmp	w8, #73                         // =73
	b.ne	.LBB349_5
// %bb.4:                               // %lor.lhs.false9
	ldrb	w8, [sp, #30]
	cmp	w8, #70                         // =70
	b.eq	.LBB349_6
.LBB349_5:                              // %if.then14
	ldur	x8, [x29, #-8]
	mov	w9, #1016
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB349_6:                              // %if.end19
	ldrb	w8, [sp, #31]
	cmp	w8, #56                         // =56
	b.ne	.LBB349_9
// %bb.7:                               // %lor.lhs.false24
	ldrb	w8, [sp, #32]
	cmp	w8, #55                         // =55
	b.ne	.LBB349_9
// %bb.8:                               // %lor.lhs.false29
	ldrb	w8, [sp, #33]
	cmp	w8, #97                         // =97
	b.eq	.LBB349_13
.LBB349_9:                              // %land.lhs.true
	ldrb	w8, [sp, #31]
	cmp	w8, #56                         // =56
	b.ne	.LBB349_12
// %bb.10:                              // %lor.lhs.false38
	ldrb	w8, [sp, #32]
	cmp	w8, #57                         // =57
	b.ne	.LBB349_12
// %bb.11:                              // %lor.lhs.false43
	ldrb	w8, [sp, #33]
	cmp	w8, #97                         // =97
	b.eq	.LBB349_13
.LBB349_12:                             // %do.body
	ldur	x8, [x29, #-8]
	ldrb	w9, [sp, #31]
	mov	w1, #1
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	str	x10, [sp]
	str	w9, [x8, #44]
	ldrb	w8, [sp, #32]
	mov	x9, x10
	str	w8, [x9, #4]
	ldrb	w8, [sp, #33]
	mov	x9, x10
	str	w8, [x9, #8]
	ldur	x8, [x29, #-8]
	mov	w9, #1018
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB349_13:                             // %if.end63
	ldur	x8, [x29, #-24]
	add	x0, sp, #28                     // =28
	mov	w1, #1
	mov	w2, #7
	ldr	x3, [x8, #24]
	bl	fread
	cmp	x0, #7                          // =7
	b.eq	.LBB349_15
// %bb.14:                              // %if.then70
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB349_15:                             // %if.end75
	ldrh	w9, [sp, #28]
	ldrh	w10, [sp, #30]
	ldrb	w11, [sp, #32]
	ldrb	w8, [sp, #34]
	mov	w12, #2
	stp	w10, w9, [sp, #20]
	and	x9, x11, #0x7
	lsl	w9, w12, w9
	stp	w8, w9, [sp, #12]
	cbz	w8, .LBB349_18
// %bb.16:                              // %if.end75
	cmp	w8, #49                         // =49
	b.eq	.LBB349_18
// %bb.17:                              // %if.then101
	ldur	x8, [x29, #-8]
	mov	w9, #1020
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
.LBB349_18:                             // %if.end106
	ldrb	w8, [sp, #32]
	tbz	w8, #7, .LBB349_20
// %bb.19:                              // %if.then110
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #16]
	ldr	x2, [x0, #56]
	bl	ReadColorMap
.LBB349_20:                             // %for.cond.preheader
	mov	w19, #1015
	mov	w20, #1022
	b	.LBB349_22
.LBB349_21:                             // %if.then124
                                        //   in Loop: Header=BB349_22 Depth=1
	ldur	x0, [x29, #-24]
	bl	DoExtension
.LBB349_22:                             // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-24]
	bl	ReadByte
	cmp	w0, #59                         // =59
	str	w0, [sp, #8]
	b.eq	.LBB349_26
// %bb.23:                              // %if.end121
                                        //   in Loop: Header=BB349_22 Depth=1
	ldr	w8, [sp, #8]
	cmp	w8, #33                         // =33
	b.eq	.LBB349_21
.LBB349_24:                             // %if.end125
                                        //   in Loop: Header=BB349_22 Depth=1
	ldr	w8, [sp, #8]
	cmp	w8, #44                         // =44
	b.eq	.LBB349_27
// %bb.25:                              // %if.then128
                                        //   in Loop: Header=BB349_22 Depth=1
	ldur	x8, [x29, #-8]
	mov	w1, #-1
	ldr	x8, [x8]
	str	w20, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #8]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	b	.LBB349_22
.LBB349_26:                             // %if.then116
                                        //   in Loop: Header=BB349_22 Depth=1
	ldur	x8, [x29, #-8]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #8]
	cmp	w8, #33                         // =33
	b.eq	.LBB349_21
	b	.LBB349_24
.LBB349_27:                             // %if.end137
	ldur	x8, [x29, #-24]
	add	x0, sp, #28                     // =28
	mov	w1, #1
	mov	w2, #9
	ldr	x3, [x8, #24]
	bl	fread
	cmp	x0, #9                          // =9
	b.eq	.LBB349_29
// %bb.28:                              // %if.then144
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB349_29:                             // %if.end149
	ldrh	w8, [sp, #32]
	ldrh	w9, [sp, #34]
	ldrb	w10, [sp, #36]
	ldur	x11, [x29, #-24]
	stp	w9, w8, [sp, #20]
	and	w8, w10, #0x40
	str	w8, [x11, #408]
	ldrb	w8, [sp, #36]
	tbz	w8, #7, .LBB349_31
// %bb.30:                              // %if.then173
	ldrb	w8, [sp, #36]
	ldur	x0, [x29, #-24]
	mov	w9, #2
	and	w8, w8, #0x7
	lsl	w1, w9, w8
	str	w1, [sp, #16]
	ldr	x2, [x0, #56]
	bl	ReadColorMap
.LBB349_31:                             // %if.end179
	ldur	x0, [x29, #-24]
	bl	ReadByte
	ldur	x8, [x29, #-24]
	str	w0, [x8, #340]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #340]
	cmp	w8, #2                          // =2
	b.lt	.LBB349_33
// %bb.32:                              // %lor.lhs.false184
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #340]
	cmp	w8, #12                         // =12
	b.lt	.LBB349_34
.LBB349_33:                             // %if.then188
	ldur	x8, [x29, #-8]
	mov	w9, #1013
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #340]
	ldr	x9, [x9]
	str	w8, [x9, #44]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB349_34:                             // %for.end
	ldur	x0, [x29, #-8]
	mov	w1, #1
	mov	w2, #8192
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-24]
	mov	w1, #1
	mov	w2, #4096
	str	x0, [x8, #376]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-24]
	mov	w1, #1
	mov	w2, #4096
	str	x0, [x8, #384]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [x8, #392]
	ldur	x0, [x29, #-24]
	bl	InitLZWCode
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #408]
	cbz	w8, .LBB349_38
// %bb.35:                              // %if.then209
	ldur	x0, [x29, #-8]
	ldp	w4, w3, [sp, #20]
	mov	w1, #1
	mov	w5, #1
	ldr	x8, [x0, #8]
	mov	w2, wzr
	ldr	x8, [x8, #32]
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [x8, #416]
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB349_37
// %bb.36:                              // %if.then214
	ldur	x8, [x29, #-8]
	ldr	x8, [x8, #16]
	str	x8, [sp]
	ldr	w9, [x8, #36]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #36]
.LBB349_37:                             // %if.end217
	ldur	x8, [x29, #-24]
	adrp	x9, load_interlaced_image
	add	x9, x9, :lo12:load_interlaced_image
	b	.LBB349_39
.LBB349_38:                             // %if.else
	ldur	x8, [x29, #-24]
	adrp	x9, get_pixel_rows
	add	x9, x9, :lo12:get_pixel_rows
.LBB349_39:                             // %if.end221
	str	x9, [x8, #8]
	ldur	x0, [x29, #-8]
	ldr	w9, [sp, #24]
	mov	w1, #1
	mov	w3, #1
	ldr	x8, [x0, #8]
	add	w2, w9, w9, lsl #1
	mov	w19, #1
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-24]
	mov	w9, #2
	mov	w1, #1
	str	x0, [x8, #32]
	ldur	x8, [x29, #-24]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #3
	str	w9, [x8, #48]
	ldur	x8, [x29, #-8]
	mov	w9, #8
	str	w9, [x8, #64]
	ldr	w8, [sp, #24]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #40]
	ldr	w8, [sp, #20]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #44]
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #24]
	ldr	x8, [x8]
	add	x10, x8, #44                    // =44
	str	x10, [sp]
	str	w9, [x8, #44]
	ldr	w8, [sp, #20]
	mov	x9, x10
	str	w8, [x9, #4]
	ldr	w8, [sp, #16]
	mov	x9, x10
	str	w8, [x9, #8]
	ldur	x8, [x29, #-8]
	mov	w9, #1017
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end349:
	.size	start_input_gif, .Lfunc_end349-start_input_gif
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_input_gif
	.type	finish_input_gif,@function
finish_input_gif:                       // @finish_input_gif
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	stp	x1, x0, [sp], #16
	ret
.Lfunc_end350:
	.size	finish_input_gif, .Lfunc_end350-finish_input_gif
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function ReadColorMap
	.type	ReadColorMap,@function
ReadColorMap:                           // @ReadColorMap
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #8]
	str	wzr, [sp, #4]
	mov	w8, wzr
	mov	w9, w1
	cmp	w8, w9
	b.ge	.LBB351_2
.LBB351_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	bl	ReadByte
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #4]
	ldr	x8, [x8]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	ReadByte
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #4]
	ldr	x8, [x8, #8]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	ReadByte
	ldr	x8, [sp, #8]
	ldrsw	x9, [sp, #4]
	ldr	x8, [x8, #16]
	strb	w0, [x8, x9]
	ldr	w8, [sp, #4]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	mov	w8, w8
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB351_1
.LBB351_2:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end351:
	.size	ReadColorMap, .Lfunc_end351-ReadColorMap
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function ReadByte
	.type	ReadByte,@function
ReadByte:                               // @ReadByte
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x0, [x0, #24]
	str	x0, [sp, #16]
	bl	getc
	cmn	w0, #1                          // =1
	str	w0, [sp, #12]
	b.eq	.LBB352_2
// %bb.1:                               // %if.end
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB352_2:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end352:
	.size	ReadByte, .Lfunc_end352-ReadByte
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function DoExtension
	.type	DoExtension,@function
DoExtension:                            // @DoExtension
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	ReadByte
	ldr	x8, [sp, #8]
	str	w0, [sp, #4]
	mov	w9, #1019
	mov	w1, #1
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #8]
	mov	w9, w0
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [sp, #8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	x0, [sp, #8]
	bl	SkipDataBlocks
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end353:
	.size	DoExtension, .Lfunc_end353-DoExtension
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function InitLZWCode
	.type	InitLZWCode,@function
InitLZWCode:                            // @InitLZWCode
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w8, #2
	str	x0, [sp, #8]
	str	w8, [x0, #324]
	mov	x8, x0
	str	wzr, [x8, #328]
	mov	x8, x0
	str	wzr, [x8, #332]
	mov	x8, x0
	str	wzr, [x8, #336]
	mov	x8, x0
	ldr	w9, [x8, #340]
	mov	w10, #1
	lsl	w9, w10, w9
	str	w9, [x8, #344]
	mov	x8, x0
	ldr	w9, [x8, #344]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #348]
	mov	x8, x0
	str	w10, [x8, #364]
	bl	ReInitLZW
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end354:
	.size	InitLZWCode, .Lfunc_end354-InitLZWCode
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function load_interlaced_image
	.type	load_interlaced_image,@function
load_interlaced_image:                  // @load_interlaced_image
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	x8, [x0, #16]
	str	wzr, [sp, #16]
	str	x8, [sp, #8]
	b	.LBB355_2
.LBB355_1:                              // %for.inc14
                                        //   in Loop: Header=BB355_2 Depth=1
	ldr	w8, [sp, #16]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #16]
.LBB355_2:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB355_6 Depth 2
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #16]
	ldr	w10, [x8, #44]
	ldr	x8, [sp, #8]
	cmp	w9, w10
	b.hs	.LBB355_7
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB355_2 Depth=1
	cbz	x8, .LBB355_5
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB355_2 Depth=1
	ldr	w8, [sp, #16]
	ldr	x9, [sp, #8]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #44]
	str	x8, [x9, #16]
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8]
	blr	x8
.LBB355_5:                              // %if.end
                                        //   in Loop: Header=BB355_2 Depth=1
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-24]
	ldr	w2, [sp, #16]
	mov	w3, #1
	ldr	x9, [x0, #8]
	ldr	x1, [x8, #416]
	mov	w4, #1
	ldr	x8, [x9, #56]
	blr	x8
	ldr	x8, [x0]
	ldur	x9, [x29, #-8]
	stp	x8, x0, [sp, #24]
	ldr	w8, [x9, #40]
	str	w8, [sp, #20]
	mov	w8, w8
	cbz	w8, .LBB355_1
.LBB355_6:                              // %for.body11
                                        //   Parent Loop BB355_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	x0, [x29, #-24]
	bl	LZWReadByte
	ldr	x8, [sp, #24]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	strb	w0, [x8]
	ldr	w8, [sp, #20]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	mov	w8, w8
	cbnz	w8, .LBB355_6
	b	.LBB355_1
.LBB355_7:                              // %for.end15
	cbz	x8, .LBB355_9
// %bb.8:                               // %if.then18
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #32]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #32]
.LBB355_9:                              // %if.end20
	ldur	x8, [x29, #-24]
	adrp	x9, get_interlaced_row
	add	x9, x9, :lo12:get_interlaced_row
	str	x9, [x8, #8]
	ldur	x8, [x29, #-24]
	str	wzr, [x8, #424]
	ldur	x8, [x29, #-8]
	ldp	x9, x1, [x29, #-24]
	ldr	w8, [x8, #44]
	add	w8, w8, #7                      // =7
	lsr	w8, w8, #3
	str	w8, [x9, #428]
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	w8, [x8, #44]
	ldr	w10, [x9, #428]
	add	w8, w8, #3                      // =3
	add	w8, w10, w8, lsr #3
	str	w8, [x9, #432]
	ldur	x8, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	w8, [x8, #44]
	ldr	w10, [x9, #432]
	add	w8, w8, #1                      // =1
	add	w8, w10, w8, lsr #2
	str	w8, [x9, #436]
	ldur	x0, [x29, #-8]
	bl	get_interlaced_row
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end355:
	.size	load_interlaced_image, .Lfunc_end355-load_interlaced_image
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_pixel_rows
	.type	get_pixel_rows,@function
get_pixel_rows:                         // @get_pixel_rows
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	x8, [x1, #56]
	str	x8, [sp, #8]
	ldr	x8, [x1, #32]
	ldr	x8, [x8]
	str	x8, [sp, #24]
	ldr	w8, [x0, #40]
	str	w8, [sp, #20]
	mov	w8, w8
	cbz	w8, .LBB356_2
.LBB356_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-24]
	bl	LZWReadByte
	ldr	x8, [sp, #8]
	stur	w0, [x29, #-28]
	ldr	x9, [sp, #24]
	ldr	x8, [x8]
	add	x10, x9, #1                     // =1
	ldrb	w8, [x8, w0, sxtw]
	str	x10, [sp, #24]
	strb	w8, [x9]
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-28]
	ldr	x8, [x8, #8]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-28]
	ldr	x10, [sp, #24]
	ldr	x8, [x8, #16]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	w8, [sp, #20]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	mov	w8, w8
	cbnz	w8, .LBB356_1
.LBB356_2:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end356:
	.size	get_pixel_rows, .Lfunc_end356-get_pixel_rows
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function LZWReadByte
	.type	LZWReadByte,@function
LZWReadByte:                            // @LZWReadByte
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #16]
	ldr	w9, [x0, #364]
	mov	x8, x0
	cbz	w9, .LBB357_2
// %bb.1:                               // %if.then
	str	wzr, [x8, #364]
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #344]
	str	w8, [sp, #12]
	b	.LBB357_5
.LBB357_2:                              // %if.else
	ldr	x0, [sp, #16]
	ldr	x8, [x8, #400]
	ldr	x9, [x0, #392]
	cmp	x8, x9
	b.ls	.LBB357_4
// %bb.3:                               // %if.then2
	ldr	x8, [x0, #400]
	sub	x9, x8, #1                      // =1
	str	x9, [x0, #400]
	ldurb	w8, [x8, #-1]
	b	.LBB357_27
.LBB357_4:                              // %if.end
	bl	GetCode
	str	w0, [sp, #12]
.LBB357_5:                              // %if.end4
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #344]
	cmp	w9, w8
	b.ne	.LBB357_11
// %bb.6:                               // %if.then8
	ldr	x0, [sp, #16]
	bl	ReInitLZW
.LBB357_7:                              // %do.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #16]
	bl	GetCode
	ldr	x8, [sp, #16]
	str	w0, [sp, #12]
	ldr	w8, [x8, #344]
	cmp	w0, w8
	b.eq	.LBB357_7
// %bb.8:                               // %do.end
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #344]
	cmp	w9, w8
	b.le	.LBB357_10
// %bb.9:                               // %if.then16
	ldr	x8, [sp, #16]
	mov	w9, #1021
	mov	w1, #-1
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	str	wzr, [sp, #12]
.LBB357_10:                             // %if.end20
	ldr	w8, [sp, #12]
	ldr	x9, [sp, #16]
	str	w8, [x9, #368]
	ldr	x9, [sp, #16]
	str	w8, [x9, #372]
	ldr	w8, [sp, #12]
	b	.LBB357_27
.LBB357_11:                             // %if.end21
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #348]
	cmp	w9, w8
	b.ne	.LBB357_15
// %bb.12:                              // %if.then24
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #336]
	cbnz	w8, .LBB357_14
// %bb.13:                              // %if.then26
	ldr	x0, [sp, #16]
	bl	SkipDataBlocks
	ldr	x8, [sp, #16]
	mov	w9, #1
	str	w9, [x8, #336]
.LBB357_14:                             // %if.end28
	ldr	x8, [sp, #16]
	mov	w9, #1023
	mov	w1, #-1
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #4]
	mov	w0, wzr
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB357_15:                             // %if.end36
	ldr	w8, [sp, #12]
	ldr	x9, [sp, #16]
	str	w8, [sp, #8]
	ldr	w9, [x9, #360]
	cmp	w8, w9
	b.lt	.LBB357_20
// %bb.16:                              // %if.then39
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #360]
	cmp	w9, w8
	b.le	.LBB357_18
// %bb.17:                              // %if.then43
	ldr	x8, [sp, #16]
	mov	w9, #1021
	mov	w1, #-1
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [sp, #16]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	str	wzr, [sp, #8]
.LBB357_18:                             // %if.end51
	ldr	x8, [sp, #16]
	ldr	x9, [x8, #400]
	ldr	w10, [x8, #372]
	add	x11, x9, #1                     // =1
	str	x11, [x8, #400]
	strb	w10, [x9]
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #368]
.LBB357_19:                             // %while.cond
	str	w8, [sp, #12]
.LBB357_20:                             // %while.cond
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #344]
	cmp	w9, w8
	b.lt	.LBB357_22
// %bb.21:                              // %while.body
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	ldr	x10, [x8, #384]
	ldr	x11, [x8, #400]
	ldrb	w9, [x10, x9]
	add	x10, x11, #1                    // =1
	str	x10, [x8, #400]
	strb	w9, [x11]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #376]
	ldrh	w8, [x8, x9, lsl #1]
	b	.LBB357_19
.LBB357_22:                             // %while.end
	ldr	w8, [sp, #12]
	ldr	x9, [sp, #16]
	str	w8, [x9, #372]
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #360]
	cmp	w8, #4095                       // =4095
	str	w8, [sp, #12]
	b.gt	.LBB357_26
// %bb.23:                              // %if.then70
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	ldr	w10, [x8, #368]
	ldr	x8, [x8, #376]
	strh	w10, [x8, x9, lsl #1]
	ldr	x8, [sp, #16]
	ldrsw	x9, [sp, #12]
	ldr	w10, [x8, #372]
	ldr	x8, [x8, #384]
	strb	w10, [x8, x9]
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #360]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #360]
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #360]
	ldr	w8, [x8, #356]
	cmp	w9, w8
	b.lt	.LBB357_26
// %bb.24:                              // %land.lhs.true
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #352]
	cmp	w8, #11                         // =11
	b.gt	.LBB357_26
// %bb.25:                              // %if.then87
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #352]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #352]
	ldr	x8, [sp, #16]
	ldr	w9, [x8, #356]
	lsl	w9, w9, #1
	str	w9, [x8, #356]
.LBB357_26:                             // %if.end92
	ldr	w8, [sp, #8]
	ldr	x9, [sp, #16]
	str	w8, [x9, #368]
	ldr	x8, [sp, #16]
	ldr	w8, [x8, #372]
.LBB357_27:                             // %cleanup
	mov	w9, #1
	stur	w8, [x29, #-4]
	str	w9, [sp, #4]
	mov	w0, w8
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end357:
	.size	LZWReadByte, .Lfunc_end357-LZWReadByte
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function GetCode
	.type	GetCode,@function
GetCode:                                // @GetCode
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x19, [sp, #48]                  // 8-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stur	x0, [x29, #-8]
.LBB358_1:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #332]
	ldr	w10, [x8, #352]
	ldr	w11, [x8, #328]
	add	w9, w9, w10
	cmp	w9, w11
	b.le	.LBB358_5
// %bb.2:                               // %while.body
                                        //   in Loop: Header=BB358_1 Depth=1
	ldr	w9, [x8, #336]
	ldur	x8, [x29, #-8]
	cbnz	w9, .LBB358_6
// %bb.3:                               // %if.end
                                        //   in Loop: Header=BB358_1 Depth=1
	ldur	x9, [x29, #-8]
	ldrsw	x10, [x9, #324]
	add	x8, x10, x8
	ldrb	w8, [x8, #62]
	strb	w8, [x9, #64]
	ldur	x8, [x29, #-8]
	ldrsw	x9, [x8, #324]
	add	x9, x9, x8
	ldrb	w9, [x9, #63]
	strb	w9, [x8, #65]
	ldur	x0, [x29, #-8]
	add	x1, x0, #66                     // =66
	bl	GetDataBlock
	ldur	x8, [x29, #-8]
	str	w0, [sp, #8]
	cbz	w0, .LBB358_7
// %bb.4:                               // %if.end26
                                        //   in Loop: Header=BB358_1 Depth=1
	ldur	x9, [x29, #-8]
	ldr	w8, [x8, #332]
	ldr	w10, [x9, #328]
	sub	w8, w8, w10
	add	w8, w8, #16                     // =16
	str	w8, [x9, #332]
	ldr	w8, [sp, #8]
	ldur	x9, [x29, #-8]
	add	w8, w8, #2                      // =2
	str	w8, [x9, #324]
	ldur	x8, [x29, #-8]
	ldr	w9, [x8, #324]
	lsl	w9, w9, #3
	str	w9, [x8, #328]
	b	.LBB358_1
.LBB358_5:                              // %while.end
	ldr	w8, [x8, #332]
	ldur	x9, [x29, #-8]
	asr	w8, w8, #3
	str	w8, [x29, #24]
	add	x8, x9, w8, sxtw
	ldrb	w10, [x8, #66]
	lsl	x11, x10, #8
	str	x11, [sp, #16]
	ldrb	w11, [x8, #65]
	bfi	x11, x10, #8, #8
	lsl	x10, x11, #8
	str	x10, [sp, #16]
	ldrb	w8, [x8, #64]
	bfi	x8, x11, #8, #16
	str	x8, [sp, #16]
	ldr	w10, [x9, #332]
	mov	w11, #1
	and	x10, x10, #0x7
	lsr	x8, x8, x10
	str	x8, [sp, #16]
	ldr	w10, [x9, #352]
	lsl	w10, w11, w10
	sub	w10, w10, #1                    // =1
	and	w8, w8, w10
	str	w8, [sp, #12]
	ldr	w8, [x9, #352]
	ldr	w10, [x9, #332]
	add	w8, w10, w8
	str	w8, [x9, #332]
	ldr	w8, [sp, #12]
	str	w11, [sp, #4]
	b	.LBB358_8
.LBB358_6:                              // %if.then
	ldr	x8, [x8, #48]
	mov	w9, #1024
	mov	w1, #-1
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-8]
	mov	w9, #1
	ldr	w8, [x8, #348]
	str	w9, [sp, #4]
	b	.LBB358_8
.LBB358_7:                              // %if.then16
	mov	w19, #1
	str	w19, [x8, #336]
	ldur	x8, [x29, #-8]
	mov	w9, #1024
	mov	w1, #-1
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-8]
	ldr	w8, [x8, #348]
	str	w19, [sp, #4]
.LBB358_8:                              // %cleanup
	str	w8, [x29, #28]
	mov	w0, w8
	ldr	x19, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end358:
	.size	GetCode, .Lfunc_end358-GetCode
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function ReInitLZW
	.type	ReInitLZW,@function
ReInitLZW:                              // @ReInitLZW
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	ldr	w8, [x0, #340]
	add	w8, w8, #1                      // =1
	str	w8, [x0, #352]
	mov	x8, x0
	ldr	w9, [x8, #344]
	lsl	w9, w9, #1
	str	w9, [x8, #356]
	mov	x8, x0
	ldr	w9, [x8, #344]
	add	w9, w9, #2                      // =2
	str	w9, [x8, #360]
	mov	x8, x0
	ldr	x9, [x8, #392]
	str	x9, [x8, #400]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end359:
	.size	ReInitLZW, .Lfunc_end359-ReInitLZW
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function SkipDataBlocks
	.type	SkipDataBlocks,@function
SkipDataBlocks:                         // @SkipDataBlocks
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #288                    // =288
	stp	x29, x30, [sp, #256]            // 16-byte Folded Spill
	str	x28, [sp, #272]                 // 8-byte Folded Spill
	add	x29, sp, #256                   // =256
	.cfi_def_cfa w29, 32
	.cfi_offset w28, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
.LBB360_1:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [x29, #24]
	mov	x1, sp
	bl	GetDataBlock
	cmp	w0, #0                          // =0
	b.gt	.LBB360_1
// %bb.2:                               // %while.end
	ldr	x28, [sp, #272]                 // 8-byte Folded Reload
	ldp	x29, x30, [sp, #256]            // 16-byte Folded Reload
	add	sp, sp, #288                    // =288
	ret
.Lfunc_end360:
	.size	SkipDataBlocks, .Lfunc_end360-SkipDataBlocks
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function GetDataBlock
	.type	GetDataBlock,@function
GetDataBlock:                           // @GetDataBlock
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	bl	ReadByte
	cmp	w0, #1                          // =1
	str	w0, [sp, #12]
	b.lt	.LBB361_3
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	ldr	x0, [sp, #16]
	ldrsw	x2, [sp, #12]
	mov	w1, #1
	ldr	x3, [x8, #24]
	bl	fread
	ldrsw	x8, [sp, #12]
	cmp	x0, x8
	b.eq	.LBB361_3
// %bb.2:                               // %if.then5
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB361_3:                              // %if.end9
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end361:
	.size	GetDataBlock, .Lfunc_end361-GetDataBlock
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_interlaced_row
	.type	get_interlaced_row,@function
get_interlaced_row:                     // @get_interlaced_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	x8, [x1, #56]
	str	x8, [sp, #8]
	ldr	w8, [x1, #424]
	and	x8, x8, #0x7
	cmp	w8, #6                          // =6
	b.hi	.LBB362_5
// %bb.1:                               // %entry
	adrp	x9, .LJTI362_0
	add	x9, x9, :lo12:.LJTI362_0
	adr	x10, .LBB362_2
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB362_2:                              // %sw.bb6
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #424]
	ldr	w8, [x8, #432]
	add	w8, w8, w9, lsr #2
	b	.LBB362_6
.LBB362_3:                              // %sw.bb
	ldur	x8, [x29, #-24]
	ldr	w8, [x8, #424]
	lsr	w8, w8, #3
	b	.LBB362_6
.LBB362_4:                              // %sw.bb3
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #424]
	ldr	w8, [x8, #428]
	add	w8, w8, w9, lsr #3
	b	.LBB362_6
.LBB362_5:                              // %sw.default
	ldur	x8, [x29, #-24]
	ldr	w9, [x8, #424]
	ldr	w8, [x8, #436]
	add	w8, w8, w9, lsr #1
.LBB362_6:                              // %sw.epilog
	ldur	x0, [x29, #-8]
	str	w8, [sp, #4]
	ldur	x8, [x29, #-24]
	ldr	w2, [sp, #4]
	ldr	x9, [x0, #8]
	mov	w3, #1
	ldr	x1, [x8, #416]
	mov	w4, wzr
	ldr	x8, [x9, #56]
	blr	x8
	ldur	x9, [x29, #-24]
	stur	x0, [x29, #-32]
	ldr	x10, [x0]
	ldr	x8, [x9, #32]
	ldur	x9, [x29, #-8]
	ldr	x8, [x8]
	stp	x8, x10, [sp, #24]
	ldr	w8, [x9, #40]
	str	w8, [sp, #20]
	mov	w8, w8
	cbz	w8, .LBB362_8
.LBB362_7:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x10, x8, [sp, #24]
	ldr	x9, [sp, #8]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	stur	w8, [x29, #-36]
	ldr	x9, [x9]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	stp	x9, x11, [sp, #24]
	strb	w8, [x10]
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-36]
	ldr	x10, [sp, #24]
	ldr	x8, [x8, #8]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-36]
	ldr	x10, [sp, #24]
	ldr	x8, [x8, #16]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	w8, [sp, #20]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	mov	w8, w8
	cbnz	w8, .LBB362_7
.LBB362_8:                              // %for.end
	ldur	x8, [x29, #-24]
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	mov	w0, #1
	ldr	w9, [x8, #424]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #424]
	add	sp, sp, #96                     // =96
	ret
.Lfunc_end362:
	.size	get_interlaced_row, .Lfunc_end362-get_interlaced_row
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI362_0:
	.byte	(.LBB362_3-.LBB362_2)>>2
	.byte	(.LBB362_5-.LBB362_2)>>2
	.byte	(.LBB362_2-.LBB362_2)>>2
	.byte	(.LBB362_5-.LBB362_2)>>2
	.byte	(.LBB362_4-.LBB362_2)>>2
	.byte	(.LBB362_5-.LBB362_2)>>2
	.byte	(.LBB362_2-.LBB362_2)>>2
                                        // -- End function
	.text
	.globl	jinit_read_ppm                  // -- Begin function jinit_read_ppm
	.p2align	2
	.type	jinit_read_ppm,@function
jinit_read_ppm:                         // @jinit_read_ppm
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #80
	ldr	x8, [x8]
	blr	x8
	adrp	x8, start_input_ppm
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	x8, x8, :lo12:start_input_ppm
	adrp	x9, finish_input_ppm
	str	x0, [sp]
	str	x8, [x0]
	mov	x8, x0
	add	x9, x9, :lo12:finish_input_ppm
	str	x9, [x8, #16]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end363:
	.size	jinit_read_ppm, .Lfunc_end363-jinit_read_ppm
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_input_ppm
	.type	start_input_ppm,@function
start_input_ppm:                        // @start_input_ppm
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #80                    // =80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	x0, [x1, #24]
	bl	getc
	cmp	w0, #80                         // =80
	b.eq	.LBB364_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #1027
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB364_2:                              // %if.end
	ldur	x8, [x29, #-24]
	ldr	x0, [x8, #24]
	bl	getc
	ldur	x8, [x29, #-24]
	stur	w0, [x29, #-28]
	ldur	x0, [x29, #-8]
	ldr	x1, [x8, #24]
	bl	read_pbm_integer
	ldur	x8, [x29, #-24]
	stur	w0, [x29, #-32]
	ldur	x0, [x29, #-8]
	ldr	x1, [x8, #24]
	bl	read_pbm_integer
	ldur	x8, [x29, #-24]
	stur	w0, [x29, #-36]
	ldur	x0, [x29, #-8]
	ldr	x1, [x8, #24]
	bl	read_pbm_integer
	ldur	w8, [x29, #-32]
	str	w0, [sp, #40]
	cbz	w8, .LBB364_5
// %bb.3:                               // %if.end
	ldur	w8, [x29, #-36]
	cbz	w8, .LBB364_5
// %bb.4:                               // %if.end
	cbnz	w0, .LBB364_6
.LBB364_5:                              // %if.then18
	ldur	x8, [x29, #-8]
	mov	w9, #1027
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB364_6:                              // %if.end23
	ldur	x8, [x29, #-8]
	mov	w9, #8
	str	w9, [x8, #64]
	ldur	w8, [x29, #-32]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #40]
	ldur	w8, [x29, #-36]
	ldur	x9, [x29, #-8]
	str	w8, [x9, #44]
	ldur	w8, [x29, #-28]
	mov	w9, #1
	stp	wzr, w9, [sp, #32]
	str	w9, [sp, #28]
	sub	w8, w8, #50                     // =50
	cmp	w8, #4                          // =4
	b.hi	.LBB364_15
// %bb.7:                               // %if.end23
	adrp	x9, .LJTI364_0
	add	x9, x9, :lo12:.LJTI364_0
	adr	x10, .LBB364_8
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB364_8:                              // %sw.bb
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w1, #1
	str	w9, [x8, #48]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #1029
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-36]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-24]
	adrp	x9, get_text_gray_row
	add	x9, x9, :lo12:get_text_gray_row
	b	.LBB364_10
.LBB364_9:                              // %sw.bb33
	ldur	x8, [x29, #-8]
	mov	w9, #3
	mov	w1, #1
	str	w9, [x8, #48]
	ldur	x8, [x29, #-8]
	mov	w9, #2
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #1031
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-36]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldur	x8, [x29, #-24]
	adrp	x9, get_text_rgb_row
	add	x9, x9, :lo12:get_text_rgb_row
.LBB364_10:                             // %sw.epilog
	str	x9, [x8, #8]
	str	wzr, [sp, #36]
	mov	w8, wzr
	cbnz	w8, .LBB364_20
	b	.LBB364_21
.LBB364_11:                             // %sw.bb50
	ldur	x8, [x29, #-8]
	mov	w9, #1
	mov	w1, #1
	str	w9, [x8, #48]
	ldur	x8, [x29, #-8]
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #1028
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-36]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #40]
	cmp	w8, #256                        // =256
	b.lo	.LBB364_16
// %bb.12:                              // %if.then66
	ldur	x8, [x29, #-24]
	adrp	x9, get_word_gray_row
	add	x9, x9, :lo12:get_word_gray_row
	str	x9, [x8, #8]
	ldr	w8, [sp, #36]
	cbnz	w8, .LBB364_20
	b	.LBB364_21
.LBB364_13:                             // %sw.bb78
	ldur	x8, [x29, #-8]
	mov	w9, #3
	mov	w1, #1
	str	w9, [x8, #48]
	ldur	x8, [x29, #-8]
	mov	w9, #2
	str	w9, [x8, #52]
	ldur	x8, [x29, #-8]
	mov	w9, #1030
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-32]
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldur	x8, [x29, #-8]
	ldur	w9, [x29, #-36]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #40]
	cmp	w8, #256                        // =256
	b.lo	.LBB364_18
// %bb.14:                              // %if.then94
	ldur	x8, [x29, #-24]
	adrp	x9, get_word_rgb_row
	add	x9, x9, :lo12:get_word_rgb_row
	str	x9, [x8, #8]
	ldr	w8, [sp, #36]
	cbnz	w8, .LBB364_20
	b	.LBB364_21
.LBB364_15:                             // %sw.default
	ldur	x8, [x29, #-8]
	mov	w9, #1027
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #36]
	cbnz	w8, .LBB364_20
	b	.LBB364_21
.LBB364_16:                             // %if.else
	ldr	w9, [sp, #40]
	ldur	x8, [x29, #-24]
	cmp	w9, #255                        // =255
	b.eq	.LBB364_19
// %bb.17:                              // %if.else73
	adrp	x9, get_scaled_gray_row
	add	x9, x9, :lo12:get_scaled_gray_row
	str	x9, [x8, #8]
	ldr	w8, [sp, #36]
	cbnz	w8, .LBB364_20
	b	.LBB364_21
.LBB364_18:                             // %if.else97
	ldr	w9, [sp, #40]
	ldur	x8, [x29, #-24]
	cmp	w9, #255                        // =255
	b.ne	.LBB364_28
.LBB364_19:                             // %if.then70
	adrp	x9, get_raw_row
	add	x9, x9, :lo12:get_raw_row
	mov	w10, #1
	str	x9, [x8, #8]
	stp	wzr, w10, [sp, #28]
	ldr	w8, [sp, #36]
	cbz	w8, .LBB364_21
.LBB364_20:                             // %if.then111
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #40]
	ldur	w10, [x29, #-32]
	mov	w1, #1
	ldrsw	x8, [x8, #48]
	cmp	w9, #256                        // =256
	ldur	x9, [x29, #-24]
	mul	x8, x10, x8
	mov	w10, #1
	cinc	x10, x10, hs
	mul	x8, x8, x10
	str	x8, [x9, #64]
	ldur	x0, [x29, #-8]
	ldur	x9, [x29, #-24]
	ldr	x8, [x0, #8]
	ldr	x2, [x9, #64]
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [x8, #48]
.LBB364_21:                             // %if.end119
	ldr	w8, [sp, #32]
	cbz	w8, .LBB364_23
// %bb.22:                              // %if.then121
	ldur	x8, [x29, #-24]
	ldr	x9, [x8, #48]
	str	x9, [x8, #56]
	ldur	x8, [x29, #-24]
	add	x9, x8, #56                     // =56
	str	x9, [x8, #32]
	b	.LBB364_24
.LBB364_23:                             // %if.else126
	ldur	x0, [x29, #-8]
	ldur	w9, [x29, #-32]
	mov	w1, #1
	mov	w3, #1
	ldr	x8, [x0, #8]
	ldr	w10, [x0, #48]
	ldr	x8, [x8, #16]
	mul	w2, w9, w10
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [x8, #32]
.LBB364_24:                             // %if.end135
	ldur	x8, [x29, #-24]
	mov	w9, #1
	str	w9, [x8, #40]
	ldr	w8, [sp, #28]
	cbz	w8, .LBB364_27
// %bb.25:                              // %if.then137
	ldur	x0, [x29, #-8]
	ldr	w9, [sp, #40]
	mov	w1, #1
	ldr	x8, [x0, #8]
	add	x2, x9, #1                      // =1
	ldr	x8, [x8]
	blr	x8
	ldur	x8, [x29, #-24]
	str	x0, [x8, #72]
	ldr	w8, [sp, #40]
	lsr	w8, w8, #1
	stp	x8, xzr, [sp, #8]
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #40]
	cmp	x8, x9
	b.gt	.LBB364_27
.LBB364_26:                             // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x10, x8, [sp, #8]
	ldur	x9, [x29, #-24]
	ldr	w11, [sp, #40]
	lsl	x12, x8, #8
	ldr	x9, [x9, #72]
	sub	x12, x12, x8
	add	x10, x12, x10
	sdiv	x10, x10, x11
	strb	w10, [x9, x8]
	ldr	x8, [sp, #16]
	add	x8, x8, #1                      // =1
	str	x8, [sp, #16]
	ldr	w9, [sp, #40]
	cmp	x8, x9
	b.le	.LBB364_26
.LBB364_27:                             // %if.end154
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.LBB364_28:                             // %if.else102
	adrp	x9, get_scaled_rgb_row
	add	x9, x9, :lo12:get_scaled_rgb_row
	str	x9, [x8, #8]
	ldr	w8, [sp, #36]
	cbnz	w8, .LBB364_20
	b	.LBB364_21
.Lfunc_end364:
	.size	start_input_ppm, .Lfunc_end364-start_input_ppm
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI364_0:
	.byte	(.LBB364_8-.LBB364_8)>>2
	.byte	(.LBB364_9-.LBB364_8)>>2
	.byte	(.LBB364_15-.LBB364_8)>>2
	.byte	(.LBB364_11-.LBB364_8)>>2
	.byte	(.LBB364_13-.LBB364_8)>>2
                                        // -- End function
	.text
	.p2align	2                               // -- Begin function finish_input_ppm
	.type	finish_input_ppm,@function
finish_input_ppm:                       // @finish_input_ppm
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	stp	x1, x0, [sp], #16
	ret
.Lfunc_end365:
	.size	finish_input_ppm, .Lfunc_end365-finish_input_ppm
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_pbm_integer
	.type	read_pbm_integer,@function
read_pbm_integer:                       // @read_pbm_integer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	str	x19, [sp, #32]                  // 8-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	w19, #42
	str	x0, [x29, #24]
	str	x1, [sp, #8]
.LBB366_1:                              // %do.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #8]
	bl	pbm_getc
	cmn	w0, #1                          // =1
	str	w0, [sp, #4]
	b.eq	.LBB366_6
// %bb.2:                               // %do.cond
                                        //   in Loop: Header=BB366_1 Depth=1
	ldr	w8, [sp, #4]
	cmp	w8, #32                         // =32
	b.eq	.LBB366_1
.LBB366_3:                              // %do.cond
                                        //   in Loop: Header=BB366_1 Depth=1
	cmp	w8, #9                          // =9
	b.eq	.LBB366_1
// %bb.4:                               // %do.cond
                                        //   in Loop: Header=BB366_1 Depth=1
	cmp	w8, #10                         // =10
	b.eq	.LBB366_1
// %bb.5:                               // %do.cond
                                        //   in Loop: Header=BB366_1 Depth=1
	cmp	w8, #13                         // =13
	b.eq	.LBB366_1
	b	.LBB366_7
.LBB366_6:                              // %if.then
                                        //   in Loop: Header=BB366_1 Depth=1
	ldr	x8, [x29, #24]
	ldr	x8, [x8]
	str	w19, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #4]
	cmp	w8, #32                         // =32
	b.ne	.LBB366_3
	b	.LBB366_1
.LBB366_7:                              // %do.end
	ldr	w8, [sp, #4]
	cmp	w8, #48                         // =48
	b.lt	.LBB366_9
// %bb.8:                               // %do.end
	cmp	w8, #58                         // =58
	b.lt	.LBB366_10
.LBB366_9:                              // %if.then10
	ldr	x8, [x29, #24]
	mov	w9, #1026
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB366_10:                             // %if.end15
	ldr	w8, [sp, #4]
	mov	w19, #10
	sub	w8, w8, #48                     // =48
	str	w8, [sp]
.LBB366_11:                             // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #8]
	bl	pbm_getc
	ldr	w8, [sp]
	cmp	w0, #48                         // =48
	str	w0, [sp, #4]
	b.lt	.LBB366_14
// %bb.12:                              // %while.cond
                                        //   in Loop: Header=BB366_11 Depth=1
	cmp	w0, #57                         // =57
	b.gt	.LBB366_14
// %bb.13:                              // %while.body
                                        //   in Loop: Header=BB366_11 Depth=1
	ldr	w9, [sp, #4]
	madd	w8, w8, w19, w9
	sub	w8, w8, #48                     // =48
	str	w8, [sp]
	b	.LBB366_11
.LBB366_14:                             // %while.end
	ldr	x19, [sp, #32]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	mov	w0, w8
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end366:
	.size	read_pbm_integer, .Lfunc_end366-read_pbm_integer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_text_gray_row
	.type	get_text_gray_row,@function
get_text_gray_row:                      // @get_text_gray_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x1, x1, [x29, #-16]
	ldr	x8, [x1, #72]
	str	x8, [sp, #8]
	ldp	x9, x8, [x1, #24]
	ldr	x8, [x8]
	stp	x8, x9, [sp, #16]
	ldr	w8, [x0, #40]
	str	w8, [sp, #4]
	mov	w8, w8
	cbz	w8, .LBB367_2
.LBB367_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [x29, #24]
	ldr	x1, [sp, #24]
	ldr	x19, [sp, #8]
	bl	read_pbm_integer
	ldr	x8, [sp, #16]
	ldrb	w9, [x19, w0, uxtw]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	strb	w9, [x8]
	ldr	w8, [sp, #4]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	mov	w8, w8
	cbnz	w8, .LBB367_1
.LBB367_2:                              // %for.end
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end367:
	.size	get_text_gray_row, .Lfunc_end367-get_text_gray_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_text_rgb_row
	.type	get_text_rgb_row,@function
get_text_rgb_row:                       // @get_text_rgb_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x1, x1, [x29, #-16]
	ldr	x8, [x1, #72]
	str	x8, [sp, #8]
	ldp	x9, x8, [x1, #24]
	ldr	x8, [x8]
	stp	x8, x9, [sp, #16]
	ldr	w8, [x0, #40]
	str	w8, [sp, #4]
	mov	w8, w8
	cbz	w8, .LBB368_2
.LBB368_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [x29, #24]
	ldr	x1, [sp, #24]
	ldr	x19, [sp, #8]
	bl	read_pbm_integer
	ldp	x8, x1, [sp, #16]
	ldrb	w9, [x19, w0, uxtw]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	strb	w9, [x8]
	ldr	x0, [x29, #24]
	ldr	x19, [sp, #8]
	bl	read_pbm_integer
	ldp	x8, x1, [sp, #16]
	ldrb	w9, [x19, w0, uxtw]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	strb	w9, [x8]
	ldr	x0, [x29, #24]
	ldr	x19, [sp, #8]
	bl	read_pbm_integer
	ldr	x8, [sp, #16]
	ldrb	w9, [x19, w0, uxtw]
	add	x10, x8, #1                     // =1
	str	x10, [sp, #16]
	strb	w9, [x8]
	ldr	w8, [sp, #4]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #4]
	mov	w8, w8
	cbnz	w8, .LBB368_1
.LBB368_2:                              // %for.end
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end368:
	.size	get_text_rgb_row, .Lfunc_end368-get_text_rgb_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_word_gray_row
	.type	get_word_gray_row,@function
get_word_gray_row:                      // @get_word_gray_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldp	x2, x8, [x1, #64]
	str	x8, [sp, #16]
	ldr	x0, [x1, #48]
	ldr	x3, [x1, #24]
	mov	w1, #1
	bl	fread
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #64]
	cmp	x0, x8
	b.eq	.LBB369_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB369_2:                              // %if.end
	ldur	x8, [x29, #-24]
	ldr	x9, [x8, #32]
	ldr	x8, [x8, #48]
	ldr	x10, [x9]
	ldur	x9, [x29, #-8]
	stp	x8, x10, [sp, #24]
	ldr	w8, [x9, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB369_4
.LBB369_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x10, x8, [sp, #16]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldrb	w9, [x8]
	add	x11, x8, #2                     // =2
	str	w9, [sp, #8]
	ldrb	w8, [x8, #1]
	bfi	w9, w8, #8, #8
	ldr	x8, [sp, #32]
	str	w9, [sp, #8]
	ldrb	w9, [x10, w9, uxtw]
	add	x10, x8, #1                     // =1
	stp	x11, x10, [sp, #24]
	strb	w9, [x8]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB369_3
.LBB369_4:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end369:
	.size	get_word_gray_row, .Lfunc_end369-get_word_gray_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_raw_row
	.type	get_raw_row,@function
get_raw_row:                            // @get_raw_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	x1, x1, [sp, #8]
	ldr	x0, [x1, #48]
	ldr	x2, [x1, #64]
	ldr	x3, [x1, #24]
	mov	w1, #1
	bl	fread
	ldr	x8, [sp, #8]
	ldr	x8, [x8, #64]
	cmp	x0, x8
	b.eq	.LBB370_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB370_2:                              // %if.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end370:
	.size	get_raw_row, .Lfunc_end370-get_raw_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_scaled_gray_row
	.type	get_scaled_gray_row,@function
get_scaled_gray_row:                    // @get_scaled_gray_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldp	x2, x8, [x1, #64]
	str	x8, [sp, #16]
	ldr	x0, [x1, #48]
	ldr	x3, [x1, #24]
	mov	w1, #1
	bl	fread
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #64]
	cmp	x0, x8
	b.eq	.LBB371_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB371_2:                              // %if.end
	ldur	x8, [x29, #-24]
	ldr	x9, [x8, #32]
	ldr	x8, [x8, #48]
	ldr	x10, [x9]
	ldur	x9, [x29, #-8]
	stp	x8, x10, [sp, #24]
	ldr	w8, [x9, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB371_4
.LBB371_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x9, x8, [sp, #16]
	ldr	x10, [sp, #32]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	stp	x11, x9, [sp, #24]
	strb	w8, [x10]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB371_3
.LBB371_4:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end371:
	.size	get_scaled_gray_row, .Lfunc_end371-get_scaled_gray_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_word_rgb_row
	.type	get_word_rgb_row,@function
get_word_rgb_row:                       // @get_word_rgb_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldp	x2, x8, [x1, #64]
	str	x8, [sp, #16]
	ldr	x0, [x1, #48]
	ldr	x3, [x1, #24]
	mov	w1, #1
	bl	fread
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #64]
	cmp	x0, x8
	b.eq	.LBB372_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB372_2:                              // %if.end
	ldur	x8, [x29, #-24]
	ldr	x9, [x8, #32]
	ldr	x8, [x8, #48]
	ldr	x10, [x9]
	ldur	x9, [x29, #-8]
	stp	x8, x10, [sp, #24]
	ldr	w8, [x9, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB372_4
.LBB372_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x10, x8, [sp, #16]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldrb	w9, [x8]
	add	x11, x8, #2                     // =2
	str	w9, [sp, #8]
	ldrb	w8, [x8, #1]
	bfi	w9, w8, #8, #8
	ldr	x8, [sp, #32]
	str	w9, [sp, #8]
	ldrb	w9, [x10, w9, uxtw]
	add	x10, x8, #1                     // =1
	stp	x11, x10, [sp, #24]
	strb	w9, [x8]
	ldp	x10, x8, [sp, #16]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldrb	w9, [x8]
	add	x11, x8, #2                     // =2
	str	w9, [sp, #8]
	ldrb	w8, [x8, #1]
	bfi	w9, w8, #8, #8
	ldr	x8, [sp, #32]
	str	w9, [sp, #8]
	ldrb	w9, [x10, w9, uxtw]
	add	x10, x8, #1                     // =1
	stp	x11, x10, [sp, #24]
	strb	w9, [x8]
	ldp	x10, x8, [sp, #16]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldrb	w9, [x8]
	add	x11, x8, #2                     // =2
	str	w9, [sp, #8]
	ldrb	w8, [x8, #1]
	bfi	w9, w8, #8, #8
	ldr	x8, [sp, #32]
	str	w9, [sp, #8]
	ldrb	w9, [x10, w9, uxtw]
	add	x10, x8, #1                     // =1
	stp	x11, x10, [sp, #24]
	strb	w9, [x8]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB372_3
.LBB372_4:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end372:
	.size	get_word_rgb_row, .Lfunc_end372-get_word_rgb_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_scaled_rgb_row
	.type	get_scaled_rgb_row,@function
get_scaled_rgb_row:                     // @get_scaled_rgb_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldp	x2, x8, [x1, #64]
	str	x8, [sp, #16]
	ldr	x0, [x1, #48]
	ldr	x3, [x1, #24]
	mov	w1, #1
	bl	fread
	ldur	x8, [x29, #-24]
	ldr	x8, [x8, #64]
	cmp	x0, x8
	b.eq	.LBB373_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x0, [x29, #-8]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB373_2:                              // %if.end
	ldur	x8, [x29, #-24]
	ldr	x9, [x8, #32]
	ldr	x8, [x8, #48]
	ldr	x10, [x9]
	ldur	x9, [x29, #-8]
	stp	x8, x10, [sp, #24]
	ldr	w8, [x9, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB373_4
.LBB373_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldp	x9, x8, [sp, #16]
	ldr	x10, [sp, #32]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	stp	x11, x9, [sp, #24]
	strb	w8, [x10]
	ldp	x9, x8, [sp, #16]
	ldr	x10, [sp, #32]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	stp	x11, x9, [sp, #24]
	strb	w8, [x10]
	ldp	x9, x8, [sp, #16]
	ldr	x10, [sp, #32]
	add	x11, x8, #1                     // =1
	ldrb	w8, [x8]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	stp	x11, x9, [sp, #24]
	strb	w8, [x10]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB373_3
.LBB373_4:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end373:
	.size	get_scaled_rgb_row, .Lfunc_end373-get_scaled_rgb_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function pbm_getc
	.type	pbm_getc,@function
pbm_getc:                               // @pbm_getc
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	getc
	cmp	w0, #35                         // =35
	str	w0, [sp, #4]
	b.ne	.LBB374_3
.LBB374_1:                              // %do.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #8]
	bl	getc
	cmp	w0, #10                         // =10
	str	w0, [sp, #4]
	b.eq	.LBB374_3
// %bb.2:                               // %do.body
                                        //   in Loop: Header=BB374_1 Depth=1
	cmn	w0, #1                          // =1
	b.ne	.LBB374_1
.LBB374_3:                              // %if.end
	ldr	w0, [sp, #4]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end374:
	.size	pbm_getc, .Lfunc_end374-pbm_getc
	.cfi_endproc
                                        // -- End function
	.globl	read_quant_tables               // -- Begin function read_quant_tables
	.p2align	2
	.type	read_quant_tables,@function
read_quant_tables:                      // @read_quant_tables
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #384                    // =384
	stp	x29, x30, [sp, #336]            // 16-byte Folded Spill
	stp	x28, x21, [sp, #352]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #368]            // 16-byte Folded Spill
	add	x29, sp, #336                   // =336
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	sub	x19, x29, #64                   // =64
	mov	x8, x1
	stp	x1, x0, [x19, #40]
	adrp	x1, .L.str.256
	add	x1, x1, :lo12:.L.str.256
	mov	x0, x8
	stp	w3, w2, [x29, #-32]
	bl	fopen
	str	x0, [x19, #24]
	cbz	x0, .LBB375_10
// %bb.1:                               // %if.end
	mov	w20, #1
	add	x21, sp, #16                    // =16
	stur	wzr, [x29, #-44]
.LBB375_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB375_5 Depth 2
	ldr	x0, [x19, #24]
	sub	x1, x29, #64                    // =64
	sub	x2, x29, #52                    // =52
	bl	read_text_integer
	cbz	w0, .LBB375_13
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB375_2 Depth=1
	ldur	w8, [x29, #-44]
	cmp	w8, #4                          // =4
	b.ge	.LBB375_15
// %bb.4:                               // %if.end7
                                        //   in Loop: Header=BB375_2 Depth=1
	ldr	x8, [x19]
	stur	w20, [x29, #-48]
	str	w8, [sp, #16]
	mov	w8, w20
	cmp	w8, #63                         // =63
	b.gt	.LBB375_7
.LBB375_5:                              // %for.body
                                        //   Parent Loop BB375_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x0, [x19, #24]
	sub	x1, x29, #64                    // =64
	sub	x2, x29, #52                    // =52
	bl	read_text_integer
	cbz	w0, .LBB375_8
// %bb.6:                               // %if.end15
                                        //   in Loop: Header=BB375_5 Depth=2
	ldr	x8, [x19]
	ldursw	x9, [x29, #-48]
	str	w8, [x21, x9, lsl #2]
	add	w8, w9, #1                      // =1
	stur	w8, [x29, #-48]
	mov	w8, w8
	cmp	w8, #63                         // =63
	b.le	.LBB375_5
.LBB375_7:                              // %for.end
                                        //   in Loop: Header=BB375_2 Depth=1
	ldr	x0, [x19, #48]
	ldur	w1, [x29, #-44]
	ldp	w4, w3, [x29, #-32]
	add	x2, sp, #16                     // =16
	bl	jpeg_add_quant_table
	ldur	w8, [x29, #-44]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-44]
	b	.LBB375_2
.LBB375_8:                              // %if.then12
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.3.259
	add	x1, x1, :lo12:.L.str.3.259
.LBB375_9:                              // %cleanup
	bl	fprintf
	ldr	x0, [x19, #24]
	bl	fclose
	b	.LBB375_11
.LBB375_10:                             // %if.then
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.1.257
	add	x1, x1, :lo12:.L.str.1.257
	bl	fprintf
.LBB375_11:                             // %cleanup
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB375_12:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #368]            // 16-byte Folded Reload
	ldp	x28, x21, [sp, #352]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #336]            // 16-byte Folded Reload
	str	w8, [sp, #12]
	add	sp, sp, #384                    // =384
	ret
.LBB375_13:                             // %while.end
	ldur	w8, [x29, #-52]
	cmn	w8, #1                          // =1
	b.eq	.LBB375_16
// %bb.14:                              // %if.then21
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.4.260
	add	x1, x1, :lo12:.L.str.4.260
	b	.LBB375_9
.LBB375_15:                             // %if.then4
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.2.258
	add	x1, x1, :lo12:.L.str.2.258
	b	.LBB375_9
.LBB375_16:                             // %if.end24
	ldr	x0, [x19, #24]
	bl	fclose
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB375_12
.Lfunc_end375:
	.size	read_quant_tables, .Lfunc_end375-read_quant_tables
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_text_integer
	.type	read_text_integer,@function
read_text_integer:                      // @read_text_integer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	stp	x1, x0, [x29, #-16]
	str	x2, [sp, #24]
.LBB376_1:                              // %do.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	bl	text_getc
	cmn	w0, #1                          // =1
	str	w0, [x29, #24]
	b.eq	.LBB376_8
// %bb.2:                               // %do.cond
                                        //   in Loop: Header=BB376_1 Depth=1
	bl	__ctype_b_loc
	ldr	x8, [x0]
	ldrsw	x9, [x29, #24]
	ldrh	w8, [x8, x9, lsl #1]
	tbnz	w8, #13, .LBB376_1
// %bb.3:                               // %do.end
	bl	__ctype_b_loc
	ldr	x9, [x0]
	ldr	w8, [x29, #24]
	ldrh	w9, [x9, w8, sxtw #1]
	tbz	w9, #11, .LBB376_9
// %bb.4:                               // %if.end9
	sxtw	x8, w8
	sub	x8, x8, #48                     // =48
	mov	w19, #10
	str	x8, [sp, #16]
.LBB376_5:                              // %while.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	bl	text_getc
	cmn	w0, #1                          // =1
	str	w0, [x29, #24]
	b.eq	.LBB376_10
// %bb.6:                               // %while.body
                                        //   in Loop: Header=BB376_5 Depth=1
	bl	__ctype_b_loc
	ldr	x8, [x0]
	ldrsw	x9, [x29, #24]
	ldrh	w8, [x8, x9, lsl #1]
	tbz	w8, #11, .LBB376_10
// %bb.7:                               // %if.end21
                                        //   in Loop: Header=BB376_5 Depth=1
	ldr	x8, [sp, #16]
	ldrsw	x9, [x29, #24]
	madd	x8, x8, x19, x9
	sub	x8, x8, #48                     // =48
	str	x8, [sp, #16]
	b	.LBB376_5
.LBB376_8:                              // %if.then
	ldr	w8, [x29, #24]
	ldr	x9, [sp, #24]
	mov	w10, #1
	str	w8, [x9]
	str	wzr, [x29, #28]
	b	.LBB376_11
.LBB376_9:                              // %if.then8
	ldr	x9, [sp, #24]
	mov	w10, #1
	str	w8, [x9]
	str	wzr, [x29, #28]
	b	.LBB376_11
.LBB376_10:                             // %while.end
	ldr	x8, [sp, #16]
	ldur	x9, [x29, #-16]
	mov	w10, #1
	str	x8, [x9]
	ldr	w8, [x29, #24]
	ldr	x9, [sp, #24]
	str	w8, [x9]
	str	w10, [x29, #28]
.LBB376_11:                             // %cleanup
	ldr	w0, [x29, #28]
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	w10, [sp, #12]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end376:
	.size	read_text_integer, .Lfunc_end376-read_text_integer
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function text_getc
	.type	text_getc,@function
text_getc:                              // @text_getc
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	bl	getc
	cmp	w0, #35                         // =35
	str	w0, [sp, #4]
	b.ne	.LBB377_3
.LBB377_1:                              // %do.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #8]
	bl	getc
	cmp	w0, #10                         // =10
	str	w0, [sp, #4]
	b.eq	.LBB377_3
// %bb.2:                               // %do.body
                                        //   in Loop: Header=BB377_1 Depth=1
	cmn	w0, #1                          // =1
	b.ne	.LBB377_1
.LBB377_3:                              // %if.end
	ldr	w0, [sp, #4]
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end377:
	.size	text_getc, .Lfunc_end377-text_getc
	.cfi_endproc
                                        // -- End function
	.globl	read_scan_script                // -- Begin function read_scan_script
	.p2align	2
	.type	read_scan_script,@function
read_scan_script:                       // @read_scan_script
	.cfi_startproc
// %bb.0:                               // %entry
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x28, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #3680                   // =3680
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w28, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	sub	x19, x29, #64                   // =64
	mov	x8, x1
	stp	x1, x0, [x19, #40]
	adrp	x1, .L.str.256
	add	x1, x1, :lo12:.L.str.256
	mov	x0, x8
	bl	fopen
	str	x0, [x19, #32]
	cbz	x0, .LBB378_21
// %bb.1:                               // %if.end
	add	x8, sp, #16                     // =16
	mov	w20, #1
	mov	w21, #63
	stur	wzr, [x29, #-36]
	str	x8, [x19]
.LBB378_2:                              // %while.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB378_5 Depth 2
	ldr	x0, [x19, #32]
	sub	x1, x29, #56                    // =56
	sub	x2, x29, #44                    // =44
	bl	read_scan_integer
	cbz	w0, .LBB378_27
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB378_2 Depth=1
	ldur	w8, [x29, #-36]
	cmp	w8, #100                        // =100
	b.ge	.LBB378_29
// %bb.4:                               // %if.end7
                                        //   in Loop: Header=BB378_2 Depth=1
	ldp	x9, x8, [x19]
	str	w8, [x9, #4]
	stur	w20, [x29, #-40]
	ldp	w9, w8, [x29, #-44]
	cmp	w9, #32                         // =32
	b.ne	.LBB378_8
.LBB378_5:                              // %while.body11
                                        //   Parent Loop BB378_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	cmp	w8, #4                          // =4
	b.ge	.LBB378_23
// %bb.6:                               // %if.end17
                                        //   in Loop: Header=BB378_5 Depth=2
	ldr	x0, [x19, #32]
	sub	x1, x29, #56                    // =56
	sub	x2, x29, #44                    // =44
	bl	read_scan_integer
	cbz	w0, .LBB378_22
// %bb.7:                               // %if.end21
                                        //   in Loop: Header=BB378_5 Depth=2
	ldp	x8, x10, [x19]
	ldursw	x9, [x29, #-40]
	add	x8, x8, x9, lsl #2
	str	w10, [x8, #4]
	ldur	w8, [x29, #-40]
	add	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
	ldp	w9, w8, [x29, #-44]
	cmp	w9, #32                         // =32
	b.eq	.LBB378_5
.LBB378_8:                              // %while.end
                                        //   in Loop: Header=BB378_2 Depth=1
	ldr	x9, [x19]
	str	w8, [x9]
	ldur	w8, [x29, #-44]
	cmp	w8, #58                         // =58
	b.ne	.LBB378_17
// %bb.9:                               // %if.then27
                                        //   in Loop: Header=BB378_2 Depth=1
	ldr	x0, [x19, #32]
	sub	x1, x29, #56                    // =56
	sub	x2, x29, #44                    // =44
	bl	read_scan_integer
	cbz	w0, .LBB378_22
// %bb.10:                              // %if.then27
                                        //   in Loop: Header=BB378_2 Depth=1
	ldur	w8, [x29, #-44]
	cmp	w8, #32                         // =32
	b.ne	.LBB378_22
// %bb.11:                              // %if.end33
                                        //   in Loop: Header=BB378_2 Depth=1
	ldp	x9, x8, [x19]
	sub	x1, x29, #56                    // =56
	sub	x2, x29, #44                    // =44
	str	w8, [x9, #20]
	ldr	x0, [x19, #32]
	bl	read_scan_integer
	cbz	w0, .LBB378_22
// %bb.12:                              // %if.end33
                                        //   in Loop: Header=BB378_2 Depth=1
	ldur	w8, [x29, #-44]
	cmp	w8, #32                         // =32
	b.ne	.LBB378_22
// %bb.13:                              // %if.end41
                                        //   in Loop: Header=BB378_2 Depth=1
	ldp	x9, x8, [x19]
	sub	x1, x29, #56                    // =56
	sub	x2, x29, #44                    // =44
	str	w8, [x9, #24]
	ldr	x0, [x19, #32]
	bl	read_scan_integer
	cbz	w0, .LBB378_22
// %bb.14:                              // %if.end41
                                        //   in Loop: Header=BB378_2 Depth=1
	ldur	w8, [x29, #-44]
	cmp	w8, #32                         // =32
	b.ne	.LBB378_22
// %bb.15:                              // %if.end49
                                        //   in Loop: Header=BB378_2 Depth=1
	ldp	x9, x8, [x19]
	sub	x1, x29, #56                    // =56
	sub	x2, x29, #44                    // =44
	str	w8, [x9, #28]
	ldr	x0, [x19, #32]
	bl	read_scan_integer
	cbz	w0, .LBB378_22
// %bb.16:                              // %if.end54
                                        //   in Loop: Header=BB378_2 Depth=1
	ldur	w9, [x29, #-56]
	b	.LBB378_18
.LBB378_17:                             // %if.else
                                        //   in Loop: Header=BB378_2 Depth=1
	ldr	x8, [x19]
	mov	w9, wzr
	str	wzr, [x8, #20]
	ldr	x8, [x19]
	str	w21, [x8, #24]
	ldr	x8, [x19]
	str	wzr, [x8, #28]
.LBB378_18:                             // %if.else
                                        //   in Loop: Header=BB378_2 Depth=1
	ldr	x8, [x19]
	str	w9, [x8, #32]
	ldur	w8, [x29, #-44]
	cmp	w8, #59                         // =59
	b.eq	.LBB378_20
// %bb.19:                              // %if.end60
                                        //   in Loop: Header=BB378_2 Depth=1
	cmn	w8, #1                          // =1
	b.ne	.LBB378_22
.LBB378_20:                             // %if.end68
                                        //   in Loop: Header=BB378_2 Depth=1
	ldr	x8, [x19]
	ldur	w9, [x29, #-36]
	add	x8, x8, #36                     // =36
	add	w9, w9, #1                      // =1
	str	x8, [x19]
	stur	w9, [x29, #-36]
	b	.LBB378_2
.LBB378_21:                             // %if.then
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.5.263
	add	x1, x1, :lo12:.L.str.5.263
	bl	fprintf
	b	.LBB378_25
.LBB378_22:                             // %bogus
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.8.266
	add	x1, x1, :lo12:.L.str.8.266
	b	.LBB378_24
.LBB378_23:                             // %if.then14
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.7.265
	add	x1, x1, :lo12:.L.str.7.265
.LBB378_24:                             // %cleanup
	bl	fprintf
	ldr	x0, [x19, #32]
	bl	fclose
.LBB378_25:                             // %cleanup
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB378_26:                             // %cleanup
	ldur	w0, [x29, #-4]
	str	w8, [sp, #12]
	add	sp, sp, #3680                   // =3680
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB378_27:                             // %while.end70
	ldur	w8, [x29, #-44]
	cmn	w8, #1                          // =1
	b.eq	.LBB378_30
// %bb.28:                              // %if.then73
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.4.260
	add	x1, x1, :lo12:.L.str.4.260
	b	.LBB378_24
.LBB378_29:                             // %if.then4
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	ldr	x2, [x19, #40]
	adrp	x1, .L.str.6.264
	add	x1, x1, :lo12:.L.str.6.264
	b	.LBB378_24
.LBB378_30:                             // %if.end76
	ldur	w8, [x29, #-36]
	cmp	w8, #1                          // =1
	b.lt	.LBB378_32
// %bb.31:                              // %if.then79
	ldr	x0, [x19, #48]
	ldursw	x9, [x29, #-36]
	mov	w1, #1
	ldr	x8, [x0, #8]
	add	x9, x9, x9, lsl #3
	lsl	x2, x9, #2
	ldr	x8, [x8]
	blr	x8
	ldursw	x8, [x29, #-36]
	add	x1, sp, #16                     // =16
	str	x0, [x19]
	add	x8, x8, x8, lsl #3
	lsl	x2, x8, #2
	bl	memcpy
	ldr	x8, [x19]
	ldr	x9, [x19, #48]
	str	x8, [x9, #240]
	ldur	w8, [x29, #-36]
	ldr	x9, [x19, #48]
	str	w8, [x9, #232]
.LBB378_32:                             // %if.end85
	ldr	x0, [x19, #32]
	bl	fclose
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB378_26
.Lfunc_end378:
	.size	read_scan_script, .Lfunc_end378-read_scan_script
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_scan_integer
	.type	read_scan_integer,@function
read_scan_integer:                      // @read_scan_integer
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	stp	x2, x1, [sp, #16]
	bl	read_text_integer
	cbz	w0, .LBB379_6
// %bb.1:                               // %if.end
	ldr	x8, [sp, #16]
	ldr	w8, [x8]
	str	w8, [sp, #12]
	mov	w8, w8
	cmn	w8, #1                          // =1
	b.eq	.LBB379_4
.LBB379_2:                              // %land.rhs
                                        // =>This Inner Loop Header: Depth=1
	bl	__ctype_b_loc
	ldr	x8, [x0]
	ldrsw	x9, [sp, #12]
	ldrh	w8, [x8, x9, lsl #1]
	tbz	w8, #13, .LBB379_4
// %bb.3:                               // %while.body
                                        //   in Loop: Header=BB379_2 Depth=1
	ldur	x0, [x29, #-16]
	bl	text_getc
	str	w0, [sp, #12]
	mov	w8, w0
	cmn	w8, #1                          // =1
	b.ne	.LBB379_2
.LBB379_4:                              // %while.end
	bl	__ctype_b_loc
	ldr	x8, [x0]
	ldrsw	x0, [sp, #12]
	ldrh	w8, [x8, x0, lsl #1]
	tbz	w8, #11, .LBB379_7
// %bb.5:                               // %if.then10
	ldur	x1, [x29, #-16]
                                        // kill: def $w0 killed $w0 killed $x0
	bl	ungetc
	cmn	w0, #1                          // =1
	b.ne	.LBB379_10
.LBB379_6:                              // %if.then
	mov	w8, #1
	stur	wzr, [x29, #-4]
	str	w8, [sp, #8]
	mov	w0, wzr
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.LBB379_7:                              // %if.else
	cmn	w0, #1                          // =1
	b.eq	.LBB379_11
// %bb.8:                               // %if.else
	ldr	w8, [sp, #12]
	cmp	w8, #59                         // =59
	b.eq	.LBB379_11
// %bb.9:                               // %if.else
	cmp	w8, #58                         // =58
	b.eq	.LBB379_11
.LBB379_10:                             // %if.then23
	mov	w8, #32
	str	w8, [sp, #12]
.LBB379_11:                             // %if.end25
	ldr	w8, [sp, #12]
	ldr	x9, [sp, #16]
	mov	w10, #1
	str	w8, [x9]
	stur	w10, [x29, #-4]
	str	w10, [sp, #8]
	mov	w0, w10
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end379:
	.size	read_scan_integer, .Lfunc_end379-read_scan_integer
	.cfi_endproc
                                        // -- End function
	.globl	set_quant_slots                 // -- Begin function set_quant_slots
	.p2align	2
	.type	set_quant_slots,@function
set_quant_slots:                        // @set_quant_slots
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x21, [sp, #48]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	adrp	x19, .L.str.9.269
	mov	w20, #44
	add	x19, x19, :lo12:.L.str.9.269
	mov	w21, #96
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	wzr, [x29, #24]
	str	wzr, [sp, #12]
	b	.LBB380_3
.LBB380_1:                              // %if.else
                                        //   in Loop: Header=BB380_3 Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	w10, [x29, #24]
	ldr	x8, [x8, #80]
	madd	x8, x9, x21, x8
	str	w10, [x8, #16]
.LBB380_2:                              // %for.inc
                                        //   in Loop: Header=BB380_3 Depth=1
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
.LBB380_3:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB380_10 Depth 2
	ldr	w8, [sp, #12]
	cmp	w8, #9                          // =9
	b.gt	.LBB380_12
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB380_3 Depth=1
	ldr	x8, [sp, #16]
	ldrb	w8, [x8]
	cbz	w8, .LBB380_1
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB380_3 Depth=1
	ldr	x0, [sp, #16]
	add	x2, x29, #24                    // =24
	add	x3, sp, #8                      // =8
	mov	x1, x19
	strb	w20, [sp, #8]
	bl	__isoc99_sscanf
	cmp	w0, #0                          // =0
	b.le	.LBB380_14
// %bb.6:                               // %if.end
                                        //   in Loop: Header=BB380_3 Depth=1
	ldrb	w8, [sp, #8]
	cmp	w8, #44                         // =44
	b.ne	.LBB380_14
// %bb.7:                               // %if.end6
                                        //   in Loop: Header=BB380_3 Depth=1
	ldr	w8, [x29, #24]
	tbnz	w8, #31, .LBB380_13
// %bb.8:                               // %if.end6
                                        //   in Loop: Header=BB380_3 Depth=1
	cmp	w8, #4                          // =4
	b.ge	.LBB380_13
// %bb.9:                               // %if.end13
                                        //   in Loop: Header=BB380_3 Depth=1
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	w10, [x29, #24]
	ldr	x8, [x8, #80]
	madd	x8, x9, x21, x8
	str	w10, [x8, #16]
.LBB380_10:                             // %while.cond
                                        //   Parent Loop BB380_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #16]
	ldrb	w8, [x8]
	cbz	w8, .LBB380_2
// %bb.11:                              // %land.rhs
                                        //   in Loop: Header=BB380_10 Depth=2
	ldr	x8, [sp, #16]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #16]
	ldrb	w8, [x8]
	cmp	w8, #44                         // =44
	b.ne	.LBB380_10
	b	.LBB380_2
.LBB380_12:                             // %for.end
	mov	w8, #1
	str	w8, [x29, #28]
	b	.LBB380_15
.LBB380_13:                             // %if.then11
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	adrp	x1, .L.str.10.270
	add	x1, x1, :lo12:.L.str.10.270
	mov	w2, #3
	bl	fprintf
.LBB380_14:                             // %if.then2
	str	wzr, [x29, #28]
	mov	w8, #1
.LBB380_15:                             // %cleanup
	ldr	w0, [x29, #28]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x21, [sp, #48]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	w8, [sp, #4]
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end380:
	.size	set_quant_slots, .Lfunc_end380-set_quant_slots
	.cfi_endproc
                                        // -- End function
	.globl	set_sample_factors              // -- Begin function set_sample_factors
	.p2align	2
	.type	set_sample_factors,@function
set_sample_factors:                     // @set_sample_factors
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #96                     // =96
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	adrp	x19, .L.str.11.273
	mov	w20, #44
	add	x19, x19, :lo12:.L.str.11.273
	mov	w21, #96
	mov	w22, #1
	stur	x0, [x29, #-16]
	str	x1, [sp, #24]
	str	wzr, [sp, #20]
	b	.LBB381_3
.LBB381_1:                              // %if.else
                                        //   in Loop: Header=BB381_3 Depth=1
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	ldr	x8, [x8, #80]
	madd	x8, x9, x21, x8
	str	w22, [x8, #8]
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	ldr	x8, [x8, #80]
	madd	x8, x9, x21, x8
	str	w22, [x8, #12]
.LBB381_2:                              // %for.inc
                                        //   in Loop: Header=BB381_3 Depth=1
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB381_3:                              // %for.cond
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB381_14 Depth 2
	ldr	w8, [sp, #20]
	cmp	w8, #9                          // =9
	b.gt	.LBB381_16
// %bb.4:                               // %for.body
                                        //   in Loop: Header=BB381_3 Depth=1
	ldr	x8, [sp, #24]
	ldrb	w8, [x8]
	cbz	w8, .LBB381_1
// %bb.5:                               // %if.then
                                        //   in Loop: Header=BB381_3 Depth=1
	ldr	x0, [sp, #24]
	add	x2, sp, #16                     // =16
	add	x3, sp, #8                      // =8
	add	x4, sp, #12                     // =12
	add	x5, sp, #4                      // =4
	mov	x1, x19
	strb	w20, [sp, #4]
	bl	__isoc99_sscanf
	cmp	w0, #2                          // =2
	b.le	.LBB381_18
// %bb.6:                               // %if.end
                                        //   in Loop: Header=BB381_3 Depth=1
	ldrb	w8, [sp, #8]
	cmp	w8, #120                        // =120
	b.eq	.LBB381_8
// %bb.7:                               // %land.lhs.true
                                        //   in Loop: Header=BB381_3 Depth=1
	ldrb	w8, [sp, #8]
	cmp	w8, #88                         // =88
	b.ne	.LBB381_18
.LBB381_8:                              // %lor.lhs.false
                                        //   in Loop: Header=BB381_3 Depth=1
	ldrb	w8, [sp, #4]
	cmp	w8, #44                         // =44
	b.ne	.LBB381_18
// %bb.9:                               // %if.end12
                                        //   in Loop: Header=BB381_3 Depth=1
	ldr	w8, [sp, #16]
	cmp	w8, #1                          // =1
	b.lt	.LBB381_17
// %bb.10:                              // %if.end12
                                        //   in Loop: Header=BB381_3 Depth=1
	cmp	w8, #4                          // =4
	b.gt	.LBB381_17
// %bb.11:                              // %if.end12
                                        //   in Loop: Header=BB381_3 Depth=1
	ldr	w8, [sp, #12]
	cmp	w8, #1                          // =1
	b.lt	.LBB381_17
// %bb.12:                              // %if.end12
                                        //   in Loop: Header=BB381_3 Depth=1
	cmp	w8, #5                          // =5
	b.ge	.LBB381_17
// %bb.13:                              // %if.end26
                                        //   in Loop: Header=BB381_3 Depth=1
	ldur	x8, [x29, #-16]
	ldp	w10, w9, [sp, #16]
                                        // kill: def $w9 killed $w9 def $x9
	sxtw	x9, w9
	ldr	x8, [x8, #80]
	madd	x8, x9, x21, x8
	str	w10, [x8, #8]
	ldur	x8, [x29, #-16]
	ldrsw	x9, [sp, #20]
	ldr	w10, [sp, #12]
	ldr	x8, [x8, #80]
	madd	x8, x9, x21, x8
	str	w10, [x8, #12]
.LBB381_14:                             // %while.cond
                                        //   Parent Loop BB381_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #24]
	ldrb	w8, [x8]
	cbz	w8, .LBB381_2
// %bb.15:                              // %land.rhs
                                        //   in Loop: Header=BB381_14 Depth=2
	ldr	x8, [sp, #24]
	add	x9, x8, #1                      // =1
	str	x9, [sp, #24]
	ldrb	w8, [x8]
	cmp	w8, #44                         // =44
	b.ne	.LBB381_14
	b	.LBB381_2
.LBB381_16:                             // %for.end
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	.LBB381_19
.LBB381_17:                             // %if.then24
	adrp	x8, stderr
	ldr	x0, [x8, :lo12:stderr]
	adrp	x1, .L.str.12.274
	add	x1, x1, :lo12:.L.str.12.274
	bl	fprintf
.LBB381_18:                             // %if.then2
	stur	wzr, [x29, #-4]
	mov	w8, #1
.LBB381_19:                             // %cleanup
	ldur	w0, [x29, #-4]
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	str	w8, [sp], #96
	ret
.Lfunc_end381:
	.size	set_sample_factors, .Lfunc_end381-set_sample_factors
	.cfi_endproc
                                        // -- End function
	.globl	jinit_read_targa                // -- Begin function jinit_read_targa
	.p2align	2
	.type	jinit_read_targa,@function
jinit_read_targa:                       // @jinit_read_targa
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #32                     // =32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16                    // =16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [x0, #8]
	mov	w1, #1
	mov	w2, #112
	ldr	x8, [x8]
	blr	x8
	ldr	x8, [sp, #8]
	adrp	x9, start_input_tga
	str	x0, [sp]
	add	x9, x9, :lo12:start_input_tga
	str	x8, [x0, #48]
	mov	x8, x0
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	str	x9, [x8]
	adrp	x9, finish_input_tga
	mov	x8, x0
	add	x9, x9, :lo12:finish_input_tga
	str	x9, [x8, #16]
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end382:
	.size	jinit_read_targa, .Lfunc_end382-jinit_read_targa
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function start_input_tga
	.type	start_input_tga,@function
start_input_tga:                        // @start_input_tga
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #128                    // =128
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	str	x19, [sp, #112]                 // 8-byte Folded Spill
	add	x29, sp, #96                    // =96
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x1, x1, [x29, #-16]
	ldr	x3, [x1, #24]
	sub	x0, x29, #36                    // =36
	mov	w1, #1
	mov	w2, #18
	bl	fread
	cmp	x0, #18                         // =18
	b.eq	.LBB383_2
// %bb.1:                               // %if.then
	ldr	x8, [x29, #24]
	mov	w9, #42
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_2:                              // %if.end
	ldurb	w8, [x29, #-20]
	cmp	w8, #15                         // =15
	b.ne	.LBB383_4
// %bb.3:                               // %if.then4
	mov	w8, #16
	sturb	w8, [x29, #-20]
.LBB383_4:                              // %if.end6
	ldurb	w8, [x29, #-36]
	ldurb	w9, [x29, #-35]
	ldurh	w11, [x29, #-31]
	ldurb	w10, [x29, #-20]
	ldurb	w12, [x29, #-34]
	stp	w9, w8, [x29, #-44]
	ldurh	w9, [x29, #-22]
	ldurh	w8, [x29, #-24]
	stp	w11, w9, [sp, #24]
	ldur	x11, [x29, #-16]
	str	w8, [sp, #32]
	lsr	w8, w10, #3
	str	w8, [x11, #92]
	ldurb	w8, [x29, #-19]
	ldur	w9, [x29, #-44]
	tst	w8, #0x20
	cset	w10, eq
	cmp	w9, #1                          // =1
	stp	w8, w12, [sp, #44]
	lsr	w8, w8, #6
	str	w10, [sp, #20]
	str	w8, [sp, #40]
	b.gt	.LBB383_8
// %bb.5:                               // %lor.lhs.false
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #92]
	cmp	w8, #1                          // =1
	b.lt	.LBB383_8
// %bb.6:                               // %lor.lhs.false41
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #92]
	cmp	w8, #4                          // =4
	b.gt	.LBB383_8
// %bb.7:                               // %lor.lhs.false45
	ldurb	w8, [x29, #-20]
	ldr	w9, [sp, #40]
	and	w8, w8, #0x7
	orr	w8, w8, w9
	cbz	w8, .LBB383_9
.LBB383_8:                              // %if.then54
	ldr	x8, [x29, #24]
	mov	w9, #1033
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_9:                              // %if.end59
	ldr	w9, [sp, #48]
	ldur	x8, [x29, #-16]
	cmp	w9, #9                          // =9
	b.lt	.LBB383_11
// %bb.10:                              // %if.then62
	adrp	x9, read_rle_pixel
	add	x9, x9, :lo12:read_rle_pixel
	str	x9, [x8, #80]
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #100]
	ldur	x8, [x29, #-16]
	str	wzr, [x8, #96]
	ldr	w8, [sp, #48]
	sub	w8, w8, #8                      // =8
	str	w8, [sp, #48]
	b	.LBB383_12
.LBB383_11:                             // %if.else
	adrp	x9, read_non_rle_pixel
	add	x9, x9, :lo12:read_non_rle_pixel
	str	x9, [x8, #80]
.LBB383_12:                             // %if.end64
	ldr	x8, [x29, #24]
	mov	w9, #3
	str	w9, [sp, #36]
	mov	w9, #2
	str	w9, [x8, #52]
	ldr	w8, [sp, #48]
	cmp	w8, #3                          // =3
	b.eq	.LBB383_22
// %bb.13:                              // %if.end64
	cmp	w8, #2                          // =2
	b.eq	.LBB383_18
// %bb.14:                              // %if.end64
	cmp	w8, #1                          // =1
	b.ne	.LBB383_24
// %bb.15:                              // %sw.bb
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #92]
	cmp	w8, #1                          // =1
	b.ne	.LBB383_27
// %bb.16:                              // %sw.bb
	ldur	w8, [x29, #-44]
	cmp	w8, #1                          // =1
	b.ne	.LBB383_27
// %bb.17:                              // %if.then70
	ldur	x8, [x29, #-16]
	adrp	x9, get_8bit_row.277
	add	x9, x9, :lo12:get_8bit_row.277
	str	x9, [x8, #104]
	b	.LBB383_28
.LBB383_18:                             // %sw.bb86
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #92]
	cmp	w8, #4                          // =4
	b.eq	.LBB383_26
// %bb.19:                              // %sw.bb86
	cmp	w8, #3                          // =3
	b.eq	.LBB383_26
// %bb.20:                              // %sw.bb86
	cmp	w8, #2                          // =2
	b.ne	.LBB383_31
// %bb.21:                              // %sw.bb88
	ldur	x8, [x29, #-16]
	adrp	x9, get_16bit_row
	add	x9, x9, :lo12:get_16bit_row
	str	x9, [x8, #104]
	b	.LBB383_32
.LBB383_22:                             // %sw.bb110
	ldr	x8, [x29, #24]
	mov	w9, #1
	str	w9, [sp, #36]
	str	w9, [x8, #52]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8, #92]
	cmp	w8, #1                          // =1
	b.ne	.LBB383_29
// %bb.23:                              // %if.then115
	ldur	x8, [x29, #-16]
	adrp	x9, get_8bit_gray_row
	add	x9, x9, :lo12:get_8bit_gray_row
	str	x9, [x8, #104]
	b	.LBB383_30
.LBB383_24:                             // %sw.default135
	ldr	x8, [x29, #24]
	mov	w9, #1033
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w8, [sp, #20]
	cbnz	w8, .LBB383_34
.LBB383_25:                             // %if.else152
	ldur	x8, [x29, #-16]
	mov	w1, #1
	mov	w3, #1
	mov	w19, #1
	str	xzr, [x8, #64]
	ldr	x0, [x29, #24]
	ldp	w9, w10, [sp, #32]
	ldr	x8, [x0, #8]
	mul	w2, w9, w10
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-16]
	str	x0, [x8, #32]
	ldur	x8, [x29, #-16]
	str	w19, [x8, #40]
	ldur	x8, [x29, #-16]
	ldr	x9, [x8, #104]
	b	.LBB383_37
.LBB383_26:                             // %sw.bb92
	ldur	x8, [x29, #-16]
	adrp	x9, get_24bit_row.278
	add	x9, x9, :lo12:get_24bit_row.278
	str	x9, [x8, #104]
	b	.LBB383_32
.LBB383_27:                             // %if.else71
	ldr	x8, [x29, #24]
	mov	w9, #1033
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_28:                             // %if.end76
	ldr	x8, [x29, #24]
	mov	w9, #1037
	b	.LBB383_33
.LBB383_29:                             // %if.else117
	ldr	x8, [x29, #24]
	mov	w9, #1033
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_30:                             // %if.end122
	ldr	x8, [x29, #24]
	mov	w9, #1036
	b	.LBB383_33
.LBB383_31:                             // %sw.default
	ldr	x8, [x29, #24]
	mov	w9, #1033
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_32:                             // %sw.epilog
	ldr	x8, [x29, #24]
	mov	w9, #1035
.LBB383_33:                             // %sw.epilog140
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #32]
	mov	w1, #1
	ldr	x8, [x8]
	str	w9, [x8, #44]
	ldr	x8, [x29, #24]
	ldr	w9, [sp, #28]
	ldr	x8, [x8]
	str	w9, [x8, #48]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8, #8]
	blr	x8
	ldr	w8, [sp, #20]
	cbz	w8, .LBB383_25
.LBB383_34:                             // %if.then141
	ldr	x0, [x29, #24]
	ldp	w9, w10, [sp, #32]
	ldr	w4, [sp, #28]
	mov	w1, #1
	ldr	x8, [x0, #8]
	mul	w3, w9, w10
	mov	w5, #1
	mov	w2, wzr
	ldr	x8, [x8, #32]
	mov	w19, #1
	blr	x8
	ldur	x8, [x29, #-16]
	str	x0, [x8, #64]
	ldr	x8, [x29, #24]
	ldr	x8, [x8, #16]
	cbz	x8, .LBB383_36
// %bb.35:                              // %if.then145
	ldr	x8, [x29, #24]
	ldr	x8, [x8, #16]
	str	x8, [sp, #8]
	ldr	w9, [x8, #36]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #36]
.LBB383_36:                             // %if.end148
	ldur	x8, [x29, #-16]
	adrp	x9, preload_image.279
	add	x9, x9, :lo12:preload_image.279
	str	w19, [x8, #40]
	ldur	x8, [x29, #-16]
.LBB383_37:                             // %if.end163
	str	x9, [x8, #8]
	ldur	w8, [x29, #-40]
	subs	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
	b.lo	.LBB383_39
.LBB383_38:                             // %while.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-16]
	bl	read_byte.280
	ldur	w8, [x29, #-40]
	subs	w8, w8, #1                      // =1
	stur	w8, [x29, #-40]
	b.hs	.LBB383_38
.LBB383_39:                             // %while.end
	ldr	w8, [sp, #24]
	cbz	w8, .LBB383_44
// %bb.40:                              // %if.then168
	ldr	w8, [sp, #24]
	cmp	w8, #256                        // =256
	b.hi	.LBB383_42
// %bb.41:                              // %lor.lhs.false171
	ldurh	w8, [x29, #-33]
	cbz	w8, .LBB383_43
.LBB383_42:                             // %if.then180
	ldr	x8, [x29, #24]
	mov	w9, #1032
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_43:                             // %if.end185
	ldr	x0, [x29, #24]
	ldr	w2, [sp, #24]
	mov	w1, #1
	mov	w3, #3
	ldr	x8, [x0, #8]
	ldr	x8, [x8, #16]
	blr	x8
	ldur	x8, [x29, #-16]
	str	x0, [x8, #56]
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #24]
	ldurb	w2, [x29, #-29]
	bl	read_colormap.281
	b	.LBB383_47
.LBB383_44:                             // %if.else191
	ldur	w8, [x29, #-44]
	cbz	w8, .LBB383_46
// %bb.45:                              // %if.then193
	ldr	x8, [x29, #24]
	mov	w9, #1033
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldr	x0, [x29, #24]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB383_46:                             // %if.end198
	ldur	x8, [x29, #-16]
	str	xzr, [x8, #56]
.LBB383_47:                             // %if.end200
	ldr	w8, [sp, #36]
	ldr	x9, [x29, #24]
	ldr	x19, [sp, #112]                 // 8-byte Folded Reload
	str	w8, [x9, #48]
	ldr	x8, [x29, #24]
	mov	w9, #8
	str	w9, [x8, #64]
	ldr	w8, [sp, #32]
	ldr	x9, [x29, #24]
	str	w8, [x9, #40]
	ldr	w8, [sp, #28]
	ldr	x9, [x29, #24]
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	str	w8, [x9, #44]
	add	sp, sp, #128                    // =128
	ret
.Lfunc_end383:
	.size	start_input_tga, .Lfunc_end383-start_input_tga
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function finish_input_tga
	.type	finish_input_tga,@function
finish_input_tga:                       // @finish_input_tga
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	stp	x1, x0, [sp], #16
	ret
.Lfunc_end384:
	.size	finish_input_tga, .Lfunc_end384-finish_input_tga
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_rle_pixel
	.type	read_rle_pixel,@function
read_rle_pixel:                         // @read_rle_pixel
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #24]
	str	x8, [sp, #16]
	ldr	w8, [x0, #100]
	cmp	w8, #1                          // =1
	b.lt	.LBB385_2
// %bb.1:                               // %if.then
	ldr	w8, [x0, #100]
	mov	w9, #1
	sub	w8, w8, #1                      // =1
	str	w8, [x0, #100]
	str	w9, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB385_2:                              // %if.end
	ldr	w8, [x0, #96]
	subs	w8, w8, #1                      // =1
	str	w8, [x0, #96]
	b.pl	.LBB385_6
// %bb.3:                               // %if.then4
	ldur	x0, [x29, #-8]
	bl	read_byte.280
	ldur	x8, [x29, #-8]
	and	w9, w0, #0x7f
	str	w0, [sp, #12]
	tbz	w0, #7, .LBB385_5
// %bb.4:                               // %if.then5
	str	w9, [x8, #100]
	ldur	x8, [x29, #-8]
	mov	w9, wzr
.LBB385_5:                              // %if.end11
	str	w9, [x8, #96]
.LBB385_6:                              // %if.end12
	str	wzr, [sp, #12]
.LBB385_7:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #92]
	cmp	w9, w8
	b.ge	.LBB385_9
// %bb.8:                               // %for.body
                                        //   in Loop: Header=BB385_7 Depth=1
	ldr	x0, [sp, #16]
	bl	getc
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9
	strb	w0, [x8, #88]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	b	.LBB385_7
.LBB385_9:                              // %for.end
	str	wzr, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end385:
	.size	read_rle_pixel, .Lfunc_end385-read_rle_pixel
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_non_rle_pixel
	.type	read_non_rle_pixel,@function
read_non_rle_pixel:                     // @read_non_rle_pixel
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x8, [x0, #24]
	str	wzr, [sp, #12]
	str	x8, [sp, #16]
.LBB386_1:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #12]
	ldr	w8, [x8, #92]
	cmp	w9, w8
	b.ge	.LBB386_3
// %bb.2:                               // %for.body
                                        //   in Loop: Header=BB386_1 Depth=1
	ldr	x0, [sp, #16]
	bl	getc
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9
	strb	w0, [x8, #88]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	b	.LBB386_1
.LBB386_3:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end386:
	.size	read_non_rle_pixel, .Lfunc_end386-read_non_rle_pixel
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_8bit_row.277
	.type	get_8bit_row.277,@function
get_8bit_row.277:                       // @get_8bit_row.277
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64                    // =64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	stur	x1, [x29, #-24]
	ldr	x8, [x1, #56]
	str	x8, [sp, #8]
	ldr	x8, [x1, #32]
	ldr	x8, [x8]
	str	x8, [sp, #24]
	ldr	w8, [x0, #40]
	str	w8, [sp, #20]
	mov	w8, w8
	cbz	w8, .LBB387_2
.LBB387_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-24]
	ldr	x8, [x0, #80]
	blr	x8
	ldur	x8, [x29, #-24]
	ldr	x9, [sp, #8]
	ldr	x10, [sp, #24]
	ldrb	w8, [x8, #88]
	stur	w8, [x29, #-28]
	ldr	x9, [x9]
	ldrb	w8, [x9, x8]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-28]
	ldr	x10, [sp, #24]
	ldr	x8, [x8, #8]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	x8, [sp, #8]
	ldursw	x9, [x29, #-28]
	ldr	x10, [sp, #24]
	ldr	x8, [x8, #16]
	ldrb	w8, [x8, x9]
	add	x9, x10, #1                     // =1
	str	x9, [sp, #24]
	strb	w8, [x10]
	ldr	w8, [sp, #20]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #20]
	mov	w8, w8
	cbnz	w8, .LBB387_1
.LBB387_2:                              // %for.end
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end387:
	.size	get_8bit_row.277, .Lfunc_end387-get_8bit_row.277
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_16bit_row
	.type	get_16bit_row,@function
get_16bit_row:                          // @get_16bit_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #80                     // =80
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	str	x19, [sp, #64]                  // 8-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	str	x0, [x29, #24]
	stp	x1, x1, [x29, #-16]
	ldr	x8, [x1, #32]
	adrp	x19, c5to8bits
	add	x19, x19, :lo12:c5to8bits
	ldr	x8, [x8]
	str	x8, [sp, #16]
	ldr	w8, [x0, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB388_2
.LBB388_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-16]
	ldr	x8, [x0, #80]
	blr	x8
	ldur	x8, [x29, #-16]
	ldr	x10, [sp, #16]
	ldrb	w9, [x8, #88]
	stur	w9, [x29, #-20]
	ldrb	w8, [x8, #89]
	and	x11, x9, #0x1f
	ldrb	w11, [x19, x11]
                                        // kill: def $w9 killed $w9 killed $x9
	bfi	w9, w8, #8, #8
	mov	w8, w9
	asr	w8, w8, #5
	stur	w9, [x29, #-20]
	strb	w11, [x10, #2]
	and	x10, x8, #0x1f
	ldr	x9, [sp, #16]
	ldrb	w10, [x19, x10]
	stur	w8, [x29, #-20]
	mov	w8, w8
	asr	w8, w8, #5
	strb	w10, [x9, #1]
	and	x10, x8, #0x1f
	ldr	x9, [sp, #16]
	ldrb	w10, [x19, x10]
	stur	w8, [x29, #-20]
	strb	w10, [x9]
	ldr	x8, [sp, #16]
	ldr	w9, [sp, #12]
	add	x8, x8, #3                      // =3
	sub	w9, w9, #1                      // =1
	str	x8, [sp, #16]
	str	w9, [sp, #12]
	mov	w8, w9
	cbnz	w8, .LBB388_1
.LBB388_2:                              // %for.end
	ldr	x19, [sp, #64]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end388:
	.size	get_16bit_row, .Lfunc_end388-get_16bit_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_24bit_row.278
	.type	get_24bit_row.278,@function
get_24bit_row.278:                      // @get_24bit_row.278
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x1, #32]
	ldr	x8, [x8]
	stp	x8, x1, [sp, #16]
	ldr	w8, [x0, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB389_2
.LBB389_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #24]
	ldr	x8, [x0, #80]
	blr	x8
	ldp	x9, x8, [sp, #16]
	ldrb	w8, [x8, #90]
	add	x10, x9, #1                     // =1
	str	x10, [sp, #16]
	strb	w8, [x9]
	ldr	x8, [sp, #24]
	mov	x9, x10
	add	x10, x9, #1                     // =1
	ldrb	w8, [x8, #89]
	str	x10, [sp, #16]
	strb	w8, [x9]
	ldr	x8, [sp, #24]
	mov	x9, x10
	add	x10, x9, #1                     // =1
	ldrb	w8, [x8, #88]
	str	x10, [sp, #16]
	strb	w8, [x9]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB389_1
.LBB389_2:                              // %for.end
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end389:
	.size	get_24bit_row.278, .Lfunc_end389-get_24bit_row.278
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_8bit_gray_row
	.type	get_8bit_gray_row,@function
get_8bit_gray_row:                      // @get_8bit_gray_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	ldr	x8, [x1, #32]
	ldr	x8, [x8]
	stp	x8, x1, [sp, #16]
	ldr	w8, [x0, #40]
	str	w8, [sp, #12]
	mov	w8, w8
	cbz	w8, .LBB390_2
.LBB390_1:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp, #24]
	ldr	x8, [x0, #80]
	blr	x8
	ldp	x9, x8, [sp, #16]
	ldrb	w8, [x8, #88]
	add	x10, x9, #1                     // =1
	str	x10, [sp, #16]
	strb	w8, [x9]
	ldr	w8, [sp, #12]
	sub	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	cbnz	w8, .LBB390_1
.LBB390_2:                              // %for.end
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	mov	w0, #1
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end390:
	.size	get_8bit_gray_row, .Lfunc_end390-get_8bit_gray_row
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function preload_image.279
	.type	preload_image.279,@function
preload_image.279:                      // @preload_image.279
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #64                     // =64
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #48                    // =48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stp	x1, x0, [x29, #-16]
	str	x1, [sp, #24]
	ldr	x8, [x0, #16]
	str	wzr, [sp, #20]
	str	x8, [sp, #8]
	b	.LBB391_2
.LBB391_1:                              // %if.end
                                        //   in Loop: Header=BB391_2 Depth=1
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #24]
	ldr	w2, [sp, #20]
	mov	w3, #1
	ldr	x9, [x0, #8]
	ldr	x1, [x8, #64]
	mov	w4, #1
	ldr	x8, [x9, #56]
	blr	x8
	ldr	x8, [sp, #24]
	str	x0, [x8, #32]
	ldr	x8, [sp, #24]
	ldp	x1, x0, [x29, #-16]
	ldr	x8, [x8, #104]
	blr	x8
	ldr	w8, [sp, #20]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #20]
.LBB391_2:                              // %for.cond
                                        // =>This Inner Loop Header: Depth=1
	ldur	x8, [x29, #-8]
	ldr	w9, [sp, #20]
	ldr	w10, [x8, #44]
	ldr	x8, [sp, #8]
	cmp	w9, w10
	b.hs	.LBB391_5
// %bb.3:                               // %for.body
                                        //   in Loop: Header=BB391_2 Depth=1
	cbz	x8, .LBB391_1
// %bb.4:                               // %if.then
                                        //   in Loop: Header=BB391_2 Depth=1
	ldr	w8, [sp, #20]
	ldr	x9, [sp, #8]
	str	x8, [x9, #8]
	ldur	x8, [x29, #-8]
	ldr	x9, [sp, #8]
	ldr	w8, [x8, #44]
	str	x8, [x9, #16]
	ldr	x8, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [x8]
	blr	x8
	b	.LBB391_1
.LBB391_5:                              // %for.end
	cbz	x8, .LBB391_7
// %bb.6:                               // %if.then12
	ldr	x8, [sp, #8]
	ldr	w9, [x8, #32]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #32]
.LBB391_7:                              // %if.end14
	ldr	x8, [sp, #24]
	adrp	x9, get_memory_row
	add	x9, x9, :lo12:get_memory_row
	str	x9, [x8, #8]
	ldr	x8, [sp, #24]
	str	wzr, [x8, #72]
	ldp	x1, x0, [x29, #-16]
	bl	get_memory_row
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end391:
	.size	preload_image.279, .Lfunc_end391-preload_image.279
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_byte.280
	.type	read_byte.280,@function
read_byte.280:                          // @read_byte.280
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldr	x0, [x0, #24]
	str	x0, [sp, #16]
	bl	getc
	cmn	w0, #1                          // =1
	str	w0, [sp, #12]
	b.eq	.LBB392_2
// %bb.1:                               // %if.end
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.LBB392_2:                              // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #42
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
	ldr	w0, [sp, #12]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end392:
	.size	read_byte.280, .Lfunc_end392-read_byte.280
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function read_colormap.281
	.type	read_colormap.281,@function
read_colormap.281:                      // @read_colormap.281
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	cmp	w2, #24                         // =24
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	w2, [sp, #16]
	b.eq	.LBB393_2
// %bb.1:                               // %if.then
	ldur	x8, [x29, #-8]
	mov	w9, #1032
	ldr	x8, [x8, #48]
	ldr	x8, [x8]
	str	w9, [x8, #40]
	ldur	x8, [x29, #-8]
	ldr	x0, [x8, #48]
	ldr	x8, [x0]
	ldr	x8, [x8]
	blr	x8
.LBB393_2:                              // %if.end
	str	wzr, [sp, #12]
	mov	w8, wzr
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.ge	.LBB393_4
.LBB393_3:                              // %for.body
                                        // =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-8]
	bl	read_byte.280
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8, #16]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte.280
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8, #8]
	strb	w0, [x8, x9]
	ldur	x0, [x29, #-8]
	bl	read_byte.280
	ldur	x8, [x29, #-8]
	ldrsw	x9, [sp, #12]
	ldr	x8, [x8, #56]
	ldr	x8, [x8]
	strb	w0, [x8, x9]
	ldr	w8, [sp, #12]
	add	w8, w8, #1                      // =1
	str	w8, [sp, #12]
	mov	w8, w8
	ldur	w9, [x29, #-12]
	cmp	w8, w9
	b.lt	.LBB393_3
.LBB393_4:                              // %for.end
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end393:
	.size	read_colormap.281, .Lfunc_end393-read_colormap.281
	.cfi_endproc
                                        // -- End function
	.p2align	2                               // -- Begin function get_memory_row
	.type	get_memory_row,@function
get_memory_row:                         // @get_memory_row
	.cfi_startproc
// %bb.0:                               // %entry
	sub	sp, sp, #48                     // =48
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32                    // =32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stp	x1, x1, [sp, #8]
	ldr	w8, [x1, #72]
	ldr	w9, [x0, #44]
	mov	w3, #1
	mov	w4, wzr
	mvn	w8, w8
	add	w2, w8, w9
	str	w2, [sp, #4]
	ldr	x8, [x0, #8]
	ldr	x1, [x1, #64]
	ldr	x8, [x8, #56]
	blr	x8
	ldr	x8, [sp, #8]
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	str	x0, [x8, #32]
	ldr	x8, [sp, #8]
	mov	w0, #1
	ldr	w9, [x8, #72]
	add	w9, w9, #1                      // =1
	str	w9, [x8, #72]
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end394:
	.size	get_memory_row, .Lfunc_end394-get_memory_row
	.cfi_endproc
                                        // -- End function
	.type	.L.str,@object                  // @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"cjpeg"
	.size	.L.str, 6

	.type	cdjpeg_message_table,@object    // @cdjpeg_message_table
	.section	.rodata,"a",@progbits
	.p2align	3
cdjpeg_message_table:
	.xword	0
	.xword	.L.str.5
	.xword	.L.str.6
	.xword	.L.str.7
	.xword	.L.str.8
	.xword	.L.str.9
	.xword	.L.str.10
	.xword	.L.str.11
	.xword	.L.str.12
	.xword	.L.str.13
	.xword	.L.str.14
	.xword	.L.str.15
	.xword	.L.str.16
	.xword	.L.str.17
	.xword	.L.str.18
	.xword	.L.str.19
	.xword	.L.str.20
	.xword	.L.str.21
	.xword	.L.str.22
	.xword	.L.str.23
	.xword	.L.str.24
	.xword	.L.str.25
	.xword	.L.str.26
	.xword	.L.str.27
	.xword	.L.str.28
	.xword	.L.str.29
	.xword	.L.str.30
	.xword	.L.str.31
	.xword	.L.str.32
	.xword	.L.str.33
	.xword	.L.str.34
	.xword	.L.str.35
	.xword	.L.str.36
	.xword	.L.str.37
	.xword	.L.str.38
	.xword	.L.str.39
	.xword	.L.str.40
	.xword	.L.str.41
	.xword	.L.str.42
	.xword	.L.str.43
	.xword	.L.str.44
	.xword	.L.str.45
	.xword	.L.str.46
	.xword	0
	.size	cdjpeg_message_table, 352

	.type	.L.str.1,@object                // @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s: only one input file\n"
	.size	.L.str.1, 25

	.type	.L.str.2,@object                // @.str.2
.L.str.2:
	.asciz	"rb"
	.size	.L.str.2, 3

	.type	.L.str.3,@object                // @.str.3
.L.str.3:
	.asciz	"%s: can't open %s\n"
	.size	.L.str.3, 19

	.type	.L.str.4,@object                // @.str.4
.L.str.4:
	.asciz	"wb"
	.size	.L.str.4, 3

	.type	.L.str.76,@object               // @.str.76
.L.str.76:
	.asciz	"usage: %s [switches] "
	.size	.L.str.76, 22

	.type	.L.str.77,@object               // @.str.77
.L.str.77:
	.asciz	"[inputfile]\n"
	.size	.L.str.77, 13

	.type	.L.str.78,@object               // @.str.78
.L.str.78:
	.asciz	"Switches (names may be abbreviated):\n"
	.size	.L.str.78, 38

	.type	.L.str.79,@object               // @.str.79
.L.str.79:
	.asciz	"  -quality N     Compression quality (0..100; 5-95 is useful range)\n"
	.size	.L.str.79, 69

	.type	.L.str.80,@object               // @.str.80
.L.str.80:
	.asciz	"  -grayscale     Create monochrome JPEG file\n"
	.size	.L.str.80, 46

	.type	.L.str.81,@object               // @.str.81
.L.str.81:
	.asciz	"  -optimize      Optimize Huffman table (smaller file, but slow compression)\n"
	.size	.L.str.81, 78

	.type	.L.str.82,@object               // @.str.82
.L.str.82:
	.asciz	"  -progressive   Create progressive JPEG file\n"
	.size	.L.str.82, 47

	.type	.L.str.83,@object               // @.str.83
.L.str.83:
	.asciz	"  -targa         Input file is Targa format (usually not needed)\n"
	.size	.L.str.83, 66

	.type	.L.str.84,@object               // @.str.84
.L.str.84:
	.asciz	"Switches for advanced users:\n"
	.size	.L.str.84, 30

	.type	.L.str.85,@object               // @.str.85
.L.str.85:
	.asciz	"  -dct int       Use integer DCT method%s\n"
	.size	.L.str.85, 43

	.type	.L.str.86,@object               // @.str.86
.L.str.86:
	.asciz	" (default)"
	.size	.L.str.86, 11

	.type	.L.str.87,@object               // @.str.87
.L.str.87:
	.asciz	"  -dct fast      Use fast integer DCT (less accurate)%s\n"
	.size	.L.str.87, 57

	.type	.L.str.88,@object               // @.str.88
.L.str.88:
	.zero	1
	.size	.L.str.88, 1

	.type	.L.str.89,@object               // @.str.89
.L.str.89:
	.asciz	"  -dct float     Use floating-point DCT method%s\n"
	.size	.L.str.89, 50

	.type	.L.str.90,@object               // @.str.90
.L.str.90:
	.asciz	"  -restart N     Set restart interval in rows, or in blocks with B\n"
	.size	.L.str.90, 68

	.type	.L.str.91,@object               // @.str.91
.L.str.91:
	.asciz	"  -smooth N      Smooth dithered input (N=1..100 is strength)\n"
	.size	.L.str.91, 63

	.type	.L.str.92,@object               // @.str.92
.L.str.92:
	.asciz	"  -maxmemory N   Maximum memory to use (in kbytes)\n"
	.size	.L.str.92, 52

	.type	.L.str.93,@object               // @.str.93
.L.str.93:
	.asciz	"  -outfile name  Specify name for output file\n"
	.size	.L.str.93, 47

	.type	.L.str.94,@object               // @.str.94
.L.str.94:
	.asciz	"  -verbose  or  -debug   Emit debug output\n"
	.size	.L.str.94, 44

	.type	.L.str.95,@object               // @.str.95
.L.str.95:
	.asciz	"Switches for wizards:\n"
	.size	.L.str.95, 23

	.type	.L.str.96,@object               // @.str.96
.L.str.96:
	.asciz	"  -baseline      Force baseline output\n"
	.size	.L.str.96, 40

	.type	.L.str.97,@object               // @.str.97
.L.str.97:
	.asciz	"  -qtables file  Use quantization tables given in file\n"
	.size	.L.str.97, 56

	.type	.L.str.98,@object               // @.str.98
.L.str.98:
	.asciz	"  -qslots N[,...]    Set component quantization tables\n"
	.size	.L.str.98, 56

	.type	.L.str.99,@object               // @.str.99
.L.str.99:
	.asciz	"  -sample HxV[,...]  Set component sampling factors\n"
	.size	.L.str.99, 53

	.type	.L.str.100,@object              // @.str.100
.L.str.100:
	.asciz	"  -scans file    Create multi-scan JPEG per script file\n"
	.size	.L.str.100, 57

	.type	.L.str.47,@object               // @.str.47
.L.str.47:
	.asciz	"arithmetic"
	.size	.L.str.47, 11

	.type	.L.str.48,@object               // @.str.48
.L.str.48:
	.asciz	"%s: sorry, arithmetic coding not supported\n"
	.size	.L.str.48, 44

	.type	.L.str.49,@object               // @.str.49
.L.str.49:
	.asciz	"baseline"
	.size	.L.str.49, 9

	.type	.L.str.50,@object               // @.str.50
.L.str.50:
	.asciz	"dct"
	.size	.L.str.50, 4

	.type	.L.str.51,@object               // @.str.51
.L.str.51:
	.asciz	"int"
	.size	.L.str.51, 4

	.type	.L.str.52,@object               // @.str.52
.L.str.52:
	.asciz	"fast"
	.size	.L.str.52, 5

	.type	.L.str.53,@object               // @.str.53
.L.str.53:
	.asciz	"float"
	.size	.L.str.53, 6

	.type	.L.str.54,@object               // @.str.54
.L.str.54:
	.asciz	"debug"
	.size	.L.str.54, 6

	.type	.L.str.55,@object               // @.str.55
.L.str.55:
	.asciz	"verbose"
	.size	.L.str.55, 8

	.type	.L.str.56,@object               // @.str.56
.L.str.56:
	.asciz	"Independent JPEG Group's CJPEG, version %s\n%s\n"
	.size	.L.str.56, 47

	.type	.L.str.57,@object               // @.str.57
.L.str.57:
	.asciz	"6a  7-Feb-96"
	.size	.L.str.57, 13

	.type	.L.str.58,@object               // @.str.58
.L.str.58:
	.asciz	"Copyright (C) 1996, Thomas G. Lane"
	.size	.L.str.58, 35

	.type	.L.str.59,@object               // @.str.59
.L.str.59:
	.asciz	"grayscale"
	.size	.L.str.59, 10

	.type	.L.str.60,@object               // @.str.60
.L.str.60:
	.asciz	"greyscale"
	.size	.L.str.60, 10

	.type	.L.str.61,@object               // @.str.61
.L.str.61:
	.asciz	"maxmemory"
	.size	.L.str.61, 10

	.type	.L.str.62,@object               // @.str.62
.L.str.62:
	.asciz	"%ld%c"
	.size	.L.str.62, 6

	.type	.L.str.63,@object               // @.str.63
.L.str.63:
	.asciz	"optimize"
	.size	.L.str.63, 9

	.type	.L.str.64,@object               // @.str.64
.L.str.64:
	.asciz	"optimise"
	.size	.L.str.64, 9

	.type	.L.str.65,@object               // @.str.65
.L.str.65:
	.asciz	"outfile"
	.size	.L.str.65, 8

	.type	.L.str.66,@object               // @.str.66
.L.str.66:
	.asciz	"progressive"
	.size	.L.str.66, 12

	.type	.L.str.67,@object               // @.str.67
.L.str.67:
	.asciz	"quality"
	.size	.L.str.67, 8

	.type	.L.str.68,@object               // @.str.68
.L.str.68:
	.asciz	"%d"
	.size	.L.str.68, 3

	.type	.L.str.69,@object               // @.str.69
.L.str.69:
	.asciz	"qslots"
	.size	.L.str.69, 7

	.type	.L.str.70,@object               // @.str.70
.L.str.70:
	.asciz	"qtables"
	.size	.L.str.70, 8

	.type	.L.str.71,@object               // @.str.71
.L.str.71:
	.asciz	"restart"
	.size	.L.str.71, 8

	.type	.L.str.72,@object               // @.str.72
.L.str.72:
	.asciz	"sample"
	.size	.L.str.72, 7

	.type	.L.str.73,@object               // @.str.73
.L.str.73:
	.asciz	"scans"
	.size	.L.str.73, 6

	.type	.L.str.74,@object               // @.str.74
.L.str.74:
	.asciz	"smooth"
	.size	.L.str.74, 7

	.type	.L.str.75,@object               // @.str.75
.L.str.75:
	.asciz	"targa"
	.size	.L.str.75, 6

	.type	.L.str.5,@object                // @.str.5
.L.str.5:
	.asciz	"Unsupported BMP colormap format"
	.size	.L.str.5, 32

	.type	.L.str.6,@object                // @.str.6
.L.str.6:
	.asciz	"Only 8- and 24-bit BMP files are supported"
	.size	.L.str.6, 43

	.type	.L.str.7,@object                // @.str.7
.L.str.7:
	.asciz	"Invalid BMP file: bad header length"
	.size	.L.str.7, 36

	.type	.L.str.8,@object                // @.str.8
.L.str.8:
	.asciz	"Invalid BMP file: biPlanes not equal to 1"
	.size	.L.str.8, 42

	.type	.L.str.9,@object                // @.str.9
.L.str.9:
	.asciz	"BMP output must be grayscale or RGB"
	.size	.L.str.9, 36

	.type	.L.str.10,@object               // @.str.10
.L.str.10:
	.asciz	"Sorry, compressed BMPs not yet supported"
	.size	.L.str.10, 41

	.type	.L.str.11,@object               // @.str.11
.L.str.11:
	.asciz	"Not a BMP file - does not start with BM"
	.size	.L.str.11, 40

	.type	.L.str.12,@object               // @.str.12
.L.str.12:
	.asciz	"%ux%u 24-bit BMP image"
	.size	.L.str.12, 23

	.type	.L.str.13,@object               // @.str.13
.L.str.13:
	.asciz	"%ux%u 8-bit colormapped BMP image"
	.size	.L.str.13, 34

	.type	.L.str.14,@object               // @.str.14
.L.str.14:
	.asciz	"%ux%u 24-bit OS2 BMP image"
	.size	.L.str.14, 27

	.type	.L.str.15,@object               // @.str.15
.L.str.15:
	.asciz	"%ux%u 8-bit colormapped OS2 BMP image"
	.size	.L.str.15, 38

	.type	.L.str.16,@object               // @.str.16
.L.str.16:
	.asciz	"GIF output got confused"
	.size	.L.str.16, 24

	.type	.L.str.17,@object               // @.str.17
.L.str.17:
	.asciz	"Bogus GIF codesize %d"
	.size	.L.str.17, 22

	.type	.L.str.18,@object               // @.str.18
.L.str.18:
	.asciz	"GIF output must be grayscale or RGB"
	.size	.L.str.18, 36

	.type	.L.str.19,@object               // @.str.19
.L.str.19:
	.asciz	"Too few images in GIF file"
	.size	.L.str.19, 27

	.type	.L.str.20,@object               // @.str.20
.L.str.20:
	.asciz	"Not a GIF file"
	.size	.L.str.20, 15

	.type	.L.str.21,@object               // @.str.21
.L.str.21:
	.asciz	"%ux%ux%d GIF image"
	.size	.L.str.21, 19

	.type	.L.str.22,@object               // @.str.22
.L.str.22:
	.asciz	"Warning: unexpected GIF version number '%c%c%c'"
	.size	.L.str.22, 48

	.type	.L.str.23,@object               // @.str.23
.L.str.23:
	.asciz	"Ignoring GIF extension block of type 0x%02x"
	.size	.L.str.23, 44

	.type	.L.str.24,@object               // @.str.24
.L.str.24:
	.asciz	"Caution: nonsquare pixels in input"
	.size	.L.str.24, 35

	.type	.L.str.25,@object               // @.str.25
.L.str.25:
	.asciz	"Corrupt data in GIF file"
	.size	.L.str.25, 25

	.type	.L.str.26,@object               // @.str.26
.L.str.26:
	.asciz	"Bogus char 0x%02x in GIF file, ignoring"
	.size	.L.str.26, 40

	.type	.L.str.27,@object               // @.str.27
.L.str.27:
	.asciz	"Premature end of GIF image"
	.size	.L.str.27, 27

	.type	.L.str.28,@object               // @.str.28
.L.str.28:
	.asciz	"Ran out of GIF bits"
	.size	.L.str.28, 20

	.type	.L.str.29,@object               // @.str.29
.L.str.29:
	.asciz	"PPM output must be grayscale or RGB"
	.size	.L.str.29, 36

	.type	.L.str.30,@object               // @.str.30
.L.str.30:
	.asciz	"Nonnumeric data in PPM file"
	.size	.L.str.30, 28

	.type	.L.str.31,@object               // @.str.31
.L.str.31:
	.asciz	"Not a PPM file"
	.size	.L.str.31, 15

	.type	.L.str.32,@object               // @.str.32
.L.str.32:
	.asciz	"%ux%u PGM image"
	.size	.L.str.32, 16

	.type	.L.str.33,@object               // @.str.33
.L.str.33:
	.asciz	"%ux%u text PGM image"
	.size	.L.str.33, 21

	.type	.L.str.34,@object               // @.str.34
.L.str.34:
	.asciz	"%ux%u PPM image"
	.size	.L.str.34, 16

	.type	.L.str.35,@object               // @.str.35
.L.str.35:
	.asciz	"%ux%u text PPM image"
	.size	.L.str.35, 21

	.type	.L.str.36,@object               // @.str.36
.L.str.36:
	.asciz	"Unsupported Targa colormap format"
	.size	.L.str.36, 34

	.type	.L.str.37,@object               // @.str.37
.L.str.37:
	.asciz	"Invalid or unsupported Targa file"
	.size	.L.str.37, 34

	.type	.L.str.38,@object               // @.str.38
.L.str.38:
	.asciz	"Targa output must be grayscale or RGB"
	.size	.L.str.38, 38

	.type	.L.str.39,@object               // @.str.39
.L.str.39:
	.asciz	"%ux%u RGB Targa image"
	.size	.L.str.39, 22

	.type	.L.str.40,@object               // @.str.40
.L.str.40:
	.asciz	"%ux%u grayscale Targa image"
	.size	.L.str.40, 28

	.type	.L.str.41,@object               // @.str.41
.L.str.41:
	.asciz	"%ux%u colormapped Targa image"
	.size	.L.str.41, 30

	.type	.L.str.42,@object               // @.str.42
.L.str.42:
	.asciz	"Color map file is invalid or of unsupported format"
	.size	.L.str.42, 51

	.type	.L.str.43,@object               // @.str.43
.L.str.43:
	.asciz	"Output file format cannot handle %d colormap entries"
	.size	.L.str.43, 53

	.type	.L.str.44,@object               // @.str.44
.L.str.44:
	.asciz	"ungetc failed"
	.size	.L.str.44, 14

	.type	.L.str.45,@object               // @.str.45
.L.str.45:
	.asciz	"Unrecognized input file format --- perhaps you need -targa"
	.size	.L.str.45, 59

	.type	.L.str.46,@object               // @.str.46
.L.str.46:
	.asciz	"Unsupported output file format"
	.size	.L.str.46, 31

	.type	start_pass_fdctmgr.aanscales,@object // @start_pass_fdctmgr.aanscales
	.section	.rodata,"a",@progbits
	.p2align	1
start_pass_fdctmgr.aanscales:
	.hword	16384                           // 0x4000
	.hword	22725                           // 0x58c5
	.hword	21407                           // 0x539f
	.hword	19266                           // 0x4b42
	.hword	16384                           // 0x4000
	.hword	12873                           // 0x3249
	.hword	8867                            // 0x22a3
	.hword	4520                            // 0x11a8
	.hword	22725                           // 0x58c5
	.hword	31521                           // 0x7b21
	.hword	29692                           // 0x73fc
	.hword	26722                           // 0x6862
	.hword	22725                           // 0x58c5
	.hword	17855                           // 0x45bf
	.hword	12299                           // 0x300b
	.hword	6270                            // 0x187e
	.hword	21407                           // 0x539f
	.hword	29692                           // 0x73fc
	.hword	27969                           // 0x6d41
	.hword	25172                           // 0x6254
	.hword	21407                           // 0x539f
	.hword	16819                           // 0x41b3
	.hword	11585                           // 0x2d41
	.hword	5906                            // 0x1712
	.hword	19266                           // 0x4b42
	.hword	26722                           // 0x6862
	.hword	25172                           // 0x6254
	.hword	22654                           // 0x587e
	.hword	19266                           // 0x4b42
	.hword	15137                           // 0x3b21
	.hword	10426                           // 0x28ba
	.hword	5315                            // 0x14c3
	.hword	16384                           // 0x4000
	.hword	22725                           // 0x58c5
	.hword	21407                           // 0x539f
	.hword	19266                           // 0x4b42
	.hword	16384                           // 0x4000
	.hword	12873                           // 0x3249
	.hword	8867                            // 0x22a3
	.hword	4520                            // 0x11a8
	.hword	12873                           // 0x3249
	.hword	17855                           // 0x45bf
	.hword	16819                           // 0x41b3
	.hword	15137                           // 0x3b21
	.hword	12873                           // 0x3249
	.hword	10114                           // 0x2782
	.hword	6967                            // 0x1b37
	.hword	3552                            // 0xde0
	.hword	8867                            // 0x22a3
	.hword	12299                           // 0x300b
	.hword	11585                           // 0x2d41
	.hword	10426                           // 0x28ba
	.hword	8867                            // 0x22a3
	.hword	6967                            // 0x1b37
	.hword	4799                            // 0x12bf
	.hword	2446                            // 0x98e
	.hword	4520                            // 0x11a8
	.hword	6270                            // 0x187e
	.hword	5906                            // 0x1712
	.hword	5315                            // 0x14c3
	.hword	4520                            // 0x11a8
	.hword	3552                            // 0xde0
	.hword	2446                            // 0x98e
	.hword	1247                            // 0x4df
	.size	start_pass_fdctmgr.aanscales, 128

	.type	start_pass_fdctmgr.aanscalefactor,@object // @start_pass_fdctmgr.aanscalefactor
	.p2align	3
start_pass_fdctmgr.aanscalefactor:
	.xword	0x3ff0000000000000              // double 1
	.xword	0x3ff63150b14861ef              // double 1.3870398450000001
	.xword	0x3ff4e7ae914d6fca              // double 1.3065629649999999
	.xword	0x3ff2d062ef6c11aa              // double 1.1758756020000001
	.xword	0x3ff0000000000000              // double 1
	.xword	0x3fe92469c0a7bf3b              // double 0.785694958
	.xword	0x3fe1517a7bc720bb              // double 0.54119609999999996
	.xword	0x3fd1a855de72ab5d              // double 0.275899379
	.size	start_pass_fdctmgr.aanscalefactor, 64

	.type	jpeg_set_linear_quality.std_luminance_quant_tbl,@object // @jpeg_set_linear_quality.std_luminance_quant_tbl
	.p2align	2
jpeg_set_linear_quality.std_luminance_quant_tbl:
	.word	16                              // 0x10
	.word	11                              // 0xb
	.word	10                              // 0xa
	.word	16                              // 0x10
	.word	24                              // 0x18
	.word	40                              // 0x28
	.word	51                              // 0x33
	.word	61                              // 0x3d
	.word	12                              // 0xc
	.word	12                              // 0xc
	.word	14                              // 0xe
	.word	19                              // 0x13
	.word	26                              // 0x1a
	.word	58                              // 0x3a
	.word	60                              // 0x3c
	.word	55                              // 0x37
	.word	14                              // 0xe
	.word	13                              // 0xd
	.word	16                              // 0x10
	.word	24                              // 0x18
	.word	40                              // 0x28
	.word	57                              // 0x39
	.word	69                              // 0x45
	.word	56                              // 0x38
	.word	14                              // 0xe
	.word	17                              // 0x11
	.word	22                              // 0x16
	.word	29                              // 0x1d
	.word	51                              // 0x33
	.word	87                              // 0x57
	.word	80                              // 0x50
	.word	62                              // 0x3e
	.word	18                              // 0x12
	.word	22                              // 0x16
	.word	37                              // 0x25
	.word	56                              // 0x38
	.word	68                              // 0x44
	.word	109                             // 0x6d
	.word	103                             // 0x67
	.word	77                              // 0x4d
	.word	24                              // 0x18
	.word	35                              // 0x23
	.word	55                              // 0x37
	.word	64                              // 0x40
	.word	81                              // 0x51
	.word	104                             // 0x68
	.word	113                             // 0x71
	.word	92                              // 0x5c
	.word	49                              // 0x31
	.word	64                              // 0x40
	.word	78                              // 0x4e
	.word	87                              // 0x57
	.word	103                             // 0x67
	.word	121                             // 0x79
	.word	120                             // 0x78
	.word	101                             // 0x65
	.word	72                              // 0x48
	.word	92                              // 0x5c
	.word	95                              // 0x5f
	.word	98                              // 0x62
	.word	112                             // 0x70
	.word	100                             // 0x64
	.word	103                             // 0x67
	.word	99                              // 0x63
	.size	jpeg_set_linear_quality.std_luminance_quant_tbl, 256

	.type	jpeg_set_linear_quality.std_chrominance_quant_tbl,@object // @jpeg_set_linear_quality.std_chrominance_quant_tbl
	.p2align	2
jpeg_set_linear_quality.std_chrominance_quant_tbl:
	.word	17                              // 0x11
	.word	18                              // 0x12
	.word	24                              // 0x18
	.word	47                              // 0x2f
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	18                              // 0x12
	.word	21                              // 0x15
	.word	26                              // 0x1a
	.word	66                              // 0x42
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	24                              // 0x18
	.word	26                              // 0x1a
	.word	56                              // 0x38
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	47                              // 0x2f
	.word	66                              // 0x42
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.word	99                              // 0x63
	.size	jpeg_set_linear_quality.std_chrominance_quant_tbl, 256

	.type	std_huff_tables.bits_dc_luminance,@object // @std_huff_tables.bits_dc_luminance
std_huff_tables.bits_dc_luminance:
	.asciz	"\000\000\001\005\001\001\001\001\001\001\000\000\000\000\000\000"
	.size	std_huff_tables.bits_dc_luminance, 17

	.type	std_huff_tables.val_dc_luminance,@object // @std_huff_tables.val_dc_luminance
std_huff_tables.val_dc_luminance:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013"
	.size	std_huff_tables.val_dc_luminance, 12

	.type	std_huff_tables.bits_ac_luminance,@object // @std_huff_tables.bits_ac_luminance
std_huff_tables.bits_ac_luminance:
	.ascii	"\000\000\002\001\003\003\002\004\003\005\005\004\004\000\000\001}"
	.size	std_huff_tables.bits_ac_luminance, 17

	.type	std_huff_tables.val_ac_luminance,@object // @std_huff_tables.val_ac_luminance
std_huff_tables.val_ac_luminance:
	.ascii	"\001\002\003\000\004\021\005\022!1A\006\023Qa\007\"q\0242\201\221\241\b#B\261\301\025R\321\360$3br\202\t\n\026\027\030\031\032%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\203\204\205\206\207\210\211\212\222\223\224\225\226\227\230\231\232\242\243\244\245\246\247\250\251\252\262\263\264\265\266\267\270\271\272\302\303\304\305\306\307\310\311\312\322\323\324\325\326\327\330\331\332\341\342\343\344\345\346\347\350\351\352\361\362\363\364\365\366\367\370\371\372"
	.size	std_huff_tables.val_ac_luminance, 162

	.type	std_huff_tables.bits_dc_chrominance,@object // @std_huff_tables.bits_dc_chrominance
std_huff_tables.bits_dc_chrominance:
	.asciz	"\000\000\003\001\001\001\001\001\001\001\001\001\000\000\000\000"
	.size	std_huff_tables.bits_dc_chrominance, 17

	.type	std_huff_tables.val_dc_chrominance,@object // @std_huff_tables.val_dc_chrominance
std_huff_tables.val_dc_chrominance:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013"
	.size	std_huff_tables.val_dc_chrominance, 12

	.type	std_huff_tables.bits_ac_chrominance,@object // @std_huff_tables.bits_ac_chrominance
std_huff_tables.bits_ac_chrominance:
	.ascii	"\000\000\002\001\002\004\004\003\004\007\005\004\004\000\001\002w"
	.size	std_huff_tables.bits_ac_chrominance, 17

	.type	std_huff_tables.val_ac_chrominance,@object // @std_huff_tables.val_ac_chrominance
std_huff_tables.val_ac_chrominance:
	.ascii	"\000\001\002\003\021\004\005!1\006\022AQ\007aq\023\"2\201\b\024B\221\241\261\301\t#3R\360\025br\321\n\026$4\341%\361\027\030\031\032&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\202\203\204\205\206\207\210\211\212\222\223\224\225\226\227\230\231\232\242\243\244\245\246\247\250\251\252\262\263\264\265\266\267\270\271\272\302\303\304\305\306\307\310\311\312\322\323\324\325\326\327\330\331\332\342\343\344\345\346\347\350\351\352\362\363\364\365\366\367\370\371\372"
	.size	std_huff_tables.val_ac_chrominance, 162

	.type	start_pass.aanscales,@object    // @start_pass.aanscales
	.p2align	1
start_pass.aanscales:
	.hword	16384                           // 0x4000
	.hword	22725                           // 0x58c5
	.hword	21407                           // 0x539f
	.hword	19266                           // 0x4b42
	.hword	16384                           // 0x4000
	.hword	12873                           // 0x3249
	.hword	8867                            // 0x22a3
	.hword	4520                            // 0x11a8
	.hword	22725                           // 0x58c5
	.hword	31521                           // 0x7b21
	.hword	29692                           // 0x73fc
	.hword	26722                           // 0x6862
	.hword	22725                           // 0x58c5
	.hword	17855                           // 0x45bf
	.hword	12299                           // 0x300b
	.hword	6270                            // 0x187e
	.hword	21407                           // 0x539f
	.hword	29692                           // 0x73fc
	.hword	27969                           // 0x6d41
	.hword	25172                           // 0x6254
	.hword	21407                           // 0x539f
	.hword	16819                           // 0x41b3
	.hword	11585                           // 0x2d41
	.hword	5906                            // 0x1712
	.hword	19266                           // 0x4b42
	.hword	26722                           // 0x6862
	.hword	25172                           // 0x6254
	.hword	22654                           // 0x587e
	.hword	19266                           // 0x4b42
	.hword	15137                           // 0x3b21
	.hword	10426                           // 0x28ba
	.hword	5315                            // 0x14c3
	.hword	16384                           // 0x4000
	.hword	22725                           // 0x58c5
	.hword	21407                           // 0x539f
	.hword	19266                           // 0x4b42
	.hword	16384                           // 0x4000
	.hword	12873                           // 0x3249
	.hword	8867                            // 0x22a3
	.hword	4520                            // 0x11a8
	.hword	12873                           // 0x3249
	.hword	17855                           // 0x45bf
	.hword	16819                           // 0x41b3
	.hword	15137                           // 0x3b21
	.hword	12873                           // 0x3249
	.hword	10114                           // 0x2782
	.hword	6967                            // 0x1b37
	.hword	3552                            // 0xde0
	.hword	8867                            // 0x22a3
	.hword	12299                           // 0x300b
	.hword	11585                           // 0x2d41
	.hword	10426                           // 0x28ba
	.hword	8867                            // 0x22a3
	.hword	6967                            // 0x1b37
	.hword	4799                            // 0x12bf
	.hword	2446                            // 0x98e
	.hword	4520                            // 0x11a8
	.hword	6270                            // 0x187e
	.hword	5906                            // 0x1712
	.hword	5315                            // 0x14c3
	.hword	4520                            // 0x11a8
	.hword	3552                            // 0xde0
	.hword	2446                            // 0x98e
	.hword	1247                            // 0x4df
	.size	start_pass.aanscales, 128

	.type	start_pass.aanscalefactor,@object // @start_pass.aanscalefactor
	.p2align	3
start_pass.aanscalefactor:
	.xword	0x3ff0000000000000              // double 1
	.xword	0x3ff63150b14861ef              // double 1.3870398450000001
	.xword	0x3ff4e7ae914d6fca              // double 1.3065629649999999
	.xword	0x3ff2d062ef6c11aa              // double 1.1758756020000001
	.xword	0x3ff0000000000000              // double 1
	.xword	0x3fe92469c0a7bf3b              // double 0.785694958
	.xword	0x3fe1517a7bc720bb              // double 0.54119609999999996
	.xword	0x3fd1a855de72ab5d              // double 0.275899379
	.size	start_pass.aanscalefactor, 64

	.type	extend_test,@object             // @extend_test
	.p2align	2
extend_test:
	.word	0                               // 0x0
	.word	1                               // 0x1
	.word	2                               // 0x2
	.word	4                               // 0x4
	.word	8                               // 0x8
	.word	16                              // 0x10
	.word	32                              // 0x20
	.word	64                              // 0x40
	.word	128                             // 0x80
	.word	256                             // 0x100
	.word	512                             // 0x200
	.word	1024                            // 0x400
	.word	2048                            // 0x800
	.word	4096                            // 0x1000
	.word	8192                            // 0x2000
	.word	16384                           // 0x4000
	.size	extend_test, 64

	.type	extend_offset,@object           // @extend_offset
	.p2align	2
extend_offset:
	.word	0                               // 0x0
	.word	4294967295                      // 0xffffffff
	.word	4294967293                      // 0xfffffffd
	.word	4294967289                      // 0xfffffff9
	.word	4294967281                      // 0xfffffff1
	.word	4294967265                      // 0xffffffe1
	.word	4294967233                      // 0xffffffc1
	.word	4294967169                      // 0xffffff81
	.word	4294967041                      // 0xffffff01
	.word	4294966785                      // 0xfffffe01
	.word	4294966273                      // 0xfffffc01
	.word	4294965249                      // 0xfffff801
	.word	4294963201                      // 0xfffff001
	.word	4294959105                      // 0xffffe001
	.word	4294950913                      // 0xffffc001
	.word	4294934529                      // 0xffff8001
	.size	extend_offset, 64

	.type	extend_test.74,@object          // @extend_test.74
	.p2align	2
extend_test.74:
	.word	0                               // 0x0
	.word	1                               // 0x1
	.word	2                               // 0x2
	.word	4                               // 0x4
	.word	8                               // 0x8
	.word	16                              // 0x10
	.word	32                              // 0x20
	.word	64                              // 0x40
	.word	128                             // 0x80
	.word	256                             // 0x100
	.word	512                             // 0x200
	.word	1024                            // 0x400
	.word	2048                            // 0x800
	.word	4096                            // 0x1000
	.word	8192                            // 0x2000
	.word	16384                           // 0x4000
	.size	extend_test.74, 64

	.type	extend_offset.75,@object        // @extend_offset.75
	.p2align	2
extend_offset.75:
	.word	0                               // 0x0
	.word	4294967295                      // 0xffffffff
	.word	4294967293                      // 0xfffffffd
	.word	4294967289                      // 0xfffffff9
	.word	4294967281                      // 0xfffffff1
	.word	4294967265                      // 0xffffffe1
	.word	4294967233                      // 0xffffffc1
	.word	4294967169                      // 0xffffff81
	.word	4294967041                      // 0xffffff01
	.word	4294966785                      // 0xfffffe01
	.word	4294966273                      // 0xfffffc01
	.word	4294965249                      // 0xfffff801
	.word	4294963201                      // 0xfffff001
	.word	4294959105                      // 0xffffe001
	.word	4294950913                      // 0xffffc001
	.word	4294934529                      // 0xffff8001
	.size	extend_offset.75, 64

	.type	jpeg_std_message_table,@object  // @jpeg_std_message_table
	.globl	jpeg_std_message_table
	.p2align	3
jpeg_std_message_table:
	.xword	.L.str.101
	.xword	.L.str.1.102
	.xword	.L.str.2.103
	.xword	.L.str.3.104
	.xword	.L.str.4.105
	.xword	.L.str.5.106
	.xword	.L.str.6.107
	.xword	.L.str.7.108
	.xword	.L.str.8.109
	.xword	.L.str.9.110
	.xword	.L.str.10.111
	.xword	.L.str.11.112
	.xword	.L.str.12.113
	.xword	.L.str.13.114
	.xword	.L.str.14.115
	.xword	.L.str.15.116
	.xword	.L.str.16.117
	.xword	.L.str.17.118
	.xword	.L.str.18.119
	.xword	.L.str.19.120
	.xword	.L.str.20.121
	.xword	.L.str.21.122
	.xword	.L.str.22.123
	.xword	.L.str.23.124
	.xword	.L.str.24.125
	.xword	.L.str.25.126
	.xword	.L.str.26.127
	.xword	.L.str.27.128
	.xword	.L.str.28.129
	.xword	.L.str.29.130
	.xword	.L.str.30.131
	.xword	.L.str.31.132
	.xword	.L.str.32.133
	.xword	.L.str.33.134
	.xword	.L.str.34.135
	.xword	.L.str.35.136
	.xword	.L.str.36.137
	.xword	.L.str.37.138
	.xword	.L.str.38.139
	.xword	.L.str.39.140
	.xword	.L.str.40.141
	.xword	.L.str.41.142
	.xword	.L.str.42.143
	.xword	.L.str.43.144
	.xword	.L.str.44.145
	.xword	.L.str.45.146
	.xword	.L.str.46.147
	.xword	.L.str.47.148
	.xword	.L.str.48.149
	.xword	.L.str.49.150
	.xword	.L.str.50.151
	.xword	.L.str.51.152
	.xword	.L.str.52.153
	.xword	.L.str.53.154
	.xword	.L.str.54.155
	.xword	.L.str.55.156
	.xword	.L.str.56.157
	.xword	.L.str.57.158
	.xword	.L.str.58.159
	.xword	.L.str.59.160
	.xword	.L.str.60.161
	.xword	.L.str.61.162
	.xword	.L.str.62.163
	.xword	.L.str.63.164
	.xword	.L.str.64.165
	.xword	.L.str.65.166
	.xword	.L.str.66.167
	.xword	.L.str.67.168
	.xword	.L.str.68.169
	.xword	.L.str.69.170
	.xword	.L.str.70.171
	.xword	.L.str.71.172
	.xword	.L.str.72.173
	.xword	.L.str.73.174
	.xword	.L.str.74.175
	.xword	.L.str.75.176
	.xword	.L.str.76.177
	.xword	.L.str.77.178
	.xword	.L.str.78.179
	.xword	.L.str.79.180
	.xword	.L.str.80.181
	.xword	.L.str.81.182
	.xword	.L.str.82.183
	.xword	.L.str.83.184
	.xword	.L.str.84.185
	.xword	.L.str.85.186
	.xword	.L.str.86.187
	.xword	.L.str.87.188
	.xword	.L.str.88.189
	.xword	.L.str.89.190
	.xword	.L.str.90.191
	.xword	.L.str.91.192
	.xword	.L.str.92.193
	.xword	.L.str.93.194
	.xword	.L.str.94.195
	.xword	.L.str.95.196
	.xword	.L.str.96.197
	.xword	.L.str.97.198
	.xword	.L.str.98.199
	.xword	.L.str.99.200
	.xword	.L.str.100.201
	.xword	.L.str.101.202
	.xword	.L.str.102
	.xword	.L.str.103
	.xword	.L.str.104
	.xword	.L.str.105
	.xword	.L.str.106
	.xword	.L.str.107
	.xword	.L.str.108
	.xword	.L.str.109
	.xword	.L.str.110
	.xword	.L.str.111
	.xword	.L.str.112
	.xword	.L.str.113
	.xword	.L.str.114
	.xword	.L.str.115
	.xword	.L.str.116
	.xword	.L.str.117
	.xword	.L.str.118
	.xword	.L.str.119
	.xword	0
	.size	jpeg_std_message_table, 968

	.type	.L.str.101,@object              // @.str.101
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.101:
	.asciz	"Bogus message code %d"
	.size	.L.str.101, 22

	.type	.L.str.1.102,@object            // @.str.1.102
.L.str.1.102:
	.asciz	"Sorry, there are legal restrictions on arithmetic coding"
	.size	.L.str.1.102, 57

	.type	.L.str.2.103,@object            // @.str.2.103
.L.str.2.103:
	.asciz	"ALIGN_TYPE is wrong, please fix"
	.size	.L.str.2.103, 32

	.type	.L.str.3.104,@object            // @.str.3.104
.L.str.3.104:
	.asciz	"MAX_ALLOC_CHUNK is wrong, please fix"
	.size	.L.str.3.104, 37

	.type	.L.str.4.105,@object            // @.str.4.105
.L.str.4.105:
	.asciz	"Bogus buffer control mode"
	.size	.L.str.4.105, 26

	.type	.L.str.5.106,@object            // @.str.5.106
.L.str.5.106:
	.asciz	"Invalid component ID %d in SOS"
	.size	.L.str.5.106, 31

	.type	.L.str.6.107,@object            // @.str.6.107
.L.str.6.107:
	.asciz	"IDCT output block size %d not supported"
	.size	.L.str.6.107, 40

	.type	.L.str.7.108,@object            // @.str.7.108
.L.str.7.108:
	.asciz	"Bogus input colorspace"
	.size	.L.str.7.108, 23

	.type	.L.str.8.109,@object            // @.str.8.109
.L.str.8.109:
	.asciz	"Bogus JPEG colorspace"
	.size	.L.str.8.109, 22

	.type	.L.str.9.110,@object            // @.str.9.110
.L.str.9.110:
	.asciz	"Bogus marker length"
	.size	.L.str.9.110, 20

	.type	.L.str.10.111,@object           // @.str.10.111
.L.str.10.111:
	.asciz	"Wrong JPEG library version: library is %d, caller expects %d"
	.size	.L.str.10.111, 61

	.type	.L.str.11.112,@object           // @.str.11.112
.L.str.11.112:
	.asciz	"Sampling factors too large for interleaved scan"
	.size	.L.str.11.112, 48

	.type	.L.str.12.113,@object           // @.str.12.113
.L.str.12.113:
	.asciz	"Invalid memory pool code %d"
	.size	.L.str.12.113, 28

	.type	.L.str.13.114,@object           // @.str.13.114
.L.str.13.114:
	.asciz	"Unsupported JPEG data precision %d"
	.size	.L.str.13.114, 35

	.type	.L.str.14.115,@object           // @.str.14.115
.L.str.14.115:
	.asciz	"Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d"
	.size	.L.str.14.115, 55

	.type	.L.str.15.116,@object           // @.str.15.116
.L.str.15.116:
	.asciz	"Invalid progressive parameters at scan script entry %d"
	.size	.L.str.15.116, 55

	.type	.L.str.16.117,@object           // @.str.16.117
.L.str.16.117:
	.asciz	"Bogus sampling factors"
	.size	.L.str.16.117, 23

	.type	.L.str.17.118,@object           // @.str.17.118
.L.str.17.118:
	.asciz	"Invalid scan script at entry %d"
	.size	.L.str.17.118, 32

	.type	.L.str.18.119,@object           // @.str.18.119
.L.str.18.119:
	.asciz	"Improper call to JPEG library in state %d"
	.size	.L.str.18.119, 42

	.type	.L.str.19.120,@object           // @.str.19.120
.L.str.19.120:
	.asciz	"JPEG parameter struct mismatch: library thinks size is %u, caller expects %u"
	.size	.L.str.19.120, 77

	.type	.L.str.20.121,@object           // @.str.20.121
.L.str.20.121:
	.asciz	"Bogus virtual array access"
	.size	.L.str.20.121, 27

	.type	.L.str.21.122,@object           // @.str.21.122
.L.str.21.122:
	.asciz	"Buffer passed to JPEG library is too small"
	.size	.L.str.21.122, 43

	.type	.L.str.22.123,@object           // @.str.22.123
.L.str.22.123:
	.asciz	"Suspension not allowed here"
	.size	.L.str.22.123, 28

	.type	.L.str.23.124,@object           // @.str.23.124
.L.str.23.124:
	.asciz	"CCIR601 sampling not implemented yet"
	.size	.L.str.23.124, 37

	.type	.L.str.24.125,@object           // @.str.24.125
.L.str.24.125:
	.asciz	"Too many color components: %d, max %d"
	.size	.L.str.24.125, 38

	.type	.L.str.25.126,@object           // @.str.25.126
.L.str.25.126:
	.asciz	"Unsupported color conversion request"
	.size	.L.str.25.126, 37

	.type	.L.str.26.127,@object           // @.str.26.127
.L.str.26.127:
	.asciz	"Bogus DAC index %d"
	.size	.L.str.26.127, 19

	.type	.L.str.27.128,@object           // @.str.27.128
.L.str.27.128:
	.asciz	"Bogus DAC value 0x%x"
	.size	.L.str.27.128, 21

	.type	.L.str.28.129,@object           // @.str.28.129
.L.str.28.129:
	.asciz	"Bogus DHT counts"
	.size	.L.str.28.129, 17

	.type	.L.str.29.130,@object           // @.str.29.130
.L.str.29.130:
	.asciz	"Bogus DHT index %d"
	.size	.L.str.29.130, 19

	.type	.L.str.30.131,@object           // @.str.30.131
.L.str.30.131:
	.asciz	"Bogus DQT index %d"
	.size	.L.str.30.131, 19

	.type	.L.str.31.132,@object           // @.str.31.132
.L.str.31.132:
	.asciz	"Empty JPEG image (DNL not supported)"
	.size	.L.str.31.132, 37

	.type	.L.str.32.133,@object           // @.str.32.133
.L.str.32.133:
	.asciz	"Read from EMS failed"
	.size	.L.str.32.133, 21

	.type	.L.str.33.134,@object           // @.str.33.134
.L.str.33.134:
	.asciz	"Write to EMS failed"
	.size	.L.str.33.134, 20

	.type	.L.str.34.135,@object           // @.str.34.135
.L.str.34.135:
	.asciz	"Didn't expect more than one scan"
	.size	.L.str.34.135, 33

	.type	.L.str.35.136,@object           // @.str.35.136
.L.str.35.136:
	.asciz	"Input file read error"
	.size	.L.str.35.136, 22

	.type	.L.str.36.137,@object           // @.str.36.137
.L.str.36.137:
	.asciz	"Output file write error --- out of disk space?"
	.size	.L.str.36.137, 47

	.type	.L.str.37.138,@object           // @.str.37.138
.L.str.37.138:
	.asciz	"Fractional sampling not implemented yet"
	.size	.L.str.37.138, 40

	.type	.L.str.38.139,@object           // @.str.38.139
.L.str.38.139:
	.asciz	"Huffman code size table overflow"
	.size	.L.str.38.139, 33

	.type	.L.str.39.140,@object           // @.str.39.140
.L.str.39.140:
	.asciz	"Missing Huffman code table entry"
	.size	.L.str.39.140, 33

	.type	.L.str.40.141,@object           // @.str.40.141
.L.str.40.141:
	.asciz	"Maximum supported image dimension is %u pixels"
	.size	.L.str.40.141, 47

	.type	.L.str.41.142,@object           // @.str.41.142
.L.str.41.142:
	.asciz	"Empty input file"
	.size	.L.str.41.142, 17

	.type	.L.str.42.143,@object           // @.str.42.143
.L.str.42.143:
	.asciz	"Premature end of input file"
	.size	.L.str.42.143, 28

	.type	.L.str.43.144,@object           // @.str.43.144
.L.str.43.144:
	.asciz	"Cannot transcode due to multiple use of quantization table %d"
	.size	.L.str.43.144, 62

	.type	.L.str.44.145,@object           // @.str.44.145
.L.str.44.145:
	.asciz	"Scan script does not transmit all data"
	.size	.L.str.44.145, 39

	.type	.L.str.45.146,@object           // @.str.45.146
.L.str.45.146:
	.asciz	"Invalid color quantization mode change"
	.size	.L.str.45.146, 39

	.type	.L.str.46.147,@object           // @.str.46.147
.L.str.46.147:
	.asciz	"Not implemented yet"
	.size	.L.str.46.147, 20

	.type	.L.str.47.148,@object           // @.str.47.148
.L.str.47.148:
	.asciz	"Requested feature was omitted at compile time"
	.size	.L.str.47.148, 46

	.type	.L.str.48.149,@object           // @.str.48.149
.L.str.48.149:
	.asciz	"Backing store not supported"
	.size	.L.str.48.149, 28

	.type	.L.str.49.150,@object           // @.str.49.150
.L.str.49.150:
	.asciz	"Huffman table 0x%02x was not defined"
	.size	.L.str.49.150, 37

	.type	.L.str.50.151,@object           // @.str.50.151
.L.str.50.151:
	.asciz	"JPEG datastream contains no image"
	.size	.L.str.50.151, 34

	.type	.L.str.51.152,@object           // @.str.51.152
.L.str.51.152:
	.asciz	"Quantization table 0x%02x was not defined"
	.size	.L.str.51.152, 42

	.type	.L.str.52.153,@object           // @.str.52.153
.L.str.52.153:
	.asciz	"Not a JPEG file: starts with 0x%02x 0x%02x"
	.size	.L.str.52.153, 43

	.type	.L.str.53.154,@object           // @.str.53.154
.L.str.53.154:
	.asciz	"Insufficient memory (case %d)"
	.size	.L.str.53.154, 30

	.type	.L.str.54.155,@object           // @.str.54.155
.L.str.54.155:
	.asciz	"Cannot quantize more than %d color components"
	.size	.L.str.54.155, 46

	.type	.L.str.55.156,@object           // @.str.55.156
.L.str.55.156:
	.asciz	"Cannot quantize to fewer than %d colors"
	.size	.L.str.55.156, 40

	.type	.L.str.56.157,@object           // @.str.56.157
.L.str.56.157:
	.asciz	"Cannot quantize to more than %d colors"
	.size	.L.str.56.157, 39

	.type	.L.str.57.158,@object           // @.str.57.158
.L.str.57.158:
	.asciz	"Invalid JPEG file structure: two SOF markers"
	.size	.L.str.57.158, 45

	.type	.L.str.58.159,@object           // @.str.58.159
.L.str.58.159:
	.asciz	"Invalid JPEG file structure: missing SOS marker"
	.size	.L.str.58.159, 48

	.type	.L.str.59.160,@object           // @.str.59.160
.L.str.59.160:
	.asciz	"Unsupported JPEG process: SOF type 0x%02x"
	.size	.L.str.59.160, 42

	.type	.L.str.60.161,@object           // @.str.60.161
.L.str.60.161:
	.asciz	"Invalid JPEG file structure: two SOI markers"
	.size	.L.str.60.161, 45

	.type	.L.str.61.162,@object           // @.str.61.162
.L.str.61.162:
	.asciz	"Invalid JPEG file structure: SOS before SOF"
	.size	.L.str.61.162, 44

	.type	.L.str.62.163,@object           // @.str.62.163
.L.str.62.163:
	.asciz	"Failed to create temporary file %s"
	.size	.L.str.62.163, 35

	.type	.L.str.63.164,@object           // @.str.63.164
.L.str.63.164:
	.asciz	"Read failed on temporary file"
	.size	.L.str.63.164, 30

	.type	.L.str.64.165,@object           // @.str.64.165
.L.str.64.165:
	.asciz	"Seek failed on temporary file"
	.size	.L.str.64.165, 30

	.type	.L.str.65.166,@object           // @.str.65.166
.L.str.65.166:
	.asciz	"Write failed on temporary file --- out of disk space?"
	.size	.L.str.65.166, 54

	.type	.L.str.66.167,@object           // @.str.66.167
.L.str.66.167:
	.asciz	"Application transferred too few scanlines"
	.size	.L.str.66.167, 42

	.type	.L.str.67.168,@object           // @.str.67.168
.L.str.67.168:
	.asciz	"Unsupported marker type 0x%02x"
	.size	.L.str.67.168, 31

	.type	.L.str.68.169,@object           // @.str.68.169
.L.str.68.169:
	.asciz	"Virtual array controller messed up"
	.size	.L.str.68.169, 35

	.type	.L.str.69.170,@object           // @.str.69.170
.L.str.69.170:
	.asciz	"Image too wide for this implementation"
	.size	.L.str.69.170, 39

	.type	.L.str.70.171,@object           // @.str.70.171
.L.str.70.171:
	.asciz	"Read from XMS failed"
	.size	.L.str.70.171, 21

	.type	.L.str.71.172,@object           // @.str.71.172
.L.str.71.172:
	.asciz	"Write to XMS failed"
	.size	.L.str.71.172, 20

	.type	.L.str.72.173,@object           // @.str.72.173
.L.str.72.173:
	.asciz	"Copyright (C) 1996, Thomas G. Lane"
	.size	.L.str.72.173, 35

	.type	.L.str.73.174,@object           // @.str.73.174
.L.str.73.174:
	.asciz	"6a  7-Feb-96"
	.size	.L.str.73.174, 13

	.type	.L.str.74.175,@object           // @.str.74.175
.L.str.74.175:
	.asciz	"Caution: quantization tables are too coarse for baseline JPEG"
	.size	.L.str.74.175, 62

	.type	.L.str.75.176,@object           // @.str.75.176
.L.str.75.176:
	.asciz	"Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d"
	.size	.L.str.75.176, 66

	.type	.L.str.76.177,@object           // @.str.76.177
.L.str.76.177:
	.asciz	"Unknown APP0 marker (not JFIF), length %u"
	.size	.L.str.76.177, 42

	.type	.L.str.77.178,@object           // @.str.77.178
.L.str.77.178:
	.asciz	"Unknown APP14 marker (not Adobe), length %u"
	.size	.L.str.77.178, 44

	.type	.L.str.78.179,@object           // @.str.78.179
.L.str.78.179:
	.asciz	"Define Arithmetic Table 0x%02x: 0x%02x"
	.size	.L.str.78.179, 39

	.type	.L.str.79.180,@object           // @.str.79.180
.L.str.79.180:
	.asciz	"Define Huffman Table 0x%02x"
	.size	.L.str.79.180, 28

	.type	.L.str.80.181,@object           // @.str.80.181
.L.str.80.181:
	.asciz	"Define Quantization Table %d  precision %d"
	.size	.L.str.80.181, 43

	.type	.L.str.81.182,@object           // @.str.81.182
.L.str.81.182:
	.asciz	"Define Restart Interval %u"
	.size	.L.str.81.182, 27

	.type	.L.str.82.183,@object           // @.str.82.183
.L.str.82.183:
	.asciz	"Freed EMS handle %u"
	.size	.L.str.82.183, 20

	.type	.L.str.83.184,@object           // @.str.83.184
.L.str.83.184:
	.asciz	"Obtained EMS handle %u"
	.size	.L.str.83.184, 23

	.type	.L.str.84.185,@object           // @.str.84.185
.L.str.84.185:
	.asciz	"End Of Image"
	.size	.L.str.84.185, 13

	.type	.L.str.85.186,@object           // @.str.85.186
.L.str.85.186:
	.asciz	"        %3d %3d %3d %3d %3d %3d %3d %3d"
	.size	.L.str.85.186, 40

	.type	.L.str.86.187,@object           // @.str.86.187
.L.str.86.187:
	.asciz	"JFIF APP0 marker, density %dx%d  %d"
	.size	.L.str.86.187, 36

	.type	.L.str.87.188,@object           // @.str.87.188
.L.str.87.188:
	.asciz	"Warning: thumbnail image size does not match data length %u"
	.size	.L.str.87.188, 60

	.type	.L.str.88.189,@object           // @.str.88.189
.L.str.88.189:
	.asciz	"Unknown JFIF minor revision number %d.%02d"
	.size	.L.str.88.189, 43

	.type	.L.str.89.190,@object           // @.str.89.190
.L.str.89.190:
	.asciz	"    with %d x %d thumbnail image"
	.size	.L.str.89.190, 33

	.type	.L.str.90.191,@object           // @.str.90.191
.L.str.90.191:
	.asciz	"Skipping marker 0x%02x, length %u"
	.size	.L.str.90.191, 34

	.type	.L.str.91.192,@object           // @.str.91.192
.L.str.91.192:
	.asciz	"Unexpected marker 0x%02x"
	.size	.L.str.91.192, 25

	.type	.L.str.92.193,@object           // @.str.92.193
.L.str.92.193:
	.asciz	"        %4u %4u %4u %4u %4u %4u %4u %4u"
	.size	.L.str.92.193, 40

	.type	.L.str.93.194,@object           // @.str.93.194
.L.str.93.194:
	.asciz	"Quantizing to %d = %d*%d*%d colors"
	.size	.L.str.93.194, 35

	.type	.L.str.94.195,@object           // @.str.94.195
.L.str.94.195:
	.asciz	"Quantizing to %d colors"
	.size	.L.str.94.195, 24

	.type	.L.str.95.196,@object           // @.str.95.196
.L.str.95.196:
	.asciz	"Selected %d colors for quantization"
	.size	.L.str.95.196, 36

	.type	.L.str.96.197,@object           // @.str.96.197
.L.str.96.197:
	.asciz	"At marker 0x%02x, recovery action %d"
	.size	.L.str.96.197, 37

	.type	.L.str.97.198,@object           // @.str.97.198
.L.str.97.198:
	.asciz	"RST%d"
	.size	.L.str.97.198, 6

	.type	.L.str.98.199,@object           // @.str.98.199
.L.str.98.199:
	.asciz	"Smoothing not supported with nonstandard sampling ratios"
	.size	.L.str.98.199, 57

	.type	.L.str.99.200,@object           // @.str.99.200
.L.str.99.200:
	.asciz	"Start Of Frame 0x%02x: width=%u, height=%u, components=%d"
	.size	.L.str.99.200, 58

	.type	.L.str.100.201,@object          // @.str.100.201
.L.str.100.201:
	.asciz	"    Component %d: %dhx%dv q=%d"
	.size	.L.str.100.201, 31

	.type	.L.str.101.202,@object          // @.str.101.202
.L.str.101.202:
	.asciz	"Start of Image"
	.size	.L.str.101.202, 15

	.type	.L.str.102,@object              // @.str.102
.L.str.102:
	.asciz	"Start Of Scan: %d components"
	.size	.L.str.102, 29

	.type	.L.str.103,@object              // @.str.103
.L.str.103:
	.asciz	"    Component %d: dc=%d ac=%d"
	.size	.L.str.103, 30

	.type	.L.str.104,@object              // @.str.104
.L.str.104:
	.asciz	"  Ss=%d, Se=%d, Ah=%d, Al=%d"
	.size	.L.str.104, 29

	.type	.L.str.105,@object              // @.str.105
.L.str.105:
	.asciz	"Closed temporary file %s"
	.size	.L.str.105, 25

	.type	.L.str.106,@object              // @.str.106
.L.str.106:
	.asciz	"Opened temporary file %s"
	.size	.L.str.106, 25

	.type	.L.str.107,@object              // @.str.107
.L.str.107:
	.asciz	"Unrecognized component IDs %d %d %d, assuming YCbCr"
	.size	.L.str.107, 52

	.type	.L.str.108,@object              // @.str.108
.L.str.108:
	.asciz	"Freed XMS handle %u"
	.size	.L.str.108, 20

	.type	.L.str.109,@object              // @.str.109
.L.str.109:
	.asciz	"Obtained XMS handle %u"
	.size	.L.str.109, 23

	.type	.L.str.110,@object              // @.str.110
.L.str.110:
	.asciz	"Unknown Adobe color transform code %d"
	.size	.L.str.110, 38

	.type	.L.str.111,@object              // @.str.111
.L.str.111:
	.asciz	"Inconsistent progression sequence for component %d coefficient %d"
	.size	.L.str.111, 66

	.type	.L.str.112,@object              // @.str.112
.L.str.112:
	.asciz	"Corrupt JPEG data: %u extraneous bytes before marker 0x%02x"
	.size	.L.str.112, 60

	.type	.L.str.113,@object              // @.str.113
.L.str.113:
	.asciz	"Corrupt JPEG data: premature end of data segment"
	.size	.L.str.113, 49

	.type	.L.str.114,@object              // @.str.114
.L.str.114:
	.asciz	"Corrupt JPEG data: bad Huffman code"
	.size	.L.str.114, 36

	.type	.L.str.115,@object              // @.str.115
.L.str.115:
	.asciz	"Warning: unknown JFIF revision number %d.%02d"
	.size	.L.str.115, 46

	.type	.L.str.116,@object              // @.str.116
.L.str.116:
	.asciz	"Premature end of JPEG file"
	.size	.L.str.116, 27

	.type	.L.str.117,@object              // @.str.117
.L.str.117:
	.asciz	"Corrupt JPEG data: found marker 0x%02x instead of RST%d"
	.size	.L.str.117, 56

	.type	.L.str.118,@object              // @.str.118
.L.str.118:
	.asciz	"Invalid SOS parameters for sequential JPEG"
	.size	.L.str.118, 43

	.type	.L.str.119,@object              // @.str.119
.L.str.119:
	.asciz	"Application transferred too many scanlines"
	.size	.L.str.119, 43

	.type	.L.str.120,@object              // @.str.120
.L.str.120:
	.asciz	"%s\n"
	.size	.L.str.120, 4

	.type	.L.str.223,@object              // @.str.223
.L.str.223:
	.zero	1
	.size	.L.str.223, 1

	.type	.L.str.226,@object              // @.str.226
.L.str.226:
	.asciz	"JPEGMEM"
	.size	.L.str.226, 8

	.type	.L.str.1.227,@object            // @.str.1.227
.L.str.1.227:
	.asciz	"%ld%c"
	.size	.L.str.1.227, 6

	.type	first_pool_slop,@object         // @first_pool_slop
	.section	.rodata,"a",@progbits
	.p2align	3
first_pool_slop:
	.xword	1600                            // 0x640
	.xword	16000                           // 0x3e80
	.size	first_pool_slop, 16

	.type	extra_pool_slop,@object         // @extra_pool_slop
	.p2align	3
extra_pool_slop:
	.xword	0                               // 0x0
	.xword	5000                            // 0x1388
	.size	extra_pool_slop, 16

	.type	select_ncolors.RGB_order,@object // @select_ncolors.RGB_order
	.p2align	2
select_ncolors.RGB_order:
	.word	1                               // 0x1
	.word	0                               // 0x0
	.word	2                               // 0x2
	.size	select_ncolors.RGB_order, 12

	.type	base_dither_matrix,@object      // @base_dither_matrix
base_dither_matrix:
	.ascii	"\000\3000\360\f\314<\374\003\3033\363\017\317?\377"
	.ascii	"\200@\260p\214L\274|\203C\263s\217O\277\177"
	.ascii	" \340\020\320,\354\034\334#\343\023\323/\357\037\337"
	.ascii	"\240`\220P\254l\234\\\243c\223S\257o\237_"
	.ascii	"\b\3108\370\004\3044\364\013\313;\373\007\3077\367"
	.ascii	"\210H\270x\204D\264t\213K\273{\207G\267w"
	.ascii	"(\350\030\330$\344\024\324+\353\033\333'\347\027\327"
	.ascii	"\250h\230X\244d\224T\253k\233[\247g\227W"
	.ascii	"\002\3022\362\016\316>\376\001\3011\361\r\315=\375"
	.ascii	"\202B\262r\216N\276~\201A\261q\215M\275}"
	.ascii	"\"\342\022\322.\356\036\336!\341\021\321-\355\035\335"
	.ascii	"\242b\222R\256n\236^\241a\221Q\255m\235]"
	.ascii	"\n\312:\372\006\3066\366\t\3119\371\005\3055\365"
	.ascii	"\212J\272z\206F\266v\211I\271y\205E\265u"
	.ascii	"*\352\032\332&\346\026\326)\351\031\331%\345\025\325"
	.ascii	"\252j\232Z\246f\226V\251i\231Y\245e\225U"
	.size	base_dither_matrix, 256

	.type	jpeg_natural_order,@object      // @jpeg_natural_order
	.globl	jpeg_natural_order
	.p2align	2
jpeg_natural_order:
	.word	0                               // 0x0
	.word	1                               // 0x1
	.word	8                               // 0x8
	.word	16                              // 0x10
	.word	9                               // 0x9
	.word	2                               // 0x2
	.word	3                               // 0x3
	.word	10                              // 0xa
	.word	17                              // 0x11
	.word	24                              // 0x18
	.word	32                              // 0x20
	.word	25                              // 0x19
	.word	18                              // 0x12
	.word	11                              // 0xb
	.word	4                               // 0x4
	.word	5                               // 0x5
	.word	12                              // 0xc
	.word	19                              // 0x13
	.word	26                              // 0x1a
	.word	33                              // 0x21
	.word	40                              // 0x28
	.word	48                              // 0x30
	.word	41                              // 0x29
	.word	34                              // 0x22
	.word	27                              // 0x1b
	.word	20                              // 0x14
	.word	13                              // 0xd
	.word	6                               // 0x6
	.word	7                               // 0x7
	.word	14                              // 0xe
	.word	21                              // 0x15
	.word	28                              // 0x1c
	.word	35                              // 0x23
	.word	42                              // 0x2a
	.word	49                              // 0x31
	.word	56                              // 0x38
	.word	57                              // 0x39
	.word	50                              // 0x32
	.word	43                              // 0x2b
	.word	36                              // 0x24
	.word	29                              // 0x1d
	.word	22                              // 0x16
	.word	15                              // 0xf
	.word	23                              // 0x17
	.word	30                              // 0x1e
	.word	37                              // 0x25
	.word	44                              // 0x2c
	.word	51                              // 0x33
	.word	58                              // 0x3a
	.word	59                              // 0x3b
	.word	52                              // 0x34
	.word	45                              // 0x2d
	.word	38                              // 0x26
	.word	31                              // 0x1f
	.word	39                              // 0x27
	.word	46                              // 0x2e
	.word	53                              // 0x35
	.word	60                              // 0x3c
	.word	61                              // 0x3d
	.word	54                              // 0x36
	.word	47                              // 0x2f
	.word	55                              // 0x37
	.word	62                              // 0x3e
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.word	63                              // 0x3f
	.size	jpeg_natural_order, 320

	.type	.L.str.244,@object              // @.str.244
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.244:
	.asciz	"_finfo_dataset"
	.size	.L.str.244, 15

	.type	.L.str.1.245,@object            // @.str.1.245
.L.str.1.245:
	.asciz	"rt"
	.size	.L.str.1.245, 3

	.type	.L.str.2.246,@object            // @.str.2.246
.L.str.2.246:
	.asciz	"\nError: Can't find dataset!\n"
	.size	.L.str.2.246, 29

	.type	.L.str.3.247,@object            // @.str.3.247
.L.str.3.247:
	.asciz	"%ld"
	.size	.L.str.3.247, 4

	.type	.L.str.256,@object              // @.str.256
.L.str.256:
	.asciz	"r"
	.size	.L.str.256, 2

	.type	.L.str.1.257,@object            // @.str.1.257
.L.str.1.257:
	.asciz	"Can't open table file %s\n"
	.size	.L.str.1.257, 26

	.type	.L.str.2.258,@object            // @.str.2.258
.L.str.2.258:
	.asciz	"Too many tables in file %s\n"
	.size	.L.str.2.258, 28

	.type	.L.str.3.259,@object            // @.str.3.259
.L.str.3.259:
	.asciz	"Invalid table data in file %s\n"
	.size	.L.str.3.259, 31

	.type	.L.str.4.260,@object            // @.str.4.260
.L.str.4.260:
	.asciz	"Non-numeric data in file %s\n"
	.size	.L.str.4.260, 29

	.type	.L.str.5.263,@object            // @.str.5.263
.L.str.5.263:
	.asciz	"Can't open scan definition file %s\n"
	.size	.L.str.5.263, 36

	.type	.L.str.6.264,@object            // @.str.6.264
.L.str.6.264:
	.asciz	"Too many scans defined in file %s\n"
	.size	.L.str.6.264, 35

	.type	.L.str.7.265,@object            // @.str.7.265
.L.str.7.265:
	.asciz	"Too many components in one scan in file %s\n"
	.size	.L.str.7.265, 44

	.type	.L.str.8.266,@object            // @.str.8.266
.L.str.8.266:
	.asciz	"Invalid scan entry format in file %s\n"
	.size	.L.str.8.266, 38

	.type	.L.str.9.269,@object            // @.str.9.269
.L.str.9.269:
	.asciz	"%d%c"
	.size	.L.str.9.269, 5

	.type	.L.str.10.270,@object           // @.str.10.270
.L.str.10.270:
	.asciz	"JPEG quantization tables are numbered 0..%d\n"
	.size	.L.str.10.270, 45

	.type	.L.str.11.273,@object           // @.str.11.273
.L.str.11.273:
	.asciz	"%d%c%d%c"
	.size	.L.str.11.273, 9

	.type	.L.str.12.274,@object           // @.str.12.274
.L.str.12.274:
	.asciz	"JPEG sampling factors must be 1..4\n"
	.size	.L.str.12.274, 36

	.type	c5to8bits,@object               // @c5to8bits
	.section	.rodata,"a",@progbits
c5to8bits:
	.ascii	"\000\b\020\031!)1:BJRZcks{\204\214\224\234\245\255\265\275\305\316\326\336\346\357\367\377"
	.size	c5to8bits, 32

	.type	.L_MergedGlobals,@object        // @_MergedGlobals
	.local	.L_MergedGlobals
	.comm	.L_MergedGlobals,24,8
.set is_targa, .L_MergedGlobals
	.size	is_targa, 4
.set parse_switches.printed_version, .L_MergedGlobals+4
	.size	parse_switches.printed_version, 4
.set progname, .L_MergedGlobals+8
	.size	progname, 8
.set outfilename, .L_MergedGlobals+16
	.size	outfilename, 8
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.ident	"clang version 12.0.0 (https://github.com/llvm/llvm-project.git d28af7c654d8db0b68c175db5ce212d74fb5e9bc)"
	.section	".note.GNU-stack","",@progbits
